--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.4
-- Dumped by pg_dump version 9.5.5

-- Started on 2025-05-23 13:40:49

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 1 (class 3079 OID 12372)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 8027 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- TOC entry 578 (class 1255 OID 3240568)
-- Name: actualizar_aporte_patronal(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_aporte_patronal(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pnumeronomina  alias for $2; 
   pIdgrupoorganismo  alias for $3;
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recUltimaNomina  record; 
   recUltimaNomina2  record; 
   recconceptoaporte2  record; 	
   curUltimaNomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select un.id_ultima_nomina as id_ultima_nomina, 
                           un.id_trabajador    as id_trabajador,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from ultimanomina un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.numero_nomina   = pNumeroNomina
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.monto_aporte =0
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

   
	
       curUltimaNomina2 cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select un.id_ultima_nomina as id_ultima_nomina, 
                           un.id_trabajador    as id_trabajador,
                           t.id_tipo_personal as id_tipo_personal,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           ctp.valor as porcentaje_trabajador
         from ultimanomina un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.numero_nomina   = pNumeroNomina
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
		  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
 

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgrupoorganismo int4)
		for select * from parametrogobierno
		    where id_grupo_organismo = pIdgrupoorganismo;
	

   curconceptoaporte2 cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;
	
 begin 	

    
    open curparametrogobierno(pIdGrupoorganismo); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;
        exit when not found; 			 
        open curUltimaNomina(pIdGrupoNomina,pnumeronomina); 
	    loop 		
            fetch curUltimaNomina into recUltimaNomina;			 
		exit when not found; 

              if recUltimaNomina.cod_concepto in ('5001','5011') then
                 ---
                 ---bajo
                 ---
                 if recUltimaNomina.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 ---
                 ---medio
                 ---
                 if recUltimaNomina.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 ---
                 ---alto
                 ---
                 if recUltimaNomina.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recUltimaNomina.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recUltimaNomina.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              if recUltimaNomina.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              if recUltimaNomina.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              if recUltimaNomina.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;

	      update ultimanomina  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recUltimaNomina.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and numero_nomina   = pNumeroNomina
                      and id_trabajador = recUltimaNomina.id_trabajador
                      and id_ultima_nomina = recUltimaNomina.id_ultima_nomina
                      and id_concepto_tipo_personal = recUltimaNomina.id_concepto_tipo_personal
                      and monto_aporte = 0;

	
        end loop; 
        close curUltimaNomina; 
       
      end loop; 
      close curparametrogobierno; 

	open curUltimaNomina2(pIdGrupoNomina,pnumeronomina); 
	    loop 		
            fetch curUltimaNomina2 into recUltimaNomina2;			 
            exit when not found; 

		open curconceptoaporte2(recUltimaNomina2.id_tipo_personal,
                                     recUltimaNomina2.id_concepto_aporte);
	       loop 		
               fetch curconceptoaporte2 into recconceptoaporte2;			 
	       exit when not found; 

                if recconceptoaporte2.porcentaje_patronal > 0 then
                      v_factor := recconceptoaporte2.porcentaje_patronal/
                                  recUltimaNomina2.porcentaje_trabajador;
                else
                      v_factor := 0;
                end if;

		if v_factor > 0 then

		    update ultimanomina  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                        id_concepto_aporte = recUltimaNomina2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and numero_nomina   = pNumeroNomina
                      and id_trabajador = recUltimaNomina2.id_trabajador
                      and id_ultima_nomina = recUltimaNomina2.id_ultima_nomina
                      and id_concepto_tipo_personal = recUltimaNomina2.id_concepto_tipo_personal;
                end if;

		end loop;
                close curconceptoaporte2;



            end loop;

        close curUltimaNomina2;

     



	
      return 0;
end;  $_$;


--
-- TOC entry 579 (class 1255 OID 3240569)
-- Name: actualizar_aporte_patronal_historicoq(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_aporte_patronal_historicoq(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $3;
 
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 
   recHistorico2  record; 
   recconceptoaporte  record; 


   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_quincena as id_historico_quincena, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicoquincena hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                 
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

        curHistorico2 cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_quincena as id_historico_quincena, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.id_tipo_personal as id_tipo_personal,
                           ctp.valor as porcentaje_trabajador
                           
                           
		from historicoquincena hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
                  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
   

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgruponomina int4)
		for select * from parametrogobierno
		    where id_grupo_organismo in
                         (select a.id_grupo_organismo from grupoorganismo a,gruponomina b
                             where a.id_organismo  = b.id_organismo
                               and b.id_grupo_nomina = pIdgruponomina);
    curconceptoaporte cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;

	
 begin 	

    ---
    ---Selecciona los porcentajes de gobierno
    ---
    open curparametrogobierno(pIdGruponomina); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;	
        ---
        ---Selecciona los conceptos de aportes legales
        ---		 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
	      exit when not found; 
              ---
              --- Calcula aporte patronal del Seguro Social Obligatorio
              ---
              if recHistorico.cod_concepto in ('5001','5011') then
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              ---
              --- Calcula aporte patronal del Seguro Paro Forzoso
              ---
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              ---
              --- Calcula aporte patronal de politica habitacional
              ---
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              ---
              --- Calcula aporte patronal del fondo de jubilacion
              ---
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;
              ---
              ---Actualiza el campo monto_aporte en la tabla historicoquincena
              ---
	      update historicoquincena  set monto_aporte = 
                       convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_quincena = recHistorico.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal;
                      --and monto_aporte = 0

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
     

      ---
      ---   Otros aportes diferentes a los legales,como caja de ahorros. 
      ---
           open curHistorico2(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico2 into recHistorico2;			 
	    exit when not found;


            open curconceptoaporte(recHistorico2.id_tipo_personal,
                                    recHistorico2.id_concepto_aporte);
	     loop 		
              fetch curconceptoaporte into recconceptoaporte;			 
	      exit when not found; 
     
              if recconceptoaporte.porcentaje_patronal > 0 then
                 v_factor := recconceptoaporte.porcentaje_patronal/
                           recHistorico2.porcentaje_trabajador;
              else
                v_factor := 0;
              end if;
           
        
               ---
               ---Actualiza el campo monto_aporte en la tabla historicoquincena
               ---
               if v_factor > 0 then
	          update historicoquincena  set monto_aporte = 
                                convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico2.id_trabajador
                      and id_historico_quincena = recHistorico2.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico2.id_concepto_tipo_personal;
               end if;
            end loop;
	    close curconceptoaporte;
        end loop; 
        close curHistorico2; 
      return 0;
end;  $_$;


--
-- TOC entry 582 (class 1255 OID 3240570)
-- Name: actualizar_aporte_patronal_historicoq(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_aporte_patronal_historicoq(integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $2;
   pIdgrupoorganismo  alias for $3;
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 	
   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select un.id_historico_quincena as id_historico_quincena, 
                           un.id_trabajador    as id_trabajador,
                           un.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicoquincena un, conceptotipopersonal ctp, concepto c,trabajador t
		where un.anio   = pAnio
                  and un.mes    = pMes
		  and un.id_grupo_nomina = pIdGrupoNomina
                  and un.monto_aporte = 0
                  and un.numero_nomina = 0
                  and un.id_trabajador = t.id_trabajador
                  and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgrupoorganismo int4)
		for select * from parametrogobierno
		    where id_grupo_organismo = pIdgrupoorganismo;
	
 begin 	

    
    open curparametrogobierno(pIdGrupoorganismo); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;			 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
		exit when not found; 

              if recHistorico.cod_concepto in ('5001','5011') then
                 ---
                 ---bajo
                 ---
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 ---
                 ---medio
                 ---
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 ---
                 ---alto
                 ---
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;

	      update historicoquincena  set monto_aporte = convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and un.anio   = pAnio
                      and un.mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_quincena = recHistorico.id_historico_quincena
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal
                      and monto_aporte = 0;

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
      return 0;
end;  $_$;


--
-- TOC entry 583 (class 1255 OID 3240571)
-- Name: actualizar_aporte_patronal_historicos(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_aporte_patronal_historicos(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 
   pAnio  alias for $2; 
   pMes  alias for $3;
 
  
   v_factor         float8=1;
   v_patrono        float8=1;
   v_id_concepto    int4=37;
   	 	
   recHistorico  record; 
   recHistorico2  record; 
   recconceptoaporte  record; 


   curHistorico cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_semana as id_historico_semana, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.riesgo as riesgo,
                           t.regimen as regimen
                           
		from historicosemana hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and c.cod_concepto in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014');
                  

        curHistorico2 cursor (pIdGrupoNomina int4, pAnio int4, pMes int4)
		for select hq.id_historico_semana as id_historico_semana, 
                           hq.id_trabajador    as id_trabajador,
                           hq.id_concepto_tipo_personal as id_concepto_tipo_personal,
                           c.cod_concepto as cod_concepto,
                           c.id_concepto_aporte as id_concepto_aporte,
                           t.id_tipo_personal as id_tipo_personal,
                           ctp.valor as porcentaje_trabajador
                           
                           
		from historicosemana hq, conceptotipopersonal ctp, concepto c,trabajador t
		where hq.anio   = pAnio
                  and hq.mes    = pMes
		  and hq.id_grupo_nomina = pIdGrupoNomina
                  
                  and hq.id_trabajador = t.id_trabajador
                  and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                  and ctp.id_concepto = c.id_concepto
                  and ctp.valor > 0
                  and c.cod_concepto not in ('5001','5002','5003','5004',
                                         '5011','5012','5013','5014')
                  and c.aporte_patronal ='S';
   

   recparametrogobierno  record; 	
   curparametrogobierno cursor (pIdgruponomina int4)
		for select * from parametrogobierno
		    where id_grupo_organismo in
                         (select a.id_grupo_organismo from grupoorganismo a,gruponomina b
                             where a.id_organismo  = b.id_organismo
                               and b.id_grupo_nomina = pIdgruponomina);
    curconceptoaporte cursor (pIdtipopersonal int4,pidconceptoaporte int4)
		for select valor as porcentaje_patronal from conceptotipopersonal
		    where id_tipo_personal = pIdtipopersonal
                      and id_concepto = pidconceptoaporte;

	
 begin 	

    ---
    ---Selecciona los porcentajes de gobierno
    ---
    open curparametrogobierno(pIdGruponomina); 
    loop 		
       fetch curparametrogobierno into recparametrogobierno;	
        ---
        ---Selecciona los conceptos de aportes legales
        ---		 
        open curHistorico(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico into recHistorico;			 
	      exit when not found; 
              ---
              --- Calcula aporte patronal del Seguro Social Obligatorio
              ---
              if recHistorico.cod_concepto in ('5001','5011') then
                 if recHistorico.riesgo = '1' then
                    v_patrono := recparametrogobierno.porcbpat_sso;
                 end if;
                 if recHistorico.riesgo = '2' then
                    v_patrono := recparametrogobierno.porcmpat_sso;
                 end if;
                 if recHistorico.riesgo = '3' then
                    v_patrono := recparametrogobierno.porcapat_sso;
                 end if;

                 if recHistorico.regimen ='I' then  --Integral
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_integral;
                 end if;
                 if recHistorico.regimen ='P' then  --Parcial
                    v_factor := v_patrono/
                                recparametrogobierno.porcentaje_parcial;
                 end if;
              end if;
              ---
              --- Calcula aporte patronal del Seguro Paro Forzoso
              ---
              if recHistorico.cod_concepto in ('5002','5012') then
                 v_factor := recparametrogobierno.porcpat_spf/recparametrogobierno.porctrab_spf;
              end if;
              ---
              --- Calcula aporte patronal de politica habitacional
              ---
              if recHistorico.cod_concepto in ('5003','5013') then
                 v_factor := recparametrogobierno.porcpat_lph/recparametrogobierno.porctrab_lph;
              end if;
              ---
              --- Calcula aporte patronal del fondo de jubilacion
              ---
              if recHistorico.cod_concepto in ('5004','5014') then
                 v_factor := recparametrogobierno.porcpat_fju/recparametrogobierno.porctrab_fju;
              end if;
              ---
              ---Actualiza el campo monto_aporte en la tabla historicosemana
              ---
	      update historicosemana  set monto_aporte = 
                       convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico.id_trabajador
                      and id_historico_semana = recHistorico.id_historico_semana
                      and id_concepto_tipo_personal = recHistorico.id_concepto_tipo_personal;
                     -- and monto_aporte = 0

	
        end loop; 
        close curHistorico; 
        exit when not found; 
      end loop; 
      close curparametrogobierno; 	
     

      ---
      ---   Otros aportes diferentes a los legales,como caja de ahorros. 
      ---
           open curHistorico2(pIdGrupoNomina,pAnio,pMes); 
	    loop 		
            fetch curHistorico2 into recHistorico2;			 
	    exit when not found;


            open curconceptoaporte(recHistorico2.id_tipo_personal,
                                    recHistorico2.id_concepto_aporte);
	     loop 		
              fetch curconceptoaporte into recconceptoaporte;			 
	      exit when not found; 
     
              if recconceptoaporte.porcentaje_patronal > 0 then
                 v_factor := recconceptoaporte.porcentaje_patronal/
                           recHistorico2.porcentaje_trabajador;
              else
                v_factor := 0;
              end if;
           
        
               ---
               ---Actualiza el campo monto_aporte en la tabla historicosemana
               ---
               if v_factor > 0 then
	          update historicosemana  set monto_aporte = 
                                convert_2_decimal(monto_deduce) * v_factor ,
                                       id_concepto_aporte = recHistorico2.id_concepto_aporte
                    where id_grupo_nomina = pIdGrupoNomina
                      and anio   = pAnio
                      and mes    = pMes
                      and id_trabajador = recHistorico2.id_trabajador
                      and id_historico_semana = recHistorico2.id_historico_semana
                      and id_concepto_tipo_personal = recHistorico2.id_concepto_tipo_personal;
               end if;
            end loop;
	    close curconceptoaporte;
        end loop; 
        close curHistorico2; 
      return 0;
end;  $_$;


--
-- TOC entry 584 (class 1255 OID 3240572)
-- Name: actualizar_auditoria(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_auditoria() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
       IF(TG_OP='INSERT') THEN
	    INSERT INTO conceptofijo_auditoria(
		    id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, 
		    unidades, monto, fecha_registro, 
		    fecha_comienzo,  fecha_eliminar,  
		    documento_soporte, estatus, id_sitp, tiempo_sitp, restituir, 
		    monto_restituir, unidades_restituir, 
		    monto_anterior, monto_proyectado,tipo_movimiento)
	    VALUES (NEW.id_concepto_fijo, NEW.id_trabajador, NEW.id_concepto_tipo_personal, NEW.id_frecuencia_tipo_personal, 
		    NEW.unidades, NEW.monto, NEW.fecha_registro, NEW.fecha_comienzo, NEW.fecha_eliminar, 
		    NEW.documento_soporte, NEW.estatus, NEW.id_sitp, NEW.tiempo_sitp, NEW.restituir, 
		    NEW.monto_restituir, NEW.unidades_restituir, NEW.monto_anterior, NEW.monto_proyectado,'I');
       END IF;
       IF(TG_OP='UPDATE') THEN
	INSERT INTO conceptofijo_auditoria(
		    id_concepto_fijo, id_trabajador, id_concepto_tipo_personal,id_concepto_tipo_personal_old,id_frecuencia_tipo_personal, 
		    id_frecuencia_tipo_personal_old,
		    unidades, unidades_old, monto, monto_old, fecha_registro, fecha_registro_old, 
		    fecha_comienzo, fecha_comienzo_old, fecha_eliminar, fecha_eliminar_old, 
		    documento_soporte, documento_soporte_old, estatus, estatus_old, 
		    id_sitp, id_sitp_old, tiempo_sitp, tiempo_sitp_old, restituir, 
		    restituir_old, monto_restituir, monto_restituir_old, unidades_restituir, 
		    unidades_restituir_old, monto_anterior, monto_anterior_old, monto_proyectado, 
		    monto_proyectado_old, fecha_movimiento, tipo_movimiento)
	    VALUES (NEW.id_concepto_fijo,NEW.id_trabajador, NEW.id_concepto_tipo_personal,OLD.id_concepto_tipo_personal, NEW.id_frecuencia_tipo_personal, 
		    OLD.id_frecuencia_tipo_personal,	
		    NEW.unidades,OLD.unidades,NEW.monto,OLD.monto,NEW.fecha_registro,OLD.fecha_registro,NEW.fecha_comienzo,
		    OLD.fecha_comienzo,NEW.fecha_eliminar, OLD.fecha_eliminar,NEW.documento_soporte,OLD.documento_soporte,
		    NEW.estatus,OLD.estatus,NEW.id_sitp,OLD.id_sitp,NEW.tiempo_sitp,OLD.tiempo_sitp,NEW.restituir,OLD.restituir, 
		    NEW.monto_restituir,OLD.monto_restituir,NEW.unidades_restituir,OLD.unidades_restituir,NEW.monto_anterior,
		    OLD.monto_anterior,NEW.monto_proyectado,OLD.monto_proyectado,now(),'M');
       END IF;
       IF(TG_OP='DELETE') THEN
	    INSERT INTO conceptofijo_auditoria(
		    id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, 
		    unidades, monto, fecha_registro, 
		    fecha_comienzo,  fecha_eliminar,  
		    documento_soporte, estatus, id_sitp, tiempo_sitp, restituir, 
		    monto_restituir, unidades_restituir, 
		    monto_anterior, monto_proyectado,tipo_movimiento)
	    VALUES (OLD.id_concepto_fijo, OLD.id_trabajador, OLD.id_concepto_tipo_personal, OLD.id_frecuencia_tipo_personal, 
		    OLD.unidades, OLD.monto, OLD.fecha_registro, OLD.fecha_comienzo, OLD.fecha_eliminar, 
		    OLD.documento_soporte, OLD.estatus, OLD.id_sitp, OLD.tiempo_sitp, OLD.restituir, 
		    OLD.monto_restituir, OLD.unidades_restituir, OLD.monto_anterior, OLD.monto_proyectado,'E');
       END IF;       
       RETURN NEW;
  END;
$$;


--
-- TOC entry 585 (class 1255 OID 3240573)
-- Name: actualizar_auditoria_cv(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_auditoria_cv() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
       IF(TG_OP='INSERT') THEN

	    INSERT INTO conceptovariable_auditoria(
			id_concepto_variable, id_trabajador, id_concepto_tipo_personal, 
			id_frecuencia_tipo_personal, unidades, monto, fecha_registro, 
			documento_soporte, estatus, mes_sobretiempo, anio_sobretiempo, 
			monto_proyectado,tipo_movimiento)
	    VALUES (NEW.id_concepto_variable, NEW.id_trabajador, NEW.id_concepto_tipo_personal, 
			NEW.id_frecuencia_tipo_personal, NEW.unidades, NEW.monto, NEW.fecha_registro, 
			NEW.documento_soporte, NEW.estatus, NEW.mes_sobretiempo, NEW.anio_sobretiempo, 
			NEW.monto_proyectado,'I');
       END IF;
       IF(TG_OP='UPDATE') THEN
	INSERT INTO conceptovariable_auditoria(
		    id_concepto_variable, id_trabajador, id_concepto_tipo_personal, 
		    id_concepto_tipo_personal_old, id_frecuencia_tipo_personal, id_frecuencia_tipo_personal_old, 
		    unidades, unidades_old, monto, monto_old, fecha_registro, fecha_registro_old, 
		    documento_soporte, documento_soporte_old, estatus, estatus_old, 
		    mes_sobretiempo, mes_sobretiempo_old, anio_sobretiempo, anio_sobretiempo_old, 
		    monto_proyectado, monto_proyectado_old,tipo_movimiento)
	    VALUES (NEW.id_concepto_variable,NEW.id_trabajador, NEW.id_concepto_tipo_personal,OLD.id_concepto_tipo_personal, NEW.id_frecuencia_tipo_personal, 
		    OLD.id_frecuencia_tipo_personal,	
		    NEW.unidades,OLD.unidades,NEW.monto,OLD.monto,NEW.fecha_registro,OLD.fecha_registro,NEW.documento_soporte,OLD.documento_soporte,
		    NEW.estatus,OLD.estatus,NEW.mes_sobretiempo,OLD.mes_sobretiempo,NEW.anio_sobretiempo,OLD.anio_sobretiempo,
		    NEW.monto_proyectado,OLD.monto_proyectado,'M');
       END IF;
       IF(TG_OP='DELETE') THEN
	   INSERT INTO conceptovariable_auditoria(
			id_concepto_variable, id_trabajador, id_concepto_tipo_personal, 
			id_frecuencia_tipo_personal, unidades, monto, fecha_registro, 
			documento_soporte, estatus, mes_sobretiempo, anio_sobretiempo, 
			monto_proyectado,tipo_movimiento)
	    VALUES (OLD.id_concepto_variable, OLD.id_trabajador, OLD.id_concepto_tipo_personal, 
			OLD.id_frecuencia_tipo_personal, OLD.unidades, OLD.monto, OLD.fecha_registro, 
			OLD.documento_soporte, OLD.estatus, OLD.mes_sobretiempo, OLD.anio_sobretiempo, 
			OLD.monto_proyectado,'E');
       END IF;       
       RETURN NEW;
  END;
$$;


--
-- TOC entry 586 (class 1255 OID 3240574)
-- Name: actualizar_conceptomovimiento(integer, double precision, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_conceptomovimiento(integer, double precision, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare		
	pIdConceptoFijo alias for $1;
	pMonto alias for $2;
	pNumeroMovimiento alias for $3;
	pIdConceptoTipoPersonal alias for $4;
	pIdFrecuenciaTipoPersonal alias for $5;
	pIdTrabajador alias for $6;
        pAnio alias for $7;

	id int4 := 0;
begin

	update conceptofijo set monto = pMonto where id_concepto_fijo = pIdConceptoFijo;	

	id := last_id_conceptomovimiento()+1;				
	if id is null then				
		id := 1;				
	end if;
	insert into conceptomovimiento 
		(id_concepto_movimiento, numero_movimiento, id_concepto_tipo_personal, 
		id_frecuencia_tipo_personal, id_trabajador, monto, anio) values(id,pNumeroMovimiento,pIdConceptoTipoPersonal,pIdFrecuenciaTipoPersonal,pIdTrabajador,pMonto,pAnio);

	update conceptomovimiento set monto_anterior = conceptofijo.monto_anterior from conceptofijo 
		where id_concepto_fijo = pIdConceptoFijo and id_concepto_movimiento = id;

	return 0;
end;

$_$;


--
-- TOC entry 587 (class 1255 OID 3240575)
-- Name: actualizar_conceptomovimiento_anterior(integer, double precision, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_conceptomovimiento_anterior(integer, double precision, integer, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare		
	pIdConceptoFijo alias for $1;
	pMonto alias for $2;
	pNumeroMovimiento alias for $3;
	pIdConceptoTipoPersonal alias for $4;
	pIdFrecuenciaTipoPersonal alias for $5;
	pIdTrabajador alias for $6;
        pAnio alias for $7;

	id int4 := 0;
begin
	
	id := last_id_conceptomovimiento()+1;				
	if id is null then				
		id := 1;				
	end if;
	insert into conceptomovimiento 
		(id_concepto_movimiento, numero_movimiento, id_concepto_tipo_personal, 
		id_frecuencia_tipo_personal, id_trabajador, monto, monto_anterior, anio) 
		values(id,pNumeroMovimiento,pIdConceptoTipoPersonal,pIdFrecuenciaTipoPersonal,pIdTrabajador,0,pMonto,pAnio);
	
	return 0;
end;

$_$;


--
-- TOC entry 588 (class 1255 OID 3240576)
-- Name: actualizar_cotiza_lph_femenino(integer, date, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_cotiza_lph_femenino(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set cotiza_lph = 'N' where cotiza_lph = 'S' 
		and estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		and id_personal in
			(select id_personal from personal where sexo = 'F' 
			and fecha_nacimiento between $2 and $3)

$_$;


--
-- TOC entry 589 (class 1255 OID 3240577)
-- Name: actualizar_cotiza_lph_masculino(integer, date, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_cotiza_lph_masculino(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set cotiza_lph = 'N' where cotiza_lph = 'S' 
		and estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		and id_personal in
			(select id_personal from personal where sexo = 'M' 
			and fecha_nacimiento between $2 and $3)

$_$;


--
-- TOC entry 571 (class 1255 OID 3240578)
-- Name: actualizar_lunes(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_lunes(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set lunes_primera  = 0, lunes_segunda = 0 
			where estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
			

$_$;


--
-- TOC entry 580 (class 1255 OID 3240579)
-- Name: actualizar_lunes_retroactivo(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_lunes_retroactivo(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set lunes_retroactivo = 0 
		where estatus = 'A' and id_tipo_personal in 
		  (select id_tipo_personal from tipopersonal where id_grupo_nomina = $1)
		  

$_$;


--
-- TOC entry 581 (class 1255 OID 3240580)
-- Name: actualizar_monto_variable(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_monto_variable(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set monto_variable_sso = 0,  monto_variable_lph = 0, monto_variable_fju = 0    
		where id_trabajador in 
		(select id_trabajador from trabajador where estatus = 'A' and id_tipo_personal in 
			(select id_tipo_personal from tipopersonal where id_grupo_nomina = $1))
			
$_$;


--
-- TOC entry 590 (class 1255 OID 3240581)
-- Name: actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set monto = $2,
		unidades = $3, 
		monto_restituir = $4, 
		unidades_restituir = $5,
		restituir = 'S'
	where id_concepto_fijo = $1;

$_$;


--
-- TOC entry 591 (class 1255 OID 3240582)
-- Name: actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_montos_conceptofijo(integer, double precision, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set monto = $2,
		unidades = $3, 
		monto_restituir = $4, 
		unidades_restituir = $5,
		restituir = $6
	where id_concepto_fijo = $1;

$_$;


--
-- TOC entry 592 (class 1255 OID 3240583)
-- Name: actualizar_rendicionmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_rendicionmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezadoRendicionMensual alias for $1;
	pIdUnidadAdministradora alias for $2;
	pIdTrabajador alias for $3;
	pIdConceptoTipoPersonal alias for $4;	
	pIdCuentaPresupuesto alias for $5;
	pCodConcepto alias for $6;
	pCodPresupuesto alias for $7;	
	pMonto alias for $8;
	pQuincena alias for $9;	
	pDistribucion alias for $10;
	pAnio alias for $11;
	
	recTrabajadorEspecifica record;
	curTrabajadorEspecifica cursor (pIdTrabajador int4, pAnio int4, pIdUnidadAdministradora int4) 
		for select te.porcentaje, uel.id_uel_especifica, ue.id_unidad_ejecutora, 
		ua.id_unidad_administradora, uel.categoria_presupuesto, ue.cod_unidad_ejecutora, 
		ua.cod_unidad_administ		
		from trabajadorespecifica te, uelespecifica uel, 
		unidadejecutora ue, unidadadministradora ua, administradorauel auel
		where te.id_trabajador = pIdTrabajador
		and te.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and te.anio = pAnio;
	
	recConceptoEspecifica record;
	curConceptoEspecifica cursor (pIdConceptoTipoPersonal int4, pAnio int4)
		for select uel.id_uel_especifica, ue.id_unidad_ejecutora, ua.id_unidad_administradora,
		uel.categoria_presupuesto, ue.cod_unidad_ejecutora, ua.cod_unidad_administ
		from conceptoespecifica ce, unidadejecutora ue, uelespecifica uel,
		unidadadministradora ua, administradorauel auel
		where ce.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ce.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora		
		and ce.anio = pAnio
		limit 1;

	recRendicionMensual record;
	curRendicionMensual cursor(pIdUelEspecifica int4, pIdConceptoTipoPersonal int4,
		pIdEncabezado int4, pQuincena int4)
		for select id_rendicion_mensual 
		from rendicionmensual 
		where id_uel_especifica = pIdUelEspecifica
		and id_encabezado_rendicion_mensual = pIdEncabezado 
		and id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and quincena = pQuincena;
	
	monto float8 := 0;
	id int4 :=0;
	
begin
	--raise notice 'pasa 3';	
	
	if pDistribucion = 'S' then
		open curTrabajadorEspecifica(pIdTrabajador, pAnio, pIdUnidadAdministradora);
		loop
			fetch curTrabajadorEspecifica into recTrabajadorEspecifica;
			exit when not found;
			--raise notice 'pasa 4';
			monto = pMonto * (recTrabajadorEspecifica.porcentaje/100);
			open curRendicionMensual (recTrabajadorEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoRendicionMensual, pQuincena);
			fetch curRendicionMensual into recRendicionMensual;
			if recRendicionMensual.id_rendicion_mensual is not null then
				perform sumar_rendicionmensual
					(recRendicionMensual.id_rendicion_mensual, convert_2_decimal(monto));
			else
				id := last_id_rendicionmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_rendicionmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoRendicionMensual,					
					recTrabajadorEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recTrabajadorEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,
					recTrabajadorEspecifica.porcentaje,
					recTrabajadorEspecifica.categoria_presupuesto,
					pCodConcepto,
					recTrabajadorEspecifica.cod_unidad_ejecutora,
					pCodPresupuesto);
			end if;
			close curRendicionMensual;
		end loop;
		close curTrabajadorEspecifica;
	else
		--raise notice 'pasa 4';
		open curConceptoEspecifica(pIdTrabajador, pAnio);
		loop
			fetch curConceptoEspecifica into recConceptoEspecifica;
			exit when not found;
			monto = pMonto;
			open curRendicionMensual (recConceptoEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoRendicionMensual, pQuincena);
			fetch curRendicionMensual into recRendicionMensual;
			if recRendicionMensual.id_rendicion_mensual is not null then
				perform sumar_rendicionmensual
					(recRendicionMensual.id_rendicion_mensual, convert_2_decimal(monto));
			else
				id := last_id_rendicionmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_rendicionmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoRendicionMensual,					
					recConceptoEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recConceptoEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,					
					recConceptoEspecifica.porcentaje,
					recConceptoEspecifica.categoria_presupuesto,
					pCodConcepto,
					recConceptoEspecifica.cod_unidad_ejecutora,					
					pCodPresupuesto);
			end if;
			close curRendicionMensual;
		end loop;
		close curConceptoEspecifica;
	end if;
	
	return 0;

end;

$_$;


--
-- TOC entry 593 (class 1255 OID 3240584)
-- Name: actualizar_resumenmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_resumenmensual(integer, integer, integer, integer, integer, character varying, character varying, double precision, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezadoResumenMensual alias for $1;
	pIdUnidadAdministradora alias for $2;
	pIdTrabajador alias for $3;
	pIdConceptoTipoPersonal alias for $4;	
	pIdCuentaPresupuesto alias for $5;
	pCodConcepto alias for $6;
	pCodPresupuesto alias for $7;	
	pMonto alias for $8;
	pQuincena alias for $9;	
	pDistribucion alias for $10;
	pAnio alias for $11;
	
	recTrabajadorEspecifica record;
	curTrabajadorEspecifica cursor (pIdTrabajador int4, pAnio int4, pIdUnidadAdministradora int4) 
		for select te.porcentaje, uel.id_uel_especifica, ue.id_unidad_ejecutora, 
		ua.id_unidad_administradora, uel.categoria_presupuesto, ue.cod_unidad_ejecutora, 
		ua.cod_unidad_administ		
		from trabajadorespecifica te, uelespecifica uel, 
		unidadejecutora ue, unidadadministradora ua, administradorauel auel
		where te.id_trabajador = pIdTrabajador
		and te.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and te.anio = pAnio;
	
	recConceptoEspecifica record;
	curConceptoEspecifica cursor (pIdConceptoTipoPersonal int4, pAnio int4)
		for select uel.id_uel_especifica, ue.id_unidad_ejecutora, ua.id_unidad_administradora,
		uel.categoria_presupuesto, ue.cod_unidad_ejecutora, ua.cod_unidad_administ
		from conceptoespecifica ce, unidadejecutora ue, uelespecifica uel,
		unidadadministradora ua, administradorauel auel
		where ce.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ce.id_uel_especifica = uel.id_uel_especifica
		and uel.id_unidad_ejecutora = ue.id_unidad_ejecutora		
		and auel.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and auel.id_unidad_administradora = ua.id_unidad_administradora
		--and auel.id_unidad_administradora = pIdUnidadAdministradora
		and ce.anio = pAnio
		limit 1;

	recResumenMensual record;
	curResumenMensual cursor(pIdUelEspecifica int4, pIdConceptoTipoPersonal int4,
		pIdEncabezado int4, pQuincena int4)
		for select id_resumen_mensual 
		from resumenmensual 
		where id_uel_especifica = pIdUelEspecifica
		and id_encabezado_resumen_mensual = pIdEncabezado 
		and id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and quincena = pQuincena;
	
	monto float8 := 0;
	id int4 :=0;
	
begin
	--raise notice 'pasa 3';	
	
	if pDistribucion = 'S' then
		open curTrabajadorEspecifica(pIdTrabajador, pAnio, pIdUnidadAdministradora);
		loop
			fetch curTrabajadorEspecifica into recTrabajadorEspecifica;
			exit when not found;

			raise notice 'pasa 1.1 ';
			--raise notice 'pIdCTP  %', pIdConceptoTipoPersonal;
			
			monto = pMonto * (recTrabajadorEspecifica.porcentaje/100);

			--raise notice 'monto  %', monto;

			open curResumenMensual (recTrabajadorEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoResumenMensual, pQuincena);
			fetch curResumenMensual into recResumenMensual;
			if recResumenMensual.id_resumen_mensual is not null then
				--raise notice 'pasa 1.2 ';
				--raise notice 'id_resumen_mensual %', recResumenMensual.id_resumen_mensual;
				perform sumar_resumenmensual
					(recResumenMensual.id_resumen_mensual, convert_2_decimal(monto));
			else
				id := last_id_resumenmensual()+1;
				if id is null then
					id := 1;
				end if;
				--raise notice 'pasa 1.3 ';
				
				
				perform add_resumenmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoResumenMensual,					
					recTrabajadorEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recTrabajadorEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,
					recTrabajadorEspecifica.porcentaje,
					recTrabajadorEspecifica.categoria_presupuesto,
					pCodConcepto,
					recTrabajadorEspecifica.cod_unidad_ejecutora,
					pCodPresupuesto);
				--raise notice 'pasa 1.5 ';
			end if;
			close curResumenMensual;
		end loop;
		close curTrabajadorEspecifica;
	else
		--raise notice 'pasa 4';
		open curConceptoEspecifica(pIdConceptoTipoPersonal, pAnio);
		loop
			fetch curConceptoEspecifica into recConceptoEspecifica;
			exit when not found;
			--raise notice 'pasa 4.1';
			monto = pMonto;
			open curResumenMensual (recConceptoEspecifica.id_uel_especifica, 
				pIdConceptoTipoPersonal, pIdEncabezadoResumenMensual, pQuincena);
			fetch curResumenMensual into recResumenMensual;
			if recResumenMensual.id_resumen_mensual is not null then
				perform sumar_resumenmensual
					(recResumenMensual.id_resumen_mensual, convert_2_decimal(monto));
			else
				id := last_id_resumenmensual()+1;
				if id is null then
					id := 1;
				end if;
				perform add_resumenmensual(
					id,
					pIdUnidadAdministradora,
					pIdEncabezadoResumenMensual,					
					recConceptoEspecifica.id_uel_especifica,
					pIdCuentaPresupuesto,
					recConceptoEspecifica.id_unidad_ejecutora,
					pIdConceptoTipoPersonal,
					convert_2_decimal(monto),
					pQuincena,					
					100,
					recConceptoEspecifica.categoria_presupuesto,
					pCodConcepto,
					recConceptoEspecifica.cod_unidad_ejecutora,					
					pCodPresupuesto);
			end if;
			close curResumenMensual;
		end loop;
		close curConceptoEspecifica;
	end if;
	
	return 0;

end;

$_$;


--
-- TOC entry 594 (class 1255 OID 3240585)
-- Name: actualizar_trabajador_temporal(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_trabajador_temporal(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	
   pIdGrupoNomina alias for $1; 	 	
   recTrabajador record; 	
   curTrabajador cursor (pIdGrupoNomina int4) 	
       for select * from trabajadortemporal 
            where id_grupo_nomina = pIdGrupoNomina; 	
 begin 	
    open curTrabajador(pIdGrupoNomina); 
	loop 		
            fetch curTrabajador into recTrabajador;			 
		exit when not found; 	
	      if recTrabajador.lunes_primera = true then 		
	         update trabajador set lunes_primera = 0 
                   where id_trabajador = recTrabajador.id_trabajador; 
              end if;
	      if recTrabajador.lunes_segunda = true then 
		 update trabajador set lunes_segunda = 0 
                    where id_trabajador = recTrabajador.id_trabajador; 
              end if;
	      if recTrabajador.lunes_retroactivo = true then 
		 update trabajador set lunes_retroactivo = 0
                    where id_trabajador = recTrabajador.id_trabajador;	
              end if;	 		
              if recTrabajador.hay_retroactivo = true then 
		 update trabajador set hay_retroactivo = 'N'
                    where id_trabajador = recTrabajador.id_trabajador;	
              end if; 	
      end loop; 
      close curTrabajador; 	
      delete from trabajadortemporal where id_grupo_nomina = pIdGrupoNomina; 
      return 0;
end;  $_$;


--
-- TOC entry 595 (class 1255 OID 3240586)
-- Name: actualizar_trabajador_temporal(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION actualizar_trabajador_temporal(integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTrabajador alias for $1;
	pCampo alias for $2;
	pIdGrupoNomina alias for $3;
	
	recTrabajador record;
	curTrabajador cursor (pIdTrabajador int4)
	for select id_trabajador from trabajadortemporal where id_trabajador = pIdTrabajador;
	
begin
	open curTrabajador(pIdTrabajador);
	fetch curTrabajador into recTrabajador;			
	if recTrabajador.id_trabajador is null then
		insert into trabajadortemporal values(pIdTrabajador,false,false,false,false,pIdGrupoNomina);
	end if;
	
	if pCampo = 'L1' then
		update trabajadortemporal set lunes_primera = true
                     where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'L2' then
		update trabajadortemporal set lunes_segunda = true
                       where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'LR' then
		update trabajadortemporal set lunes_retroactivo = true
                      where id_trabajador = pIdTrabajador;
      end if;
	if pCampo = 'HR' then
		update trabajadortemporal set hay_retroactivo = true
                       where id_trabajador = pIdTrabajador;
	end if;
	close curTrabajador;
	return 0;
end;

$_$;


--
-- TOC entry 596 (class 1255 OID 3240587)
-- Name: add_aplicartabulador(integer, date, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_aplicartabulador(integer, date, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aplicartabulador(
id_aplicar_tabulador,
  fecha_proceso,
  grado_actual,
  paso_actual,
  sueldo_actual,
  ajuste_actual,
  compensacion_actual,
  paso_nuevo,
  sueldo_nuevo,
  ajuste_nuevo,
  compensacion_nueva,
  id_trabajador,
monto_retroactivo,
dias_retroactivo,
base_aumento)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)
$_$;


--
-- TOC entry 597 (class 1255 OID 3240588)
-- Name: add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aumentoevaluacion(
id_aumento_evaluacion,
  anio,
  mes,
  fecha_proceso,
  resultado,
  grado,
  paso_anterior,
  sueldo_anterior,
  ajuste_anterior,
  compensacion_anterior,
   otros_anterior,
base_aumento,
sueldo_nuevo,
  compensacion_nueva,
  monto_aumentar,
aumento_definitivo,
paso_nuevo,
  porcentaje_aumentar,
  monto_unico,
ajuste_escala,
  dias_retroactivo,
  monto_retroactivo,
  id_trabajador,
  id_resultado_evaluacion,
  id_tipo_personal)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25)
$_$;


--
-- TOC entry 598 (class 1255 OID 3240589)
-- Name: add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_aumentoevaluacion(integer, integer, integer, date, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer, double precision, double precision, double precision, integer, double precision, integer, integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into aumentoevaluacion(
id_aumento_evaluacion,
  anio,
  mes,
  fecha_proceso,
  resultado,
  grado,
  paso_anterior,
  sueldo_anterior,
  ajuste_anterior,
  compensacion_anterior,
   otros_anterior,
base_aumento,
sueldo_nuevo,
  compensacion_nueva,
  monto_aumentar,
aumento_definitivo,
paso_nuevo,
  porcentaje_aumentar,
  monto_unico,
ajuste_escala,
  dias_retroactivo,
  monto_retroactivo,
  id_trabajador,
  id_resultado_evaluacion,
  id_tipo_personal,
estatus)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
$_$;


--
-- TOC entry 599 (class 1255 OID 3240590)
-- Name: add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into calculobonofinanio
	  (id_calculo_bono_fin_anio,
	  id_trabajador,
	  id_tipo_personal,
	  total_bono,
	  monto_alicuota,
	  bono_sin_alicuota,
	  dias,
	  base_fijo,
	  base_promedio,
	  base_devengado,
	  base_mensual,
	  base_proyectado,
	  base_alicuota,
	  anios_servicio)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


--
-- TOC entry 600 (class 1255 OID 3240591)
-- Name: add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_calculobonofinanio(integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$

	insert into calculobonofinanio

	  (id_calculo_bono_fin_anio,
	  id_trabajador,
	  id_tipo_personal,
	  total_bono,
	  monto_alicuota,
	  bono_sin_alicuota,
	  dias,
	  base_fijo,
	  base_promedio,
	  base_devengado,
	  base_mensual,
	  base_variable,
	  base_proyectado, bono_vacacional,
	  anios_servicio)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)

	

$_$;


--
-- TOC entry 601 (class 1255 OID 3240592)
-- Name: add_calculoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_calculoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into calculoticket(
id_calculo_ticket,
  anio,
  mes,
  cantidad_ticket,
denominacion_ticket,
  monto_cobrar,
total_descuentos_ticket,
neto_cantidad_ticket,
neto_monto_cobrar,
  especial,
  fecha_proceso,
anio_proceso,
mes_proceso,
  cod_ticket,
  id_trabajador,
  id_concepto_tipo_personal,
  id_proveedor_ticket,
	cod_dependencia,
	nombre_dependencia,
id_tipo_personal
)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20)
$_$;


--
-- TOC entry 602 (class 1255 OID 3240593)
-- Name: add_conceptofijo(integer, integer, integer, integer, double precision, double precision, date, date, date, character varying, character varying, character varying, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptofijo(integer, integer, integer, integer, double precision, double precision, date, date, date, character varying, character varying, character varying, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptofijo
  (id_concepto_fijo,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  fecha_comienzo,
  fecha_eliminar,
  documento_soporte,
  estatus,
  restituir,
  monto_restituir,
  unidades_restituir,
  monto_anterior) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)

$_$;


--
-- TOC entry 603 (class 1255 OID 3240594)
-- Name: add_conceptofijo_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptofijo_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---insertar los conceptos fijos eliminados
    ---por tener fecha de eliminacion dentro del
    ---periodo de nomina cerrada
    ---
insert into conceptofijo
  (id_concepto_fijo,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  fecha_comienzo,
  fecha_eliminar,
  documento_soporte,
  estatus) values ($1,$2,$3,$4,$5,$6,$7,$7,$7,$8,$9)

$_$;


--
-- TOC entry 604 (class 1255 OID 3240595)
-- Name: add_conceptoresumen(integer, integer, integer, integer, integer, integer, integer, integer, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptoresumen(integer, integer, integer, integer, integer, integer, integer, integer, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptoresumen
  (id_concepto_resumen,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
id_unidad_administradora,
anio,
mes,
numero_nomina,
  unidades,
  monto,
  tipo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


--
-- TOC entry 605 (class 1255 OID 3240596)
-- Name: add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus) values ($1,$2,$3,$4,$5,$6,$7,$8,$9)

$_$;


--
-- TOC entry 606 (class 1255 OID 3240597)
-- Name: add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptovariable(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus,
  anio_sobretiempo,
  mes_sobretiempo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


--
-- TOC entry 607 (class 1255 OID 3240598)
-- Name: add_conceptovariable_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_conceptovariable_reverso_nomina(integer, integer, integer, integer, double precision, double precision, date, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---insertar los conceptos variables eliminados
    ---por tener fecha de eliminacion dentro del
    ---periodo de nomina cerrada
    ---

insert into conceptovariable
  (id_concepto_variable,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  unidades,
  monto,
  fecha_registro,
  documento_soporte,
  estatus,
  anio_sobretiempo,
  mes_sobretiempo) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)

$_$;


--
-- TOC entry 608 (class 1255 OID 3240599)
-- Name: add_cuadroonapre(integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, integer, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_cuadroonapre(integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, integer, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into cuadroonapre
	(id_cuadro_onapre,
id_organismo,
  id_proyecto,
  id_accion_centralizada,
  id_clasificacion_personal,
  anio,
  tipo_cargo,
  jornada,
  sexo_vacante,
  cantidad,
  sueldo,
  compensacion,
  primas,tipo)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


--
-- TOC entry 609 (class 1255 OID 3240600)
-- Name: add_days(date, numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_days(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
 DECLARE
       feFecha         ALIAS FOR $1;
       inDias          ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
 BEGIN
       interval__units := 'day';
       sbIntervalo := ('''' || inDias || ' ' ||
 interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
 END;
 $_$;


--
-- TOC entry 610 (class 1255 OID 3240601)
-- Name: add_descuentoticket(integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, character varying, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_descuentoticket(integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, character varying, text) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into descuentoticket
	  (id_descuento_ticket,
	id_trabajador,
	anio,
	mes ,
	referencia_ticket,
	referencia_embargo,
	referencia_ausencia,
	descuento_ausencia,
	descuento_reposo,
	descuento_permiso,
	descuento_vacaciones,
	descuento_otros,
	pagado,
	observaciones)
	  values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
	
$_$;


--
-- TOC entry 612 (class 1255 OID 3240602)
-- Name: add_historicobaseislr(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historicobaseislr(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into historicobaseislr
	  (id_grupo_nomina,
	  id_tipo_personal,
	   numero_nomina,
	   id_nomina_especial,
	   anio,
	   mes,
	   semana_quincena,
	   id_trabajador,
	   porcentaje,
	   asignaciones,
	   deducciones
	  )
		select distinct un.id_grupo_nomina,
		un.id_tipo_personal,
		un.numero_nomina,
		un.id_nomina_especial,
		hn.anio,
		hn.mes,
		hn.semana_quincena,
		un.id_trabajador, 
		max(CASE WHEN c.cod_concepto='9999' THEN un.unidades ELSE 0 END) as porcentaje,
		sum(monto_asigna) as asignaciones,
		sum(CASE WHEN c.cod_concepto='9999' THEN 0 ELSE un.monto_deduce END) as deducciones
		from ultimanomina un, historiconomina hn, conceptotipopersonal ctp, concepto c  
		where un.id_trabajador = hn.id_trabajador 
		and un.id_grupo_nomina = hn.id_grupo_nomina
		and hn.numero_nomina = un.numero_nomina
		and un.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and (c.gravable = 'S' or c.cod_concepto='9999')
		and hn.id_grupo_nomina = $1
		and un.numero_nomina = $2 
		and hn.anio = $3 
		and hn.mes = $4 
		and hn.semana_quincena = $5 
		group by un.id_grupo_nomina,un.id_tipo_personal, 
		un.numero_nomina,un.id_nomina_especial,
		hn.anio,hn.mes,hn.semana_quincena,
		un.id_trabajador; 
	  
$_$;


--
-- TOC entry 613 (class 1255 OID 3240603)
-- Name: add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historiconomina
  (id_historico_nomina,
  id_trabajador,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  id_dependencia,
  id_cargo,
  numero_registro,
  codigo_nomina,
  forma_pago,
  id_banco,
  tipo_cta_nomina,
  cuenta_nomina,
  estatus,
  situacion,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_lugar_pago,
  id_unidad_ejecutora,
  id_unidad_administradora,
  cod_dependencia,
  cod_cargo,
  cod_unidad_ejecutora,
  cod_unidad_administ,
  id_sede,
  id_region,
  cod_sede,
  cod_region) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,
			$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,31)

$_$;


--
-- TOC entry 614 (class 1255 OID 3240604)
-- Name: add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historiconomina(integer, integer, integer, integer, integer, integer, date, integer, integer, integer, integer, character varying, integer, character varying, character varying, character varying, character varying, integer, integer, integer, integer, integer, integer, character varying, character varying, character varying, character varying, integer, integer, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$ 
insert into historiconomina   (id_historico_nomina,   id_trabajador,   numero_nomina,   anio,   mes, 
         semana_quincena,   fecha,   id_dependencia,   id_cargo,   numero_registro,   codigo_nomina,
         forma_pago,   id_banco,   tipo_cta_nomina,   cuenta_nomina,   estatus,   situacion,  
         id_tipo_personal,   id_grupo_nomina,   id_nomina_especial,   id_lugar_pago,   
         id_unidad_ejecutora,   id_unidad_administradora,   cod_dependencia,   cod_cargo,   
         cod_unidad_ejecutora,   cod_unidad_administ,   id_sede,   id_region,   cod_sede,   
         cod_region,codigo_patronal) 
         values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,
                 $17,$18,$19,$20, $21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32)  
$_$;


--
-- TOC entry 615 (class 1255 OID 3240605)
-- Name: add_historicoquincena(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historicoquincena(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicoquincena
  (id_historico_quincena,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  unidades,
  monto_asigna,
  monto_deduce,
  origen,
  documento_soporte,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_historico_nomina,
  id_concepto,
  monto_aporte,
  id_concepto_aporte) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)

$_$;


--
-- TOC entry 616 (class 1255 OID 3240606)
-- Name: add_historicosemana(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historicosemana(integer, integer, integer, integer, integer, integer, integer, integer, date, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicosemana
  (id_historico_semana,
  id_trabajador,
  id_concepto_tipo_personal,
  id_frecuencia_tipo_personal,
  numero_nomina,
  anio,
  mes,
  semana_quincena,
  fecha,
  unidades,
  monto_asigna,
  monto_deduce,
  origen,
  documento_soporte,
  id_tipo_personal,
  id_grupo_nomina,
  id_nomina_especial,
  id_historico_nomina,
  id_concepto,
  monto_aporte,
  id_concepto_aporte) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,
			$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)

$_$;


--
-- TOC entry 617 (class 1255 OID 3240607)
-- Name: add_historicoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_historicoticket(integer, integer, integer, integer, double precision, double precision, integer, integer, double precision, character varying, date, integer, integer, character varying, integer, integer, integer, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into historicoticket(
id_historico_ticket,
  anio,
  mes,
  cantidad_ticket,
denominacion_ticket,
  monto_cobrar,
total_descuentos_ticket,
neto_cantidad_ticket,
neto_monto_cobrar,
  especial,
  fecha_proceso,
anio_proceso,
mes_proceso,
  cod_ticket,
  id_trabajador,
  id_concepto_tipo_personal,
  id_proveedor_ticket,
	cod_dependencia,
	nombre_dependencia,
id_dependencia,
id_tipo_personal
)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21)
$_$;


--
-- TOC entry 618 (class 1255 OID 3240608)
-- Name: add_interesadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_interesadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesadicional
  (
  id_interes_adicional,
  id_trabajador,
  anio,
  mes,
  dias,
  tasa_interes,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  saldo_al_18061997
) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)

$_$;


--
-- TOC entry 619 (class 1255 OID 3240609)
-- Name: add_interesnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_interesnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesnuevoregimen
  (id_interes_nuevo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  tasa_interes,
  monto_prestaciones,
  monto_adicional,
  dias_mensuales,
  dias_adicionales,
  monto_prestaciones_acumuladas,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  monto_fideicomiso,
  monto_fideicomiso_acumulado)
 values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)

$_$;


--
-- TOC entry 620 (class 1255 OID 3240610)
-- Name: add_interesviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_interesviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into interesviejoregimen
  (id_interes_viejo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  sueldo_integral,
  tasa_interes,
  anios_servicio,
  monto_prestaciones,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,monto_anticipo_acumulado) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)

$_$;


--
-- TOC entry 621 (class 1255 OID 3240611)
-- Name: add_liquidacioninteresadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacioninteresadicional(integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresadicional
  (
  id_liquidacion_interes_adicional,
  id_trabajador,
  anio,
  mes,
  dias,
  tasa_interes,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  saldo_al_18061997
) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)

$_$;


--
-- TOC entry 622 (class 1255 OID 3240612)
-- Name: add_liquidacioninteresnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacioninteresnuevoregimen(integer, integer, integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresnuevoregimen
  (id_liquidacion_interes_nuevo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  tasa_interes,
  monto_prestaciones,
  monto_adicional,
  dias_mensuales,
  dias_adicionales,
  monto_prestaciones_acumuladas,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,
  monto_anticipo_acumulado,
  monto_fideicomiso,
  monto_fideicomiso_acumulado)
 values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)

$_$;


--
-- TOC entry 623 (class 1255 OID 3240613)
-- Name: add_liquidacioninteresviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacioninteresviejoregimen(integer, integer, integer, integer, double precision, double precision, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacioninteresviejoregimen
  (id_liquidacion_interes_viejo_regimen,
  id_trabajador, 
  anio,
  mes,
  dias,
  sueldo_integral,
  tasa_interes,
  anios_servicio,
  monto_prestaciones,
  monto_capital,
  monto_interes_mensual,
  monto_interes_acumulado,
  monto_anticipo,monto_anticipo_acumulado) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)

$_$;


--
-- TOC entry 624 (class 1255 OID 3240614)
-- Name: add_liquidacionprestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacionprestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into liquidacionprestacionesmensuales
	(id_liquidacion_prestaciones_mensuales,
  id_tipo_personal,
  id_trabajador,
  anio,
  mes,
  dias_mensuales,
  dias_adicionales,
  base_mensual,
  base_adicional,
  monto_prestaciones,
  monto_adicional,
  fideicomiso,
  dias_cancelados )
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


--
-- TOC entry 625 (class 1255 OID 3240615)
-- Name: add_liquidacionresumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacionresumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacionresumennuevoregimen
  (  id_liquidacion_resumen_nuevo_regimen,
  id_trabajador,
  monto_prestaciones_acumuladas,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_fideicomiso_acumulado,
  dias_mensuales,dias_adicionales,
  monto_fraccion_adicional,
  monto_fraccion_mensual)
  values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)

$_$;


--
-- TOC entry 626 (class 1255 OID 3240616)
-- Name: add_liquidacionresumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_liquidacionresumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into liquidacionresumenviejoregimen
  (  id_liquidacion_resumen_viejo_regimen,
  id_trabajador,
  sueldo_transferencia,
  aniosservicios,
  monto_prestaciones,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_transferencia,
  saldo_al_18061997,
  monto_interes_adicional) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)

$_$;


--
-- TOC entry 627 (class 1255 OID 3240617)
-- Name: add_months(date, numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_months(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
DECLARE
       feFecha ALIAS FOR $1;
       inMeses ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
 BEGIN
       interval__units := 'month';
       sbIntervalo := ('''' || inMeses || ' ' ||
 interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
 END;
 $_$;


--
-- TOC entry 628 (class 1255 OID 3240618)
-- Name: add_planillaarc(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_planillaarc(integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
 insert into planillaarc
(id_planilla_arc,id_trabajador,anio) values ($1,$2,$3)


$_$;


--
-- TOC entry 629 (class 1255 OID 3240619)
-- Name: add_prestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_prestacionesmensuales(integer, integer, integer, integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into prestacionesmensuales
	(id_prestaciones_mensuales,
         id_tipo_personal,
         id_trabajador,
         anio,
         mes,
         dias_mensuales,
         dias_adicionales,
         base_mensual,
         base_adicional,
         monto_prestaciones,
         monto_adicional,
         fideicomiso,
         dias_cancelados)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


--
-- TOC entry 630 (class 1255 OID 3240620)
-- Name: add_rendicionmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_rendicionmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into rendicionmensual(
id_rendicion_mensual,
  id_unidad_administradora,
id_encabezado_rendicion_mensual,
  id_uel_especifica,
  id_cuenta_presupuesto,
  id_unidad_ejecutora,
  id_concepto_tipo_personal,
  monto,
  quincena,
  porcentaje,
  categoria_presupuesto,
  cod_concepto,
  cod_unidad_ejecutora,
  cod_presupuesto)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
$_$;


--
-- TOC entry 631 (class 1255 OID 3240621)
-- Name: add_resumenmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_resumenmensual(integer, integer, integer, integer, integer, integer, integer, double precision, integer, double precision, character varying, character varying, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumenmensual(
id_resumen_mensual,
  id_unidad_administradora,
id_encabezado_resumen_mensual,
  id_uel_especifica,
  id_cuenta_presupuesto,
  id_unidad_ejecutora,
  id_concepto_tipo_personal,
  monto,
  quincena,
  porcentaje,
  categoria_presupuesto,
  cod_concepto,
  cod_unidad_ejecutora,
  cod_presupuesto)
values($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
$_$;


--
-- TOC entry 632 (class 1255 OID 3240622)
-- Name: add_resumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_resumennuevoregimen(integer, integer, double precision, double precision, double precision, double precision, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumennuevoregimen
  (  id_resumen_nuevo_regimen,
  id_trabajador,
  monto_prestaciones_acumuladas,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_fideicomiso_acumulado,
  dias_mensuales,dias_adicionales) values ($1,$2,$3,$4,$5,$6,$7,$8)

$_$;


--
-- TOC entry 633 (class 1255 OID 3240623)
-- Name: add_resumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_resumenviejoregimen(integer, integer, double precision, integer, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
insert into resumenviejoregimen
  (  id_resumen_viejo_regimen,
  id_trabajador,
  sueldo_transferencia,
  aniosservicios,
  monto_prestaciones,
  monto_interes_acumulado,
  monto_anticipo_acumulado,
  monto_transferencia,
  saldo_al_18061997) values ($1,$2,$3,$4,$5,$6,$7,$8,$9)

$_$;


--
-- TOC entry 634 (class 1255 OID 3240624)
-- Name: add_seguridadespecial(integer, integer, integer, date, date, integer, date, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_seguridadespecial(integer, integer, integer, date, date, integer, date, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadespecial
(
  id_seguridad_especial,
  anio,
  mes,
  fecha_inicio,
  fecha_fin ,
  semana_quincena,
  fecha_proceso ,
  usuario,
  id_grupo_nomina,
  id_nomina_especial) 
	values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
$_$;


--
-- TOC entry 635 (class 1255 OID 3240625)
-- Name: add_seguridadinteresadicional(integer, integer, integer, integer, double precision, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_seguridadinteresadicional(integer, integer, integer, integer, double precision, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadinteresadicional
(
  id_seguridad_interes_adicional,
  id_tipo_personal ,
  anio,
  mes,
  tasa_aplicada,
  fecha_proceso,
  usuario) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


--
-- TOC entry 636 (class 1255 OID 3240626)
-- Name: add_seguridadnuevoregimen(integer, integer, integer, integer, double precision, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_seguridadnuevoregimen(integer, integer, integer, integer, double precision, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadnuevoregimen
(
  id_seguridad_nuevo_regimen,
  id_tipo_personal ,
  anio,
  mes,
  tasa_aplicada,
  fecha_proceso,
  usuario) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


--
-- TOC entry 638 (class 1255 OID 3240627)
-- Name: add_seguridadordinaria(integer, integer, integer, date, date, integer, date, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_seguridadordinaria(integer, integer, integer, date, date, integer, date, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadordinaria
(
  id_seguridad_ordinaria,
  anio,
  mes,
  fecha_inicio,
  fecha_fin ,
  semana_quincena,
  fecha_proceso ,
  usuario,
  id_grupo_nomina ) 
	values ($1,$2,$3,$4,$5,$6,$7,$8,$9)
$_$;


--
-- TOC entry 639 (class 1255 OID 3240628)
-- Name: add_seguridadticket(integer, integer, integer, character varying, date, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_seguridadticket(integer, integer, integer, character varying, date, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
insert into 
seguridadticket
(
   id_seguridad_ticket,
  anio,
  mes,
  especial,
  fecha_proceso,
  usuario,
  id_grupo_ticket) 
	values ($1,$2,$3,$4,$5,$6,$7)
$_$;


--
-- TOC entry 640 (class 1255 OID 3240629)
-- Name: add_ultimanomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_ultimanomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer, integer, double precision, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into ultimanomina
	(id_ultima_nomina,
	id_trabajador,
	id_concepto_tipo_personal,
	id_frecuencia_tipo_personal,
	numero_nomina,
	unidades,
	monto_asigna,
	monto_deduce,
	origen,
	documento_soporte,
	id_tipo_personal,
	id_grupo_nomina,
	id_nomina_especial,
	id_concepto,
	monto_aporte,
	id_concepto_aporte)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
	
$_$;


--
-- TOC entry 641 (class 1255 OID 3240630)
-- Name: add_ultimaprenomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_ultimaprenomina(integer, integer, integer, integer, integer, double precision, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	insert into ultimaprenomina
	(id_ultima_prenomina,
	id_trabajador,
	id_concepto_tipo_personal,
	id_frecuencia_tipo_personal,
	numero_nomina,
	unidades,
	monto_asigna,
	monto_deduce,
	origen,
	documento_soporte,
	id_tipo_personal,
	id_grupo_nomina,
	id_nomina_especial)
	values
	($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
	
$_$;


--
-- TOC entry 642 (class 1255 OID 3240631)
-- Name: add_years(date, numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION add_years(date, numeric) RETURNS date
    LANGUAGE plpgsql
    AS $_$
DECLARE
       feFecha ALIAS FOR $1;
       inAnios ALIAS FOR $2;
       feFechFin       DATE;
       sbIntervalo     INTERVAL;
       interval__units VARCHAR;
BEGIN
       interval__units := 'year';
       sbIntervalo := ('''' || inAnios || ' ' ||
interval__units || '''')::INTERVAL;
       SELECT feFecha + sbIntervalo  into feFechFin;
       RETURN feFechFin;
END;
$_$;


--
-- TOC entry 643 (class 1255 OID 3240632)
-- Name: aplicar_nuevo_clasificador_cargo_01052008(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION aplicar_nuevo_clasificador_cargo_01052008(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	--pProceso alias for $4;
	--pUsuario alias for $5;	
	--pFecha alias for $6;
	--pMantenerPaso alias for $7;
	--pPeriodicidad alias for $8;
	

begin

-- INSERT EN TRAYECTORIA POR TIPO DE PERSONAL 


--delete from trayectoria 
 -- where numero_movimiento = 9999
  --  and fecha_preparacion = '2008-05-01'
  --  and anio_preparacion = 2008 
  --  and cedula in (select tr9.cedula from trabajador tr9
   --                              where  tr9.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
     --                                                                          where tp.cod_tipo_personal = pIdTipoPersonal));    -->  CODIGO DE TIPO PERSONAL 


insert into trayectoria 
select (tr.id_trabajador + 99999), tr.cedula, pr.primer_apellido, pr.segundo_apellido, pr.primer_nombre, pr.segundo_nombre, 2008, '2008-05-01',
  0, 0, 9999, 0, ' ', o.nombre_organismo,0, '2008-05-01','2008-05-01','00101', es.nombre, cu.nombre,' ','01','REGION CENTRALIZADA',
  dp.cod_dependencia, dp.nombre,'000','Cambio Tabulador Segun G.O 38.921',' ', o.nombre_organismo,0, mc.cod_manual_cargo,
  ca.cod_cargo,ca.descripcion_cargo, cp.id_clasificacion_personal, cat.desc_categoria, cp.id_clasificacion_personal, cat.desc_categoria,
  ' ',ca.grado, tr.paso, tr.codigo_nomina, 0,0,0,0,0,0,0,0,0,
  tr.sueldo_basico, sp.promedio_compensacion,0,0,0,0,0,sp.promedio_primasc,sp.promedio_primast, pr.id_personal,0,' ','2008-05-01',
  'Cambio Tabulador Segun G.O 38.921','S',' ','promafe','1',o.cod_organismo, '2008-05-01'
 
   from trabajador tr, personal pr, sueldopromedio sp, dependencia dp, organismo o, sede se, ciudad cu, estado es, 
      cargo ca, manualcargo mc, clasificacionpersonal cp, tipopersonal tp, categoriapersonal cat
                                             where tr.id_personal  = pr.id_personal
                                                and sp.id_trabajador = tr.id_trabajador 
                                                and tr.id_tipo_personal = tp.id_tipo_personal
                                                and tp.cod_tipo_personal = pIdTipoPersonal                       -->  CODIGO DE TIPO PERSONAL 
                                                and cp.id_clasificacion_personal = tp.id_clasificacion_personal
                                                and cat.id_categoria_personal = cp.id_categoria_personal
                                                and tr.estatus ='A'
                                                and tr.id_dependencia = dp.id_dependencia 
                                                and tr.id_cargo = ca.id_cargo
                                                and ca.id_manual_cargo = mc.id_manual_cargo
                                                and dp.id_organismo = o.id_organismo
                                                and dp.id_sede      = se.id_sede
                                                and se.id_ciudad    = cu.id_ciudad
                                                and cu.id_estado    = es.id_estado
                                                and mc.id_tabulador = (select ta.id_tabulador from tabulador ta
                                                                                   where ta.cod_tabulador = pIdTabuladorActual); ---> CODIGO DE TABULADOR VIEJO


raise notice 'Salio de trayectoria ';
-- Salio de  TRAYECTORIA POR TIPO DE PERSONAL 

 -- SCRIP PARA APLICAR NUEVO TABULADOR 


-- FUNCION PARA BACHILLER 1, MONTO = 799

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 799 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER I';

 update trabajador set sueldo_basico = 799, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '1' and '6'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  799);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 799      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 799      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER 1, MONTO = 799


-- FUNCION PARA BACHILLER II, MONTO = 1165

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1165 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER II';

 update trabajador set sueldo_basico = 1165, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '7' and '10'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1165);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1165      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1165      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER II, MONTO = 1165

-- FUNCION PARA BACHILLER III, MONTO = 1324

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1324 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER III';

 update trabajador set sueldo_basico = 1324, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '11' and '14'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1324);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1324      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1324      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA BACHILLER III, MONTO = 1324

-- FUNCION PARA TSU I, MONTO = 1394

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1394 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN TECNICO I';

 update trabajador set sueldo_basico = 1394, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '15' and '16'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1394);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1394      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1394      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA TECNICO I, MONTO = 1394

-- FUNCION PARA TSU II, MONTO = 1440

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1440 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN TECNICO II';

--- FIN FUNCION PARA TECNICO   II, MONTO = 1440

-- FUNCION PARA PROFESIONAL I, MONTO = 1483

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1483 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  I';

 update trabajador set sueldo_basico = 1483, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '17' and '20'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1483);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1483      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1483      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL  II, MONTO = 1483

-- FUNCION PARA PROFESIONAL II, MONTO = 1566

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1566 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  II';

 update trabajador set sueldo_basico = 1566, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '21' and '23'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1566);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1566      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1566      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL II, MONTO = 1566

-- FUNCION PARA PROFESIONAL III, MONTO = 1594

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1566 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN PROFESIONAL  III';

 update trabajador set sueldo_basico = 1594, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado between '24' and '26'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico/2) from trabajador tr  --> PERIODICIDAD DE PAGO 2(quincenal), 1(MENSUAL)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0001'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  1594);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 1594      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 1594      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA PROFESIONAL III, MONTO = 1594



-- CAMBIO DE CARGO PARA LOS PUESTOS VACANTES, EN REGISTRO CARGOS

--VACANTES BACHILLER I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '1' and '6'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES BACHILLER II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =2                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '7' and '10'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES BACHILLER III


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =3                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '11' and '14'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES TECNICOS I


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =4                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado between '15' and '16'           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES TECNICOS II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =5                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = '17'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES PROFESIONAL I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =6                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '18' and '20'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES PROFESIONAL II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =7                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '21' and '23'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES PROFESIONAL IIi

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =8                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado between '24' and '26'                  --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--fin de cargo vacantes


raise notice 'sALIO';
	return 1;
end;
$_$;


--
-- TOC entry 644 (class 1255 OID 3240634)
-- Name: aplicar_nuevo_clasificador_obrero_01052008(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION aplicar_nuevo_clasificador_obrero_01052008(character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	

begin

-- INSERT EN TRAYECTORIA POR TIPO DE PERSONAL 



insert into trayectoria 
select (tr.id_trabajador + 99999), tr.cedula, pr.primer_apellido, pr.segundo_apellido, pr.primer_nombre, pr.segundo_nombre, 2008, '2008-05-01',
  0, 0, 9999, 0, ' ', o.nombre_organismo,0, '2008-05-01','2008-05-01','00101', es.nombre, cu.nombre,' ','01','REGION CENTRALIZADA',
  dp.cod_dependencia, dp.nombre,'000','Cambio Tabulador Segun G.O 38.921',' ', o.nombre_organismo,0, mc.cod_manual_cargo,
  ca.cod_cargo,ca.descripcion_cargo, cp.id_clasificacion_personal, cat.desc_categoria, cp.id_clasificacion_personal, cat.desc_categoria,
  ' ',ca.grado, tr.paso, tr.codigo_nomina, 0,0,0,0,0,0,0,0,0,
  tr.sueldo_basico, sp.promedio_compensacion,0,0,0,0,0,sp.promedio_primasc,sp.promedio_primast, pr.id_personal,0,' ','2008-05-01',
  'Cambio Tabulador Segun G.O 38.921','S',' ','promafe','1',o.cod_organismo, '2008-05-01'
 
   from trabajador tr, personal pr, sueldopromedio sp, dependencia dp, organismo o, sede se, ciudad cu, estado es, 
      cargo ca, manualcargo mc, clasificacionpersonal cp, tipopersonal tp, categoriapersonal cat
                                             where tr.id_personal  = pr.id_personal
                                                and sp.id_trabajador = tr.id_trabajador 
                                                and tr.id_tipo_personal = tp.id_tipo_personal
                                                and tp.cod_tipo_personal = pIdTipoPersonal                       -->  CODIGO DE TIPO PERSONAL 
                                                and cp.id_clasificacion_personal = tp.id_clasificacion_personal
                                                and cat.id_categoria_personal = cp.id_categoria_personal
                                                and tr.estatus ='A'
                                                and tr.id_dependencia = dp.id_dependencia 
                                                and tr.id_cargo = ca.id_cargo
                                                and ca.id_manual_cargo = mc.id_manual_cargo
                                                and dp.id_organismo = o.id_organismo
                                                and dp.id_sede      = se.id_sede
                                                and se.id_ciudad    = cu.id_ciudad
                                                and cu.id_estado    = es.id_estado
                                                and mc.id_tabulador = (select ta.id_tabulador from tabulador ta
                                                                                   where ta.cod_tabulador = pIdTabuladorActual); ---> CODIGO DE TABULADOR VIEJO


raise notice 'Salio de trayectoria ';
-- Salio de  TRAYECTORIA POR TIPO DE PERSONAL 

 -- SCRIP PARA APLICAR NUEVO TABULADOR 


-- FUNCION PARA NO CALIFICADO 1, MONTO = 799

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 799 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER I';

 update trabajador set sueldo_basico = 26.64, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = '1'            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO (semanal)
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  26.64);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 26.64      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =26.64    --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA Obrero No calificado, MONTO = 815


-- FUNCION OBRERO I, MONTO = 815

-- MODIFICACION TRABAJADOR


raise notice 'ENTRO EN OBRERO II';

 update trabajador set sueldo_basico = 27.17, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 2                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 2           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico= 27.17);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 27.17   --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =27.17      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO II, 

-- FUNCION PARA OBRERO III, MONTO = 831

-- MODIFICACION TRABAJADOR
--CAMBIAR MONTO 1324 POR VER TABLA MPD TABULADOR.
raise notice 'ENTRO EN BACHILLER III';

 update trabajador set sueldo_basico = 27.70, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 3                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 3           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  27.70);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 27.70     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 27.70      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO IV



Raise notice 'ENTRO EN OBRERO  IV';

 update trabajador set sueldo_basico = 28.27, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 4                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 4            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  28.27);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 28.27      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =28.27      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBERO V




raise notice 'ENTRO EN OBERRO V';

 update trabajador set sueldo_basico = 29.40, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 5                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado =5         --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  29.40);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 29.40      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 29.40     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBERRO VI
-- FUNCION PARA PROFESIONAL I, MONTO = 1483


raise notice 'ENTRO EN OBERRO VI';

 update trabajador set sueldo_basico = 30.30, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 6                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=6           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  30.30);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 30.30      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 30.30      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERO VI


-- FUNCION PARA OBRERO VII


raise notice 'ENTRO EN OBRERO VII';

 update trabajador set sueldo_basico = 31.20, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 7                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado = 7            --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  31.20);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =31.20     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico = 31.20      --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


--- FIN FUNCION PARA OBRERE VII,

-- FUNCION PARA OBRERO III


raise notice 'ENTRO EN OBRERO VIII';

 update trabajador set sueldo_basico = 32.14, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                             --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                            --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 8                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=8           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  32.14);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =  32.14      --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  32.14     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');




-- FUNCION PARA OBRERO VIIII


raise notice 'ENTRO EN OBRERO VIIII';

 update trabajador set sueldo_basico = 33.74, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =9                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 9                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                           --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 9                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=9           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  33.74);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico = 33.74     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  33.74     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');




-- FUNCION PARA OBRERO VIIII


raise notice 'ENTRO EN OBRERO X';

 update trabajador set sueldo_basico = 35.07, id_cargo = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    --> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                           --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =10                            --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                 cod_cargo = (select cod_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo           ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado =10                           --> CAMBIAR PARA OTRO PROCESO   
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 10                              --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo),
                                id_cargo_real = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                             detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo            ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                         --> CAMBIAR PARA OTRO PROCESO
                                                              and dt.sub_grado = 1 
                                                              and ca.grado = 10                              --> CAMBIAR PARA OTRO PROCESO
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)

  where id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                 where tp.cod_tipo_personal = pIdTipoPersonal)    --> TIPO DE PERSONAL 
    and estatus = 'A'
    and id_cargo in (select car.id_cargo from cargo car 
			where  car.grado=10           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual)));          --> CODIGO DE TABULADOR VIEJO


-- MODIFICACION CONCEPTO FIJO

update conceptofijo set monto = (select (sueldo_basico*7) from trabajador tr  --> PERIODICIDAD DE PAGO SEMANAL
                                    where tr.id_trabajador = conceptofijo.id_trabajador)
                
   where id_concepto_tipo_personal in (select ctp.id_concepto_tipo_personal from conceptotipopersonal ctp
                                          where ctp.id_concepto in (select c.id_concepto from concepto c
                                                                      where c.cod_concepto = '0003'))   
     and id_trabajador IN (select tr1.id_trabajador from trabajador tr1 
                                 where tr1.sueldo_basico=  35.07);      --> CAMBIAR PARA OTRO PROCESO


-- MODIFICACION REGISTRO CARGOS

update registrocargos set id_cargo  = (select tr.id_cargo from trabajador tr
                                         where tr.id_trabajador = registrocargos.id_trabajador
                                           and tr.id_tipo_personal = (select tp.id_tipo_personal from tipopersonal tp
                                                                        where tp.cod_tipo_personal = pIdTipoPersonal)  --> CODIGO DE TIPO DE PERSONAL 
                                           and tr.sueldo_basico =35.07     --> CAMBIAR PARA OTRO PROCESO
                                           and tr.estatus ='A')
                            
   where situacion = 'O'
     and id_trabajador in (select tr1.id_trabajador from trabajador tr1
                            where tr1.id_trabajador = registrocargos.id_trabajador
                                           and tr1.id_tipo_personal = (select tp1.id_tipo_personal from tipopersonal tp1
                                                                        where tp1.cod_tipo_personal = pIdTipoPersonal) --> CODIGO DE TIPO DE PERSONAL 
                                           and tr1.sueldo_basico =  35.07     --> CAMBIAR PARA OTRO PROCESO
                                           and tr1.estatus ='A');


-- PUESTOS VACANTES, 



-- CAMBIO DE CARGO PARA LOS PUESTOS VACANTES, EN REGISTRO CARGOS

--VACANTES OBRERO I

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 1                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =1                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 1           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO II

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 2                       --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =2                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 2           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES OBRERO III

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 3                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =3                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado= 3           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES OBRERO IV


update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 4                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =4                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado = 4           --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO V

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 5                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =5                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where  car.grado =5                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));




--VACANTES OBRERO VI
update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 6                      --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =6                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado = 6                 --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--VACANTES OBRERO VII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 7                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =7                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado = 7               --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO VIII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 8                     --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =8                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado= 8                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO VIIII

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 9                    --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =9                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado=9                --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));

--VACANTES OBRERO X

update registrocargos set id_cargo  = (select id_cargo from cargo ca, manualcargo mc, tabulador ta, 
                                                                  detalletabulador dt
                                                            where mc.id_tabulador = ta.id_tabulador
                                                              and ta.id_tabulador = dt.id_tabulador
                                                              and ta.cod_tabulador = pIdTabuladorNuevo    ---> CODIGO DE TABULADOR NUEVO 
                                                              and dt.grado = 10                    --> CAMBIAR PARA OTRO PROCESO 
                                                              and dt.sub_grado = 1 
                                                              and ca.grado =10                        --> CAMBIAR PARA OTRO PROCESO 
                                                              and ca.sub_grado = 1 
                                                              and mc.id_manual_cargo = ca.id_manual_cargo)
                            
   where situacion = 'V'
     and id_cargo in (select car.id_cargo from cargo car 
                          where   car.grado=10               --> CAMBIAR PARA OTRO PROCESO
                            and  car.id_manual_cargo in (select mc.id_manual_cargo from manualcargo mc
                                                              WHERE mc.id_tabulador in (select ta.id_tabulador from tabulador ta
                                                                                         where ta.cod_tabulador = pIdTabuladorActual )));


--fin de cargo vacantes


raise notice 'sALIO';
	return 1;
end;
$_$;


--
-- TOC entry 645 (class 1255 OID 3240636)
-- Name: asignar_cestaticket(integer, integer, integer, integer, character varying, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION asignar_cestaticket(integer, integer, integer, integer, character varying, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	pIdGrupoTicket alias for $1;
	pMes alias for $2;
	pAnio alias for $3;
	pProceso alias for $4;
	pEspecial alias for $5;
	pFecha alias for $6;
	pUsuario alias for $7;

	pt parametroticket;
	recCtp conceptotipopersonal;
	
	recCierreUnidad record;
	curCierreUnidad cursor (pMes int4, pAnio int4, pIdTipoPersonal int4)
		for select distinct *
		from cierreunidad
		where mes_cierre = pMes
		and anio_cierre = pAnio
		and id_tipo_personal = pIdTipoPersonal;

	recTrabajadoresBasico record;
	curTrabajadoresBasico cursor(pIdTipoPersonal int4, pSueldo1 float8, pSueldo2 float8, pMes int4, pAnio int4)
		for select t.id_trabajador, dt.tickets_por_dia, dt.valor,
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia,
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'N' as fraccionado,
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d,
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_tipo_personal = dt.id_tipo_personal
            and dt.estatus = 'A'
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and  not (t.mes_ingreso = pMes and t.anio_ingreso = pAnio and dias_trabajados > 0)
		and t.id_trabajador not in (select id_trabajador from excepcionticket )
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor,
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia,
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'S' as retroactivo, 'N' as fraccionado,
		t.dias_trabajados, r.numero_tickets as cantidad_retroactivo, 0 as cantidad_excepcion,
		r.anio as anio, r.mes as mes
		from trabajador t, sueldopromedio sp, dependencia d, retroactivoticket r,
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_trabajador = r.id_trabajador
		and t.id_dependencia = d.id_dependencia		
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
	      and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and r.mes_proceso = pMes
		and r.anio_proceso = pAnio
		and dt.estatus = 'A'
		and t.id_trabajador not in (select id_trabajador from excepcionticket)
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor,
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia,
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'S' as excepcion, 'N' as retroactivo, 'N' as fraccionado,
		t.dias_trabajados, 0 as cantidad_retroactivo,
		et.numero_tickets as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d,
		denominacionticket dt, excepcionticket et, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
            and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
		and t.id_trabajador = et.id_trabajador		
		union 		
		select  t.id_trabajador, dt.tickets_por_dia, dt.valor,
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia,
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'S' as fraccionado,
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d,
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
	      and (t.estatus = 'A' or t.estatus = 'E')
	      and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
                and
			((t.mes_ingreso = pMes and t.anio_ingreso = pAnio) or
			(t.mes_egreso = pMes and t.anio_egreso = pAnio))
		and dias_trabajados >0		
		and t.id_trabajador not in (select id_trabajador from excepcionticket);
	


	recAusencias record;
	curAusencias cursor(pIdTrabajador int4, pMes int4, pAnio int4)
		for select distinct id_ausencia, dias_habiles
		from ausencia
		where id_personal
			in (select id_personal
			from trabajador
			where id_trabajador = pIdTrabajador)
		and anio = pAnio
		and mes = pMes
		and cesta_ticket = 'S';
		
	recMes record;
	curMes cursor (pMes int4, pAnio int4)
		for select distinct id_mes, dias_habiles, con_sabados
		from mes where anio = pAnio and mes = pMes;

	--recSede record;
	--curSede cursor(pIdDependencia int4)
	--	for select distinct s.id_sede, r.id_region, s.cod_cesta, pr.id_proveedor_ticket
	--	from sede s, dependencia d, region r, proveedorregion pr
	--	where s.id_sede = d.id_sede
	--	and s.id_region = r.id_region
	--	and r.id_region = pr.id_region
	--	and d.id_dependencia = pIdDependencia;

	recEmbargo record;
	curEmbargo cursor(pIdTrabajador int4)
		for select sum(numero_tickets) as cantidad
		from embargo
		where embargo.id_personal
			in (select id_personal
			from trabajador where id_trabajador = pIdTrabajador limit 1);
	
	recDescuento record;
	curDescuento cursor(pIdTrabajador int4, pAnio int4, pMes int4)
		for select (descuento_ausencia + descuento_reposo +
		descuento_permiso + descuento_vacaciones + descuento_otros+referencia_embargo+referencia_ausencia) as descuento
		from descuentoticket dt
		where dt.id_trabajador = pIdTrabajador and dt.anio = pAnio and dt.mes = pMes;

	recTipoPersonal record;
	curTipoPersonal cursor(pIdGrupoTicket int4)
		for select distinct tp.id_tipo_personal
		from grupoticket gt, tipopersonal tp
		where gt.id_grupo_ticket = pIdGrupoTicket
		and gt.id_grupo_ticket = tp.id_grupo_ticket
		and tp.beneficio_cesta_ticket = 'S';

	cantidadTickets int4 = 0;
	cantidadTicketsTrabajador int4 = 0;
	cantidadAusencias int4 := 0;
	idCalculoTicket int4:= 0;
	idHistoricoTicket int4:= 0;
	montoTicket float8:= 0;
	diasHabiles float8 :=0;
	referenciaEmbargo int4 := 0;
	descuento int4 := 0;
	idDescuentoTicket int4 :=0;
	existeDescuento int4 := 0;
	mes int4 := 0;
	anio int4 := 0;
	netoTicket int4 := 0;
	netoCobrar float8 := 0;
      psueldo1 float8:=0;
      psueldo2 float8:=0;
	idSeguridadTicket int4 := 0;
	codCesta varchar;
	pIdTipoPersonal int4 := 0;
        id_concepto_variable int4 :=0;

begin
        id_concepto_variable := last_id_conceptovariable();
	open curTipoPersonal(pIdGrupoTicket);				
	loop		
		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;
		pIdTipoPersonal = recTipoPersonal.id_tipo_personal;

		raise notice '**********************************************';

		delete from calculoticket
                where id_tipo_personal = pIdTipoPersonal;
		raise notice 'INICIA paso 1 , pIdTipoPersonal = % ' , pIdTipoPersonal;
		select into pt * from parametroticket  where id_tipo_personal = pIdTipoPersonal;
		
		if pt.id_parametro_ticket is  null then
		 raise notice 'El parametro del ticket es null, consulta: select into pt * from parametroticket  where id_tipo_personal = %' , pIdTipoPersonal;
			return 10;
		end if;
	        raise notice 'leyo pv';
		select into recCtp * from conceptotipopersonal  where id_concepto_tipo_personal = pt.id_concepto_tipo_personal;
		raise notice 'leyo pv 2';
		if recCtp.id_concepto_tipo_personal is  null then
raise notice 'salio ';
			return 11;
		end if;
		
		
	raise notice 'continua 1  ';

		
		if pt.dias_fijos =  0 then
			raise notice 'INICIA paso 23';

			open curMes(pMes,pAnio);							
			fetch curMes into recMes;			
	
			if recMes.id_mes = null then
				return 12;
			end if;
			
			if pt.dias_habiles = 'S' and pt.incluye_sabados = 'N' and pt.monto_fijo = 'N'then
				diasHabiles := recMes.dias_habiles;				
			elsif pt.incluye_sabados = 'S' then
				diasHabiles := recMes.con_sabados;									
			end if;
			close curMes;
			
		else
                   raise notice 'dias fijos / diasfijos = %' , pt.dias_fijos;


			diasHabiles := pt.dias_fijos;
			raise notice 'dias fijos';
			
		end if;
raise notice 'continua 2  ';

        idCalculoTicket := last_id_calculoticket()+1;				
				if idCalculoTicket is null then				
					idCalculoTicket := 1;				
				end if;

       idHistoricoTicket := last_id_historicoticket()+1;				
					if idHistoricoTicket is null then				
						idHistoricoTicket := 1;				
					end if;

	
     if pt.sueldo_basico_integral = 'B' then
         pSueldo2 := pt.sueldo_maximo;
         pSueldo1  := 999999999;
      elsif pt.sueldo_basico_integral = 'I' then
         pSueldo1 := pt.sueldo_maximo;
         pSueldo2  := 999999999;
	else
	   pSueldo1 := 999999999;
         pSueldo2  := 999999999;
     end if;


			raise notice 'basico';

			raise notice 'Se llamara curTrabajadoresBasico(%,%,%,%,%)',pIdTipoPersonal, pSueldo1,pSueldo2,  pMes, pAnio;
			
			open curTrabajadoresBasico(pIdTipoPersonal, pSueldo1,pSueldo2,  pMes, pAnio);				
			loop
				
raise notice 'personal a basico ';


				fetch curTrabajadoresBasico into recTrabajadoresBasico;			
				exit when not found;
				
				cantidadAusencias := 0;
				descuento :=0;	
				netoCobrar :=0;
				netoTicket :=0;
				referenciaEmbargo := 0;
				cantidadTicketsTrabajador := 0;
				
				if pt.distribucion = 'D' then
					codCesta := recTrabajadoresBasico.cod_cesta;
				elsif pt.distribucion = 'L' then
					codCesta := recTrabajadoresBasico.cod_cesta_2;
				else
					codCesta := recTrabajadoresBasico.cod_cesta_3;
				end if;
				if pt.deducir_ausencias = 'S' and recTrabajadoresBasico.retroactivo = 'N' then
					
					open curAusencias(recTrabajadoresBasico.id_trabajador,pMes,pAnio);
					loop
						fetch curAusencias into recAusencias;
						exit when not found;						
						cantidadAusencias := cantidadAusencias + recAusencias.dias_habiles;
						
		
					end loop;
					close curAusencias;
					
				end if;
				mes := pMes;
				anio := pAnio;
				--raise notice ' LUIS prueba continua 3  ';
				if recTrabajadoresBasico.excepcion = 'N' and recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.fraccionado = 'N' then
					cantidadTicketsTrabajador := (diasHabiles*recTrabajadoresBasico.tickets_por_dia);
					
				elsif recTrabajadoresBasico.excepcion = 'S' then
					cantidadTicketsTrabajador  := recTrabajadoresBasico.cantidad_excepcion;
					
				elsif recTrabajadoresBasico.retroactivo = 'S' then
					
					cantidadTicketsTrabajador:= recTrabajadoresBasico.cantidad_retroactivo;
					mes:= recTrabajadoresBasico.mes;
					anio:= recTrabajadoresBasico.anio;
				elsif recTrabajadoresBasico.fraccionado = 'S' then
					cantidadTicketsTrabajador:= (recTrabajadoresBasico.dias_trabajados*recTrabajadoresBasico.tickets_por_dia);
					
				end if;
				
				montoTicket := cantidadTicketsTrabajador * recTrabajadoresBasico.valor;
				
	raise notice 'continua 3  ';


				if recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.excepcion = 'N' then
					open curEmbargo(recTrabajadoresBasico.id_trabajador);
					fetch curEmbargo into recEmbargo;
					if recEmbargo.cantidad is not null then
						referenciaEmbargo := recEmbargo.cantidad;
					end if;
					close curEmbargo;
					existeDescuento:= count_descuentoticket(
						recTrabajadoresBasico.id_trabajador,
						pMes, pAnio);
					
					if existeDescuento = 0 then
						idDescuentoTicket := last_id_descuentoticket()+1;				
						if idDescuentoTicket is null then				
							idDescuentoTicket := 1;				
						end if;
	
						perform add_descuentoticket(
							idDescuentoTicket,
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias,
							0,0,0,0,0, 'N', null);
					else
						perform update_descuentoticket(
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias);
					end if;
					
					open curDescuento(recTrabajadoresBasico.id_trabajador, pAnio, pMes);
					fetch curDescuento into recDescuento;
	
					if recDescuento.descuento is not null then
						descuento := recDescuento.descuento;
					end if;
					close curDescuento;
					
				end if;
	
raise notice 'continua 4  ';



				idCalculoTicket := idCalculoTicket + 1;				
				
				netoTicket := cantidadTicketsTrabajador - descuento;
				netoCobrar := recTrabajadoresBasico.valor*netoTicket;
	
				perform add_calculoticket(
					idCalculoTicket,
					anio,
					mes,
					cantidadTicketsTrabajador,
					recTrabajadoresBasico.valor,
					montoTicket, 				
					descuento,
					netoTicket,
					netoCobrar,
					'N',
					current_date,
					pAnio,
					pMes,
					codCesta,
					recTrabajadoresBasico.id_trabajador,
					pt.id_concepto_tipo_personal,
					recTrabajadoresBasico.id_proveedor_ticket,
					recTrabajadoresBasico.cod_dependencia,
					recTrabajadoresBasico.nombre_dependencia,
					pIdTipoPersonal);
					raise notice 'grabo calculo ticket % , id_trabajador = % ', idCalculoTicket , recTrabajadoresBasico.id_trabajador;
					
				if pProceso = 2 then
					
					idHistoricoTicket :=  idHistoricoTicket +1;				
			
					perform add_historicoticket(
						idHistoricoTicket,
						anio,
						mes,
						cantidadTicketsTrabajador,
						recTrabajadoresBasico.valor,
						montoTicket, 					
						descuento,
						netoTicket,
						netoCobrar,
						'N',
						current_date,
						pAnio,
						pMes,
						codCesta,
						recTrabajadoresBasico.id_trabajador,
						pt.id_concepto_tipo_personal,
						recTrabajadoresBasico.id_proveedor_ticket,
						recTrabajadoresBasico.cod_dependencia,
						recTrabajadoresBasico.nombre_dependencia,
						recTrabajadoresBasico.id_dependencia,
						pIdTipoPersonal);
						raise notice 'grabo historico ticket';


					If pt.pago_nomina ='S' THEN

                                     

                                      -- Se le incluyo para que tome el concepto Cesta_ticket 4300, como concepto Variable
                                      -- Modifiacion realizada el 19-01-2009

                                        id_concepto_variable := id_concepto_variable+1;
                                 
                                       -- id_concepto_variable := last_id_conceptovariable()+1;

                                        if id_concepto_variable is null then
                                            id_concepto_variable := 1;
                                        end if;

                                        Perform add_conceptovariable(id_concepto_variable,
                                                                     recTrabajadoresBasico.id_trabajador,
                                                                     pt.id_concepto_tipo_personal,
                                                                     recCtp.id_frecuencia_tipo_personal,
                                                                     cantidadTicketsTrabajador,
                                                                     netoCobrar,
                                                                     current_date,
                                                                     'Ticket',
                                                                     'A',
                                                                     0,0);  
                                 end if;             
				end if;							
			end loop;
			close curTrabajadoresBasico;
	
			if pProceso = 2 then
				Delete from descuentoticket dt where dt.anio = pAnio and dt.mes = pMes
				and (dt.referencia_embargo + dt.referencia_ausencia + dt.descuento_ausencia + dt.descuento_reposo +
				dt.descuento_vacaciones + dt.descuento_permiso + dt.descuento_otros)=0
				and dt.id_trabajador in (select t.id_trabajador from trabajador t where t.id_tipo_personal = pIdTipoPersonal);

					
			end if;					
		
	end loop;
	if pProceso = 2 then
	
	raise notice ' Entro al pproceso =2 ';
			
		idSeguridadTicket := last_id_seguridadticket()+1;				
		if idSeguridadTicket is null then				
			idSeguridadTicket := 1;				
		end if;

		perform add_seguridadticket(idSeguridadTicket, pAnio, pMes, pEspecial, pFecha,
			pUsuario, pIdGrupoTicket);
	end if;
	return 0;
end;
$_$;


--
-- TOC entry 646 (class 1255 OID 3240638)
-- Name: asignar_cestaticket_old(integer, integer, integer, integer, character varying, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION asignar_cestaticket_old(integer, integer, integer, integer, character varying, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdGrupoTicket alias for $1;
	pMes alias for $2;
	pAnio alias for $3;
	pProceso alias for $4;
	pEspecial alias for $5;
	pFecha alias for $6;
	pUsuario alias for $7;

	pt parametroticket;
	recCtp conceptotipopersonal;
	
	recCierreUnidad record;
	curCierreUnidad cursor (pMes int4, pAnio int4, pIdTipoPersonal int4) 
		for select distinct * 
		from cierreunidad
		where mes_cierre = pMes 
		and anio_cierre = pAnio 
		and id_tipo_personal = pIdTipoPersonal;

	recTrabajadoresBasico record;
	curTrabajadoresBasico cursor(pIdTipoPersonal int4, pSueldo1 float8, pSueldo2 float8, pMes int4, pAnio int4)
		for select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_tipo_personal = dt.id_tipo_personal
            and dt.estatus = 'A'
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and  not (t.mes_ingreso = pMes and t.anio_ingreso = pAnio and dias_trabajados > 0)
		and t.id_trabajador not in (select id_trabajador from excepcionticket )
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'S' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, r.numero_tickets as cantidad_retroactivo, 0 as cantidad_excepcion,
		r.anio as anio, r.mes as mes
		from trabajador t, sueldopromedio sp, dependencia d, retroactivoticket r, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_trabajador = r.id_trabajador
		and t.id_dependencia = d.id_dependencia		
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
	      and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and r.mes_proceso = pMes
		and r.anio_proceso = pAnio
		and dt.estatus = 'A'
		and t.id_trabajador not in (select id_trabajador from excepcionticket)
		union
		select t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia,d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'S' as excepcion, 'N' as retroactivo, 'N' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 
		et.numero_tickets as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, excepcionticket et, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
            and t.estatus = 'A'
		and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
		and t.id_trabajador = et.id_trabajador		
		union 		
		select  t.id_trabajador, dt.tickets_por_dia, dt.valor, 
		t.id_dependencia, d.cod_dependencia, d.nombre as nombre_dependencia, 
		d.cod_cesta, dt.id_proveedor_ticket, lg.cod_cesta as cod_cesta_2, s.cod_cesta as cod_cesta_3,
		'N' as excepcion, 'N' as retroactivo, 'S' as fraccionado, 
		t.dias_trabajados, 0 as cantidad_retroactivo, 0 as cantidad_excepcion,
		0 as anio, 0 as mes
		from trabajador t, sueldopromedio sp, dependencia d, 
		denominacionticket dt, lugarpago lg, sede s
		where t.id_trabajador = sp.id_trabajador
		and t.id_dependencia = d.id_dependencia
		and t.id_lugar_pago = lg.id_lugar_pago
		and d.id_sede = s.id_sede
		and t.id_tipo_personal = dt.id_tipo_personal
	      and (t.estatus = 'A' or t.estatus = 'E')
	      and (sp.promedio_sueldo <= pSueldo1  and sp.promedio_integral <= pSueldo2)  
		and t.id_tipo_personal = pIdTipoPersonal
		and dt.estatus = 'A'
                and 
			((t.mes_ingreso = pMes and t.anio_ingreso = pAnio) or 
			(t.mes_egreso = pMes and t.anio_egreso = pAnio))
		and dias_trabajados >0		
		and t.id_trabajador not in (select id_trabajador from excepcionticket);
	


	recAusencias record;
	curAusencias cursor(pIdTrabajador int4, pMes int4, pAnio int4)
		for select distinct id_ausencia, dias_habiles
		from ausencia
		where id_personal 
			in (select id_personal 
			from trabajador 
			where id_trabajador = pIdTrabajador)
		and anio = pAnio
		and mes = pMes
		and cesta_ticket = 'S';
		
	recMes record;
	curMes cursor (pMes int4, pAnio int4)
		for select distinct id_mes, dias_habiles, con_sabados
		from mes where anio = pAnio and mes = pMes;

	--recSede record;
	--curSede cursor(pIdDependencia int4)
	--	for select distinct s.id_sede, r.id_region, s.cod_cesta, pr.id_proveedor_ticket 
	--	from sede s, dependencia d, region r, proveedorregion pr
	--	where s.id_sede = d.id_sede
	--	and s.id_region = r.id_region
	--	and r.id_region = pr.id_region
	--	and d.id_dependencia = pIdDependencia;

	recEmbargo record;
	curEmbargo cursor(pIdTrabajador int4)
		for select sum(numero_tickets) as cantidad
		from embargo
		where embargo.id_personal 
			in (select id_personal 
			from trabajador where id_trabajador = pIdTrabajador limit 1);
	
	recDescuento record;
	curDescuento cursor(pIdTrabajador int4, pAnio int4, pMes int4)
		for select (descuento_ausencia + descuento_reposo + 
		descuento_permiso + descuento_vacaciones + descuento_otros+referencia_embargo+referencia_ausencia) as descuento
		from descuentoticket dt
		where dt.id_trabajador = pIdTrabajador and dt.anio = pAnio and dt.mes = pMes;

	recTipoPersonal record;
	curTipoPersonal cursor(pIdGrupoTicket int4)
		for select distinct tp.id_tipo_personal
		from grupoticket gt, tipopersonal tp
		where gt.id_grupo_ticket = pIdGrupoTicket
		and gt.id_grupo_ticket = tp.id_grupo_ticket
		and tp.beneficio_cesta_ticket = 'S';

	cantidadTickets int4 = 0;
	cantidadTicketsTrabajador int4 = 0;
	cantidadAusencias int4 := 0;
	idCalculoTicket int4:= 0;
	idHistoricoTicket int4:= 0;
	montoTicket float8:= 0;
	diasHabiles float8 :=0;
	referenciaEmbargo int4 := 0;
	descuento int4 := 0;
	idDescuentoTicket int4 :=0;
	existeDescuento int4 := 0;
	mes int4 := 0;
	anio int4 := 0;
	netoTicket int4 := 0;
	netoCobrar float8 := 0;
      psueldo1 float8:=0;
      psueldo2 float8:=0;
	idSeguridadTicket int4 := 0;
	codCesta varchar;
	pIdTipoPersonal int4 := 0;
        id_concepto_variable int4 :=0;

begin
        id_concepto_variable := last_id_conceptovariable();
	open curTipoPersonal(pIdGrupoTicket);				
	loop		
		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;
		pIdTipoPersonal = recTipoPersonal.id_tipo_personal;

		raise notice '**********************************************';

		delete from calculoticket 
                where id_tipo_personal = pIdTipoPersonal;
		raise notice 'INICIA paso 1 , pIdTipoPersonal = % ' , pIdTipoPersonal;
		select into pt * from parametroticket  where id_tipo_personal = pIdTipoPersonal;
		
		if pt.id_parametro_ticket is  null then
		 raise notice 'El parametro del ticket es null, consulta: select into pt * from parametroticket  where id_tipo_personal = %' , pIdTipoPersonal;
			return 10;
		end if;
	        raise notice 'leyo pv';
		select into recCtp * from conceptotipopersonal  where id_concepto_tipo_personal = pt.id_concepto_tipo_personal;
		raise notice 'leyo pv 2';
		if recCtp.id_concepto_tipo_personal is  null then
raise notice 'salio ';
			return 11;
		end if;
		
		
	raise notice 'continua 1  ';

		
		if pt.dias_fijos =  0 then
			raise notice 'INICIA paso 23';

			open curMes(pMes,pAnio);							
			fetch curMes into recMes;			
	
			if recMes.id_mes = null then
				return 12;
			end if;
			
			if pt.dias_habiles = 'S' and pt.incluye_sabados = 'N' and pt.monto_fijo = 'N'then
				diasHabiles := recMes.dias_habiles;				
			elsif pt.incluye_sabados = 'S' then
				diasHabiles := recMes.con_sabados;									
			end if;
			close curMes;
			
		else
                   raise notice 'dias fijos / diasfijos = %' , pt.dias_fijos;


			diasHabiles := pt.dias_fijos;
			raise notice 'dias fijos';
			
		end if;
raise notice 'continua 2  ';

        idCalculoTicket := last_id_calculoticket()+1;				
				if idCalculoTicket is null then				
					idCalculoTicket := 1;				
				end if;

       idHistoricoTicket := last_id_historicoticket()+1;				
					if idHistoricoTicket is null then				
						idHistoricoTicket := 1;				
					end if;

	
     if pt.sueldo_basico_integral = 'B' then
         pSueldo2 := pt.sueldo_maximo;
         pSueldo1  := 999999999;
      elsif pt.sueldo_basico_integral = 'I' then
         pSueldo1 := pt.sueldo_maximo;
         pSueldo2  := 999999999;
	else
	   pSueldo1 := 999999999;
         pSueldo2  := 999999999;
     end if;


			raise notice 'basico';

			raise notice 'Se llamara curTrabajadoresBasico(%,%,%,%,%)',pIdTipoPersonal, pSueldo1,pSueldo2,  pMes, pAnio;
			
			open curTrabajadoresBasico(pIdTipoPersonal, pSueldo1,pSueldo2,  pMes, pAnio);				
			loop
				
raise notice 'personal a basico ';


				fetch curTrabajadoresBasico into recTrabajadoresBasico;			
				exit when not found;
				
				cantidadAusencias := 0;
				descuento :=0;	
				netoCobrar :=0;
				netoTicket :=0;
				referenciaEmbargo := 0;
				cantidadTicketsTrabajador := 0;
				
				if pt.distribucion = 'D' then
					codCesta := recTrabajadoresBasico.cod_cesta;
				elsif pt.distribucion = 'L' then
					codCesta := recTrabajadoresBasico.cod_cesta_2;
				else
					codCesta := recTrabajadoresBasico.cod_cesta_3;
				end if;
				if pt.deducir_ausencias = 'S' and recTrabajadoresBasico.retroactivo = 'N' then
					
					open curAusencias(recTrabajadoresBasico.id_trabajador,pMes,pAnio);
					loop
						fetch curAusencias into recAusencias;
						exit when not found;						
						cantidadAusencias := cantidadAusencias + recAusencias.dias_habiles;
						
		
					end loop;
					close curAusencias;
					
				end if;
				mes := pMes;
				anio := pAnio;
				--raise notice ' LUIS prueba continua 3  ';
				if recTrabajadoresBasico.excepcion = 'N' and recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.fraccionado = 'N' then
					cantidadTicketsTrabajador := (diasHabiles*recTrabajadoresBasico.tickets_por_dia);
					
				elsif recTrabajadoresBasico.excepcion = 'S' then
					cantidadTicketsTrabajador  := recTrabajadoresBasico.cantidad_excepcion;
					
				elsif recTrabajadoresBasico.retroactivo = 'S' then
					
					cantidadTicketsTrabajador:= recTrabajadoresBasico.cantidad_retroactivo;
					mes:= recTrabajadoresBasico.mes;
					anio:= recTrabajadoresBasico.anio;
				elsif recTrabajadoresBasico.fraccionado = 'S' then
					cantidadTicketsTrabajador:= (recTrabajadoresBasico.dias_trabajados*recTrabajadoresBasico.tickets_por_dia);
					
				end if;
				
				montoTicket := cantidadTicketsTrabajador * recTrabajadoresBasico.valor;
				
	raise notice 'continua 3  ';


				if recTrabajadoresBasico.retroactivo = 'N' and recTrabajadoresBasico.excepcion = 'N' then
					open curEmbargo(recTrabajadoresBasico.id_trabajador);
					fetch curEmbargo into recEmbargo;
					if recEmbargo.cantidad is not null then
						referenciaEmbargo := recEmbargo.cantidad;
					end if;
					close curEmbargo;
					existeDescuento:= count_descuentoticket(
						recTrabajadoresBasico.id_trabajador,
						pMes, pAnio);
					
					if existeDescuento = 0 then
						idDescuentoTicket := last_id_descuentoticket()+1;				
						if idDescuentoTicket is null then				
							idDescuentoTicket := 1;				
						end if;
	
						perform add_descuentoticket(
							idDescuentoTicket, 
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias,
							0,0,0,0,0, 'N', null);
					else
						perform update_descuentoticket( 
							recTrabajadoresBasico.id_trabajador,
							pAnio, pMes,
							cantidadTicketsTrabajador,
							referenciaEmbargo, cantidadAusencias);
					end if;
					
					open curDescuento(recTrabajadoresBasico.id_trabajador, pAnio, pMes);
					fetch curDescuento into recDescuento;
	
					if recDescuento.descuento is not null then
						descuento := recDescuento.descuento;
					end if;
					close curDescuento;
					
				end if;
	
raise notice 'continua 4  ';



				idCalculoTicket := idCalculoTicket + 1;				
				
				netoTicket := cantidadTicketsTrabajador - descuento;
				netoCobrar := recTrabajadoresBasico.valor*netoTicket;
	
				perform add_calculoticket(
					idCalculoTicket,
					anio,
					mes,
					cantidadTicketsTrabajador,
					recTrabajadoresBasico.valor,
					montoTicket, 				
					descuento,
					netoTicket,
					netoCobrar,
					'N',
					current_date,
					pAnio,
					pMes,
					codCesta, 
					recTrabajadoresBasico.id_trabajador,
					pt.id_concepto_tipo_personal, 
					recTrabajadoresBasico.id_proveedor_ticket,
					recTrabajadoresBasico.cod_dependencia,
					recTrabajadoresBasico.nombre_dependencia,
					pIdTipoPersonal);
					raise notice 'grabo calculo ticket % , id_trabajador = % ', idCalculoTicket , recTrabajadoresBasico.id_trabajador;
					
				if pProceso = 2 then
					
					idHistoricoTicket :=  idHistoricoTicket +1;				
			
					perform add_historicoticket(
						idHistoricoTicket,
						anio,
						mes,
						cantidadTicketsTrabajador,
						recTrabajadoresBasico.valor,
						montoTicket, 					
						descuento,
						netoTicket,
						netoCobrar,
						'N',
						current_date,
						pAnio,
						pMes,
						codCesta, 
						recTrabajadoresBasico.id_trabajador,
						pt.id_concepto_tipo_personal, 
						recTrabajadoresBasico.id_proveedor_ticket,
						recTrabajadoresBasico.cod_dependencia,
						recTrabajadoresBasico.nombre_dependencia,
						recTrabajadoresBasico.id_dependencia,
						pIdTipoPersonal);
						raise notice 'grabo historico ticket';


					If pt.pago_nomina ='S' THEN

                                     

                                      -- Se le incluyo para que tome el concepto Cesta_ticket 4300, como concepto Variable
                                      -- Modifiacion realizada el 19-01-2009

                                        id_concepto_variable := id_concepto_variable+1;
                                 
                                       -- id_concepto_variable := last_id_conceptovariable()+1;

                                        if id_concepto_variable is null then
                                            id_concepto_variable := 1;
                                        end if;

                                        Perform add_conceptovariable(id_concepto_variable,
                                                                     recTrabajadoresBasico.id_trabajador,
                                                                     pt.id_concepto_tipo_personal,
                                                                     recCtp.id_frecuencia_tipo_personal,
                                                                     cantidadTicketsTrabajador,
                                                                     netoCobrar,
                                                                     current_date,
                                                                     'Ticket',
                                                                     'A',
                                                                     0,0);  
                                 end if;             
				end if;							
			end loop;
			close curTrabajadoresBasico;
	
			if pProceso = 2 then
				delete from descuentoticket where anio = pAnio and mes = pMes 
				and (referencia_embargo + referencia_ausencia + descuento_ausencia + descuento_reposo + 
				descuento_vacaciones + descuento_permiso + descuento_otros)=0
				and id_trabajador in (select id_trabajador from trabajador where id_tipo_personal = pIdTipoPersonal);
					
			end if;					
		
	end loop;
	if pProceso = 2 then
	
	raise notice ' Entro al pproceso =2 ';
			
		idSeguridadTicket := last_id_seguridadticket()+1;				
		if idSeguridadTicket is null then				
			idSeguridadTicket := 1;				
		end if;

		perform add_seguridadticket(idSeguridadTicket, pAnio, pMes, pEspecial, pFecha, 
			pUsuario, pIdGrupoTicket);
	end if;
	return 0;
end;
$_$;


--
-- TOC entry 647 (class 1255 OID 3240640)
-- Name: asignar_juguetes(integer, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION asignar_juguetes(integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;
	pFecha ALIAS FOR $2;
	pProceso ALIAS FOR $3;

	curFamiliar refcursor;
	recFamiliar record;

	curPersonal refcursor;
	recPersonal record;

	recParametros record;
	recIdentificadores record;

	fechaDesde date;
	fechaHasta date;
	fechaActual date;
	cantidadMaxima int4;
	cantidadInsertar int4;
	cuentaFamiliar int4 = 0;
	ultimoIdPersonal int4 = 0;
	montoFamiliar float8;
	montoConcepto float8;
        quienCobra varchar(1);

	idConceptoVariable int4;
	idJuguete int4;
	validado bool;
begin

	DELETE FROM juguete WHERE id_juguete IN ( 
		SELECT id_juguete FROM
			( juguete AS j INNER JOIN personal AS p USING (id_personal)
			INNER JOIN trabajador AS t USING (id_personal) )
			INNER JOIN tipopersonal AS tp USING (id_tipo_personal) 
			WHERE tp.id_tipo_personal = pIdTipoPersonal );

	SELECT INTO recIdentificadores id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal AS ctp INNER JOIN concepto AS c USING (id_concepto)
		WHERE c.cod_concepto = '4002' AND
			ctp.id_tipo_personal = pIdTipoPersonal;


       DELETE FROM conceptovariable
             WHERE id_trabajador in (select id_trabajador from trabajador
                                       where id_tipo_personal = Pidtipopersonal  )
               AND id_concepto_tipo_personal = recIdentificadores.id_concepto_tipo_personal;


	SELECT INTO recParametros edad_minima, edad_maxima, cantidad_beneficiarios, monto_juguetes, quien_cobra 
		FROM parametrojuguete WHERE id_tipo_personal = pIdTipoPersonal;

	fechaDesde = add_years(pFecha, -recParametros.edad_maxima);
	fechaHasta = add_years(pFecha, -recParametros.edad_minima);
	cantidadMaxima = recParametros.cantidad_beneficiarios;
	montoFamiliar = recParametros.monto_juguetes;

        quienCobra := 'A';
	IF recParametros.quien_cobra = 'M' THEN
           quienCobra := 'F';
        END IF;
        IF recParametros.quien_cobra = 'P' THEN
           quienCobra := 'M';
        END IF;
	
	ultimoIdPersonal = ultimoIdPersonal + 1;
	fechaActual = current_date;
	
	OPEN curPersonal FOR 
		SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, max(p.sexo) as sexo
		FROM ( familiar AS f INNER JOIN personal AS p USING (id_personal) )
			INNER JOIN trabajador AS t USING ( id_personal)
		WHERE f.fecha_nacimiento BETWEEN fechaDesde AND fechaHasta AND
			t.id_tipo_personal = pIdTipoPersonal AND
			f.parentesco = 'H' AND
			t.estatus = 'A'
		GROUP BY (p.id_personal);

	idConceptoVariable = last_id_conceptovariable();
	idJuguete = last_id_juguete();

	LOOP
		FETCH curPersonal INTO recPersonal;
		EXIT WHEN NOT FOUND;
		cuentaFamiliar = 0;
		validado = TRUE;
		IF quienCobra <> recPersonal.sexo AND 
			recParametros.quien_cobra <> 'A' THEN
			IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
				validado = TRUE;
			ELSE
				validado = FALSE;
			END IF;
		END IF;
		IF validado = TRUE THEN
			OPEN curFamiliar FOR 
				SELECT f.id_familiar, f.fecha_nacimiento, f.sexo
				FROM familiar f
				WHERE f.id_personal = recPersonal.id_personal
				AND f.fecha_nacimiento BETWEEN fechaDesde AND fechaHasta AND
				f.parentesco = 'H';
			
			LOOP
				FETCH curFamiliar INTO recFamiliar;
				EXIT WHEN NOT FOUND;
				IF (cuentaFamiliar < cantidadMaxima) THEN
                                   cuentaFamiliar = cuentaFamiliar + 1;			
	                           idJuguete = idJuguete + 1;
				   INSERT INTO juguete (id_juguete, id_personal, 
					id_familiar, fecha_nacimiento, sexo, monto)
					VALUES (
						idJuguete,
						recPersonal.id_personal,
						recFamiliar.id_familiar,
						recFamiliar.fecha_nacimiento,
						recFamiliar.sexo,
						montoFamiliar);
				END IF;
			END LOOP;
			CLOSE curFamiliar;
		END IF;
		IF (pProceso = 'D') AND validado = TRUE THEN
			montoConcepto = montoFamiliar * cuentaFamiliar;
			idConceptoVariable = idConceptoVariable + 1;
			INSERT INTO conceptovariable
				(id_concepto_variable,
				id_trabajador,
				id_concepto_tipo_personal,
				id_frecuencia_tipo_personal,
				monto,
				fecha_registro,
				estatus)
			VALUES (
				idConceptoVariable,
				recPersonal.id_trabajador,
				recIdentificadores.id_concepto_tipo_personal,
				recIdentificadores.id_frecuencia_tipo_personal,
				montoConcepto,
				fechaActual,
				'A');
		END IF;

	END LOOP;
	CLOSE curPersonal;

		
	return 0;
end;
$_$;


--
-- TOC entry 648 (class 1255 OID 3240641)
-- Name: asignar_utiles(integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION asignar_utiles(integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;	
	pProceso ALIAS FOR $2;

	curFamiliar refcursor;
	recFamiliar record;

	fechaActual date;
	cantidadMaxima int4;
	cantidadInsertar int4;
	cuentaFamiliar int4 = 0;
	montoFamiliar float8;
	montoConcepto float8;
        quienCobra varchar(1);

	idConceptoVariable int4;
	idUtiles int4;
	validado bool;
        inserto  bool;

  	recParametros RECORD;
        recConceptoUtiles record;
        recConceptoVariable record;
        CurConceptoUtiles CURSOR(pIdTipoPersonal int4) FOR
		SELECT  ctp.id_concepto_tipo_personal , 
	       		ctp.id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal  ctp, concepto  c 
		WHERE   ctp.id_concepto = c.id_concepto AND
                        c.cod_concepto = '4001' AND
			ctp.id_tipo_personal = pIdTipoPersonal;

  	curParametros CURSOR(pIdTipoPersonal int4)
  		FOR SELECT cantidad_beneficiarios, monto_utiles, quien_cobra, nivel_educativo
  		FROM parametroutiles 
  		WHERE id_tipo_personal = pIdTipoPersonal;


	recPersonal RECORD;
	curPersonal CURSOR (pIdTipoPersonal int4, pNivelEducativo varchar) 
		FOR SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, 
		       max(t.id_tipo_personal) as id_tipo_personal, MAX(p.sexo) as sexo
		FROM familiar f, personal p, trabajador  t 
		WHERE   t.id_tipo_personal = pIdTipoPersonal AND
			t.id_personal = p.id_personal AND
			t.estatus = 'A' AND
			t.id_personal = f.id_personal AND
			f.parentesco = 'H' AND
                        f.nivel_educativo=pNivelEducativo
		GROUP BY (p.id_personal);

BEGIN

-- Lee el conceptotipopersonal correspondiente a utiles	
	
        OPEN curConceptoUtiles(pIdTipoPersonal);
	LOOP
		FETCH curConceptoUtiles INTO recConceptoUtiles;
		EXIT WHEN NOT FOUND;
	
-- Verifica si esta asociado al tipo de persoal

	if recConceptoUtiles.id_concepto_tipo_personal is null or
           recConceptoUtiles.id_frecuencia_tipo_personal is null then
           return 10;
        end if;

-- Elimina los registros de utiles

        DELETE FROM utiles WHERE id_tipo_personal = pIdTipoPersonal;

-- Elimina el concepto variable

        DELETE FROM conceptovariable
             WHERE id_trabajador in (select id_trabajador from trabajador
                                       where id_tipo_personal = Pidtipopersonal  )
               AND id_concepto_tipo_personal = recConceptoUtiles.id_concepto_tipo_personal;

	fechaActual = current_date;
		

	idConceptoVariable = last_id_conceptovariable();
	idUtiles = last_id_utiles();
        inserto :=FALSE;

	OPEN curParametros(pIdTipoPersonal);
	LOOP
		FETCH curParametros INTO recParametros;
		EXIT WHEN NOT FOUND;

		cantidadMaxima = recParametros.cantidad_beneficiarios;
		montoFamiliar = recParametros.monto_utiles;

                quienCobra := 'A';
	        IF recParametros.quien_cobra = 'M' THEN
                    quienCobra := 'F';
                END IF;
                IF recParametros.quien_cobra = 'P' THEN
                    quienCobra := 'M';
                END IF;

-- Lee los trabajadores con sus familiares del nivel educativo correspondiente

		OPEN curPersonal (pIdTipoPersonal, recParametros.nivel_educativo);
		LOOP
			FETCH curPersonal INTO recPersonal;
			EXIT WHEN NOT FOUND;

                        raise notice 'CICLO personal';

			cuentaFamiliar = 0;
			
			validado = TRUE;

			IF quienCobra <> recPersonal.sexo AND 
				recParametros.quien_cobra <> 'A' THEN
				IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
					validado = TRUE;
				ELSE
					validado = FALSE;
				END IF;
			END IF;

			IF validado = TRUE THEN

				OPEN curFamiliar FOR 
					SELECT f.id_familiar, f.fecha_nacimiento,f.grado,f.sexo
					FROM familiar f
					WHERE f.id_personal = recPersonal.id_personal 
					AND f.parentesco = 'H' 
					AND f.nivel_educativo = recParametros.nivel_educativo;
-- Inserta en la tabla utiles
				LOOP
					
					FETCH curFamiliar INTO recFamiliar;
					EXIT WHEN NOT FOUND;
	
					IF (cuentaFamiliar < cantidadMaxima) THEN
                                           CuentaFamiliar = cuentaFamiliar + 1;
					   idUtiles = idUtiles + 1;
                                           INSERT INTO utiles (id_utiles, id_personal, 
						id_familiar, fecha_nacimiento, monto, 
						nivel_educativo, id_trabajador, id_tipo_personal,
                                                grado,sexo)
						VALUES (
							idUtiles,
							recPersonal.id_personal,
							recFamiliar.id_familiar,
							recFamiliar.fecha_nacimiento,
							montoFamiliar,
 							recParametros.nivel_educativo,
							recPersonal.id_trabajador,
							recPersonal.id_tipo_personal,
                                                        recFamiliar.grado,
                                                        recFamiliar.sexo);
                                 
                                       END IF;
					
				END LOOP;
				CLOSE curFamiliar;
	                        IF (pProceso = 'D') AND cuentaFamiliar > 0 THEN

-- Modo definitivo resgitra el concepto variable

                                   SELECT INTO recConceptoVariable id_concepto_tipo_personal
		                      FROM ConceptoVariable AS cv
                                       WHERE cv.id_trabajador = recPersonal.id_trabajador
                                         AND cv.id_concepto_tipo_personal=
                                           recconceptoutiles.id_concepto_tipo_personal;
                                   IF recConceptoVariable.id_concepto_tipo_personal is null then

	 		              montoConcepto = montoFamiliar * cuentaFamiliar;
			              idConceptoVariable = idConceptoVariable + 1;
			              INSERT INTO conceptovariable
			 	          (id_concepto_variable,
				           id_trabajador,
				           id_concepto_tipo_personal,
			   	           id_frecuencia_tipo_personal,
				           monto,
				           fecha_registro,
				           estatus)
			              VALUES (
				        idConceptoVariable,
				        recPersonal.id_trabajador,
				        recconceptoutiles.id_concepto_tipo_personal,
				        recconceptoutiles.id_frecuencia_tipo_personal,
				        montoConcepto,
				        fechaActual,
				        'A');
                                      inserto := TRUE;
                                  ELSE

                                     montoConcepto = montoFamiliar * cuentaFamiliar;
                                     UPDATE ConceptoVariable set monto=monto + montoConcepto
		                        WHERE id_trabajador = recPersonal.id_trabajador
                                          AND id_concepto_tipo_personal=
                                     recconceptoutiles.id_concepto_tipo_personal;
                                  END IF;
	                    END IF;  --definitivo
			END IF;  --validado
	
		END LOOP;
		CLOSE curPersonal;
	END LOOP;
	CLOSE curParametros;
      END LOOP;
      CLOSE curConceptoUtiles;
	
     IF (pProceso = 'D') AND inserto=TRUE THEN
            UPDATE identity set last = idConceptoVariable
              WHERE name ='ConceptoVariable';
     END IF;	
     return 0;
end;
$_$;


SET default_with_oids = false;

--
-- TOC entry 171 (class 1259 OID 3240643)
-- Name: banavih_result; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE banavih_result (
    dependencia text,
    nacionalidad text,
    cedula integer,
    apellido text,
    apellido2 text,
    nombre text,
    nombre2 text,
    idtp integer,
    tipopersonal text,
    fingreso date,
    fegreso date,
    unidadejecutora text,
    sueldobasico double precision,
    bonos double precision,
    alicuotavacacional double precision,
    alicuotafinanio double precision,
    total double precision
);


--
-- TOC entry 649 (class 1255 OID 3240649)
-- Name: banavihactivos(integer, integer, integer, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION banavihactivos(integer, integer, integer, text) RETURNS SETOF banavih_result
    LANGUAGE sql
    AS $_$
	select dependencia,nacionalidad,cedula, apellido,apellido2, nombre, nombre2,
	 idtp, tipopersonal, fingreso,fegreso,
	 unidadejecutora,
	SUM( sueldobasico) as sueldobasico, 
	SUM( bonos) as bonos, 
	(SUM( alicuotaVacacional)) as alicuotaVacacional,
	(SUM( alicuotaFinAno)) as alicuotaFinAnio,
	(SUM( sueldobasico)+
	(SUM( bonos))) as total
	FROM (
		--OBTENIENDO SUELDO BASICO Y ALICUOTAS--
		select T4.cedula as cedula,T5.nacionalidad as nacionalidad,T5.primer_apellido as apellido,T5.segundo_apellido as apellido2,
		T5.primer_nombre as nombre,T5.segundo_nombre as nombre2, T7.descripcion_cargo as cargo,
		T8.nombre as  dependencia, T9.nombre as tipopersonal,
		T9.id_tipo_personal as idtp,
		T2.cod_concepto,T3.descripcion as concepto ,
		T10.cod_unidad_ejecutora as unidadejecutora,
		(SUM(T1.monto_asigna)) as sueldobasico,
		(SUM(T1.monto_asigna))/30*(5) as alicuotaVacacional, 
		(SUM(T1.monto_asigna))/30*7.5 as alicuotaFinAno, 
		0 as bonos ,T4.fecha_ingreso as fingreso,T4.fecha_egreso as fegreso
		from historicoquincena T1,conceptotipopersonal T2, concepto T3, trabajador T4,
		personal T5,
		historiconomina T6, cargo T7, dependencia T8, tipopersonal t9, unidadejecutora T10
		where 
		T4.id_trabajador=T1.id_trabajador 
		and T4.cedula=T5.cedula
		and T4.id_trabajador=T6.id_trabajador
		and T4.id_cargo=T7.id_cargo
		and T4.id_dependencia=T8.id_dependencia
		and T6.id_tipo_personal=T9.id_tipo_personal
		and T6.id_tipo_personal=T2.id_tipo_personal
		and T1.id_concepto_tipo_personal=T2.id_concepto_tipo_personal 
		and T2.id_concepto=T3.id_concepto 
		and (T3.cod_concepto  ='0001' or T3.cod_concepto='0004')
		and T1.anio=$2
		and T1.anio=T6.anio
		and T1.mes=$1
		and T1.mes=T6.mes
                and T1.numero_nomina=0
and T6.numero_nomina=0
		and T1.semana_quincena in (1,2)
		and T1.semana_quincena=T6.semana_quincena
		and (T4.fecha_egreso is null or T4.fecha_egreso >= CAST( $4 AS DATE) )

		and  T6.id_unidad_ejecutora = T10.id_unidad_ejecutora
		GROUP BY T4.cedula,nacionalidad,apellido,apellido2,T5.primer_nombre,nombre2,cargo,dependencia,tipopersonal,idtp,
		T2.cod_concepto,T3.descripcion,T4.fecha_ingreso,fegreso,T10.cod_unidad_ejecutora

		UNION

		---OBTENIENDO LOS OTROS CONCEPTOS QUE SON PARTE DEL SUELDO INTEGRAL 
		---COMO PRIMAS,ETC---
		select T4.cedula as cedula,T5.nacionalidad as nacionalidad,T5.primer_apellido as apellido,T5.segundo_apellido as apellido2,
		T5.primer_nombre as nombre,T5.segundo_nombre as nombre2, T7.descripcion_cargo as cargo,
		T8.nombre as  dependencia, T9.nombre as tipopersonal,
		T9.id_tipo_personal as idtp,
		T2.cod_concepto,T3.descripcion as concepto,
		T10.cod_unidad_ejecutora as unidadejecutora,
		0 as sueldobasico,
		0 as alicuotaVacacional, 
		0 as alicuotaFinAno, 
		SUM(T1.monto_asigna) as bonos, 
		T4.fecha_ingreso as fingreso,T4.fecha_egreso as fegreso
		from historicoquincena T1,conceptotipopersonal T2, concepto T3, trabajador T4, 
		personal T5,
		historiconomina T6, cargo T7, dependencia T8, tipopersonal t9, unidadejecutora T10
		where 
		T1.id_trabajador=T4.id_trabajador
		and T1.id_trabajador=T6.id_trabajador
		and T4.id_cargo=T7.id_cargo
		and T4.id_dependencia=T8.id_dependencia
		and T6.id_tipo_personal=T9.id_tipo_personal
		and T6.id_tipo_personal=T2.id_tipo_personal
		and T4.cedula=T5.cedula
		and T1.id_concepto_tipo_personal=T2.id_concepto_tipo_personal 
		and T2.id_concepto=T3.id_concepto 
		and T1.anio=$2
		and T1.anio=T6.anio
		and T1.mes=$1
		and T1.mes=T6.mes
                and T1.numero_nomina=0
and T6.numero_nomina=0
		and (T4.fecha_egreso is null or T4.fecha_egreso >= CAST( $4 AS DATE) )


		and T3.sueldo_integral='S'
		and T3.cod_concepto NOT IN ('0001','0004','5000','1500','1600','1602')
	and T1.semana_quincena in (1,2)
		and T1.semana_quincena=T6.semana_quincena
		and  T6.id_unidad_ejecutora = T10.id_unidad_ejecutora
GROUP BY T4.cedula,nacionalidad,apellido,apellido2,T5.primer_nombre,nombre2,cargo,dependencia,tipopersonal,idtp,
		T2.cod_concepto,T3.descripcion,T4.fecha_ingreso,fegreso,T10.cod_unidad_ejecutora
	) as banavihfijosactivo
	where idtp = $3
	GROUP BY  dependencia,nacionalidad,cedula, apellido,apellido2, nombre,nombre2, tipopersonal,idtp , fingreso,fegreso,unidadejecutora
	ORDER BY  dependencia,apellido,nombre;
$_$;


--
-- TOC entry 655 (class 1255 OID 3240650)
-- Name: banavihegresados(integer, integer, integer, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION banavihegresados(integer, integer, integer, text, text) RETURNS SETOF banavih_result
    LANGUAGE sql
    AS $_$
	select dependencia,nacionalidad,cedula, apellido,apellido2, nombre, nombre2,
	 idtp, tipopersonal, fingreso,fegreso,
	 unidadejecutora,
	SUM( sueldobasico) as sueldobasico, 
	SUM( bonos) as bonos, 
	(SUM( alicuotaVacacional)) as alicuotaVacacional,
	(SUM( alicuotaFinAno)) as alicuotaFinAnio,
	(SUM( sueldobasico)+
	(SUM( bonos))) as total
	FROM (
		--OBTENIENDO SUELDO BASICO Y ALICUOTAS--
		select T4.cedula as cedula,T5.nacionalidad as nacionalidad,T5.primer_apellido as apellido,T5.segundo_apellido as apellido2,
		T5.primer_nombre as nombre,T5.segundo_nombre as nombre2, T7.descripcion_cargo as cargo,
		T8.nombre as  dependencia, T9.nombre as tipopersonal,
		T9.id_tipo_personal as idtp,
		T2.cod_concepto,T3.descripcion as concepto ,
		T10.cod_unidad_ejecutora as unidadejecutora,
		(SUM(T1.monto_asigna)) as sueldobasico,
		(SUM(T1.monto_asigna))/30*(5) as alicuotaVacacional, 
		(SUM(T1.monto_asigna))/30*7.5 as alicuotaFinAno, 
		0 as bonos ,T4.fecha_ingreso as fingreso,T4.fecha_egreso as fegreso
		from historicoquincena T1,conceptotipopersonal T2, concepto T3, trabajador T4,
		personal T5,
		historiconomina T6, cargo T7, dependencia T8, tipopersonal t9, unidadejecutora T10
		where 
		T4.id_trabajador=T1.id_trabajador 
		and T4.cedula=T5.cedula
		and T4.id_trabajador=T6.id_trabajador
		and T4.id_cargo=T7.id_cargo
		and T4.id_dependencia=T8.id_dependencia
		and T6.id_tipo_personal=T9.id_tipo_personal
		and T6.id_tipo_personal=T2.id_tipo_personal
		and T1.id_concepto_tipo_personal=T2.id_concepto_tipo_personal 
		and T2.id_concepto=T3.id_concepto 
		and (T3.cod_concepto  ='0001' or T3.cod_concepto='0004')
		and T1.anio=$2
		and T1.anio=T6.anio
		and T1.mes=$1
		and T1.mes=T6.mes
                and T1.numero_nomina=0
and T6.numero_nomina=0

		and T1.semana_quincena in (1,2)
		and T1.semana_quincena=T6.semana_quincena
		and T4.fecha_egreso >= CAST( $4 AS DATE)
                and T4.fecha_egreso < CAST( $5 AS DATE)
		and  T6.id_unidad_ejecutora = T10.id_unidad_ejecutora
		GROUP BY T4.cedula,nacionalidad,apellido,apellido2,T5.primer_nombre,nombre2,cargo,dependencia,tipopersonal,idtp,
		T2.cod_concepto,T3.descripcion,T4.fecha_ingreso,fegreso,T10.cod_unidad_ejecutora

		UNION

		---OBTENIENDO LOS OTROS CONCEPTOS QUE SON PARTE DEL SUELDO INTEGRAL 
		---COMO PRIMAS,ETC---
		select T4.cedula as cedula,T5.nacionalidad as nacionalidad,T5.primer_apellido as apellido,T5.segundo_apellido as apellido2,
		T5.primer_nombre as nombre,T5.segundo_nombre as nombre2, T7.descripcion_cargo as cargo,
		T8.nombre as  dependencia, T9.nombre as tipopersonal,
		T9.id_tipo_personal as idtp,
		T2.cod_concepto,T3.descripcion as concepto,
		T10.cod_unidad_ejecutora as unidadejecutora,
		0 as sueldobasico,
		0 as alicuotaVacacional, 
		0 as alicuotaFinAno, 
		SUM(T1.monto_asigna) as bonos, 
		T4.fecha_ingreso as fingreso,T4.fecha_egreso as fegreso
		from historicoquincena T1,conceptotipopersonal T2, concepto T3, trabajador T4, 
		personal T5,
		historiconomina T6, cargo T7, dependencia T8, tipopersonal t9, unidadejecutora T10
		where 
		T1.id_trabajador=T4.id_trabajador
		and T1.id_trabajador=T6.id_trabajador
		and T4.id_cargo=T7.id_cargo
		and T4.id_dependencia=T8.id_dependencia
		and T6.id_tipo_personal=T9.id_tipo_personal
		and T6.id_tipo_personal=T2.id_tipo_personal
		and T4.cedula=T5.cedula
		and T1.id_concepto_tipo_personal=T2.id_concepto_tipo_personal 
		and T2.id_concepto=T3.id_concepto 
		and T1.anio=$2
		and T1.anio=T6.anio
		and T1.mes=$1
		and T1.mes=T6.mes
                and T1.numero_nomina=0
and T6.numero_nomina=0
		and T4.fecha_egreso >= CAST( $4 AS DATE)
                and T4.fecha_egreso < CAST( $5 AS DATE)


		and T3.sueldo_integral='S'
		and T3.cod_concepto NOT IN ('0001','0004','5000','1500','1600','1602')
	and T1.semana_quincena in (1,2)
		and T1.semana_quincena=T6.semana_quincena
		and  T6.id_unidad_ejecutora = T10.id_unidad_ejecutora
GROUP BY T4.cedula,nacionalidad,apellido,apellido2,T5.primer_nombre,nombre2,cargo,dependencia,tipopersonal,idtp,
		T2.cod_concepto,T3.descripcion,T4.fecha_ingreso,fegreso,T10.cod_unidad_ejecutora
	) as banavihfijosactivo
	where idtp = $3
	GROUP BY  dependencia,nacionalidad,cedula, apellido,apellido2, nombre,nombre2, tipopersonal,idtp , fingreso,fegreso,unidadejecutora
	ORDER BY  dependencia,apellido,nombre;
$_$;


--
-- TOC entry 656 (class 1255 OID 3240651)
-- Name: bisiesto(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION bisiesto(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
   panio alias for $1;
   
begin
      if panio in (2080,2076,2072,2068,2064,2060,2056,2052,2048,2044,2040,2036,2032,2028,2024,2020,2016,2012,2008,2004,2000,1996,1992,1988,1984,1980,1976,1972) then
         return 1;
      else
         return 0;
      end if;
end;
$_$;


--
-- TOC entry 657 (class 1255 OID 3240652)
-- Name: borrar_conceptofijo(integer, date, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION borrar_conceptofijo(integer, date, date) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptofijo where fecha_eliminar between $2 and $3
		and id_concepto_fijo in 
		(select id_concepto from ultimanomina where id_grupo_nomina = $1 
		and numero_nomina=0)

$_$;


--
-- TOC entry 658 (class 1255 OID 3240653)
-- Name: calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pAnio alias for $2;
	pMes alias for $3;
	pProceso alias for $4;
	pUsuario alias for $5;
	pPeriodicidad alias for $6;
	pMetodo alias for $7;
	pRegistro alias for $8;
	pGrabar alias for $9;
	pFecha alias for $10;
	pIdConcepto alias for $11;
	maxpaso int4 := 0;
        pasofueratab int4 := 0;
        montopaso float8 :=0;
        EstatusP varchar(2) = ' ';


	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select distinct t.id_trabajador, t.paso, c.grado,
		c.sub_grado, tu.jornada_diaria, tu.jornada_semanal,
		tp.formula_integral, tp.formula_semanal, c.id_cargo,
		e.id_resultado_evaluacion, 
		(e.resultado_competencias + e.resultado_objetivos) as total_evaluacion, 
		e.porcentaje_aumento, mc.id_tabulador, e.numero_pasos, 
		e.monto_aumentar, e.monto_unico
		from trabajador t, evaluacion e, cargo c, manualcargo mc,
		tipopersonal tp, turno tu
		where t.id_tipo_personal = pIdTipoPersonal 
		and t.id_personal = e.id_personal
		and t.id_cargo = c.id_cargo
		and c.id_manual_cargo = mc.id_manual_cargo
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
		and (e.porcentaje_aumento > 0 or e.numero_pasos >0 
			or e.monto_aumentar >0 or monto_unico >0)
		and t.estatus = 'A'
		and e.anio = pAnio
		and e.mes = pMes;


	recConceptoEvaluacion record;
	curConceptoEvaluacion cursor (pIdTrabajador int4)
		for select monto, fp.cod_frecuencia_pago, 
		c.sueldo_basico, c.compensacion, c.ajuste_sueldo
		from conceptoevaluacion ce, conceptofijo cf, 
		frecuenciatipopersonal ftp, frecuenciapago fp, 
		concepto c, conceptotipopersonal ctp
		where cf.id_trabajador = pIdTrabajador
		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;


	recTabulador record;
	curTabulador cursor (pIdTabulador int4, pMonto float8, pGrado int4, pSubgrado int4)
		for select min(monto) as monto, min(paso) as paso
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and monto >= pMonto
		and grado = pGrado
		and sub_grado = pSubgrado;


	recTabuladorNuevoPaso record;
	curTabuladorNuevoPaso cursor (pIdTabulador int4, pPaso int4, pGrado int4, pSubgrado int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and paso = pPaso
		and grado = pGrado
		and sub_grado = pSubgrado;


	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.monto,   
		c.sueldo_basico, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');


	recCompensacion record;
	curCompensacion cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.compensacion = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recSueldo record;
	curSueldo cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.sueldo_basico = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recOtroConcepto record;
	curOtroConcepto cursor (pIdConceptoTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp,  
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recConceptosRecalcular record;
	curConceptosRecalcular cursor (pIdTrabajador int4, pIdConcepto int4)
		for select distinct fp.cod_frecuencia_pago, cf.unidades,
		'F' as tipo_concepto, ctp.tipo, cf.id_concepto_tipo_personal, ctp.tope_minimo, 
		ctp.valor, ctp.tope_maximo, cf.id_concepto_fijo
		from conceptofijo cf, conceptotipopersonal ctp, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where cf.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and ctp.tipo in ('P', 'I')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and cf.id_concepto_tipo_personal in (select id_concepto_tipo_personal
		from conceptoasociado where id_concepto_asociar=pIdConcepto);


	montoSueldoBasico float8 := 0;
	montoCompensacion float8 := 0;
	montoAjusteSueldo float8 := 0;
	montoOtros float8 := 0;
	montoA float8 := 0;
	montoB float8 := 0;
	sueldoNuevo float8 :=0;
	compensacionNueva float8 := 0;
	ajusteEscala float8 := 0;
	pasoNuevo int4 :=0;
	sueldoEscala float8 :=0;
	montoAumentar float8:= 0;
	id int4 := 0;
	aumentoDefinitivo float8 := 0;
        montoRetroactivo float8 := 0;
	idConceptoVariable int4 := 0;
	idConceptoFijo int4 := 0;
	idSueldo int4 := 0;
	idCompensacion int4 := 0;
	montoConceptoCalculado float8 := 0;

begin
	-- Errores
	-- 10 - Se escogiÃ³ el registro en compensacion 
	-- 	y no existe el Concepto 0020 para el tipo de personal
	-- 11 - Se escogiÃ³ el registro en otro concepto 
	-- 	y no existe el Concepto para el tipo de personal

	-- 12 - No existe el concepto sueldo para el tipo de personal

	open curCompensacion (pIdTipoPersonal);
	fetch curCompensacion into recCompensacion;
	if recCompensacion.cod_frecuencia_pago is null then
		return 10;
	end if;
	idCompensacion := recCompensacion.id_concepto_tipo_personal; 

	open curSueldo (pIdTipoPersonal);
	fetch curSueldo into recSueldo;
	if recSueldo.cod_frecuencia_pago is null then
		return 12;
	end if;
	idSueldo := recSueldo.id_concepto_tipo_personal;

	delete from aumentoevaluacion where id_tipo_personal = pIdTipoPersonal;

	if pRegistro = 'C' or pRegistro = 'A' then
		--open curCompensacion (pIdTipoPersonal);
		--fetch curCompensacion into recCompensacion;
		--if recCompensacion.cod_frecuencia_pago is null then
		--	return 10;
		--end if;

	elsif pRegistro = 'O' and pProceso = '2'then
		open curOtroConcepto (pIdConcepto);
		fetch curOtroConcepto into recOtroConcepto;
		if recOtroConcepto.cod_frecuencia_pago is null then
			return 11;
		end if;
	end if;

	

	open curTrabajadores(pIdTipoPersonal, pAnio, pMes);
	raise notice 'pasa 1';
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;
		raise notice 'pasa 2';
		montoSueldoBasico := 0;
		montoCompensacion := 0;
		montoAjusteSueldo := 0;
		montoOtros := 0;
		montoA := 0;
		montoB := 0;
		sueldoNuevo :=0;
		compensacionNueva := 0;
		ajusteEscala := 0;
		pasoNuevo :=0;
		sueldoEscala :=0;
		montoAumentar :=0;
		aumentoDefinitivo := 0;
		montoRetroactivo := 0;
                maxpaso := 0;
                pasofueratab := 0;
                montopaso:= 0;
		EstatusP := '  ';


		open curConceptoEvaluacion(recTrabajadores.id_trabajador);
		loop			
			fetch curConceptoEvaluacion into recConceptoEvaluacion;	
			exit when not found;	

			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then
                                montoB := recConceptoEvaluacion.monto*2;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then
				montoB := (recConceptoEvaluacion.monto/7)*30;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then
				montoB := (recConceptoEvaluacion.monto*4);
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 
				recConceptoEvaluacion.cod_frecuencia_pago = 2 or 
				recConceptoEvaluacion.cod_frecuencia_pago > 4 then									
				montoB := recConceptoEvaluacion.monto;
			end if;

			montoA := montoA + montoB;

		end loop;
		close curConceptoEvaluacion;

		montoB := 0;
		open curPromedios(recTrabajadores.id_trabajador);
		loop			
			fetch curPromedios into recPromedios;	
			exit when not found;	

			if recPromedios.cod_frecuencia_pago = 3 then
                                montoB := recPromedios.monto*2;
			elsif recPromedios.cod_frecuencia_pago = 4 then
				montoB := (recPromedios.monto/7)*30;
			elsif recPromedios.cod_frecuencia_pago = 10 then
				montoB := (recPromedios.monto*4);
			elsif recPromedios.cod_frecuencia_pago = 1 or 
				recPromedios.cod_frecuencia_pago = 2 or 
				recPromedios.cod_frecuencia_pago > 4 then									
				montoB := recPromedios.monto;
			end if;

			if recPromedios.sueldo_basico = 'S' then
				montoSueldoBasico := montoSueldoBasico + montoB;
			elsif recPromedios.compensacion = 'S' then
				montoCompensacion := montoCompensacion + montoB;
			elsif recPromedios.ajuste_sueldo = 'S' then
				montoAjusteSueldo := montoAjusteSueldo + montoB;
			else 
				montoOtros := montoOtros + montoB;
			end if;

		end loop;
		close curPromedios;
		sueldoNuevo := montoSueldoBasico;
		compensacionNueva := montoCompensacion;
		pasoNuevo := recTrabajadores.paso;
		

		if pMetodo = 'P' then
			montoAumentar := montoA * (recTrabajadores.porcentaje_aumento/100);
		elsif pMetodo = 'M' then
			montoAumentar := recTrabajadores.monto_aumentar;
		elsif pMetodo = 'U' then
			montoAumentar := recTrabajadores.monto_unico;
		elsif pMetodo = 'N' then
			pasoNuevo := recTrabajadores.paso + recTrabajadores.numero_pasos;
			open curTabuladorNuevoPaso(recTrabajadores.id_tabulador, pasoNuevo, 
				recTrabajadores.grado, recTrabajadores.sub_grado);
			fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;
			if recTabuladorNuevoPaso.monto is not null then				
				compensacionNueva := recTabuladorNuevoPaso.monto - montoSueldoBasico;
				aumentoDefinitivo := compensacionNueva - montoCompensacion;
			
			else
				EstatusP := 'FE';
                                                       select de.paso, de.monto into maxpaso, montopaso from detalletabulador de
                                                             where de.id_tabulador = recTrabajadores.id_tabulador
                                                               and de.grado = recTrabajadores.grado
                                                               and de.sub_grado = recTrabajadores.sub_grado
                                                               and de.paso = (select max(paso) from detalletabulador  
                                                                                        where id_tabulador =  recTrabajadores.id_tabulador
                                                                                          and grado = recTrabajadores.grado
                                                                                          and sub_grado =recTrabajadores.sub_grado);
                                                        
                                                          pasofueratab := maxpaso - recTrabajadores.paso;
                                                          pasofueratab := recTrabajadores.numero_pasos - pasofueratab;
							aumentoDefinitivo := montopaso; 
							FOR i IN 1..pasofueratab LOOP
							  iF montoSueldoBasico > montopaso THEN
								aumentoDefinitivo := aumentoDefinitivo + ((aumentoDefinitivo   * 2.5) / 100);
							  else
								aumentoDefinitivo := aumentoDefinitivo + ((aumentoDefinitivo   * 2.5) / 100);
							  end if;
							END LOOP;

				pasoNuevo := maxpaso;
				compensacionNueva := aumentoDefinitivo - montoSueldoBasico;
				aumentoDefinitivo := compensacionNueva - montoCompensacion;


			end if;
			close curTabuladorNuevoPaso;
		end if;

		if pMetodo = 'P' or pMetodo = 'M' then
			aumentoDefinitivo := montoAumentar;
			if pRegistro = 'S' then
				sueldoNuevo := sueldoNuevo + montoAumentar;
			elsif pRegistro = 'C' then
				compensacionNueva := compensacionNueva + montoAumentar;
			elsif pRegistro = 'A' then
				compensacionNueva := compensacionNueva + montoAumentar;
				sueldoEscala := montoSueldoBasico + compensacionNueva;
				open curTabulador(recTrabajadores.id_tabulador, sueldoEscala, 
					recTrabajadores.grado, recTrabajadores.sub_grado);
				fetch curTabulador into recTabulador;
				if recTabulador.monto is not null then				
					compensacionNueva := recTabulador.monto - montoSueldoBasico;
					ajusteEscala := recTabulador.monto;
					pasoNuevo := recTabulador.paso;
					aumentoDefinitivo := ajusteEscala - (montoSueldoBasico+montoCompensacion);
				end if;
				close curTabulador;
			end if;
		end if;

		id := last_id_aumentoevaluacion()+1;
		raise notice 'id %',id;
		if id is null then 
			id := 1;
		end if;

		--montoRetroactivo := (aumentoDefinitivo / 30) * pDiasRetroactivo;
		perform  add_aumentoevaluacion(
			id,
			pAnio,
			pMes,
			pFecha,
			recTrabajadores.total_evaluacion,
			recTrabajadores.grado,
			recTrabajadores.paso,
			convert_2_decimal(montoSueldoBasico),
			convert_2_decimal(montoAjusteSueldo),
			convert_2_decimal(montoCompensacion),
			convert_2_decimal(montoOtros),
			convert_2_decimal(montoA),
			convert_2_decimal(sueldoNuevo),
			  convert_2_decimal(compensacionNueva),
			  convert_2_decimal(montoAumentar),
			convert_2_decimal(aumentoDefinitivo),
			pasoNuevo,
			  recTrabajadores.porcentaje_aumento,
			  convert_2_decimal(montoAumentar),
			convert_2_decimal(ajusteEscala),
                        0,
                        0, 
			  recTrabajadores.id_trabajador,
			  recTrabajadores.id_resultado_evaluacion,
			  pIdTipoPersonal,
			  EstatusP);	

			if pRegistro = 'S' then
				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);
				end if;
				--- Actualiza el monto proyetado del concepto sueldo
				update conceptofijo set monto_proyectado = sueldoNuevo 
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idSueldo;
	
				--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
				open curConceptosRecalcular(recTrabajadores.id_trabajador, idSueldo);
				loop
					fetch curConceptosRecalcular into recConceptosRecalcular;
					exit when not found;
					montoConceptoCalculado:= calcular_concepto_proyectado(
					recConceptosRecalcular.id_concepto_tipo_personal,
					recTrabajadores.id_trabajador,	
					recConceptosRecalcular.unidades,
					recConceptosRecalcular.tipo,
					recConceptosRecalcular.cod_frecuencia_pago,
					recTrabajadores.jornada_diaria,
					recTrabajadores.jornada_semanal,
					recTrabajadores.formula_integral,
					recTrabajadores.formula_semanal,	
					recTrabajadores.id_cargo,	
					recConceptosRecalcular.valor,
					recConceptosRecalcular.tope_minimo,
					recConceptosRecalcular.tope_maximo);
					if recConceptosRecalcular.tipo_concepto = 'F' then
						update conceptofijo set monto_proyectado = montoConceptoCalculado
							where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
					end if;
				end loop;
				close curConceptosRecalcular;
			elsif pRegistro = 'C' or  pRegistro = 'A' then
				if montoCompensacion > 0 and compensacionNueva <> 0 then 
					if recCompensacion.cod_frecuencia_pago = 3 then
						compensacionNueva := convert_2_decimal(compensacionNueva/2);
					elsif recCompensacion.cod_frecuencia_pago = 4 then
						compensacionNueva := convert_2_decimal(compensacionNueva/30*7);
					end if;						
	
					update conceptofijo set monto_proyectado = compensacionNueva
					where id_trabajador = recTrabajadores.id_trabajador
					and id_concepto_tipo_personal = idCompensacion;
					--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
					open curConceptosRecalcular(recTrabajadores.id_trabajador, idCompensacion);
					loop
						fetch curConceptosRecalcular into recConceptosRecalcular;
						exit when not found;
						perform calcular_concepto_proyectado(
						recConceptosRecalcular.id_concepto_tipo_personal,
						recTrabajadores.id_trabajador,	
						recConceptosRecalcular.unidades,
						recConceptosRecalcular.tipo,
						recConceptosRecalcular.cod_frecuencia_pago,
						recTrabajadores.jornada_diaria,
						recTrabajadores.jornada_semanal,
						recTrabajadores.formula_integral,
						recTrabajadores.formula_semanal,	
						recTrabajadores.id_cargo,	
						recConceptosRecalcular.valor,
						recConceptosRecalcular.tope_minimo,
						recConceptosRecalcular.tope_maximo);
		
						if recConceptosRecalcular.tipo = 'F' then
							update conceptofijo set monto_proyectado = montoConceptoCalculado
								where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
						end if;
					end loop;
					close curConceptosRecalcular;
				end if;
			end if;

		if pProceso = '2' then			
			if pRegistro = 'S' then
				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo*2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo*30/7);
				end if;

				update trabajador set sueldo_basico = sueldoNuevo 
					where id_trabajador = recTrabajadores.id_trabajador;

				if pPeriodicidad = 'Q' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
				elsif pPeriodicidad = 'S' then
					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);
				end if;

				update conceptofijo set monto_anterior = monto, monto = sueldoNuevo 
					where id_trabajador = recTrabajadores.id_trabajador
					and id_concepto_tipo_personal = 
					(select ctp.id_concepto_tipo_personal 
					from conceptotipopersonal ctp, concepto c
					where ctp.id_concepto = c.id_concepto
					and c.sueldo_basico = 'S' limit 1);

			elsif pRegistro = 'C' or  pRegistro = 'A' then
				--if recCompensacion.cod_frecuencia_pago = 3 then
				--	compensacionNueva := convert_2_decimal(compensacionNueva/2);
				--elsif recCompensacion.cod_frecuencia_pago = 4 then
				--	compensacionNueva := convert_2_decimal(compensacionNueva/30*7);
				--end if;

				if montoCompensacion > 0 then
					update conceptofijo set monto_anterior = monto, monto = compensacionNueva
						where id_trabajador = recTrabajadores.id_trabajador
						and id_concepto_tipo_personal = recCompensacion.id_concepto_tipo_personal;
				else
					idConceptoFijo := last_id_conceptofijo()+1;
					if idConceptoFijo is null then
						idConceptoFijo = 1;
					end if;

					perform add_conceptofijo(
						idConceptoFijo,
						recTrabajadores.id_trabajador,
						recCompensacion.id_concepto_tipo_personal,
						recCompensacion.id_frecuencia_tipo_personal,
						0,
						convert_2_decimal(compensacionNueva),
						pFecha,
						pFecha,
						null,
						null,
						'A',
						'N',
						0,
						0,
						0);

				end if;

			else

				if recOtroConcepto.cod_frecuencia_pago = 3 then
					montoAumentar := convert_2_decimal(montoAumentar/2);
				elsif recOtroConcepto.cod_frecuencia_pago = 4 then
					montoAumentar := convert_2_decimal(montoAumentar/30*7);
				end if;

				if pGrabar = 'V' then

					idConceptoVariable := last_id_conceptovariable()+1;
					if idConceptoVariable is null then
						idConceptoVariable = 1;
					end if;

					perform add_conceptovariable(
						idConceptoVariable,
						recTrabajadores.id_trabajador,
						pIdConcepto,
						recOtroConcepto.id_frecuencia_tipo_personal,
						0,
						montoAumentar,
						pFecha,
						null,
						'A',
						0,0);
				else

					idConceptoFijo := last_id_conceptofijo()+1;
					if idConceptoFijo is null then
						idConceptoFijo = 1;
					end if;
					perform add_conceptofijo(
						idConceptoFijo,
						recTrabajadores.id_trabajador,
						pIdConcepto,
						recOtroConcepto.id_frecuencia_tipo_personal,
						0,
						montoAumentar,
						pFecha,
						pFecha,
						null,
						null,
						'A',
						'N',
						0,
						0,
						0);
				end if;
			end if;			
		end if;

	end loop;

	close curTrabajadores;

	



	delete from identity;



	return 1;

end;

$_$;


--
-- TOC entry 659 (class 1255 OID 3240655)
-- Name: calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_aumento_evaluacion(integer, integer, integer, character varying, character varying, character varying, character varying, character varying, character varying, date, integer, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;

	pAnio alias for $2;

	pMes alias for $3;

	pProceso alias for $4;

	pUsuario alias for $5;

	pPeriodicidad alias for $6;

	pMetodo alias for $7;

	pRegistro alias for $8;

	pGrabar alias for $9;

	pFecha alias for $10;

	pIdConcepto alias for $11;

	pPagarRetroactivo alias for $12;

	pDiasRetroactivo alias for $13;

	pIdConceptoRetroactivo alias for $14;

	pIdFrecuenciaRetroactivo alias for $15;

	



	recTrabajadores record;

	curTrabajadores cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)

		for select distinct t.id_trabajador, t.paso, c.grado, c.sub_grado,

		e.id_resultado_evaluacion, 

		(e.resultado_competencias + e.resultado_objetivos) as total_evaluacion, 

		e.porcentaje_aumento, mc.id_tabulador, e.numero_pasos, 

		e.monto_aumentar, e.monto_unico

		from trabajador t, evaluacion e, cargo c, manualcargo mc

		where t.id_tipo_personal = pIdTipoPersonal 

		and t.id_personal = e.id_personal

		and t.id_cargo = c.id_cargo

		and c.id_manual_cargo = mc.id_manual_cargo

		and (e.porcentaje_aumento > 0 or e.numero_pasos >0 

			or e.monto_aumentar >0 or monto_unico >0)

		and t.estatus = 'A'

		and e.anio = pAnio

		and e.mes = pMes;



	recConceptoEvaluacion record;

	curConceptoEvaluacion cursor (pIdTrabajador int4)

		for select monto, fp.cod_frecuencia_pago, 

		c.sueldo_basico, c.compensacion, c.ajuste_sueldo

		from conceptoevaluacion ce, conceptofijo cf, 

		frecuenciatipopersonal ftp, frecuenciapago fp, 

		concepto c, conceptotipopersonal ctp

		where cf.id_trabajador = pIdTrabajador

		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal

		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal

		and ctp.id_concepto = c.id_concepto

		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	recTabulador record;

	curTabulador cursor (pIdTabulador int4, pMonto float8, pGrado int4, pSubgrado int4)

		for select min(monto) as monto, min(paso) as paso

		from detalletabulador 

		where id_tabulador = pIdTabulador

		and monto => pMonto

		and grado = pGrado

		and sub_grado = pSubgrado;



	recTabuladorNuevoPaso record;

	curTabuladorNuevoPaso cursor (pIdTabulador int4, pPaso int4, pGrado int4, pSubgrado int4)

		for select monto

		from detalletabulador 

		where id_tabulador = pIdTabulador

		and paso = pPaso

		and grado = pGrado

		and sub_grado = pSubgrado;



	recPromedios record;

	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.monto,   

		c.sueldo_basico, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo

		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 

		concepto c, frecuenciapago fp

		where

		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal

		and ctp.id_concepto = c.id_concepto

		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago

		and ctp.cod_concepto < '5000'

		and cf.id_trabajador = key1

		and (c.sueldo_basico = 'S' 

		or c.compensacion = 'S' 

		or c.primas_trabajador = 'S' 

		or c.primas_cargo = 'S' 

		or c.ajuste_sueldo= 'S');



	recCompensacion record;

	curCompensacion cursor (pIdTipoPersonal int4) 

		for select distinct fp.cod_frecuencia_pago, 

		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 

		from conceptotipopersonal ctp, concepto c, 

		frecuenciatipopersonal ftp, frecuenciapago fp

		where ctp.id_concepto = c.id_concepto

		and c.cod_concepto = '0020'

		and ctp.id_tipo_personal = pIdTipoPersonal

		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	recOtroConcepto record;

	curOtroConcepto cursor (pIdConceptoTipoPersonal int4) 

		for select distinct fp.cod_frecuencia_pago, ftp.id_frecuencia_tipo_personal 

		from conceptotipopersonal ctp,  

		frecuenciatipopersonal ftp, frecuenciapago fp

		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal

		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal

		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;



	montoSueldoBasico float8 := 0;

	montoCompensacion float8 := 0;

	montoAjusteSueldo float8 := 0;

	montoOtros float8 := 0;

	montoA float8 := 0;

	montoB float8 := 0;

	sueldoNuevo float8 :=0;

	compensacionNueva float8 := 0;

	ajusteEscala float8 := 0;

	pasoNuevo int4 :=0;

	sueldoEscala float8 :=0;

	montoAumentar float8:= 0;

	id int4 := 0;

	aumentoDefinitivo float8 := 0;

        montoRetroactivo float8 := 0;

	idConceptoVariable int4 := 0;

	idConceptoFijo int4 := 0;

begin



	delete from aumentoevaluacion where id_tipo_personal = pIdTipoPersonal;



	-- Errores

	-- 10 - Se escogió el registro en compensacion 

	-- 	y no existe el Concepto 0020 para el tipo de personal

	-- 11 - Se escogió el registro en otro concepto 

	-- 	y no existe el Concepto para el tipo de personal



	if pRegistro = 'C' or pRegistro = 'A' then

		open curCompensacion (pIdTipoPersonal);

		fetch curCompensacion into recCompensacion;

		if recCompensacion.cod_frecuencia_pago is null then

			return 10;

		end if;

	elsif pRegistro = 'O' then

		open curOtroConcepto (pIdConceptoTipoPersonal);

		fetch curOtroConcepto into recOtroConcepto;

		if recOtroConcepto is null then

			return 11;

		end if;

	end if;

	

	open curTrabajadores(pIdTipoPersonal, pAnio, pMes);

	raise notice 'pasa 1';

	loop

		fetch curTrabajadores into recTrabajadores;	

		exit when not found;

		raise notice 'pasa 2';

		montoSueldoBasico := 0;

		montoCompensacion := 0;

		montoAjusteSueldo := 0;

		montoOtros := 0;

		montoA := 0;

		montoB := 0;

		sueldoNuevo :=0;

		compensacionNueva := 0;

		ajusteEscala := 0;

		pasoNuevo :=0;

		sueldoEscala :=0;

		montoAumentar :=0;

		aumentoDefinitivo := 0;

		montoRetroactivo := 0;



		open curConceptoEvaluacion(recTrabajadores.id_trabajador);

		loop			

			fetch curConceptoEvaluacion into recConceptoEvaluacion;	

			exit when not found;	

			

			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then

                                montoB := recConceptoEvaluacion.monto*2;

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then

				montoB := (recConceptoEvaluacion.monto/7)*30;

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then

				montoB := (recConceptoEvaluacion.monto*4);

			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 

				recConceptoEvaluacion.cod_frecuencia_pago = 2 or 

				recConceptoEvaluacion.cod_frecuencia_pago > 4 then									

				montoB := recConceptoEvaluacion.monto;

			end if;



			montoA := montoA + montoB;



			

			

		end loop;

		close curConceptoEvaluacion;

		

		montoB := 0;

		open curPromedios(recTrabajadores.id_trabajador);

		loop			

			fetch curPromedios into recPromedios;	

			exit when not found;	



			if recPromedios.cod_frecuencia_pago = 3 then

                                montoB := recPromedios.monto*2;

			elsif recPromedios.cod_frecuencia_pago = 4 then

				montoB := (recPromedios.monto/7)*30;

			elsif recPromedios.cod_frecuencia_pago = 10 then

				montoB := (recPromedios.monto*4);

			elsif recPromedios.cod_frecuencia_pago = 1 or 

				recPromedios.cod_frecuencia_pago = 2 or 

				recPromedios.cod_frecuencia_pago > 4 then									

				montoB := recPromedios.monto;

			end if;

	



			if recPromedios.sueldo_basico = 'S' then

				montoSueldoBasico := montoSueldoBasico + montoB;

			elsif recPromedios.compensacion = 'S' then

				montoCompensacion := montoCompensacion + montoB;

			elsif recPromedios.ajuste_sueldo = 'S' then

				montoAjusteSueldo := montoAjusteSueldo + montoB;

			else 

				montoOtros := montoOtros + montoB;

			end if;

			

		end loop;

		close curPromedios;

		sueldoNuevo := montoSueldoBasico;

		compensacionNueva := montoCompensacion;

		pasoNuevo := recTrabajadores.paso;



		

		if pMetodo = 'P' then

			montoAumentar := montoA * (recTrabajadores.porcentaje_aumento/100);

		elsif pMetodo = 'M' then

			montoAumentar := recTrabajadores.monto_aumentar;

		elsif pMetodo = 'U' then

			montoAumentar := recTrabajadores.monto_unico;

		elsif pMetodo = 'N' then

			pasoNuevo := recTrabajadores.paso + recTrabajadores.numero_pasos;

			open curTabuladorNuevoPaso(recTrabajadores.id_tabulador, pasoNuevo, 

				recTrabajadores.grado, recTrabajadores.sub_grado);

			fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;

			if recTabuladorNuevoPaso.monto is not null then				

				compensacionNueva := recTabuladorNuevoPaso.monto - montoSueldoBasico;

				aumentoDefinitivo := compensacionNueva - montoCompensacion;

			end if;

			close curTabuladorNuevoPaso;

		end if;



		

		if pMetodo = 'P' or pMetodo = 'M' then

			aumentoDefinitivo := montoAumentar;

			if pRegistro = 'S' then

				sueldoNuevo := sueldoNuevo + montoAumentar;

			elsif pRegistro = 'C' then

				compensacionNueva := compensacionNueva + montoAumentar;

			elsif pRegistro = 'A' then

				compensacionNueva := compensacionNueva + montoAumentar;

				sueldoEscala := montoSueldoBasico + compensacionNueva;

				open curTabulador(recTrabajadores.id_tabulador, sueldoEscala, 

					recTrabajadores.grado, recTrabajadores.sub_grado);

				fetch curTabulador into recTabulador;

				if recTabulador.monto is not null then				

					compensacionNueva := recTabulador.monto - montoSueldoBasico;

					ajusteEscala := recTabulador.monto;

					pasoNuevo := recTabulador.paso;

					aumentoDefinitivo := ajusteEscala - (montoSueldoBasico+montoCompensacion);

				end if;

				close curTabulador;

			end if;

			

		end if;



		id := last_id_aumentoevaluacion()+1;

		raise notice 'id %',id;

		if id is null then 

			id := 1;

		end if;

		

		montoRetroactivo := (aumentoDefinitivo / 30) * pDiasRetroactivo;



		perform  add_aumentoevaluacion(

			id,

			pAnio,

			pMes,

			pFecha,

			recTrabajadores.total_evaluacion,

			recTrabajadores.grado,

			recTrabajadores.paso,

			convert_2_decimal(montoSueldoBasico),

			convert_2_decimal(montoAjusteSueldo),

			convert_2_decimal(montoCompensacion),

			convert_2_decimal(montoOtros),

			convert_2_decimal(montoA),

			convert_2_decimal(sueldoNuevo),

			  convert_2_decimal(compensacionNueva),

			  convert_2_decimal(montoAumentar),

			convert_2_decimal(aumentoDefinitivo),

			pasoNuevo,

			  recTrabajadores.porcentaje_aumento,

			  convert_2_decimal(montoAumentar),

			convert_2_decimal(ajusteEscala),

                        pDiasRetroactivo,

                        convert_2_decimal(montoRetroactivo), 

			  recTrabajadores.id_trabajador,

			  recTrabajadores.id_resultado_evaluacion,

			  pIdTipoPersonal);	



		if pProceso = '2' then

			

			if pRegistro = 'S' then

				update trabajador set sueldo_basico = sueldoNuevo 

					where id_trabajador = recTrabajadores.id_trabajador;

				if pPeriodicidad = 'Q' then

					sueldoNuevo := convert_2_decimal(sueldoNuevo/2);

				elsif pPeriodicidad = 'S' then

					sueldoNuevo := convert_2_decimal(sueldoNuevo/30*7);

				end if;

				update conceptofijo set monto = sueldoNuevo 

					where id_trabajador = recTrabajadores.id_trabajador

					and id_concepto_tipo_personal = 

					(select ctp.id_concepto_tipo_personal 

					from conceptotipopersonal ctp, concepto c

					where ctp.id_concepto = c.id_concepto

					and c.sueldo_basico = 'S' limit 1);

			elsif pRegistro = 'C' or  pRegistro = 'A' then

				if recCompensacion.cod_frecuencia_pago = 3 then

					compensacionNueva := convert_2_decimal(compensacionNueva/2);

				elsif recCompensacion.cod_frecuencia_pago = 4 then

					compensacionNueva := convert_2_decimal(compensacionNueva/30*7);

				end if;

				if montoCompensacion > 0 then

					update conceptofijo set monto = compensacionNueva

						where id_trabajador = recTrabajadores.id_trabajador

						and id_concepto_tipo_personal = recCompensacion.id_concepto_tipo_personal;

				else

					idConceptoFijo := last_id_conceptofijo()+1;

					if idConceptoFijo is null then

						idConceptoFijo = 1;

					end if;

					perform add_conceptofijo(

						idConceptoFijo,

						recTrabajadores.id_trabajador,

						recCompensacion.id_concepto_tipo_personal,

						recCompensacion.id_frecuencia_tipo_personal,

						0,

						convert_2_decimal(compensacionNueva),

						pFecha,

						pFecha,

						null,

						null,

						'A',

						'N',

						0,

						0,

						0);

				end if;

			else

				if recOtroConcepto.cod_frecuencia_pago = 3 then

					montoAumentar := convert_2_decimal(montoAumentar/2);

				elsif recOtroConcepto.cod_frecuencia_pago = 4 then

					montoAumentar := convert_2_decimal(montoAumentar/30*7);

				end if;

				if pGrabar = 'V' then

					idConceptoVariable := last_id_conceptovariable()+1;

					if idConceptoVariable is null then

						idConceptoVariable = 1;

					end if;

					perform add_conceptovariable(

						idConceptoVariable,

						recTrabajadores.id_trabajador,

						recOtroConcepto.id_concepto_tipo_personal,

						recOtroConcepto.id_frecuencia_tipo_personal,

						0,

						montoAumentar,

						pFecha,

						null,

						'A',

						0,0);

				else

					idConceptoFijo := last_id_conceptofijo()+1;

					if idConceptoFijo is null then

						idConceptoFijo = 1;

					end if;

					perform add_conceptofijo(

						idConceptoFijo,

						recTrabajadores.id_trabajador,

						recOtroConcepto.id_concepto_tipo_personal,

						recOtroConcepto.id_frecuencia_tipo_personal,

						0,

						montoAumentar,

						pFecha,

						pFecha,

						null,

						null,

						'A',

						'N',

						0,

						0,

						0);

				end if;

			end if;

			if pPagarRetroactivo = 'S' and montoRetroactivo > 0 then

				idConceptoVariable := last_id_conceptovariable()+1;

					if idConceptoVariable is null then

						idConceptoVariable = 1;

					end if;

					perform add_conceptovariable(

						idConceptoVariable,

						recTrabajadores.id_trabajador,

						pIdConceptoRetroactivo,

						pIdFrecuenciaRetroactivo,

						pDiasRetroactivo,

						convert_2_decimal(montoRetroactivo),

						pFecha,

						null,

						'A',

						0,0);

			end if;

		end if;

		

	end loop;

	close curTrabajadores;

	



	delete from identity;



	return 1;

end;

$_$;


--
-- TOC entry 660 (class 1255 OID 3240657)
-- Name: calcular_aumento_tabulador(integer, integer, integer, character varying, character varying, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_aumento_tabulador(integer, integer, integer, character varying, character varying, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;	
	pIdTabuladorActual alias for $2;	
	pIdTabuladorNuevo alias for $3;	
	pProceso alias for $4;
	pUsuario alias for $5;	
	pFecha alias for $6;
	pMantenerPaso alias for $7;
	pPeriodicidad alias for $8;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4, pIdTabulador int4)
		for select distinct t.id_trabajador, t.paso, c.grado,
		c.sub_grado, tu.jornada_diaria, tu.jornada_semanal,
		tp.formula_integral, tp.formula_semanal, c.id_cargo
		from trabajador t, cargo c, manualcargo mc, 
		tipopersonal tp, turno tu
		where t.id_tipo_personal = pIdTipoPersonal
 		and t.id_cargo = c.id_cargo
                and c.id_manual_cargo = mc.id_manual_cargo 
                and mc.id_tabulador = pIdTabulador
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
		and t.estatus = 'A';

	recConceptoEvaluacion record;
	curConceptoEvaluacion cursor (pIdTrabajador int4)
		for select monto, fp.cod_frecuencia_pago, 
		c.sueldo_basico, c.compensacion, c.ajuste_sueldo
		from conceptoevaluacion ce, conceptofijo cf, 
		frecuenciatipopersonal ftp, frecuenciapago fp, 
		concepto c, conceptotipopersonal ctp
		where cf.id_trabajador = pIdTrabajador
		and ce.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recTabuladorNuevoSemanal record;
	curTabuladorNuevoSemanal cursor (pIdTabulador int4, pGrado int4, pPaso int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = 1
		and paso = pPaso;

	recTabuladorNuevo record;
	curTabuladorNuevo cursor (pIdTabulador int4, pGrado int4, pSubGrado int4)
		for select monto
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = pSubGrado
		and paso = 1;

	recTabuladorNuevoPaso record;
	curTabuladorNuevoPaso cursor (pIdTabulador int4, pGrado int4, pSubgrado int4, pMonto float8)
		for select min(monto) as monto, min(paso) as paso
		from detalletabulador 
		where id_tabulador = pIdTabulador
		and monto >= pMonto
		and grado = pGrado
		and sub_grado = pSubgrado;

	recTabuladorNuevoPasoViejo record;
	curTabuladorNuevoPasoViejo cursor (pIdTabulador int4, pGrado int4, pPaso int4, pSubGrado int4)
		for select monto, paso
		from detalletabulador 
		where id_tabulador = pIdTabulador		
		and grado = pGrado
		and sub_grado = pSubGrado
		and paso = pPaso;

	recPromedios record;
	curPromedios cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 
		fp.cod_frecuencia_pago, cf.monto, c.sueldo_basico, c.compensacion, 
		c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = pIdTrabajador
		and (c.sueldo_basico = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');

	recCompensacion record;
	curCompensacion cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.compensacion = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recSueldo record;
	curSueldo cursor (pIdTipoPersonal int4) 
		for select distinct fp.cod_frecuencia_pago, 
		ctp.id_concepto_tipo_personal, ftp.id_frecuencia_tipo_personal, c.cod_concepto 
		from conceptotipopersonal ctp, concepto c, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where ctp.id_concepto = c.id_concepto
		and c.sueldo_basico = 'S'
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		order by c.cod_concepto;

	recConceptosRecalcular record;
	curConceptosRecalcular cursor (pIdTrabajador int4, pIdConcepto int4)
		for select distinct fp.cod_frecuencia_pago, cf.unidades,
		'F' as tipo_concepto, ctp.tipo, cf.id_concepto_tipo_personal, ctp.tope_minimo, 
		ctp.valor, ctp.tope_maximo, cf.id_concepto_fijo
		from conceptofijo cf, conceptotipopersonal ctp, 
		frecuenciatipopersonal ftp, frecuenciapago fp
		where cf.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = cf.id_concepto_tipo_personal
		and ctp.tipo in ('P', 'I')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and cf.id_concepto_tipo_personal in (select id_concepto_tipo_personal
		from conceptoasociado where id_concepto_asociar=pIdConcepto);


	montoA float8 := 0;
	montoB float8 := 0;
	montoSueldoBasico float8 := 0;
	montoCompensacion float8 := 0;
	montoAjusteSueldo float8 := 0;
	montoOtros float8 := 0;	
	remuneracionActual float8 := 0;
	id int4 := 0;
	sueldoNuevo float8 := 0;
	compensacionNueva float8 :=0;
	diferencia float8 := 0;
	pasoNuevo int4 := 0;
	ajusteNuevo float8 :=0;	
	idConceptoVariable int4 := 0;
	idConceptoFijo int4 := 0;
	remuneracionNueva float8 := 0;
	aumentoDefinitivo float8 := 0;
	ajuste float8 :=0;
	idSueldo int4 := 0;
	idCompensacion int4 := 0;
	montoConceptoCalculado float8 := 0;
begin
	open curCompensacion (pIdTipoPersonal);
	fetch curCompensacion into recCompensacion;
	if recCompensacion.cod_frecuencia_pago is null then
		return 10;
	end if;
	idCompensacion := recCompensacion.id_concepto_tipo_personal; 

	open curSueldo (pIdTipoPersonal);
	fetch curSueldo into recSueldo;
	if recSueldo.cod_frecuencia_pago is null then
		return 10;
	end if;
	idSueldo := recSueldo.id_concepto_tipo_personal;

	delete from aplicartabulador where id_trabajador in 
		(select id_trabajador from trabajador where id_tipo_personal = pIdTipoPersonal);
	
	open curTrabajadores(pIdTipoPersonal, pIdTabuladorActual);	
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;		

		montoA := 0;
		montoB := 0;
		montoSueldoBasico := 0;
		montoCompensacion := 0;
		montoAjusteSueldo := 0;
		montoOtros := 0;			
		remuneracionNueva := 0;
		aumentoDefinitivo := 0;

		open curConceptoEvaluacion(recTrabajadores.id_trabajador);
		loop			
			fetch curConceptoEvaluacion into recConceptoEvaluacion;	
			exit when not found;	
			
			if recConceptoEvaluacion.cod_frecuencia_pago = 3 then
                                montoB := recConceptoEvaluacion.monto*2;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 4 then
				montoB := recConceptoEvaluacion.monto;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 10 then
				montoB := (recConceptoEvaluacion.monto*4)/30*7;
			elsif recConceptoEvaluacion.cod_frecuencia_pago = 1 or 
				recConceptoEvaluacion.cod_frecuencia_pago = 2 then
				montoB := recConceptoEvaluacion.monto;
			elsif	recConceptoEvaluacion.cod_frecuencia_pago > 4 then
				montoB := (recConceptoEvaluacion.monto/30)*7;
			end if;

			montoA := montoA + montoB;

--montoA es el monto contra el cual se va a evaluar el aumento en obreros semanal
					
		end loop;
		close curConceptoEvaluacion;

		sueldoNuevo := 0;

		if pPeriodicidad = 'Q' then
			open curTabuladorNuevo(pIdTabuladorNuevo, 
                             recTrabajadores.grado, recTrabajadores.sub_grado);	

			fetch curTabuladorNuevo into recTabuladorNuevo;	
			if recTabuladorNuevo.monto is not null then
	
				montoB := 0;				
				diferencia := 0;
				compensacionNueva := 0;
				pasoNuevo := 0;
                                ajuste := 0;
	
				sueldoNuevo := recTabuladorNuevo.monto;
	
				open curPromedios(recTrabajadores.id_trabajador);
				loop			
					fetch curPromedios into recPromedios;	
					exit when not found;	
		
					if recPromedios.cod_frecuencia_pago = 3 then
						montoB := recPromedios.monto*2;
					elsif recPromedios.cod_frecuencia_pago = 4 then
						montoB := (recPromedios.monto/7)*30;
					elsif recPromedios.cod_frecuencia_pago = 10 then
						montoB := (recPromedios.monto*4);
					elsif recPromedios.cod_frecuencia_pago = 1 or 
						recPromedios.cod_frecuencia_pago = 2 or 
						recPromedios.cod_frecuencia_pago > 4 then
						montoB := recPromedios.monto;
					end if;
			
		
					if recPromedios.sueldo_basico = 'S' then
						montoSueldoBasico := montoSueldoBasico + montoB;
					elsif recPromedios.compensacion = 'S' then
						montoCompensacion := montoCompensacion + montoB;
					elsif recPromedios.ajuste_sueldo = 'S' then
						montoAjusteSueldo := montoAjusteSueldo + montoB;
					else
						montoOtros := montoOtros + montoB;
					end if;
					
				end loop;
				close curPromedios;
		
		
				remuneracionActual :=  montoA;
		
				diferencia := remuneracionActual - sueldoNuevo;
				ajuste := sueldoNuevo + montoCompensacion;

-- Se ajusta la diferencia
				if pMantenerPaso = 'N' then
					if diferencia <= 0 then
						pasoNuevo = 1;
						compensacionNueva := 0;
					else
						diferencia := diferencia + sueldoNuevo;
						open curTabuladorNuevoPaso(pIdTabuladorNuevo,
							recTrabajadores.grado,
							recTrabajadores.sub_grado,
 							diferencia);
						fetch curTabuladorNuevoPaso into
							recTabuladorNuevoPaso;
						if recTabuladorNuevoPaso.monto is not null then
						    compensacionNueva := 								recTabuladorNuevoPaso.monto - sueldoNuevo;
							pasoNuevo := recTabuladorNuevoPaso.paso;
						else
							compensacionNueva := diferencia - 								sueldoNuevo;
							pasoNuevo := 16;
						end if;
						close curTabuladorNuevoPaso;
					end if;
-- Se mantiene el paso
				elsif pMantenerPaso = 'P' then
					open curTabuladorNuevoPasoViejo(pIdTabuladorNuevo,
						recTrabajadores.grado, recTrabajadores.paso, 							recTrabajadores.sub_grado);
					fetch curTabuladorNuevoPasoViejo into 							recTabuladorNuevoPasoViejo;
					if recTabuladorNuevoPasoViejo.monto is not null 						then compensacionNueva := recTabuladorNuevoPasoViejo.monto 							- sueldoNuevo;
						pasoNuevo := recTabuladorNuevoPasoViejo.paso;
					end if;
					close curTabuladorNuevoPasoViejo;
				else
-- Se ajusta la compensacion
					open curTabuladorNuevoPaso(pIdTabuladorNuevo,
						recTrabajadores.grado, 
						recTrabajadores.sub_grado, ajuste);
					fetch curTabuladorNuevoPaso into recTabuladorNuevoPaso;
					if recTabuladorNuevoPaso.monto is not null then 							compensacionNueva := recTabuladorNuevoPaso.monto - 							sueldoNuevo;
						pasoNuevo := recTabuladorNuevoPaso.paso;
					else
					
						compensacionNueva := montoCompensacion;
						pasoNuevo := 16;
						
					end if;
					close curTabuladorNuevoPaso;
				end if;
				id := last_id_aplicartabulador()+1;			
				if id is null then 
					id := 1;
				end if;
	
				remuneracionNueva := sueldoNuevo + compensacionNueva;
				aumentoDefinitivo := remuneracionNueva - remuneracionActual;
					
				perform  add_aplicartabulador(
					id,				
					pFecha,
					recTrabajadores.grado,
					recTrabajadores.paso,
					montoSueldoBasico,
					montoAjusteSueldo,
					montoCompensacion,
					pasoNuevo,
					sueldoNuevo,
					ajusteNuevo,
					compensacionNueva,
					recTrabajadores.id_trabajador,
					0.0,
					0,
					0.0);

				
			end if;
			close curTabuladorNuevo;
		else

-- aumento semanal
			if pMantenerPaso = 'N' then
				open curTabuladorNuevoSemanal
                               (pIdTabuladorNuevo, recTrabajadores.grado, 1);	
			else
				open curTabuladorNuevoSemanal
  				(pIdTabuladorNuevo, recTrabajadores.grado, 
				recTrabajadores.paso);	
			end if;

			fetch curTabuladorNuevoSemanal into recTabuladorNuevoSemanal;	

			if recTabuladorNuevoSemanal.monto is not null then
				sueldoNuevo := recTabuladorNuevoSemanal.monto;
			end if;


			open curPromedios(recTrabajadores.id_trabajador);
				loop			
					fetch curPromedios into recPromedios;	
					exit when not found;	
		
					if recPromedios.cod_frecuencia_pago = 4 then
						montoB := recPromedios.monto/7;
					elsif recPromedios.cod_frecuencia_pago = 10 then
						montoB := (recPromedios.monto*4)/30;
					elsif recPromedios.cod_frecuencia_pago > 4 then
						montoB := recPromedios.monto/30;
					end if;
			
		
					if recPromedios.sueldo_basico = 'S' then
						montoSueldoBasico := montoSueldoBasico + montoB;
					elsif recPromedios.compensacion = 'S' then
						montoCompensacion := montoCompensacion + montoB;
					elsif recPromedios.ajuste_sueldo = 'S' then
						montoAjusteSueldo := montoAjusteSueldo + montoB;
					else
						montoOtros := montoOtros + montoB;
					end if;
					
				end loop;
				close curPromedios;
		
		
				remuneracionActual :=  montoA;
		
				diferencia := remuneracionActual - sueldoNuevo*7;

			id := last_id_aplicartabulador()+1;			
			if id is null then 
				id := 1;
			end if;
			perform  add_aplicartabulador(
				id,				
				pFecha,
				recTrabajadores.grado,
				recTrabajadores.paso,
				montoSueldoBasico*7,
				montoAjusteSueldo*7,
				0.0,
				pasoNuevo,
				sueldoNuevo*7,
				0,
				0,
				recTrabajadores.id_trabajador,
				0.0,
				0,
				0.0);
			close curTabuladorNuevoSemanal;
	
		end if;
		if pPeriodicidad = 'Q' then
			sueldoNuevo := convert_2_decimal(sueldoNuevo/2);
		elsif pPeriodicidad = 'S' then
			sueldoNuevo := convert_2_decimal(sueldoNuevo)*7;
		end if;

		if recCompensacion.cod_frecuencia_pago = 3 then
			compensacionNueva := convert_2_decimal(compensacionNueva/2);			
		end if;

		--- Actualiza el monto proyetado del concepto sueldo
		update conceptofijo set monto_proyectado = sueldoNuevo 
			where id_trabajador = recTrabajadores.id_trabajador
			and id_concepto_tipo_personal = idSueldo;

		--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
		open curConceptosRecalcular(recTrabajadores.id_trabajador, idSueldo);
		loop
			fetch curConceptosRecalcular into recConceptosRecalcular;
			exit when not found;
			montoConceptoCalculado:= calcular_concepto_proyectado(
			recConceptosRecalcular.id_concepto_tipo_personal,
			recTrabajadores.id_trabajador,	
			recConceptosRecalcular.unidades,
			recConceptosRecalcular.tipo,
			recConceptosRecalcular.cod_frecuencia_pago,
			recTrabajadores.jornada_diaria,
			recTrabajadores.jornada_semanal,
			recTrabajadores.formula_integral,
			recTrabajadores.formula_semanal,	
			recTrabajadores.id_cargo,	
			recConceptosRecalcular.valor,
			recConceptosRecalcular.tope_minimo,
			recConceptosRecalcular.tope_maximo);
			if recConceptosRecalcular.tipo_concepto = 'F' then
				update conceptofijo set monto_proyectado = montoConceptoCalculado
					where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
			end if;
		end loop;
		close curConceptosRecalcular;

		if compensacionNueva <> 0 then
			update conceptofijo set monto_proyectado = compensacionNueva
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idCompensacion;
			--- Realcula los conceptos (fijos y variables) que tienen asociado al sueldo
			open curConceptosRecalcular(recTrabajadores.id_trabajador, idCompensacion);
			loop
				fetch curConceptosRecalcular into recConceptosRecalcular;
				exit when not found;
				perform calcular_concepto_proyectado(
				recConceptosRecalcular.id_concepto_tipo_personal,
				recTrabajadores.id_trabajador,	
				recConceptosRecalcular.unidades,
				recConceptosRecalcular.tipo,
				recConceptosRecalcular.cod_frecuencia_pago,
				recTrabajadores.jornada_diaria,
				recTrabajadores.jornada_semanal,
				recTrabajadores.formula_integral,
				recTrabajadores.formula_semanal,	
				recTrabajadores.id_cargo,	
				recConceptosRecalcular.valor,
				recConceptosRecalcular.tope_minimo,
				recConceptosRecalcular.tope_maximo);

				if recConceptosRecalcular.tipo = 'F' then
					update conceptofijo set monto_proyectado = montoConceptoCalculado
						where id_concepto_fijo = recConceptosRecalcular.id_concepto_fijo;
				end if;
			end loop;
			close curConceptosRecalcular;
		end if;
		if pProceso = '2' then
			if pPeriodicidad = 'Q' then
				sueldoNuevo = sueldoNuevo*2;
			elsif pPeriodicidad = 'S' then
				sueldoNuevo = sueldoNuevo/7;
			end if;

			update trabajador set sueldo_basico = sueldoNuevo,
				paso = pasoNuevo
				where id_trabajador = recTrabajadores.id_trabajador;

			if pPeriodicidad = 'Q' then
				sueldoNuevo = sueldoNuevo/2;
                                montoAjusteSueldo = montoAjusteSueldo/2;
			elsif pPeriodicidad = 'S' then
				sueldoNuevo = sueldoNuevo*7;
				montoAjusteSueldo = montoAjusteSueldo*7;
                        end if;
		

			update conceptofijo set monto_anterior = monto+montoAjusteSueldo,
                                                monto = sueldoNuevo 
				where id_trabajador = recTrabajadores.id_trabajador
				and id_concepto_tipo_personal = idSueldo;				

			if compensacionNueva <> 0 then
				
				if montoCompensacion > 0 then
					if compensacionNueva = 0 then
						delete from conceptofijo 
							where id_trabajador = recTrabajadores.id_trabajador 
							and id_concepto_tipo_personal = idCompensacion;
					else
						update conceptofijo set monto_anterior = monto,
                                                              monto = compensacionNueva
							where id_trabajador = recTrabajadores.id_trabajador
							and id_concepto_tipo_personal = idCompensacion;
					end if;
				else
					if compensacionNueva <> 0 then
						idConceptoFijo := last_id_conceptofijo()+1;
						if idConceptoFijo is null then
							idConceptoFijo = 1;
						end if;
						perform add_conceptofijo(
							idConceptoFijo,
							recTrabajadores.id_trabajador,
							recCompensacion.id_concepto_tipo_personal,
							recCompensacion.id_frecuencia_tipo_personal,
							0,
							convert_2_decimal(compensacionNueva),
							pFecha,
							pFecha,
							null,
							null,
							'A',
							'N',
							0,
							0,
							0);
					end if;
				end if;								
			end if;
			
		end if;
		--end if;
		--close curTabuladorNuevo;
	end loop;
	close curTrabajadores;

	if pProceso = '2' then
		delete from conceptofijo 
			where id_trabajador in(
			select distinct t.id_trabajador		
			from trabajador t, cargo c, manualcargo mc
			where t.id_tipo_personal = pIdTipoPersonal
			and t.id_cargo = c.id_cargo
			and c.id_manual_cargo = mc.id_manual_cargo
			and mc.id_tabulador = pIdTabuladorActual
			and t.estatus = 'A')
			and id_concepto_tipo_personal in
			(select id_concepto_tipo_personal 
			from conceptoevaluacion 
			where id_tipo_personal = pIdTipoPersonal 
			and eliminar_despues_aumento = 'S');
	end if;

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 661 (class 1255 OID 3240659)
-- Name: calcular_ausencia_trabajador(boolean, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_ausencia_trabajador(boolean, integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pPrenomina alias for $1;
	pIdNominaEspecial alias for $2;	
	pIdGrupoNomina alias for $3;
	pIdTrabajador alias for $4;
	pF1 alias for $5;
	pF2 alias for $6;
	pF3 alias for $7;	


	---- variables de cálculo
	vSueldoDiario float8 :=0.0;
	vIdTabla int8 := 0;
	vNumeroNomina int8 := 0;
	vMontoDeduccion float8 :=0.0;
	vIdNominaEspecial int;
	vDias int:=0;

	recConceptosTrabajador record;
	curConceptosTrabajador cursor (cIdTrabajador int4, cF1 int4, cF2 int4, cF3 int4) for
		select distinct ctp2.id_concepto_tipo_personal, t.id_tipo_personal,max(cf.Id_frecuencia_Tipo_Personal) as Id_frecuencia_Tipo_Personal
		from trabajador t, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp
		where cf.id_trabajador   =  t.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_ausencia = ctp2.id_concepto 
		and ctp.id_tipo_personal = ctp2.id_tipo_personal 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and c.ausencia = 'S'
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and t.id_trabajador = cIdTrabajador
		group by ctp2.id_concepto_tipo_personal, t.id_tipo_personal;
	
        ---- Cursor que valida la parametrización de los concepto de ausencia 
	recValoresConcepto record;
	curValoresConcepto cursor (cIdTrabajador int4, cIdConceptoTipoPersonal int4,  cF1 int4, cF2 int4, cF3 int4) for
		select distinct cf.id_concepto_fijo as id, t.id_trabajador, ctp2.id_concepto_tipo_personal, cf.monto,
		cf.id_frecuencia_tipo_personal,  fp.cod_frecuencia_pago, 'CC' as tipo_concepto
		from trabajador t, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp
		where cf.id_trabajador   =  t.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_ausencia = ctp2.id_concepto 
		and ctp.id_tipo_personal = ctp2.id_tipo_personal 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and c.ausencia = 'S'
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and t.id_trabajador = cIdTrabajador
		and ctp2.id_concepto_tipo_personal = cIdConceptoTipoPersonal
		order by t.id_trabajador, ctp2.id_concepto_tipo_personal ;


        
 begin 	
	raise notice 'Se inicia la ejecucion de la funcion calcular_ausencia_trabajador()';

	--- si es especial le busco su numerito 
	if pIdNominaEspecial <> 0 then 
		Select coalesce(numero_nomina,0) into vNumeroNomina from nominaespecial where id_nomina_Especial = pIdNominaEspecial;
		vIdNominaEspecial := pIdNominaEspecial;
	end if;

	raise notice 'Trabajador =  %',pIdTrabajador;

	-- busco la cantidad de dias del tipo 
	Select sum(au.dias_habiles) into vDias
	from ausencia au, trabajador t 
	where au.id_personal = t.id_personal 
	and au.descuento_Estatus = 'P'
	and t.id_trabajador = pIdTrabajador; 
	
	--- Inicio el proceso de validación 
	open curConceptosTrabajador(pIdTrabajador, pF1, pF2, pF3);
	loop
		fetch curConceptosTrabajador into recConceptosTrabajador;
		exit when not found;
			vSueldoDiario :=0.0;
			
			-- busco especificamente los valores de ese trabajador 
			open curValoresConcepto(pIdTrabajador, 
							recConceptosTrabajador.Id_Concepto_Tipo_Personal,  
							pF1, 
							pF2, 
							pF3);
			loop
				fetch curValoresConcepto into recValoresConcepto;
				exit when not found;
				
				-- se necesita tomar en cuenta la frecuencia a fin de establecer el diario 
				if recValoresConcepto.cod_frecuencia_pago = 3 then -- ambas quincenas, el monto esta quincenal  
				
					vSueldoDiario := vSueldoDiario + recValoresConcepto.monto/15;
					
				else  --- primera o segunda

					vSueldoDiario := vSueldoDiario + recValoresConcepto.monto/30;

				end if;

			end loop;

			close curValoresConcepto;

			--- ya tengo calculado el diario para el concepto y calculo el monto 
			
			vMontoDeduccion := vSueldoDiario * vDias; 

			raise notice 'Su monto Diario =  %',vSueldoDiario;
			raise notice 'Su monto Deduccion  =  %',vMontoDeduccion;

			
			 
			-- inserto los registros a los que se de a lugar 
			if pPrenomina = true then 

				select coalesce((max(id_ultima_prenomina)+1),1) into vIdTabla from ultimaprenomina; 
				--- inserto en ultimaprenomina
				perform add_ultimaprenomina(vIdTabla::int,
								pIdTrabajador::int,
								recConceptosTrabajador.Id_Concepto_Tipo_Personal,
								recConceptosTrabajador.Id_frecuencia_Tipo_Personal,
								vNumeroNomina::int,
								vDias::double precision,
								0.0::double precision,
								vMontoDeduccion::double precision,
								'C'::character varying,
								''::character varying,
								recConceptosTrabajador.Id_tipo_personal::int,
								pIdGrupoNomina::int,
								vIdNominaEspecial);

			else
				--- inserto en ultimanomina 
				select coalesce(max(id_ultima_nomina)+1,1) into vIdTabla from ultimanomina; 

				perform add_ultimanomina(vIdTabla::int,
								pIdTrabajador::int,
								recConceptosTrabajador.Id_Concepto_Tipo_Personal,
								recConceptosTrabajador.Id_frecuencia_Tipo_Personal,
								vNumeroNomina::int,
								vDias::double precision,
								0.0::double precision,
								vMontoDeduccion::double precision,
								'C'::character varying,
								''::character varying,
								recConceptosTrabajador.Id_tipo_personal::int,
								pIdGrupoNomina::int,
								vIdNominaEspecial,
								0::int,
								0.0::double precision,
								null);
				
			end if;

			

	end loop;


	close curConceptosTrabajador;
		
	raise notice 'Fin calcular_ausencia_trabajador()';	

end;



$_$;


--
-- TOC entry 662 (class 1255 OID 3240661)
-- Name: calcular_ausencia_trabajador(boolean, integer, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_ausencia_trabajador(boolean, integer, integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pPrenomina alias for $1;
	pIdNominaEspecial alias for $2;	
	pIdGrupoNomina alias for $3;
	pIdTrabajador alias for $4;
	pDias alias for $5;
	pF1 alias for $6;
	pF2 alias for $7;
	pF3 alias for $8;	


	---- variables de cálculo
	vSueldoDiario float8 :=0.0;
	vIdTabla int8 := 0;
	vNumeroNomina int8 := 0;
	vMontoDeduccion float8 :=0.0;
	vIdNominaEspecial int;

	recConceptosTrabajador record;
	curConceptosTrabajador cursor (cIdTrabajador int4, cF1 int4, cF2 int4, cF3 int4) for
		select distinct ctp2.id_concepto_tipo_personal, t.id_tipo_personal,max(cf.Id_frecuencia_Tipo_Personal) as Id_frecuencia_Tipo_Personal
		from trabajador t, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp
		where cf.id_trabajador   =  t.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_ausencia = ctp2.id_concepto 
		and ctp.id_tipo_personal = ctp2.id_tipo_personal 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and c.ausencia = 'S'
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and t.id_trabajador = cIdTrabajador
		group by ctp2.id_concepto_tipo_personal, t.id_tipo_personal;
	
        ---- Cursor que valida la parametrización de los concepto de ausencia 
	recValoresConcepto record;
	curValoresConcepto cursor (cIdTrabajador int4, cIdConceptoTipoPersonal int4,  cF1 int4, cF2 int4, cF3 int4) for
		select distinct cf.id_concepto_fijo as id, t.id_trabajador, ctp2.id_concepto_tipo_personal, cf.monto,
		cf.id_frecuencia_tipo_personal,  fp.cod_frecuencia_pago, 'CC' as tipo_concepto
		from trabajador t, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp
		where cf.id_trabajador   =  t.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_ausencia = ctp2.id_concepto 
		and ctp.id_tipo_personal = ctp2.id_tipo_personal 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and c.ausencia = 'S'
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and t.id_trabajador = cIdTrabajador
		and ctp2.id_concepto_tipo_personal = cIdConceptoTipoPersonal
		order by t.id_trabajador, ctp2.id_concepto_tipo_personal ;


        
 begin 	
	raise notice 'Se inicia la ejecucion de la funcion calcular_ausencia_trabajador()';

	--- si es especial le busco su numerito 
	if pIdNominaEspecial <> 0 then 
		Select coalesce(numero_nomina,0) into vNumeroNomina from nominaespecial where id_nomina_Especial = pIdNominaEspecial;
		vIdNominaEspecial := pIdNominaEspecial;
	end if;

	raise notice 'Trabajador =  %',pIdTrabajador;
	--- Inicio el proceso de validación 
	open curConceptosTrabajador(pIdTrabajador, pF1, pF2, pF3);
	loop
		fetch curConceptosTrabajador into recConceptosTrabajador;
		exit when not found;
			vSueldoDiario :=0.0;
			
			-- busco especificamente los valores de ese trabajador 
			open curValoresConcepto(pIdTrabajador, 
							recConceptosTrabajador.Id_Concepto_Tipo_Personal,  
							pF1, 
							pF2, 
							pF3);
			loop
				fetch curValoresConcepto into recValoresConcepto;
				exit when not found;
				
				-- se necesita tomar en cuenta la frecuencia a fin de establecer el diario 
				if recValoresConcepto.cod_frecuencia_pago = 3 then -- ambas quincenas, el monto esta quincenal  
				
					vSueldoDiario := vSueldoDiario + recValoresConcepto.monto/15;
					
				else  --- primera o segunda

					vSueldoDiario := vSueldoDiario + recValoresConcepto.monto/30;

				end if;

			end loop;

			close curValoresConcepto;

			--- ya tengo calculado el diario para el concepto y calculo el monto 
			
			vMontoDeduccion := vSueldoDiario * pDias; 

			raise notice 'Su monto Diario =  %',vSueldoDiario;
			raise notice 'Su monto Deduccion  =  %',vMontoDeduccion;

			
			 
			-- inserto los registros a los que se de a lugar 
			if pPrenomina = true then 

				select coalesce((max(id_ultima_prenomina)+1),1) into vIdTabla from ultimaprenomina; 
				--- inserto en ultimaprenomina
				perform add_ultimaprenomina(vIdTabla::int,
								pIdTrabajador::int,
								recConceptosTrabajador.Id_Concepto_Tipo_Personal,
								recConceptosTrabajador.Id_frecuencia_Tipo_Personal,
								vNumeroNomina::int,
								pDias::double precision,
								0.0::double precision,
								vMontoDeduccion::double precision,
								'C'::character varying,
								''::character varying,
								recConceptosTrabajador.Id_tipo_personal::int,
								pIdGrupoNomina::int,
								vIdNominaEspecial);

			else
				--- inserto en ultimanomina 
				select coalesce(max(id_ultima_nomina)+1,1) into vIdTabla from ultimanomina; 

				perform add_ultimanomina(vIdTabla::int,
								pIdTrabajador::int,
								recConceptosTrabajador.Id_Concepto_Tipo_Personal,
								recConceptosTrabajador.Id_frecuencia_Tipo_Personal,
								vNumeroNomina::int,
								pDias::double precision,
								0.0::double precision,
								vMontoDeduccion::double precision,
								'C'::character varying,
								''::character varying,
								recConceptosTrabajador.Id_tipo_personal::int,
								pIdGrupoNomina::int,
								vIdNominaEspecial,
								0::int,
								0.0::double precision,
								null);
				
			end if;

			

	end loop;


	close curConceptosTrabajador;
		
	raise notice 'Fin calcular_ausencia_trabajador()';	

end;



$_$;


--
-- TOC entry 663 (class 1255 OID 3240662)
-- Name: calcular_ausencias(boolean, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_ausencias(boolean, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pPrenomina alias for $1;
	pIdNominaEspecial alias for $2;	
	pIdGrupoNomina alias for $3;
	pF1 alias for $4;
	pF2 alias for $5;
	pF3 alias for $6;	


	---- variables de cálculo
	vCantidadErrores integer :=0;
	vIdNominaEspecial int;

        ---- Cursor que valida la existencia de al menos un concepto que maneje ausencias en el tipo de personal  
	recValidaUnConcepto record;
	curValidaUnConcepto cursor (cIdGrupoNomina int4, cF1 int4, cF2 int4, cF3 int4) for
		select count(*) as cantidad
		from ausencia au, 
		trabajador t, 
		tipopersonal tp, 
		conceptofijo cf,
		parametrovarios pv,
		frecuenciatipopersonal ftp, 
		frecuenciapago fp,
		concepto c,
		conceptotipopersonal ctp
		where au.id_personal = t.id_personal 
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pv.id_tipo_personal 
		and cf.id_trabajador = t.id_trabajador
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.estatus = 'A' 
		and pv.ausencia_injustificada = 'S' -- maneja_ausencias el tipo de personal
		and c.ausencia = 'S' -- maneja_ausencias el concepto
		and au.descuento_Estatus = 'P' -- pendiente
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and tp.id_grupo_nomina = cIdGrupoNomina; 
	
        ---- Cursor que valida la parametrización de los concepto de ausencia 
	recValidaConcepto record;
	curValidaConcepto cursor (cIdGrupoNomina int4, cF1 int4, cF2 int4, cF3 int4) for
		select distinct tp.nombre, cctp.cod_concepto,cctp.descripcion 
		from ausencia au, 
		trabajador t, 
		tipopersonal tp, 
		conceptofijo cf,
		parametrovarios pv,
		frecuenciatipopersonal ftp, 
		frecuenciapago fp,
		(select c.cod_concepto,c.id_concepto_ausencia,ctp.id_tipo_personal,c.ausencia,c.descripcion, ctp.id_concepto_tipo_personal 
			from concepto c,conceptotipopersonal ctp 
			where ctp.id_concepto = c.id_concepto) as cctp 
			 LEFT JOIN conceptotipopersonal ctpau ON (cctp.id_concepto_ausencia = ctpau.id_concepto and cctp.id_tipo_personal = ctpau.id_tipo_personal)
		where au.id_personal = t.id_personal 
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pv.id_tipo_personal 
		and t.id_tipo_personal = cctp.id_tipo_personal
		and cf.id_trabajador = t.id_trabajador
		and cf.id_concepto_tipo_personal = cctp.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctpau.id_concepto_tipo_personal is null 
		and t.estatus = 'A' 
		and pv.ausencia_injustificada = 'S' -- maneja_ausencias el tipo de personal
		and cctp.ausencia = 'S' -- maneja_ausencias el concepto
		and au.descuento_Estatus = 'P' -- pendiente
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)
		and tp.id_grupo_nomina = cIdGrupoNomina; 

        ---- Cursor que busca los trabajadores con ausencias pendientes
	recTrabajadorConAusencias record;
	curTrabajadorConAusencias cursor (cIdGrupoNomina int4, cF1 int4, cF2 int4, cF3 int4) for
		select distinct tp.nombre,t.id_trabajador,t.cedula
		from ausencia au, 
		trabajador t, 
		tipopersonal tp, 
		conceptofijo cf,
		frecuenciatipopersonal ftp, 
		frecuenciapago fp,
		concepto c,
		conceptotipopersonal ctp,				
		parametrovarios pv
		where au.id_personal = t.id_personal 
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pv.id_tipo_personal 
		and cf.id_trabajador = t.id_trabajador
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto=c.id_concepto 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago	
		and c.ausencia = 'S'			
		and pv.ausencia_injustificada = 'S'
		and au.descuento_Estatus = 'P'
		and t.estatus = 'A'         
		and tp.id_grupo_nomina = cIdGrupoNomina 
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)		
		order by tp.nombre,t.cedula; 	

	recTrabajadorConAusenciasDetalle record;
	curTrabajadorConAusenciasDetalle cursor (cIdGrupoNomina int4, cF1 int4, cF2 int4, cF3 int4) for
		select distinct au.id_ausencia
		from ausencia au, 
		trabajador t, 
		tipopersonal tp, 
		conceptofijo cf,
		frecuenciatipopersonal ftp, 
		frecuenciapago fp,
		concepto c,
		conceptotipopersonal ctp,				
		parametrovarios pv
		where au.id_personal = t.id_personal 
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pv.id_tipo_personal 
		and cf.id_trabajador = t.id_trabajador
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto=c.id_concepto 
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago	
		and c.ausencia = 'S'			
		and pv.ausencia_injustificada = 'S'
		and au.descuento_Estatus = 'P'
		and t.estatus = 'A'         
		and tp.id_grupo_nomina = cIdGrupoNomina 
		and ftp.cod_frecuencia_pago in (cF1,cF2,cF3)		
		order by au.id_ausencia; 
        
 begin 	
	raise notice 'Se inicia la ejecucion de la funcion calcular_ausencias()';

	if pIdNominaEspecial <> 0 then 
		vIdNominaEspecial := pIdNominaEspecial;
	end if;


	--- Inicio el proceso de validación 

	--- que al menos un concepto tenga manejo de ausencias
	open curValidaUnConcepto(pIdGrupoNomina, pF1, pF2, pF3);
		fetch curValidaUnConcepto into recValidaUnConcepto;
		if recValidaUnConcepto.cantidad = 0 then 
		vCantidadErrores := vCantidadErrores+1;
		
			Insert into mensajesprenomina(id_grupo_nomina, id_nomina_especial, mensaje) 
				values (pIdGrupoNomina, 
					vIdNominaEspecial, 
					'Verifique la parametrización de cada tipo de personal, al menos debe existir un concepto con descuento por ausencia');
		end if;
	close curValidaUnConcepto;	


	-- la parametrizacion de los que manejan ausencias 
	open curValidaConcepto(pIdGrupoNomina, pF1, pF2, pF3);
	loop
		fetch curValidaConcepto into recValidaConcepto;
		exit when not found;
		vCantidadErrores := vCantidadErrores+1;
		
			Insert into mensajesprenomina(id_grupo_nomina, id_nomina_especial, mensaje) 
				values (pIdGrupoNomina, 
					vIdNominaEspecial, 
					'Verifique la parametrización del descuento por ausencia del concepto ' || recValidaConcepto.cod_concepto || ' ' || recValidaConcepto.descripcion || ' del tipo de personal '|| recValidaConcepto.nombre);
	end loop;
	close curValidaConcepto;

	if vCantidadErrores <> 0 then ---- Existen errores, termina la ejecución
		raise notice 'Imposible calcular las ausencias por falla de la parametrización de los conceptos de descuento del grupo de nómina = %',pIdGrupoNomina;
		-- return 1;
		return;
	end if;
	

	--- Inicio el proceso de cálculo
	raise notice 'Se inicia cálculo de los trabajadores';
	open curTrabajadorConAusencias(pIdGrupoNomina, pF1, pF2, pF3);
	loop
		fetch curTrabajadorConAusencias into recTrabajadorConAusencias;
		exit when not found;

		perform calcular_ausencia_trabajador(pPrenomina,
							vIdNominaEspecial,
							pIdGrupoNomina,
							recTrabajadorConAusencias.id_trabajador,
							pF1,
							pF2,
							pF3);



	end loop;


	close curTrabajadorConAusencias;

	--- Se inicia el proceso de actualización de registros, solo para el ciere de las nóminas 
	if pPrenomina = false then

		if pIdNominaEspecial = 0 then -- es una ordinaria y limpio las ausencias de la nómina anterior
			Delete from ausencianomina where id_grupo_nomina = pIdGrupoNomina and id_nomina_especial is null; 
		end if;

		-- voy con los registros, guardo el historico y actualizo el estatus 
		open curTrabajadorConAusenciasDetalle(pIdGrupoNomina, pF1, pF2, pF3);
		loop
			fetch curTrabajadorConAusenciasDetalle into recTrabajadorConAusenciasDetalle;
			exit when not found;

				-- el registro de cual ausencia se afectó en la nómina 
				Insert into ausencianomina (id_grupo_nomina, id_nomina_especial, id_ausencia) 
					values (pIdGrupoNomina, 
						vIdNominaEspecial, 
						recTrabajadorConAusenciasDetalle.id_ausencia);
		
				-- el registro de la ausencia aplicada
				Update ausencia set descuento_estatus = 'A' where id_ausencia = recTrabajadorConAusenciasDetalle.id_ausencia;

		end loop;
		
		close curTrabajadorConAusenciasDetalle;

	end if;
	
		

		
	raise notice 'Fin calcular_ausencias()';	

-- return 0;
return;

end;



$_$;


--
-- TOC entry 664 (class 1255 OID 3240664)
-- Name: calcular_bono_fin_anio(integer, date, date, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bono_fin_anio(integer, date, date, character varying, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pFechaInicio alias for $2;
	pFechaFin alias for $3;
	pProceso alias for $4;
	pEstatus alias for $5;
	pUsuario alias for $6;
	pPeriodicidad alias for $7;


	recConceptoAlicuota record;
	curConceptoAlicuota cursor(pIdTipoPersonal int4)
		for select ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades
			from conceptotipopersonal ctp, concepto c
			where ctp.id_tipo_personal = pIdTipoPersonal 
                        and c.cod_concepto = '1601'
			and ctp.id_concepto = c.id_concepto;

	recConceptoBonoVacacional record;
	curConceptoBonoVacacional cursor(pIdTipoPersonal int4)
		for select id_concepto_tipo_personal, id_frecuencia_tipo_personal
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                and concepto.cod_concepto = '1500';

	recParametroVarios record;
	curParametroVarios cursor (pIdTipoPersonal int4)
		for select * from parametrovarios 
                where id_tipo_personal = pIdtipoPersonal;

	recConceptoUtilidades record;
	curConceptoUtilidades cursor (pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, numero_dias,  mes_inicio, mes_final, semana_buscar,
                mes_buscar, factor
		from conceptoutilidades 
		where id_tipo_personal = pIdTipoPersonal;

	recConceptoPetrolero record;
	curConceptoPetrolero cursor (pIdTipoPersonal int4)
		for select distinct ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades 
		from conceptotipopersonal ctp, concepto c 
		where ctp.id_tipo_personal = pIdTipoPersonal 
                and c.cod_concepto = '1701'
		and ctp.id_concepto = c.id_concepto;

	recConceptoBonoFinAnio record;
	curConceptoBonoFinAnio cursor (pIdTipoPersonal int4)
		for select distinct id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                and concepto.cod_concepto = '1600';

	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pFecha date)
		for select distinct t.id_trabajador, t.anio_ingreso, t.mes_vacaciones, 	
		t.anio_vacaciones, t.mes_ingreso, t.dia_ingreso, t.dia_ingreso, t.id_cargo, 
		p.anios_servicio_apn, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.dia_egreso, t.mes_egreso, t.anio_egreso
		from trabajador t, personal p, tipopersonal tp, turno tu
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
                and t.fecha_ingreso < pFecha
		and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus;

	recUtilidadesPorAnio record;
	curUtilidadesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from utilidadesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador 
		and cf.estatus = 'A'; 


	recConceptosTipoX record;
	curConceptosTipoX cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cv.monto, cv.unidades, fp.cod_frecuencia_pago 
		from conceptovariable cv, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cv.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cv.id_trabajador = pIdTrabajador 
		and cv.estatus = 'A'; 

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoM record;
	curHistoricoQuincenaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicoquincena hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio and mes = pMes
		group by id_trabajador;

	recHistoricoSemanaTipoM record;
	curHistoricoSemanaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pSemana int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicosemana hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio 
                and semana_quincena = pSemana
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
	periodoInicio int4, periodoFin int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and  anio*100+mes <= periodoFin
		group by id_trabajador;

	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 	
	periodoInicio int4, periodoFin int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and anio*100+mes <= periodoFin
		group by id_trabajador;

	recTrabajadoresSinBonoVacacionalQuincena record;
	curTrabajadoresSinBonoVacacionalQuincena cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicoquincena hq, conceptotipopersonal
                ctp, concepto c
		where hq.id_trabajador = pIdTrabajador
		and hq.anio = pAnio
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recTrabajadoresSinBonoVacacionalSemana record;
	curTrabajadoresSinBonoVacacionalSemana cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicosemana hs, conceptotipopersonal ctp,
                concepto c
                where hs.id_trabajador = pIdTrabajador
		and hs.anio = pAnio
		and hs.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recUltimaNomina record;
	curUltimaNomina cursor(pIdTipoPersonal int4, pAnio int4)
		for select max(mes) as mes_promedio, max(semana_quincena) as periodo_promedio
		from seguridadordinaria so, tipopersonal tp
                where so.anio = pAnio
		and so.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recUltimaSemana record;
	curUltimaSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_anio) as ultima_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recNumeroSemana record;
	curNumeroSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_mes) as numero_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

        
                    
	id int4 := 0;
	montoA float8 := 0;	
	montoB float8 := 0;	
	montoC float8 := 0;	
	montoD float8 := 0;
        montoE float8 := 0;
	montoF float8 := 0;
        montoG float8 := 0;
	totalMontoA float8 := 0; -- basicos (B)	
	totalMontoB float8 := 0; -- proyectados variables (X)
	totalMontoC float8 := 0; -- de un mes (M)
	totalMontoD float8 := 0; -- devengado anual (D)
        totalMontoE float8 := 0; -- promedio de meses (P)
	totalMontoF float8 := 0; -- proyectado fijos (E)
	totalMontoG float8 := 0; -- proyectado fijos (E)
	totalUnidades float8 := 0;
	aniosCumple int4 := 0;	
	diasBono float8 := 0;		
	otrasAlicuotas float8 := 0;
	bonoSinAlicuota float8 := 0;
	totalBono float8 := 0;
	montoVariable float8 := 0;
	bonoExtra float8 := 0;
	mes int4 := 0;
	dividir int4 := 0;	
	montoPetrolero float8 := 0;
	montoBonoVacacional float8 := 0;
	fechaFin date;
        pFecha date;
	periodoInicio int4 := 0;
	periodoFin int4 := 0;
	diasDividir int4 := 0;
        fin date;
	inicio date;
	dias int4 := 0;
        dias_dividir float8 := 0;
	frecuencia int4 := 0; 
	mesesTrabajando int4 := 0;
	aniosCumpleVacaciones int4 := 0;
	idConceptoTipoPersonalAlicuota int4 := 0;
	tipoAlicuota varchar;
	unidadesAlicuota float8 := 0;
	idConceptoTipoPersonalPetrolero int4 := 0;
	tipoPetrolero varchar;
	unidadesPetrolero float8 := 0;
        mes_inicio int4 := 0;
	mes_final int4 := 0;
	anio_inicio int4 := 0;
	anio_final int4 := 0;
	
begin

        raise notice 'si pasa PV ';
	open curParametroVarios(pIdTipoPersonal);
	fetch curParametroVarios into recParametroVarios;			
	if not found then
		return 10;
	end if;
raise notice 'si pasa CBFA ';
       
        if recParametroVarios.fecha_tope_utilidades is null then
           pFecha := pFechaFin;
        else
           pFecha := recParametroVarios.fecha_tope_utilidades;
	end if;

       

        if recParametroVarios.tipo_calculo_bfa= 'D'  then
           dias_dividir := recParametroVarios.dias_anio;
        else
           dias_dividir := 1;
	end if;

-- Se lee la ultima nomina procesada

	open curUltimaNomina(pIdTipoPersonal, extract(year from pFechaFin));
        fetch curUltimaNomina into recUltimaNomina;			
	if not found then
		return 14;
	end if;

-- Se lee el numero de semanas del mes de la ultima nomina

        if pPeriodicidad = 'S' then
	raise notice 'va a abrir ultima semana ';
		open curUltimaSemana(pIdTipoPersonal, extract(year from pFechaFin),
				recUltimaNomina.mes_promedio);
        	fetch curUltimaSemana into recUltimaSemana;
		raise notice 'leyo ultima semana ';			
		if not found then
			return 15;
		end if;
        end if;

	mes := recUltimaNomina.mes_promedio;

        if pPeriodicidad <> 'S' then
	   dividir := 30;
           if recUltimaNomina.periodo_promedio = 1 then
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        else
           if recUltimaNomina.periodo_promedio <> recUltimaSemana.ultima_semana then
	      raise notice 'no es la ultima semana ';
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        	open curNumeroSemana(pIdTipoPersonal, extract(year from pFechaFin), mes);
       		fetch curNumeroSemana into recNumeroSemana;
		raise notice 'leyo cuantas semanas ';			
		if not found then
			return 15;
		end if;

 	   dividir := 7 * recNumeroSemana.numero_semana;
	
         end if;

	



	raise notice 'si pasa CBFA ';
	open curConceptoBonoFinAnio(pIdTipoPersonal);
	fetch curConceptoBonoFinAnio into recConceptoBonoFinAnio;			
	if not found then
		return 11;
	end if;

	open curConceptoAlicuota(pIdTipoPersonal);
	fetch curConceptoAlicuota into recConceptoAlicuota;			
	if not found then		
	else
		idConceptoTipoPersonalAlicuota := recConceptoAlicuota.id_concepto_tipo_personal;
		tipoAlicuota := recConceptoAlicuota.tipo;
		unidadesAlicuota := recConceptoAlicuota.unidades;
	end if;

	open curConceptoBonoVacacional(pIdTipoPersonal);
	fetch curConceptoBonoVacacional into recConceptoBonoVacacional;			
	if not found then
		return 13;
	end if;

	open curConceptoPetrolero(pIdTipoPersonal);
	fetch curConceptoPetrolero into recConceptoPetrolero;			
	if not found then		
	else
		idConceptoTipoPersonalPetrolero := recConceptoPetrolero.id_concepto_tipo_personal;
		tipoPetrolero := recConceptoPetrolero.tipo;
		unidadesPetrolero := recConceptoPetrolero.unidades;
	end if;

	delete from calculobonofinanio where id_tipo_personal = pIdTipoPersonal;

	open curTrabajadores(pIdTipoPersonal, pEstatus, pFecha);

	loop
	     fetch curTrabajadores into recTrabajadores;	
	     exit when not found;

                        
             if pEstatus =  'E' and 
                recTrabajadores.anio_egreso < extract(year from pFechaFin) then

             else
               
               	totalUnidades := 0;
		totalMontoA := 0;	
		totalMontoB := 0;	
		totalMontoC := 0;
		totalMontoD := 0;
		totalMontoE := 0;
		totalMontoF := 0;
		totalMontoG := 0;
		aniosCumple := 0;
		aniosCumpleVacaciones := 0;

		aniosCumple := extract(year from pFechaFin) - recTrabajadores.anio_ingreso;
		aniosCumpleVacaciones := extract(year from pFechaFin) -
	 				 recTrabajadores.anio_vacaciones;

		if recParametroVarios.sumo_apn = 'S'  and 
                   recTrabajadores.anios_servicio_apn > 0 then
			aniosCumple := aniosCumple + recTrabajadores.anios_servicio_apn;
			aniosCumpleVacaciones := aniosCumpleVacaciones +
					 recTrabajadores.anios_servicio_apn;

			raise notice 'aniosCumple mas APN %', aniosCumple;

		end if;

		open curUtilidadesPorAnio(pIdTipoPersonal, aniosCumple);
		fetch curUtilidadesPorAnio into recUtilidadesPorAnio;			
		exit when not found;

		diasBono := 0;

		open curConceptoUtilidades(pIdTipoPersonal);

		loop			
		   fetch curConceptoUtilidades into recConceptoUtilidades;	
	           exit when not found;

		   montoA := 0;	
		   montoB := 0;	
		   montoC := 0;	
		   montoD := 0;
		   montoE := 0;
		   montoF := 0;
		   montoG := 0;

		 
-- conceptos fijos
		   if recConceptoUtilidades.tipo = 'B'  then
		      open curConceptosTipoB 
		        (recConceptoUtilidades.id_concepto_tipo_personal, 
		         recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoB into recConceptosTipoB;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			recConceptosTipoB.monto := recConceptosTipoB.monto *
					 recConceptoUtilidades.factor;
			if recConceptosTipoB.cod_frecuencia_pago = 3 then
				montoA := montoA + recConceptosTipoB.monto*2;
			elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				montoA := montoA + (recConceptosTipoB.monto/7)*30;
			elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				montoA := montoA + (recConceptosTipoB.monto*4);
			elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				recConceptosTipoB.cod_frecuencia_pago = 2 or 
				recConceptosTipoB.cod_frecuencia_pago > 4 then
 				montoA := montoA + recConceptosTipoB.monto;
			end if;

		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoA then
			   montoA := recConceptoUtilidades.tope_monto;
			end if;	

			   montoA := montoA/30;
			   totalMontoA := totalMontoA + montoA;
		           close curConceptosTipoB;
                           raise notice 'termino Basico';

		  end if;

-- conceptos variables
		   if recConceptoUtilidades.tipo = 'X' then

	              open curConceptosTipoX 
		       	(recConceptoUtilidades.id_concepto_tipo_personal, 
			recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoX into recConceptosTipoX;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoX.unidades;

			recConceptosTipoX.monto := recConceptosTipoX.monto *
				 recConceptoUtilidades.factor;

			montoB := montoB + recConceptosTipoX.monto;
					
		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoB := (montoB /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoB then
			   montoB := recConceptoUtilidades.tope_monto;
			end if;	

			montoB := montoB/recParametroVarios.dias_anio;
		        totalMontoB := totalMontoB + montoB;
                        raise notice 'termino Variable';
			close curConceptosTipoX;

		    end if;

-- Devengado a un mes
		    if recConceptoUtilidades.tipo = 'M' then

		       if pPeriodicidad = 'S' then

			  open curHistoricoSemanaTipoM 
		               (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.semana_buscar);

			  loop			
			    fetch curHistoricoSemanaTipoM into recHistoricoSemanaTipoM;	
			    exit when not found;

			    totalUnidades := totalUnidades +recHistoricoSemanaTipoM.unidades;
                            recHistoricoSemanaTipoM.monto := recHistoricoSemanaTipoM.monto * 
					     recConceptoUtilidades.factor;

			    montoC := montoC + recHistoricoSemanaTipoM.monto;

			  end loop;	

			  close curHistoricoSemanaTipoM;				

		       else
			  open curHistoricoQuincenaTipoM
			       (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.mes_buscar);

			  loop			
			     fetch curHistoricoQuincenaTipoM into recHistoricoQuincenaTipoM;
			     exit when not found;

			     totalUnidades := totalUnidades + recHistoricoQuincenaTipoM.unidades;

                             recHistoricoQuincenaTipoM.monto := recHistoricoQuincenaTipoM.monto * 
					recConceptoUtilidades.factor;

			     montoC := montoC + recHistoricoQuincenaTipoM.monto;

			     
			   end loop;

				close curHistoricoQuincenaTipoM;

		       end if;

				if recConceptoUtilidades.tope_unidades <> 0 and 				   recConceptoUtilidades.tope_unidades < totalUnidades then
				   montoC := (montoC /totalUnidades) *
						recConceptoUtilidades.tope_unidades;
				end if;

				if recConceptoUtilidades.tope_monto <> 0 and
				   recConceptoUtilidades.tope_monto < montoC then
				   montoC := recConceptoUtilidades.tope_monto;
				end if;	
						                             
                                montoC := montoC / recParametroVarios.dias_anio;
				totalMontoC := totalMontoC + montoC;
                                raise notice 'termino Promedio';	
				
		      end if;

-- conceptos devengados
			if recConceptoUtilidades.tipo = 'D' then
				if pPeriodicidad = 'S' then
				   open curHistoricoSemanaTipoD 
				     (recConceptoUtilidades.id_concepto_tipo_personal, 
				      recTrabajadores.id_trabajador, 
				      extract(year from pFechaFin));

				   loop			
				      fetch curHistoricoSemanaTipoD into
				            recHistoricoSemanaTipoD;	
                  		      exit when not found;

				      totalUnidades := totalUnidades +
					recHistoricoSemanaTipoD.unidades;

				      recHistoricoSemanaTipoD.monto :=
					recHistoricoSemanaTipoD.monto * 
					recConceptoUtilidades.factor;	

				      montoD := montoD + recHistoricoSemanaTipoD.monto;

				     
				  end loop;

				  close curHistoricoSemanaTipoD;

				else

				  open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoD := montoD + recHistoricoQuincenaTipoD.monto;

				   end loop;

				   close curHistoricoQuincenaTipoD;

				end if;

				 if recConceptoUtilidades.tope_unidades <> 0 and
 				    recConceptoUtilidades.tope_unidades < totalUnidades then
				    montoD := (montoD /totalUnidades)*
						 recConceptoUtilidades.tope_unidades; 
				 end if;

				 if recConceptoUtilidades.tope_monto <> 0 and
				    recConceptoUtilidades.tope_monto < montoD then
				    montoD := recConceptoUtilidades.tope_monto;
		                 end if;	

                                montoD := montoD / dias_dividir;
                                totalMontoD := totalMontoD + montoD;

                                raise notice 'termino Devengado';

                        end if;
-- conceptos promedio
			if recConceptoUtilidades.tipo = 'P' then
                           anio_inicio   := extract(year from pFechaFin);
                           anio_final    := extract(year from pFechaFin);
                           mes_inicio    := recConceptoUtilidades.mes_Inicio;
                           mes_final     := recConceptoUtilidades.mes_Final;
			   periodoInicio := (anio_inicio * 100)+ mes_inicio;
			   periodoFin    := (anio_final * 100)+ mes_final;
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoQuincenaTipoP into recHistoricoQuincenaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoQuincenaTipoP.unidades;

				recHistoricoQuincenaTipoP.monto := 
				     	      recHistoricoQuincenaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoQuincenaTipoP.monto;

			      end loop;

				close curHistoricoQuincenaTipoP;
				   					
			   else

				open curHistoricoSemanaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoSemanaTipoP.unidades;

				recHistoricoSemanaTipoP.monto := 
				     	      recHistoricoSemanaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoSemanaTipoP.monto;

			      end loop;

				close curHistoricoSemanaTipoP;

			   end if;
			

				montoE := montoE/recConceptoUtilidades.numero_dias;

				totalMontoE  := totalMontoE + montoE;

                                raise notice 'termino Promedio';

		        end if;

--conceptos devengados y proyectados

			if recConceptoUtilidades.tipo = 'E' then
                           
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoQuincenaTipoD.monto;

				   end loop;

			       close curHistoricoQuincenaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			        montoG := montoG * recConceptoUtilidades.numero_meses;

			     	        
			   else
 				open curHistoricoSemanaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoSemanaTipoD into 
					   recHistoricoSemanaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoSemanaTipoD.unidades;

				     recHistoricoSemanaTipoD.monto := 
						recHistoricoSemanaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoSemanaTipoD.monto;

				   end loop;

			       close curHistoricoSemanaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			      montoG := montoG * recConceptoUtilidades.numero_meses;

			   end if;
				
			      montoF := (montoF + montoG) / recParametroVarios.dias_anio;

			      totalMontoF := totalMontoF + montoF;

                              raise notice 'termino Proyectado';
		
		        end if;


		end loop;

		montoPetrolero := 0;

		montoBonoVacacional := 0;

		diasBono := recUtilidadesPorAnio.dias_bono;

		if pEstatus = 'A'  then

                   if recParametroVarios.tipo_calculo_bfa = 'D' then 

		       if aniosCumple = 0 then
			    mesesTrabajando := 12 - recTrabajadores.mes_ingreso;
			    if recTrabajadores.dia_ingreso = 1 then
			 	mesesTrabajando := mesesTrabajando +1;
			    end if;			
			    diasBono := (diasBono*mesesTrabajando)/12;
		       end if;

                    end if;


		    if recParametroVarios.alicuota_bvac_bfa = 'S' then
			if pPeriodicidad = 'Q'  then
                           
                       	   if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalQuincena
					(recTrabajadores.id_trabajador,
					 extract(year from pFechaFin));
				loop

				 fetch curTrabajadoresSinBonoVacacionalQuincena into
				       recTrabajadoresSinBonoVacacionalQuincena;	
                                 exit when recTrabajadoresSinBonoVacacionalQuincena.contador > 0;

				 montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones, pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero, 
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal,
						 recParametroVarios.constante_petrolero_a,
						 recParametroVarios.constante_petrolero_b,
						 recParametroVarios.constante_petrolero_c,
                                                 mes, dividir);

		                montoBonoVacacional := montoBonoVacacional /  dias_dividir;
				exit;		

				end loop;

				close curTrabajadoresSinBonoVacacionalQuincena;

                              end if;

			else
                           if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalSemana
					(recTrabajadores.id_trabajador, 
					  extract(year from pFechaFin));

				loop

				fetch curTrabajadoresSinBonoVacacionalSemana into
					 recTrabajadoresSinBonoVacacionalSemana;
 				exit when recTrabajadoresSinBonoVacacionalSemana.contador > 0;

                                montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones,pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero,
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal, 							 recParametroVarios.constante_petrolero_a, 
						 recParametroVarios.constante_petrolero_b, 
						 recParametroVarios.constante_petrolero_c,
						 mes, dividir);

				montoBonoVacacional := montoBonoVacacional /  dias_dividir;	
				
				exit;
			           
				end loop;
				close curTrabajadoresSinBonoVacacionalSemana;
                                end if;

			    end if;

		    end if;
     
             else
-- egresados
	     if recParametroVarios.tipo_calculo_bfa= 'D'  then

	       if aniosCumple = 0 then
	          mesesTrabajando := recTrabajadores.mes_egreso - recTrabajadores.mes_ingreso;
             
			if recTrabajadores.dia_ingreso = 1 and
                           ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;
			 else
			   if recTrabajadores.dia_ingreso > 1 and
                             ((recTrabajadores.dia_egreso < 30 and
                              recTrabajadores.mes_egreso in (4,6,9,11)) or
                             (recTrabajadores.dia_egreso < 31 and
                              recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                             (recTrabajadores.dia_egreso not in (28, 29) and
                              recTrabajadores.mes_egreso = 2) ) 
			    then

                              mesesTrabajando := mesesTrabajando - 1;

                             end if;
			
			   diasBono := (diasBono*mesesTrabajando)/12;

		         end if;

                 else
			mesesTrabajando := recTrabajadores.mes_egreso - 1;

                        if ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;

			 end if;

			diasBono := (diasBono*mesesTrabajando)/12;

                 end if;
 
              end if;
 
            end if;
	

		totalBono := (totalMontoA + totalMontoB + totalMontoC +
                              totalMontoD + totalMontoE + totalMontoF +
                              montoBonoVacacional)* diasBono;
			
		id := last_id_calculobonofinanio()+1;

		if id is null then 
			id := 1;
		end if;

		perform add_calculobonofinanio(id, recTrabajadores.id_trabajador, pIdTipoPersonal,
			convert_2_decimal(totalBono),0,0,diasBono,
			convert_2_decimal(totalMontoA),
			convert_2_decimal(totalMontoE),
			convert_2_decimal(totalMontoD),
			convert_2_decimal(totalMontoC),
			convert_2_decimal(totalMontoB),
			convert_2_decimal(totalMontoF),
                        convert_2_decimal(montoBonoVacacional),	aniosCumple);	

		if pProceso = '2'  and totalBono > 0 then
			id := last_id_conceptovariable()+1;
			if id is null then 
				id := 1;
			end if;

			perform add_conceptovariable(id, recTrabajadores.id_trabajador,
				recConceptoBonoFinAnio.id_concepto_tipo_personal,
				recConceptoBonoFinAnio.id_frecuencia_tipo_personal,
				recUtilidadesPoranio.dias_bono,
				convert_2_decimal(totalBono),
				current_date,
				null, 'A');	

			if recParametroVarios.alicuota_bono_petrolero = 'S' then
			id := last_id_conceptovariable()+1;
				if id is null then 
					id := 1;
				end if;
		

				perform add_conceptovariable(id, recTrabajadores.id_trabajador,
					recConceptoPetrolero.id_concepto_tipo_personal,
					recConceptoBonoFinAnio.id_frecuencia_tipo_personal,
					0,
					convert_2_decimal(montoPetrolero),
					current_date,
					null, 'A');
			end if;
		end if;

		close curUtilidadesPorAnio;

		close curConceptoUtilidades;
  
           end if;

	end loop;

	
	raise notice 'fecha %',fechaFin;

	delete from identity;
	return 1;

end;

$_$;


--
-- TOC entry 665 (class 1255 OID 3240666)
-- Name: calcular_bono_fin_anio_constancia(integer, integer, date, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bono_fin_anio_constancia(integer, integer, date, date, character varying, character varying) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
              pIdTrabajador alias for $2;
	pFechaInicio alias for $3;
	pFechaFin alias for $4;
	pEstatus alias for $5;
            	pPeriodicidad alias for $6;

	recConceptoAlicuota record;
	curConceptoAlicuota cursor(pIdTipoPersonal int4)
		for select ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades
			from conceptotipopersonal ctp, concepto c
			where ctp.id_tipo_personal = pIdTipoPersonal 
                                           and c.cod_concepto = '1601'
			and ctp.id_concepto = c.id_concepto;

	recConceptoBonoVacacional record;
	curConceptoBonoVacacional cursor(pIdTipoPersonal int4)
		for select id_concepto_tipo_personal, id_frecuencia_tipo_personal
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                            and concepto.cod_concepto = '1500';

	recParametroVarios record;
	curParametroVarios cursor (pIdTipoPersonal int4)
		for select * from parametrovarios 
                where id_tipo_personal = pIdtipoPersonal;

	recConceptoUtilidades record;
	curConceptoUtilidades cursor (pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, numero_dias,  mes_inicio, mes_final, semana_buscar,
                            mes_buscar, factor
		from conceptoutilidades 
		where id_tipo_personal = pIdTipoPersonal;

	recConceptoPetrolero record;
	curConceptoPetrolero cursor (pIdTipoPersonal int4)
		for select distinct ctp.id_concepto_tipo_personal, ctp.tipo, ctp.unidades 
		from conceptotipopersonal ctp, concepto c 
		where ctp.id_tipo_personal = pIdTipoPersonal 
                               and c.cod_concepto = '1701'
		   and ctp.id_concepto = c.id_concepto;

	recConceptoBonoFinAnio record;
	curConceptoBonoFinAnio cursor (pIdTipoPersonal int4)
		for select distinct id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		from conceptotipopersonal, concepto 
		where conceptotipopersonal.id_concepto = concepto.id_concepto
		and id_tipo_personal = pIdTipoPersonal 
                            and concepto.cod_concepto = '1600';

	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pFecha date)
		for select distinct t.id_trabajador, t.anio_ingreso, t.mes_vacaciones, 	
		t.anio_vacaciones, t.mes_ingreso, t.dia_ingreso, t.dia_ingreso, t.id_cargo, 
		p.anios_servicio_apn, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.dia_egreso, t.mes_egreso, t.anio_egreso
		from trabajador t, personal p, tipopersonal tp, turno tu
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.id_turno = tu.id_turno
                          --  and t.fecha_ingreso < pFecha
		and t.id_tipo_personal = pIdTipoPersonal 

-- OJO MODIFICACION PARA CONSTANCIAS.
                           and t.id_trabajador     = pIdTrabajador; 
              

	recUtilidadesPorAnio record;
	curUtilidadesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from utilidadesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                               and anios_servicio <= pAniosCumple  
		   order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador 
		and cf.estatus = 'A'; 


	recConceptosTipoX record;
	curConceptosTipoX cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select distinct cv.monto, cv.unidades, fp.cod_frecuencia_pago 
		from conceptovariable cv, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cv.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cv.id_trabajador = pIdTrabajador 
		and cv.estatus = 'A'; 

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio                        
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio    -- OJO CON ESTO 
		group by id_trabajador;

	recHistoricoQuincenaTipoM record;
	curHistoricoQuincenaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicoquincena hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio and mes = pMes   
		group by id_trabajador;

	recHistoricoSemanaTipoM record;
	curHistoricoSemanaTipoM cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
		pAnio int4, pSemana int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades
		from historicosemana hq
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio 
                            and semana_quincena = pSemana
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
	periodoInicio int4, periodoFin int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                            and  anio*100+mes <= periodoFin
		group by id_trabajador;

	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 	
	periodoInicio int4, periodoFin int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio*100+mes >= periodoInicio 
                and anio*100+mes <= periodoFin
		group by id_trabajador;

	recTrabajadoresSinBonoVacacionalQuincena record;
	curTrabajadoresSinBonoVacacionalQuincena cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicoquincena hq, conceptotipopersonal
                ctp, concepto c
		where hq.id_trabajador = pIdTrabajador
		and hq.anio = pAnio
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recTrabajadoresSinBonoVacacionalSemana record;
	curTrabajadoresSinBonoVacacionalSemana cursor(pIdTrabajador int4, pAnio int4)
		for select count(*) as contador from historicosemana hs, conceptotipopersonal ctp,
                concepto c
                where hs.id_trabajador = pIdTrabajador
		and hs.anio = pAnio
		and hs.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto = '1500';

	recUltimaNomina record;
	curUltimaNomina cursor(pIdTipoPersonal int4, pAnio int4)
		for select max(mes) as mes_promedio, max(semana_quincena) as periodo_promedio
		from seguridadordinaria so, tipopersonal tp
                            where so.anio = pAnio
		and so.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recUltimaSemana record;
	curUltimaSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_anio) as ultima_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

	recNumeroSemana record;
	curNumeroSemana cursor(pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select max(semana_mes) as numero_semana
		from semana se, tipopersonal tp
                where se.anio = pAnio
		and se.mes = pMes
		and se.id_grupo_nomina = tp.id_grupo_nomina
		and tp.id_tipo_personal = pIdTipoPersonal;

        
                    
	id int4 := 0;
        montoTotal1 float8 := 0;	
	montoA float8 := 0;	
	montoB float8 := 0;	
	montoC float8 := 0;	
	montoD float8 := 0;
        montoE float8 := 0;
	montoF float8 := 0;
        montoG float8 := 0;
	totalMontoA float8 := 0; -- basicos (B)	
	totalMontoB float8 := 0; -- proyectados variables (X)
	totalMontoC float8 := 0; -- de un mes (M)
	totalMontoD float8 := 0; -- devengado anual (D)
        totalMontoE float8 := 0; -- promedio de meses (P)
	totalMontoF float8 := 0; -- proyectado fijos (E)
	totalMontoG float8 := 0; -- proyectado fijos (E)
	totalUnidades float8 := 0;
	aniosCumple int4 := 0;	
	diasBono float8 := 0;		
	otrasAlicuotas float8 := 0;
	bonoSinAlicuota float8 := 0;
	totalBono float8 := 0;
	montoVariable float8 := 0;
	bonoExtra float8 := 0;
	mes int4 := 0;
	dividir int4 := 0;	
	montoPetrolero float8 := 0;
	montoBonoVacacional float8 := 0;
	fechaFin date;
        pFecha date;
	periodoInicio int4 := 0;
	periodoFin int4 := 0;
	diasDividir int4 := 0;
        fin date;
	inicio date;
	dias int4 := 0;
        dias_dividir float8 := 0;
	frecuencia int4 := 0; 
	mesesTrabajando int4 := 0;
	aniosCumpleVacaciones int4 := 0;
	idConceptoTipoPersonalAlicuota int4 := 0;
	tipoAlicuota varchar;
	unidadesAlicuota float8 := 0;
	idConceptoTipoPersonalPetrolero int4 := 0;
	tipoPetrolero varchar;
	unidadesPetrolero float8 := 0;
        mes_inicio int4 := 0;
	mes_final int4 := 0;
	anio_inicio int4 := 0;
	anio_final int4 := 0;
	
begin

        raise notice 'si pasa PV ';
	open curParametroVarios(pIdTipoPersonal);
	fetch curParametroVarios into recParametroVarios;			
	if not found then
		return 10;
	end if;
raise notice 'si pasa CBFA ';
       
        if recParametroVarios.fecha_tope_utilidades is null then
           pFecha := pFechaFin;
        else
           pFecha := recParametroVarios.fecha_tope_utilidades;
	end if;

       

        if recParametroVarios.tipo_calculo_bfa= 'D'  then
           dias_dividir := recParametroVarios.dias_anio;
        else
           dias_dividir := 1;
        end if;

-- Se lee la ultima nomina procesada

	open curUltimaNomina(pIdTipoPersonal, extract(year from pFechaFin));
        fetch curUltimaNomina into recUltimaNomina;			
	if not found then
		return 14;
	end if;

-- Se lee el numero de semanas del mes de la ultima nomina

        if pPeriodicidad = 'S' then
	raise notice 'va a abrir ultima semana ';
		open curUltimaSemana(pIdTipoPersonal, extract(year from pFechaFin),
				recUltimaNomina.mes_promedio);
        	fetch curUltimaSemana into recUltimaSemana;
		raise notice 'leyo ultima semana ';			
		if not found then
			return 15;
		end if;
        end if;

	mes := recUltimaNomina.mes_promedio;

        if pPeriodicidad <> 'S' then
	   dividir := 30;
           if recUltimaNomina.periodo_promedio = 1 then
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        else
           if recUltimaNomina.periodo_promedio <> recUltimaSemana.ultima_semana then
	      raise notice 'no es la ultima semana ';
              mes := mes - 1;
              if mes = 0 then
                 mes := 1;
              end if;
           end if;
        	open curNumeroSemana(pIdTipoPersonal, extract(year from pFechaFin), mes);
       		fetch curNumeroSemana into recNumeroSemana;
		raise notice 'leyo cuantas semanas ';			
		if not found then
			return 15;
		end if;

 	   dividir := 7 * recNumeroSemana.numero_semana;
	
         end if;

	



	raise notice 'si pasa CBFA ';
	open curConceptoBonoFinAnio(pIdTipoPersonal);
	fetch curConceptoBonoFinAnio into recConceptoBonoFinAnio;			
	if not found then
		return 11;
	end if;

	open curConceptoAlicuota(pIdTipoPersonal);
	fetch curConceptoAlicuota into recConceptoAlicuota;			
	if not found then		
	else
		idConceptoTipoPersonalAlicuota := recConceptoAlicuota.id_concepto_tipo_personal;
		tipoAlicuota := recConceptoAlicuota.tipo;
		unidadesAlicuota := recConceptoAlicuota.unidades;
	end if;

	open curConceptoBonoVacacional(pIdTipoPersonal);
	fetch curConceptoBonoVacacional into recConceptoBonoVacacional;			
	if not found then
		return 13;
	end if;

	open curConceptoPetrolero(pIdTipoPersonal);
	fetch curConceptoPetrolero into recConceptoPetrolero;			
	if not found then		
	else
		idConceptoTipoPersonalPetrolero := recConceptoPetrolero.id_concepto_tipo_personal;
		tipoPetrolero := recConceptoPetrolero.tipo;
		unidadesPetrolero := recConceptoPetrolero.unidades;
	end if;

	delete from calculobonofinanio where id_tipo_personal = pIdTipoPersonal;

	open curTrabajadores(pIdTipoPersonal, pEstatus, pFecha);

	loop
	     fetch curTrabajadores into recTrabajadores;	
	     exit when not found;

                        
             if pEstatus =  'E' and 
                recTrabajadores.anio_egreso < extract(year from pFechaFin) then

             else
               
               	totalUnidades := 0;
		totalMontoA := 0;	
		totalMontoB := 0;	
		totalMontoC := 0;
		totalMontoD := 0;
		totalMontoE := 0;
		totalMontoF := 0;
		totalMontoG := 0;
		aniosCumple := 0;
		aniosCumpleVacaciones := 0;

		aniosCumple := extract(year from pFechaFin) - recTrabajadores.anio_ingreso;
		aniosCumpleVacaciones := extract(year from pFechaFin) -
	 				 recTrabajadores.anio_vacaciones;

		if recParametroVarios.sumo_apn = 'S'  and 
                   recTrabajadores.anios_servicio_apn > 0 then
			aniosCumple := aniosCumple + recTrabajadores.anios_servicio_apn;
			aniosCumpleVacaciones := aniosCumpleVacaciones +
					 recTrabajadores.anios_servicio_apn;

			raise notice 'aniosCumple mas APN %', aniosCumple;

		end if;

		open curUtilidadesPorAnio(pIdTipoPersonal, aniosCumple);
		fetch curUtilidadesPorAnio into recUtilidadesPorAnio;			
		exit when not found;

		diasBono := 0;

		open curConceptoUtilidades(pIdTipoPersonal);

		loop			
		   fetch curConceptoUtilidades into recConceptoUtilidades;	
	           exit when not found;

		   montoA := 0;	
		   montoB := 0;	
		   montoC := 0;	
		   montoD := 0;
		   montoE := 0;
		   montoF := 0;
		   montoG := 0;

		 
-- conceptos fijos
		   if recConceptoUtilidades.tipo = 'B'  then
		      open curConceptosTipoB 
		        (recConceptoUtilidades.id_concepto_tipo_personal, 
		         recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoB into recConceptosTipoB;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			recConceptosTipoB.monto := recConceptosTipoB.monto *
					 recConceptoUtilidades.factor;
			if recConceptosTipoB.cod_frecuencia_pago = 3 then
				montoA := montoA + recConceptosTipoB.monto*2;
			elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				montoA := montoA + (recConceptosTipoB.monto/7)*30;
			elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				montoA := montoA + (recConceptosTipoB.monto*4);
			elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				recConceptosTipoB.cod_frecuencia_pago = 2 or 
				recConceptosTipoB.cod_frecuencia_pago > 4 then
 				montoA := montoA + recConceptosTipoB.monto;
			end if;

		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   

recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoA then
			   montoA := recConceptoUtilidades.tope_monto;
			end if;	

			   montoA := montoA/30;
			   totalMontoA := totalMontoA + montoA;
		           close curConceptosTipoB;
                           raise notice 'termino Basico';

		  end if;

-- conceptos variables
		   if recConceptoUtilidades.tipo = 'X' then

	              open curConceptosTipoX 
		       	(recConceptoUtilidades.id_concepto_tipo_personal, 
			recTrabajadores.id_trabajador);

		      loop			
			fetch curConceptosTipoX into recConceptosTipoX;	
			exit when not found;

			totalUnidades = totalUnidades + recConceptosTipoX.unidades;

			recConceptosTipoX.monto := recConceptosTipoX.monto *
				 recConceptoUtilidades.factor;

			montoB := montoB + recConceptosTipoX.monto;
					
		      end loop;

			if recConceptoUtilidades.tope_unidades <> 0 and 			   				   

recConceptoUtilidades.tope_unidades < totalUnidades then
			   montoB := (montoB /totalUnidades) *
					recConceptoUtilidades.tope_unidades;
			end if;

			if recConceptoUtilidades.tope_monto <> 0 and
			   recConceptoUtilidades.tope_monto < montoB then
			   montoB := recConceptoUtilidades.tope_monto;
			end if;	

			montoB := montoB/recParametroVarios.dias_anio;
		        totalMontoB := totalMontoB + montoB;
                        raise notice 'termino Variable';
			close curConceptosTipoX;

		    end if;

-- Devengado a un mes
		    if recConceptoUtilidades.tipo = 'M' then

		       if pPeriodicidad = 'S' then

			  open curHistoricoSemanaTipoM 
		               (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.semana_buscar);

			  loop			
			    fetch curHistoricoSemanaTipoM into recHistoricoSemanaTipoM;	
			    exit when not found;

			    totalUnidades := totalUnidades +recHistoricoSemanaTipoM.unidades;
                            recHistoricoSemanaTipoM.monto := recHistoricoSemanaTipoM.monto * 
					     recConceptoUtilidades.factor;

			    montoC := montoC + recHistoricoSemanaTipoM.monto;

			  end loop;	

			  close curHistoricoSemanaTipoM;				

		       else
			  open curHistoricoQuincenaTipoM
			       (recConceptoUtilidades.id_concepto_tipo_personal, 
				recTrabajadores.id_trabajador, 
				extract(year from pFechaFin), 
				recConceptoUtilidades.mes_buscar);

			  loop			
			     fetch curHistoricoQuincenaTipoM into recHistoricoQuincenaTipoM;
			     exit when not found;

			     totalUnidades := totalUnidades + recHistoricoQuincenaTipoM.unidades;

                             recHistoricoQuincenaTipoM.monto := recHistoricoQuincenaTipoM.monto * 
					recConceptoUtilidades.factor;

			     montoC := montoC + recHistoricoQuincenaTipoM.monto;

			     
			   end loop;

				close curHistoricoQuincenaTipoM;

		       end if;

				if recConceptoUtilidades.tope_unidades <> 0 and 				   recConceptoUtilidades.tope_unidades < 

totalUnidades then
				   montoC := (montoC /totalUnidades) *
						recConceptoUtilidades.tope_unidades;
				end if;

				if recConceptoUtilidades.tope_monto <> 0 and
				   recConceptoUtilidades.tope_monto < montoC then
				   montoC := recConceptoUtilidades.tope_monto;
				end if;	
						                             
                                montoC := montoC / recParametroVarios.dias_anio;
				totalMontoC := totalMontoC + montoC;
                                raise notice 'termino Promedio';	
				
		      end if;

-- conceptos devengados
			if recConceptoUtilidades.tipo = 'D' then
				if pPeriodicidad = 'S' then
				   open curHistoricoSemanaTipoD 
				     (recConceptoUtilidades.id_concepto_tipo_personal, 
				      recTrabajadores.id_trabajador, 
				      extract(year from pFechaFin));

				   loop			
				      fetch curHistoricoSemanaTipoD into
				            recHistoricoSemanaTipoD;	
                  		      exit when not found;

				      totalUnidades := totalUnidades +
					recHistoricoSemanaTipoD.unidades;

				      recHistoricoSemanaTipoD.monto :=
					recHistoricoSemanaTipoD.monto * 
					recConceptoUtilidades.factor;	

				      montoD := montoD + recHistoricoSemanaTipoD.monto;

				     
				  end loop;

				  close curHistoricoSemanaTipoD;

				else

				  open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoD := montoD + recHistoricoQuincenaTipoD.monto;

				   end loop;

				   close curHistoricoQuincenaTipoD;

				end if;

				 if recConceptoUtilidades.tope_unidades <> 0 and
 				    recConceptoUtilidades.tope_unidades < totalUnidades then
				    montoD := (montoD /totalUnidades)*
						 recConceptoUtilidades.tope_unidades; 
				 end if;

				 if recConceptoUtilidades.tope_monto <> 0 and
				    recConceptoUtilidades.tope_monto < montoD then
				    montoD := recConceptoUtilidades.tope_monto;
		                 end if;	

                                montoD := montoD / dias_dividir;
                                totalMontoD := totalMontoD + montoD;

                                raise notice 'termino Devengado';

                        end if;
-- conceptos promedio
			if recConceptoUtilidades.tipo = 'P' then
                           anio_inicio   := extract(year from pFechaFin);
                           anio_final    := extract(year from pFechaFin);
                           mes_inicio    := recConceptoUtilidades.mes_Inicio;
                           mes_final     := recConceptoUtilidades.mes_Final;
			   periodoInicio := (anio_inicio * 100)+ mes_inicio;
			   periodoFin    := (anio_final * 100)+ mes_final;
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoQuincenaTipoP into recHistoricoQuincenaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoQuincenaTipoP.unidades;

				recHistoricoQuincenaTipoP.monto := 
				     	      recHistoricoQuincenaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoQuincenaTipoP.monto;

			      end loop;

				close curHistoricoQuincenaTipoP;
				   					
			   else

				open curHistoricoSemanaTipoP
 				  (recConceptoUtilidades.id_concepto_tipo_personal,
				   recTrabajadores.id_trabajador, periodoInicio, periodoFin);

                              loop

				fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;
				exit when not found;

				totalUnidades := totalUnidades +
						 recHistoricoSemanaTipoP.unidades;

				recHistoricoSemanaTipoP.monto := 
				     	      recHistoricoSemanaTipoP.monto *
					      recConceptoUtilidades.factor;
				montoE := montoE + recHistoricoSemanaTipoP.monto;

			      end loop;

				close curHistoricoSemanaTipoP;

			   end if;
			

				montoE := montoE/recConceptoUtilidades.numero_dias;

				totalMontoE  := totalMontoE + montoE;

                                raise notice 'termino Promedio';

		        end if;

--conceptos devengados y proyectados

			if recConceptoUtilidades.tipo = 'E' then
                           
			   totalUnidades := 0;
			
-- grupos quincenales
                           if pPeriodicidad <> 'S' then
                     
                              open curHistoricoQuincenaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoQuincenaTipoD into 
					   recHistoricoQuincenaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoQuincenaTipoD.unidades;

				     recHistoricoQuincenaTipoD.monto := 
						recHistoricoQuincenaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoQuincenaTipoD.monto;

				   end loop;

			       close curHistoricoQuincenaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			        montoG := montoG * recConceptoUtilidades.numero_meses;

			     	        
			   else
 				open curHistoricoSemanaTipoD
					(recConceptoUtilidades.id_concepto_tipo_personal,
					 recTrabajadores.id_trabajador, 
					 extract(year from pFechaFin));

				  loop			
				     fetch curHistoricoSemanaTipoD into 
					   recHistoricoSemanaTipoD;	
				     exit when not found;

				     totalUnidades := totalUnidades +
	 					recHistoricoSemanaTipoD.unidades;

				     recHistoricoSemanaTipoD.monto := 
						recHistoricoSemanaTipoD.monto *
 						recConceptoUtilidades.factor;	

				     montoF := montoF + recHistoricoSemanaTipoD.monto;

				   end loop;

			       close curHistoricoSemanaTipoD;

				                     
                               open curConceptosTipoB 
		                 (recConceptoUtilidades.id_concepto_tipo_personal, 
		                  recTrabajadores.id_trabajador);

		               loop			
			         fetch curConceptosTipoB into recConceptosTipoB;	
			         exit when not found;

			         totalUnidades = totalUnidades + recConceptosTipoB.unidades;

			         recConceptosTipoB.monto := recConceptosTipoB.monto *
					         recConceptoUtilidades.factor;
			         if recConceptosTipoB.cod_frecuencia_pago = 3 then
				   montoG := montoG + recConceptosTipoB.monto*2;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
				   montoG := montoG + (recConceptosTipoB.monto/7)*30;
			         elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
				   montoG := montoG + (recConceptosTipoB.monto*4);
			         elsif recConceptosTipoB.cod_frecuencia_pago = 1 or 
				   recConceptosTipoB.cod_frecuencia_pago = 2 or 
				   recConceptosTipoB.cod_frecuencia_pago > 4 then
 				   montoG := montoG + recConceptosTipoB.monto;
			         end if;

		              end loop;

			      close curConceptosTipoB;
			
			      montoG := montoG * recConceptoUtilidades.numero_meses;

			   end if;
				
			      montoF := (montoF + montoG) / recParametroVarios.dias_anio;

			      totalMontoF := totalMontoF + montoF;

                              raise notice 'termino Proyectado';
		
		        end if;


		end loop;

		montoPetrolero := 0;

		montoBonoVacacional := 0;

		diasBono := recUtilidadesPorAnio.dias_bono;

		if pEstatus = 'A'  then

                   if recParametroVarios.tipo_calculo_bfa = 'D' then 

		       if aniosCumple = 0 then
			    mesesTrabajando := 12 - recTrabajadores.mes_ingreso;
			    if recTrabajadores.dia_ingreso = 1 then
			 	mesesTrabajando := mesesTrabajando +1;
			    end if;			
			    diasBono := (diasBono*mesesTrabajando)/12;
		       end if;

                    end if;


		    if recParametroVarios.alicuota_bvac_bfa = 'S' then
			if pPeriodicidad = 'Q'  then
                           
                       	   if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalQuincena
					(recTrabajadores.id_trabajador,
					 extract(year from pFechaFin));
				loop

				 fetch curTrabajadoresSinBonoVacacionalQuincena into
				       recTrabajadoresSinBonoVacacionalQuincena;	
                                 exit when recTrabajadoresSinBonoVacacionalQuincena.contador > 0;

				 montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones, pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero, 
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal,
						 recParametroVarios.constante_petrolero_a,
						 recParametroVarios.constante_petrolero_b,
						 recParametroVarios.constante_petrolero_c,
                                                 mes, dividir);

		                montoBonoVacacional := montoBonoVacacional /  dias_dividir;
				exit;		

				end loop;

				close curTrabajadoresSinBonoVacacionalQuincena;

                              end if;

			else
                           if recTrabajadores.anio_vacaciones < extract(year from pFechaFin) then
				open curTrabajadoresSinBonoVacacionalSemana
					(recTrabajadores.id_trabajador, 
					  extract(year from pFechaFin));

				loop

				fetch curTrabajadoresSinBonoVacacionalSemana into
					 recTrabajadoresSinBonoVacacionalSemana;
 				exit when recTrabajadoresSinBonoVacacionalSemana.contador > 0;

                                montoBonoVacacional := calcular_bonovacacional_trabajador
						(recTrabajadores.id_trabajador,
						 recConceptoAlicuota.id_concepto_tipo_personal,
						 recConceptoAlicuota.tipo,
						 recConceptoAlicuota.unidades,
						 recConceptoPetrolero.id_concepto_tipo_personal,
						 recConceptoPetrolero.tipo,
						 recConceptoPetrolero.unidades,
						 aniosCumpleVacaciones,pIdTipoPersonal,
						 cast(extract(year from pFechaFin) as int4),
						 pPeriodicidad,
						 recParametroVarios.dias_anio,
						 recParametroVarios.alicuota_bfa_bvac,
						 recParametroVarios.alicuota_bono_petrolero,
						 recTrabajadores.jornada_diaria,
						 recTrabajadores.jornada_semanal,
						 recTrabajadores.formula_integral,
						 recTrabajadores.formula_semanal, 							 

recParametroVarios.constante_petrolero_a, 
						 recParametroVarios.constante_petrolero_b, 
						 recParametroVarios.constante_petrolero_c,
						 mes, dividir);

				montoBonoVacacional := montoBonoVacacional /  dias_dividir;	
				
				exit;
			           
				end loop;
				close curTrabajadoresSinBonoVacacionalSemana;
                                end if;

			    end if;

		    end if;
     
             else
-- egresados
	     if recParametroVarios.tipo_calculo_bfa= 'D'  then

	       if aniosCumple = 0 then
	          mesesTrabajando := recTrabajadores.mes_egreso - recTrabajadores.mes_ingreso;
             
			if recTrabajadores.dia_ingreso = 1 and
                           ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;
			 else
			   if recTrabajadores.dia_ingreso > 1 and
                             ((recTrabajadores.dia_egreso < 30 and
                              recTrabajadores.mes_egreso in (4,6,9,11)) or
                             (recTrabajadores.dia_egreso < 31 and
                              recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                             (recTrabajadores.dia_egreso not in (28, 29) and
                              recTrabajadores.mes_egreso = 2) ) 
			    then

                              mesesTrabajando := mesesTrabajando - 1;

                             end if;
			
			   diasBono := (diasBono*mesesTrabajando)/12;

		         end if;

                 else
			mesesTrabajando := recTrabajadores.mes_egreso - 1;

                        if ((recTrabajadores.dia_egreso = 30 and
                            recTrabajadores.mes_egreso in (4,6,9,11)) or
                           (recTrabajadores.dia_egreso = 31 and
                            recTrabajadores.mes_egreso in (1,3,5,7,8,10,12)) or
                           (recTrabajadores.dia_egreso in (28, 29) and
                            recTrabajadores.mes_egreso = 2) )
                         then
			 	mesesTrabajando := mesesTrabajando +1;

			 end if;

			diasBono := (diasBono*mesesTrabajando)/12;

                 end if;
 
              end if;
 
            end if;
	

		    totalBono := (totalMontoA + totalMontoB + totalMontoC +
                                                    totalMontoD + totalMontoE + totalMontoF +
                                                    montoBonoVacacional)* diasBono;
			
		close curUtilidadesPorAnio;

		close curConceptoUtilidades;
  
           end if;

	end loop;

	montoTotal1 := totalBono;
        raise notice 'muestra monto';
        raise notice 'montototalbono_%', montoTotal1;
	return montoTotal1;
end;

$_$;


--
-- TOC entry 666 (class 1255 OID 3240668)
-- Name: calcular_bonovacacional(integer, integer, character varying, double precision, integer, character varying, double precision, integer, character varying, double precision, integer, character varying, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bonovacacional(integer, integer, character varying, double precision, integer, character varying, double precision, integer, character varying, double precision, integer, character varying, double precision, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTrabajador alias for $1;
	pIdConceptoTipoPersonalBonoVacacional alias for $2;	
	pTipoBonoVacacional alias for $3;
	pUnidadesBonoVacacional alias for $4;
	pIdConceptoTipoPersonalAlicuota alias for $5;	
	pTipoAlicuota alias for $6;
	pUnidadesAlicuota alias for $7;
	pIdConceptoTipoPersonalPetrolero alias for $8;	
	pTipoPetrolero alias for $9;
	pUnidadesPetrolero alias for $10;
	pIdConceptoTipoPersonalBonoExtra alias for $11;	
	pTipoBonoExtra alias for $12;
	pUnidadesBonoExtra alias for $13;
	pAniosCumple alias for $14;
	pIdTipoPersonal alias for $15;

	curConceptoVacaciones cursor(pIdTipoPersonal) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;

	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;

	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';



	bonoExtra int4 := 0;
	totalUnidades int4 := 0;
	totalMontoA int4 := 0;	
	totalMontoB int4 := 0;	
	
begin	
	
	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);
	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);
	loop
		raise notice 'si pasa 2 ';
		fetch curConceptoVacaciones into recConceptoVacaciones;	
		if recConceptoVacaciones.tipo = 'B' then
			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal, pIdTrabajador);
			loop
				raise notice 'si pasa 2 ';
				fetch curConceptosTipoB into recConceptosTipoB;	
				totalUnidades := totalUnidades + recConceptosTipoB.unidades;
				if recConceptosTipoB.cod_frecuencia_pago = 3 then
					montoA := montoA + rsConceptosTipoB.monto*2;
				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
					montoA := montoA + (recConceptosTipoB.monto/7)*30;
				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
					montoA := montoA + (recConceptosTipoB.monto*4);
				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or
					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then
						
					montoA := montoA + recConceptosTipoB.monto;
				end if;
			end loop;
		elsif 

		end if;
	end loop;
	close curConceptoVacaciones;
	
end;
$_$;


--
-- TOC entry 667 (class 1255 OID 3240669)
-- Name: calcular_bonovacacional_constancia(integer, integer, integer, integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bonovacacional_constancia(integer, integer, integer, integer, character varying, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pAniosCumple alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPeriodicidad alias for $5;
	pDiasAnio alias for $6;
	pMes alias for $7;
	
	
              recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal 
                               and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades,
		    max(hq.id_frecuencia_tipo_personal) as frecuencia,
                    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicoquincena hq, frecuenciatipopersonal ftp, frecuenciapago fp 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				      pAnio int4, pMes int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades,
		    max(hs.id_frecuencia_tipo_personal) as frecuencia,
  		    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicosemana hs, frecuenciatipopersonal ftp, frecuenciapago fp  
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hs.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;
               montoC float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;
	totalMontoC float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;
              montoTotal float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		raise notice 'si pasa 2 ';

		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

                montoA := 0;
		montoB := 0;

		if recConceptoVacaciones.tipo = 'B' then

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				raise notice 'si pasa 2 ';

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then

					montoA := montoA + recConceptosTipoB.monto;

				end if;

			end loop;

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then

			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 

			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		

			end if;

				montoA := montoA/30;
				totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;

		elsif recConceptoVacaciones.tipo = 'D' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 			

		

recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		elsif  recConceptoVacaciones.tipo = 'P' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoP(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio, pMes);

				loop			
				  fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoP.unidades;

				  montoC := montoC + recHistoricoSemanaTipoP.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoC := (montoC /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoC then
					montoC := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				if recHistoricoSemanaTipoP.cod_frecuencia = 4 then
                                   montoC := montoC / dividir;
                                else
                                   montoC := montoC / 30;
                                end if;                                   

				close curHistoricoSemanaTipoP;

			else

				open curHistoricoQuincenaTipoP
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio, pMes);

				loop			

					fetch curHistoricoQuincenaTipoP into
					      recHistoricoQuincenaTipoP;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoP.unidades;

					montoC := montoC + recHistoricoQuincenaTipoP.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 			

		

recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoC := (montoC /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoC then
					   montoC := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

                                  montoC := montoC / 30;

                                close curHistoricoQuincenaTipoP;

			end if;

			

			totalMontoC := totalMontoC + montoC;


		end if;

	end loop;

	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;

	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	montoTotal :=  totalBono;
	return montoTotal; 

end;

$_$;


--
-- TOC entry 668 (class 1255 OID 3240671)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pIdConceptoTipoPersonalPetrolero alias for $5;	
	pTipoPetrolero alias for $6;
	pUnidadesPetrolero alias for $7;	
	pAniosCumple alias for $8;
	pIdTipoPersonal alias for $9;
	pAnio alias for $10;
	pPeriodicidad alias for $11;
	pDiasAnio alias for $12;
	pAlicuotaBfaBvac alias for $13;
	pAlicuotaBonoPetrolero alias for $14;
	pJornadaDiaria alias for $15;
	pJornadaSemanal alias for $16;
	pFormulaIntegral alias for $17;
	pFormulaSemanal alias for $18;
	pConstantePetroleroA alias for $19;
	pConstantePetroleroB alias for $20;
	pConstantePetroleroC alias for $21;

	recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		
		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

		if recConceptoVacaciones.tipo = 'B' then
                    
                        montoA := 0;

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then
					montoA := montoA + recConceptosTipoB.monto;

				end if;
                                      

			end loop;

                                   

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then
			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 
			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		
			end if;

				montoA := montoA/30;

			 	totalMontoA := totalMontoA + montoA;

                                      
	               close curConceptosTipoB;
                      
                                  

		elsif recConceptoVacaciones.tipo = 'D' then

                        montoB := 0;

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					                                                    recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	


				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		end if;

	end loop;

	montoAlicuota := 0;
	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	return totalBono;
	

end;

$_$;


--
-- TOC entry 669 (class 1255 OID 3240673)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, integer, character varying, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pIdConceptoTipoPersonalPetrolero alias for $5;	
	pTipoPetrolero alias for $6;
	pUnidadesPetrolero alias for $7;	
	pAniosCumple alias for $8;
	pIdTipoPersonal alias for $9;
	pAnio alias for $10;
	pPeriodicidad alias for $11;
	pDiasAnio alias for $12;
	pAlicuotaBfaBvac alias for $13;
	pAlicuotaBonoPetrolero alias for $14;
	pJornadaDiaria alias for $15;
	pJornadaSemanal alias for $16;
	pFormulaIntegral alias for $17;
	pFormulaSemanal alias for $18;
	pConstantePetroleroA alias for $19;
	pConstantePetroleroB alias for $20;
	pConstantePetroleroC alias for $21;
	pMes alias for $22;
	pDividir alias for $23;
	

	recConceptoVacaciones record;
	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, 
		id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;


	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;


	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;


	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoQuincenaTipoP record;
	curHistoricoQuincenaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades,
		    max(hq.id_frecuencia_tipo_personal) as frecuencia,
                    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicoquincena hq, frecuenciatipopersonal ftp, frecuenciapago fp 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	recHistoricoSemanaTipoP record;
	curHistoricoSemanaTipoP cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, 
				pAnio int4, pMes int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades,
		    max(hs.id_frecuencia_tipo_personal) as frecuencia,
  		    max(fp.cod_frecuencia_pago) as cod_frecuencia 
		from historicosemana hs, frecuenciatipopersonal ftp, frecuenciapago fp  
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		and mes = pMes
		and hs.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		group by id_trabajador;


	montoA float8 := 0;	
	montoB float8 := 0;
        montoC float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;
	totalMontoC float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;

begin		

	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);

	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);

	loop

		raise notice 'si pasa 2 ';

		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

                montoA := 0;
		montoB := 0;

		if recConceptoVacaciones.tipo = 'B' then

			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal,
					pIdTrabajador);

			loop

				raise notice 'si pasa 2 ';

				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;

				totalUnidades := totalUnidades + recConceptosTipoB.unidades;

				if recConceptosTipoB.cod_frecuencia_pago = 3 then

					montoA := montoA + (recConceptosTipoB.monto*2);

				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then

					montoA := montoA + (recConceptosTipoB.monto/7)*30;

				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then

					montoA := montoA + (recConceptosTipoB.monto*4);

				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or

					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then

					montoA := montoA + recConceptosTipoB.monto;

				end if;

			end loop;

			if recConceptoVacaciones.tope_unidades <> 0 and
			   recConceptoVacaciones.tope_unidades < totalUnidades then

			   montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 

			end if;

			if recConceptoVacaciones.tope_monto <> 0 and
			   recConceptoVacaciones.tope_monto < montoA then
			   montoA := recConceptoVacaciones.tope_monto; 		

			end if;

				montoA := montoA/30;
				totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;

		elsif recConceptoVacaciones.tipo = 'D' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoD(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio);

				loop			
				  fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoD.unidades;

				  montoB := montoB + recHistoricoSemanaTipoD.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoB := (montoB /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoB then
					montoB := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				close curHistoricoSemanaTipoD;

			else

				open curHistoricoQuincenaTipoD
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio);

				loop			

					fetch curHistoricoQuincenaTipoD into
					      recHistoricoQuincenaTipoD;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoD.unidades;

					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoB := (montoB /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoB then
					   montoB := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

				close curHistoricoQuincenaTipoD;

			end if;

			montoB := montoB/pDiasAnio;

			totalMontoB := totalMontoB + montoB;

		elsif  recConceptoVacaciones.tipo = 'P' then

			if pPeriodicidad = 'S' then
			open curHistoricoSemanaTipoP(
			 	recConceptoVacaciones.id_concepto_tipo_personal,
				pIdTrabajador, pAnio, pMes);

				loop			
				  fetch curHistoricoSemanaTipoP into recHistoricoSemanaTipoP;	
				  exit when not found;

				  totalUnidades := totalUnidades +
						   recHistoricoSemanaTipoP.unidades;

				  montoC := montoC + recHistoricoSemanaTipoP.monto;

				  if recConceptoVacaciones.tope_unidades <> 0 and
				     recConceptoVacaciones.tope_unidades < totalUnidades then
				     montoC := (montoC /totalUnidades)*
						recConceptoVacaciones.tope_unidades; 
				  end if;

				  if recConceptoVacaciones.tope_monto <> 0 and
 				     recConceptoVacaciones.tope_monto < montoC then
					montoC := recConceptoVacaciones.tope_monto;
				  end if;	

				end loop;

				if recHistoricoSemanaTipoP.cod_frecuencia = 4 then
                                   montoC := montoC / dividir;
                                else
                                   montoC := montoC / 30;
                                end if;                                   

				close curHistoricoSemanaTipoP;

			else

				open curHistoricoQuincenaTipoP
	  			     (recConceptoVacaciones.id_concepto_tipo_personal, 
 					pIdTrabajador, pAnio, pMes);

				loop			

					fetch curHistoricoQuincenaTipoP into
					      recHistoricoQuincenaTipoP;	

					exit when not found;
	
					totalUnidades := totalUnidades +
						recHistoricoQuincenaTipoP.unidades;

					montoC := montoC + recHistoricoQuincenaTipoP.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and 					recConceptoVacaciones.tope_unidades < totalUnidades then

					   montoC := (montoC /totalUnidades) *
							recConceptoVacaciones.tope_unidades;
					end if;

					if recConceptoVacaciones.tope_monto <> 0 and
					   recConceptoVacaciones.tope_monto < montoC then
					   montoC := recConceptoVacaciones.tope_monto;
					end if;	

				end loop;

                                  montoC := montoC / 30;

                                close curHistoricoQuincenaTipoP;

			end if;

			

			totalMontoC := totalMontoC + montoC;


		end if;

	end loop;

	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;

	montoPetrolero := 0;

	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB+totalMontoC)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;

	totalBono := convert_2_decimal(totalBono);
	close curConceptoVacaciones;

	close curVacacionesPorAnio;

	return totalBono;
	

end;

$_$;


--
-- TOC entry 650 (class 1255 OID 3240675)
-- Name: calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, double precision, double precision, double precision, integer, character varying, double precision, double precision, double precision, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_bonovacacional_trabajador(integer, integer, character varying, double precision, double precision, double precision, double precision, integer, character varying, double precision, double precision, double precision, double precision, integer, integer, integer, character varying, integer, character varying, character varying, double precision, double precision, character varying, character varying, integer, integer, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTrabajador alias for $1;	
	pIdConceptoTipoPersonalAlicuota alias for $2;	
	pTipoAlicuota alias for $3;
	pUnidadesAlicuota alias for $4;
	pValorAlicuota alias for $5;
	pTopeMinimoAlicuota alias for $6;
	pTopeMaximoAlicuota alias for $7;
	pIdConceptoTipoPersonalPetrolero alias for $8;	
	pTipoPetrolero alias for $9;
	pUnidadesPetrolero alias for $10;
	pValorPetrolero alias for $11;
	pTopeMinimoPetrolero alias for $12;
	pTopeMaximoPetrolero alias for $13;	
	pAniosCumple alias for $14;
	pIdTipoPersonal alias for $15;
	pAnio alias for $16;
	pPeriodicidad alias for $17;
	pDiasAnio alias for $18;
	pAlicuotaBfaBvac alias for $19;
	pAlicuotaBonoPetrolero alias for $20;
	pJornadaDiaria alias for $21;
	pJornadaSemanal alias for $22;
	pFormulaIntegral alias for $23;
	pFormulaSemanal alias for $24;
	pConstantePetroleroA alias for $25;
	pConstantePetroleroB alias for $26;
	pConstantePetroleroC alias for $27;

	recConceptoVacaciones record;

	curConceptoVacaciones cursor (pIdTipoPersonal int4) 
		for select id_concepto_tipo_personal, tipo, tope_unidades, 
		tope_monto, numero_meses, mes_cerrado, alicuota_vacacional, id_concepto_alicuota, mes30 
		from conceptovacaciones 
		where id_tipo_personal = pIdTipoPersonal;

	recVacacionesPorAnio record;
	curVacacionesPoranio cursor(pIdTipoPersonal int4, pAniosCumple int4)
		for select * from vacacionesporanio 
		where id_tipo_personal = pIdTipoPersonal and anios_servicio <= pAniosCumple
		order by anios_servicio desc limit 1;

	recConceptosTipoB record;
	curConceptosTipoB cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4)
		for select cf.monto, cf.unidades, fp.cod_frecuencia_pago 
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp 
		where cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
		and cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = pIdTrabajador
		and cf.estatus = 'A';

	recHistoricoQuincenaTipoD record;
	curHistoricoQuincenaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, pAnio int4)
		for select sum(hq.monto_asigna) as monto, sum(hq.unidades) as unidades 
		from historicoquincena hq 
		where hq.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	recHistoricoSemanaTipoD record;
	curHistoricoSemanaTipoD cursor(pIdConceptoTipoPersonal int4, pIdTrabajador int4, pAnio int4)
		for select sum(hs.monto_asigna) as monto , sum(hs.unidades) as unidades 
		from historicosemana hs 
		where hs.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and id_trabajador = pIdTrabajador
		and anio = pAnio
		group by id_trabajador;

	montoA float8 := 0;	
	montoB float8 := 0;	
	bonoExtra float8 := 0;
	totalUnidades float8 := 0;
	totalMontoA float8 := 0;	
	totalMontoB float8 := 0;	
	montoAlicuota float8 := 0;
	montoPetrolero float8 := 0;
	bonoSinAlicuota float8 := 0;	
	totalBono float8 := 0;
begin		
	open curVacacionesPorAnio(pIdTipoPersonal, pAniosCumple);
	fetch curVacacionesPorAnio into recVacacionesPorAnio;			
	exit when not found;

	open curConceptoVacaciones(pIdTipoPersonal);
	loop
		raise notice 'si pasa 2 ';
		fetch curConceptoVacaciones into recConceptoVacaciones;	
		exit when not found;

		if recConceptoVacaciones.tipo = 'B' then
			open curConceptosTipoB(recConceptoVacaciones.id_concepto_tipo_personal, pIdTrabajador);
			loop
				raise notice 'si pasa 2 ';
				fetch curConceptosTipoB into recConceptosTipoB;	
				exit when not found;
				totalUnidades := totalUnidades + recConceptosTipoB.unidades;
				if recConceptosTipoB.cod_frecuencia_pago = 3 then
					montoA := montoA + (recConceptosTipoB.monto*2);
				elsif recConceptosTipoB.cod_frecuencia_pago = 4 then
					montoA := montoA + (recConceptosTipoB.monto/7)*30;
				elsif recConceptosTipoB.cod_frecuencia_pago = 10 then
					montoA := montoA + (recConceptosTipoB.monto*4);
				elsif recConceptosTipoB.cod_frecuencia_pago = 1 or
					recConceptosTipoB.cod_frecuencia_pago = 2 or 
					recConceptosTipoB.cod_frecuencia_pago > 4 then
						
					montoA := montoA + recConceptosTipoB.monto;
				end if;
			end loop;
			if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
				montoA := (montoA /totalUnidades)*recConceptoVacaciones.tope_unidades; 
			end if;
			if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoA then
				montoA := recConceptoVacaciones.tope_monto;																
			end if;
				
			montoA := montoA/30;
			totalMontoA := totalMontoA + montoA;

			close curConceptosTipoB;
		elsif recConceptoVacaciones.tipo = 'D' then
			if pPeriodicidad = 'S' then
				open curHistoricoSemanaTipoD(recConceptoVacaciones.id_concepto_tipo_personal, recTrabajadores.id_trabajador, pAnio);
				loop			
					fetch curHistoricoSemanaTipoD into recHistoricoSemanaTipoD;	
					exit when not found;

					totalUnidades := totalUnidades + recHistoricoSemanaTipoD.unidades;							
					montoB := montoB + recHistoricoSemanaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
						montoB := (montoB /totalUnidades)*recConceptoVacaciones.tope_unidades; 
					end if;
					if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoB then
						montoB := recConceptoVacaciones.tope_monto;																
					end if;	

				end loop;
				close curHistoricoSemanaTipoD;
			else
				open curHistoricoQuincenaTipoD(recConceptoUtilidades.id_concepto_tipo_personal, recTrabajadores.id_trabajador, extract(year from pFechaFin));
				loop			
					fetch curHistoricoQuincenaTipoD into recHistoricoQuincenaTipoD;	
					exit when not found;

					totalUnidades := totalUnidades + recHistoricoQuincenaTipoD.unidades;							
					montoB := montoB + recHistoricoQuincenaTipoD.monto;

					if recConceptoVacaciones.tope_unidades <> 0 and recConceptoVacaciones.tope_unidades < totalUnidades then
						montoB := (montoB /totalUnidades)*recConceptoVacaciones.tope_unidades; 
					end if;
					if recConceptoVacaciones.tope_monto <> 0 and recConceptoVacaciones.tope_monto < montoB then
						montoB := recConceptoVacaciones.tope_monto;																
					end if;	

				end loop;
				close curHistoricoQuincenaTipoD;
			end if;
			montoB := montoB/pDiasAnio;
			totalMontoB := totalMontoB + montoB;
		end if;
	end loop;
	
	raise notice 'SALIO DEL CURSOR DE CONCEPTOVACACIONES ';

	montoAlicuota := 0;
	
	if pAlicuotaBfaBvac = 'S' then					
		montoAlicuota := calcular_concepto(pIdConceptoTipoPersonalAlicuota, pIdTrabajador, pUnidadesAlicuota, pTipoAlicuota, 1, pJornadaDiaria, pJornada_semanal, pF0ormula_integral, rsTrabajadores.getString("formula_semanal"), pIdCargo, pValorAlicuota, pTopeMinimoAlicuota, pTopeMaximoAlicuota);
		montoAlicuota := montoAlicuota / pDiasAnio;
		montoAlicuota := montoAlicuota * recVacacionesPorAnio.dias_bono;
	else
		montoAlicuota := 0;

	end if;
	
	montoPetrolero := 0;
	if pAlicuotaBonoPetrolero = 'S' then					
		montoPetrolero := calcular_concepto(pIdConceptoTipoPersonalPetrolero, pIdTrabajador, 1, pTipoPetrolero, 1, pJornadaDiaria, pJornadaSemanal, pFormulaIntegral, pFormulaSemanal, pIdCargo, pValorPetrolero, pTopeMinimoPetrolero, pTopeMaximoPetrolero);
		montoPetrolero := ((pConstantePetroleroA + (pConstantePetroleroB*recVacacionesPorAnio.dias_bono)) * montoPetrolero);
		montoPetrolero := montoPetrolero /pConstantePetroleroC;	
		montoPetrolero := montoPetrolero / pDiasAnio;
		montoPetrolero := montoPetrolero * recVacacionesPorAnio.dias_bono;				
	else
		montoPetrolero := 0;

	end if;
	
	bonoSinAlicuota := 0;
	bonoExtra := 0;
	totalBono := 0;

	bonoSinAlicuota := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_bono;
	bonoExtra := (totalMontoA+totalMontoB)* recVacacionesPorAnio.dias_extra;
	totalBono := bonoSinAlicuota + montoAlicuota+montoPetrolero;
	
	close curConceptoVacaciones;
	close curVacacionesPorAnio;
	return totalBono;
	
end;
$_$;


--
-- TOC entry 651 (class 1255 OID 3240677)
-- Name: calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$ 

declare  	
	pIdConceptoTipoPersonal alias for $1;	
	pIdTrabajador alias for $2;
	pUnidades alias for $3;	
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;

	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
      monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
	recConceptoAsociado record;	

	recConceptoAlicuota record;	
	recConceptoCargo record;

	ctp_rec conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cf.id_trabajador = t.id_trabajador		
             	and t.id_trabajador = key1		
			and ctp.id_concepto_tipo_personal = key2	
			union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
		        and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
			and ca.id_concepto_tipo_personal =ctp.id_concepto_tipo_personal		
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp.id_concepto_tipo_personal = key2;
 	
	curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
			from conceptoasociado ca, conceptotipopersonal ctp, 
			conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 
			and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			and c.cod_concepto = '1601' and ctp2.id_concepto = c.id_concepto; 

begin 

	select into ctp_rec * from conceptotipopersonal  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal; 	

	idTipoPersonal := ctp_rec.id_tipo_personal;	
	valor := pValor;
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo; 	

	select into cc * from conceptocargo  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
		and id_cargo = pIdCargo; 	

	if cc.monto is not null then
		valor := cc.monto;
	end if; 	

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

 	diasAnio := pv.dias_anio; 	

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then 

		open curConceptoAsociado(pIdTrabajador,pIdConceptoTipoPersonal);
		 		
		loop 			

			fetch curConceptoAsociado into recConceptoAsociado;			
			exit when not found;

 			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
 			end if; 

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
 			conversion := recConceptoAsociado.base;
 			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

 			if codFrecuenciaPagoAsociado = 1 or 
                     codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                           if recConceptoAsociado.origen ='F' then
			        	montoTotal := montoTotal + monto;
                                    else
                                        montoTotal := montoTotal + (monto* 2);
                                    end if;
				end if; 			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
				    montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
				    montoTotal := montoTotal + (monto*2);	
				else
				    montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then 				
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30)/	pJornadaDiaria;			
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);	
				  elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
				montoTotal := montoTotal + ((monto*4)/30)/
					pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if; 
		
	    end loop; 		
		close curConceptoAsociado;

	 		open curConceptoAlicuota(pIdConceptoTipoPersonal);
	
			fetch curConceptoAlicuota into recConceptoAlicuota;
	 		close curConceptoAlicuota;  		

			if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
				montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador,
					 		0, 'D', 0, 0, 0, '0', '0'); 			
				montoAlicuota := montoAlicuota / diasAnio; 

				if recConceptoAlicuota.base = 'M' then
					montoAlicuota = montoAlicuota * 30;
				end if; 
			end if;

 			if pTipo <> 'D' then
				montoTotal := montoTotal + montoAlicuota;
				montoTotal := (montoTotal * porcentaje)/100;
	 		end if;
	else

		raise notice 'tipo no encontrado';
 		return 0; 	
	end if; 

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if; 

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
 		else
			montoTotal := 0; 		
		end if; 
	end if; 

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

 	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if; 	

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;
	end if; 
    
        montoTotal = convert_2_decimal(montoTotal);

	return montoTotal; 

end; 
$_$;


--
-- TOC entry 652 (class 1255 OID 3240679)
-- Name: calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_concepto(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision, integer) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;	
        pIdTrabajador alias for $2;
	pUnidades alias for $3;	
        pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
        pSemanaMes alias for $14;

	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
        monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
	recConceptoAsociado record;	

	recConceptoAlicuota record;	
	recConceptoCargo record;

	rec_ctp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cf.id_trabajador = t.id_trabajador		
            		and t.id_trabajador = key1		
            		and ctp.id_concepto_tipo_personal = key2	
union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
           		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
 			and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp.id_concepto_tipo_personal = key2;

curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
              		from conceptoasociado ca, conceptotipopersonal ctp, 
			conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 and      				
			ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			and c.cod_concepto = '1601' and ctp2.id_concepto = c.id_concepto;
begin
	select into rec_ctp * from conceptotipopersonal  where 
		id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := rec_ctp.id_tipo_personal;	
	valor := pValor;	
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  where 
		id_concepto_tipo_personal = pIdConceptoTipoPersonal and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;

	end if;

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then

		--raise notice 'Abro curConceptoAsociado %,%',pIdTrabajador,pIdConceptoTipoPersonal;		
		
		open curConceptoAsociado(pIdTrabajador, pIdConceptoTipoPersonal);

		loop

			fetch curConceptoAsociado into recConceptoAsociado;			

			exit when not found;

			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;

			end if;

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;

			conversion := recConceptoAsociado.base;

			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or 
                           codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                                   if recConceptoAsociado.origen ='F' then
				        montoTotal := montoTotal + monto;
                                   else
                                        montoTotal := montoTotal + (monto* 2);
                                   end if;

				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);	
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);

					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);

					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	

					end if;
				else
					montoTotal := montoTotal + monto;

				end if;

			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30) /pJornadaDiaria;	
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif (codFrecuenciaPagoAsociado = 10 and pSemanaMes < 5) then
				if conversion = 'H' then
				        montoTotal := montoTotal + ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if;

		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	

		fetch curConceptoAlicuota into recConceptoAlicuota;	

		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			

			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');


			montoAlicuota := montoAlicuota / diasAnio;

			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;

		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota;
			montoTotal := (montoTotal * porcentaje)/100;	

		end if;

	else
		raise notice 'tipo no encontrado';

		return 0;

	end if;


	if pUnidades > 0 and pTipo <> 'I' then

		montoTotal := montoTotal * pUnidades;

	end if;


	if pTipo = 'D' then

		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;

		end if;

	end if;

	if topeMaximo > 0 then

		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		

	end if;

	if topeMinimo > 0 then

		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		

	end if;


	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;

    
        montoTotal = convert_2_decimal(montoTotal);


	return montoTotal;

end;



$_$;


--
-- TOC entry 653 (class 1255 OID 3240681)
-- Name: calcular_concepto_constancia(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_concepto_constancia(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare  	
	pIdConceptoTipoPersonal alias for $1;	
	pIdTrabajador alias for $2;
	pUnidades alias for $3;	
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;
	pIdCargo alias for $10;
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;	
        monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;
        recConceptoAsociado record;	
        recConcepto record;
	recConceptoAlicuota record;	
	recConceptoCargo record;
              co concepto;
              gn gruponomina;
	ctp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 
        fecha_inicio date;
        fecha_fin date;
        anio_inicio int4 :=0;
        anio_cumple int4 :=1;
        anio_vacaciones_tr int4 :=0;
        estatus_TR varchar :='A';
        codigo_concepto varchar :=0;

	curConceptoCargo cursor (key1 int4, key2 int4) for
                select distinct monto from conceptocargo		
                      where id_cargo = key1 
                         and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (key1 int4, key2 int4) for 
                  select distinct cf.id_concepto_fijo, cf.monto, 
			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp1.valor, 'F' as origen
			from conceptofijo cf, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp1	
			where ca.id_concepto_asociar = cf.id_concepto_tipo_personal	
			  and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			  and fp.id_frecuencia_pago = ftp.id_frecuencia_pago	
			  and ca.id_concepto_tipo_personal = ctp1.id_concepto_tipo_personal
			  and cf.id_trabajador = t.id_trabajador		
             	                              and t.id_trabajador = key1		
			  and ctp1.id_concepto_tipo_personal = key2
	
			union		
       		select distinct cv.id_concepto_variable, cv.monto,
 			fp.cod_frecuencia_pago, ca.base, ca.factor, ctp1.valor, 'V' as origen	
			from conceptovariable cv, conceptoasociado ca, trabajador t,
			frecuenciapago fp, frecuenciatipopersonal ftp, 
			conceptotipopersonal ctp1		
			where ca.id_concepto_asociar = cv.id_concepto_tipo_personal	
		        and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal	
			and fp.id_frecuencia_pago = ftp.id_frecuencia_pago		
			and ca.id_concepto_tipo_personal =ctp1.id_concepto_tipo_personal		
			and cv.id_trabajador = t.id_trabajador		
			and t.id_trabajador = key1	
			and ctp1.id_concepto_tipo_personal = key2;
 	
	curConceptoAlicuota cursor (key1 int4) for
              select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base
			from conceptoasociado ca,      -- ERRROR  conceptotipopersonal ctp, 
			     conceptotipopersonal ctp2, concepto c 
			where ca.id_concepto_tipo_personal = key1 
			  and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal 
			  and c.cod_concepto = '1601'
                                            and ctp2.id_concepto = c.id_concepto; 

begin 

	select into ctp * from conceptotipopersonal  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal; 	

	idTipoPersonal := ctp.id_tipo_personal;	
	valor := pValor;
	topeMaximo := pTopeMaximo;	
	topeMinimo := pTopeMinimo; 	

	select into cc * from conceptocargo  
		where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
		and id_cargo = pIdCargo; 	

	if cc.monto is not null then
		valor := cc.monto;
	end if; 	

	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

 	diasAnio := pv.dias_anio; 	

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then 

		open curConceptoAsociado(pIdTrabajador,pIdConceptoTipoPersonal);
		 		
		loop 			

			fetch curConceptoAsociado into recConceptoAsociado;			
			exit when not found;

 			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
 			end if; 

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
 			conversion := recConceptoAsociado.base;
 			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

 			if codFrecuenciaPagoAsociado = 1 or 
                     codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
   				   montoTotal := montoTotal + (monto/30)/pJornadaDiaria;
				elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);		
				else
                           if recConceptoAsociado.origen ='F' then
			        	montoTotal := montoTotal + monto;
                                    else
                                        montoTotal := montoTotal + (monto* 2);
                                    end if;
				end if; 			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
				    montoTotal := montoTotal + (monto/15)/pJornadaDiaria;
				elsif conversion = 'D' then
				    montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
				    montoTotal := montoTotal + (monto*2);	
				else
				    montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/pJornadaSemanal)/
					pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if; 			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then 				
				if conversion = 'H' then
				   montoTotal := montoTotal + (monto/30)/	pJornadaDiaria;			
			        elsif conversion = 'D' then
				   montoTotal := montoTotal + (monto/30);	
				  elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
				montoTotal := montoTotal + ((monto*4)/30)/
					pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal + ((monto*4)/30);	
				elsif conversion = 'S' then	
					montoTotal := montoTotal + monto;		
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;

			if codFrecuenciaPagoAsociado > 10 then
				montoTotal = montoTotal + monto;
			end if; 
		
	    end loop; 
                 
		close curConceptoAsociado;

	 		open curConceptoAlicuota(pIdConceptoTipoPersonal);
	
			fetch curConceptoAlicuota into recConceptoAlicuota;
	 		close curConceptoAlicuota;  		

			if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
				montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador,
					 		0, 'D', 0, 0, 0, '0', '0'); 			
				montoAlicuota := montoAlicuota / diasAnio; 

				if recConceptoAlicuota.base = 'M' then
					montoAlicuota = montoAlicuota * 30;
				end if; 
			end if;

 			if pTipo <> 'D' then
				montoTotal := montoTotal + montoAlicuota;
				montoTotal := (montoTotal * porcentaje)/100;
	 		end if;
	else

		raise notice 'tipo no encontrado';
 		return 0; 	
	end if; 

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if; 

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
 		else
			montoTotal := 0; 		
		end if; 
	end if; 

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

 	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if; 	

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;
	end if; 
  raise notice 'entre al proceso';

           -- select into gn * from  gruponomina gn1, tipopersonal tp
  	   --	where tp.id_tipo_personal  = ctp.id_tipo_personal
           --     and tp.id_grupo_nomina = gn1.id_grupo_nomina;

         select into gn * from  gruponomina gn1                    
  	   	where gn1.id_grupo_nomina IN (select tp.id_grupo_nomina from tipopersonal tp
                                                where tp.id_tipo_personal  = ctp.id_tipo_personal);


	  --select into co * from concepto c, conceptotipopersonal  ctp5
	  --	where ctp5.id_concepto_tipo_personal = pIdConceptoTipoPersonal
                --             and ctp5.id_concepto = c.id_concepto; 


              select c.cod_concepto into codigo_concepto from concepto c, conceptotipopersonal  ctp5
	  	where ctp5.id_concepto_tipo_personal = pIdConceptoTipoPersonal
                               and ctp5.id_concepto = c.id_concepto; 

              select anio_vacaciones, estatus into anio_vacaciones_tr, estatus_TR from trabajador 
		 where id_trabajador = pIdTrabajador;


                 raise notice 'sali1 al proceso';
             --  fecha_inicio  := select '01-01-'||date_part('year', now());
             --   fecha_fin     := select '31-12-'||date_part('year', now());
             --  anio_inicio   := select date_part('year', now());
               --select '01-01-'||date_part('year', now())into fecha_inicio;
              -- select '31-12-'||date_part('year', now())into fecha_fin;

               select date_part('year', now())||'-01-01'into fecha_inicio;
               select date_part('year', now())||'-12-31'into fecha_fin;
               select date_part('year', now())into anio_inicio;
           

              -- anio_cumple   := anio_inicio - recConceptoAsociado.anio_vacaciones;

              anio_cumple   := (anio_inicio - anio_vacaciones_tr);

              raise notice 'concepto_%',codigo_concepto;
              raise notice 'conceptotipop_%',pIdConceptoTipoPersonal;


	         if codigo_concepto = '1600' then   -- BONO DE FIN DE AÑO calculo para constancias 

                                 raise notice 'entre 1600';
                                 raise notice 'idtp_%',ctp.id_tipo_personal;
                                 raise notice 'idtrabajd_%',pIdTrabajador;
                                 raise notice 'fecjainic_%', fecha_inicio;
                                 raise notice 'fechafin_%', fecha_fin;
		     raise notice 'Estatus_%',  estatus_TR;
                                 raise notice 'periodo_%',  gn.periodicidad;


 
                       -- Calculo bono fin de año
                       -- perform calcular_bono_fin_anio_constancia(ctp.id_tipo_personal,pIdTrabajador, fecha_inicio, fecha_fin, recConceptoAsociado.estatus, gn.periodicidad);

                          montoTotal := calcular_bono_fin_anio_constancia(ctp.id_tipo_personal,pIdTrabajador, fecha_inicio, fecha_fin, estatus_TR, gn.periodicidad);
                    
                          raise notice 'montototal_%', montoTotal;
                          
                 end if;

                if codigo_concepto = '1500' then   -- BONO VACACIONAL calculo para constancias
                       -- Calculo bono vacacional
                          raise notice 'entre 1500';
				 raise notice 'idtrabajd_%',pIdTrabajador;
                                 raise notice 'anio_cumple_%', anio_cumple;
                                 raise notice 'idtp_%',ctp.id_tipo_personal;
                                 raise notice 'anio_inicio_%', anio_inicio;
				 raise notice 'Estatus_%',  estatus_TR;
                                 raise notice 'periodo_%',  gn.periodicidad;

			raise notice 'anio_vacaciones_%',anio_vacaciones_tr;



                          if anio_cumple > 0 THEN
                              montoTotal := calcular_bonovacacional_constancia(pIdTrabajador, anio_cumple,ctp.id_tipo_personal, anio_inicio, gn.periodicidad, 1,  12 );
                          end if;
                 end if;

                 montoTotal = convert_2_decimal(montoTotal);

	   return montoTotal; 

end; 
$_$;


--
-- TOC entry 654 (class 1255 OID 3240683)
-- Name: calcular_concepto_proyectado(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_concepto_proyectado(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;
	pIdTrabajador alias for $2;	
	pUnidades alias for $3;
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;	
	pIdCargo alias for $10;	
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;
	monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;

	recConceptoAsociado record;	
	recConceptoAlicuota record;	
	recConceptoCargo record;

	recCtp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 

	curConceptoCargo cursor (key1 int4, key2 int4) for 
           select distinct monto from conceptocargo
		where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (pIdTrabajador int4, pIdConceptoTipoPersonal int4) for 
            select distinct cf.id_concepto_fijo, cf.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptofijo cf, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cf.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		union
		select distinct cv.id_concepto_variable, cv.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptovariable cv, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cv.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal;


	curConceptoAlicuota cursor (key1 int4) for 
           select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base 
		from conceptoasociado ca, conceptotipopersonal ctp, 
                conceptotipopersonal ctp2, concepto c 
		where ca.id_concepto_tipo_personal = key1
		and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal
		and c.cod_concepto = '1601'
		and ctp2.id_concepto = c.id_concepto;
begin

	select into recCtp * from conceptotipopersonal  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := recCtp.id_tipo_personal;
	valor := pValor;
	topeMaximo := pTopeMaximo;
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
                 and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;
	end if;

	select into pv * from parametrovarios 
               where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then
		--raise notice 'pIdTrabajador%',pIdTrabajador;
		--raise notice 'pIdCTP%',pIdConceptoTipoPersonal;
		open curConceptoAsociado(pIdTrabajador, pIdConceptoTipoPersonal);				
		loop
			fetch curConceptoAsociado into recConceptoAsociado;			
			--raise notice 'pasa 10.1';
			exit when not found;

			
			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
			end if;

			monto := recConceptoAsociado.monto_proyectado*recConceptoAsociado.factor;
			conversion := recConceptoAsociado.base;
			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/30)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/15)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal +             
					(monto/pJornadaSemanal)/pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then

				if conversion = 'H' then
					montoTotal := montoTotal + 
                                                     (monto/30)/pJornadaDiaria;			
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
					montoTotal := montoTotal + 
                                         ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal +
                                           ((monto*4)/30);			
				elsif conversion = 'S' then	
					montoTotal := montoTotal +
                                                 monto;						
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;
		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	
		fetch curConceptoAlicuota into recConceptoAlicuota;	
		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, 
                                    pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');

			montoAlicuota := montoAlicuota / diasAnio;
			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;
		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota; 			
			montoTotal := (montoTotal * porcentaje)/100;	
		end if;
	else
		raise notice 'tipo no encontrado';
		return 0;
	end if;

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if;

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;
		end if;
	end if;

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if;

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;
	return montoTotal;

end;

$_$;


--
-- TOC entry 611 (class 1255 OID 3240685)
-- Name: calcular_concepto_proyectado_movimiento(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_concepto_proyectado_movimiento(integer, integer, double precision, character varying, integer, double precision, double precision, character varying, character varying, integer, double precision, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdConceptoTipoPersonal alias for $1;
	pIdTrabajador alias for $2;	
	pUnidades alias for $3;
	pTipo alias for $4;
	pCodFrecuenciaPago alias for $5;
	pJornadaDiaria alias for $6;
	pJornadaSemanal alias for $7;
	pFormulaIntegral alias for $8;
	pFormulaSemanal alias for $9;	
	pIdCargo alias for $10;	
	pValor alias for $11;
	pTopeMinimo alias for $12;
	pTopeMaximo alias for $13;
	idTipoPersonal int4 := 0;
	valor float8 := 0;
	topeMaximo float8 := 0;
	topeMinimo float8 := 0;
	monto float8 := 0;
	montoTotal float8 := 0;
	porcentaje float8 := 0;
	conversion varchar;
	codFrecuenciaPagoAsociado int4 := 0;
	montoAlicuota float8 := 0;
	diasAnio int4 := 0;

	recConceptoAsociado record;	
	recConceptoAlicuota record;	
	recConceptoCargo record;

	recCtp conceptotipopersonal;
	pv parametrovarios;
	cc conceptocargo; 

	curConceptoCargo cursor (key1 int4, key2 int4) for 
           select distinct monto from conceptocargo
		where id_cargo = key1 and id_concepto_tipo_personal = key2;

	curConceptoAsociado cursor (pIdTrabajador int4, pIdConceptoTipoPersonal int4) for 
            select distinct cp.id_concepto_tipo_personal, cp.monto, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptoproyectado cp, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cp.id_concepto_tipo_personal
		and cp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cp.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		union
		select distinct cv.id_concepto_variable, cv.monto_proyectado, 
		fp.cod_frecuencia_pago, ca.base, ca.factor, ctp.valor		
		from conceptovariable cv, conceptoasociado ca, trabajador t,
		frecuenciapago fp, frecuenciatipopersonal ftp, conceptotipopersonal ctp
		where ca.id_concepto_asociar = cv.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and fp.id_frecuencia_pago = ftp.id_frecuencia_pago
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_trabajador = t.id_trabajador
		and t.id_trabajador = pIdTrabajador
		and ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal;


	curConceptoAlicuota cursor (key1 int4) for 
           select distinct ctp2.id_concepto_tipo_personal, ctp2.tipo, ca.base 
		from conceptoasociado ca, conceptotipopersonal ctp, 
                conceptotipopersonal ctp2, concepto c 
		where ca.id_concepto_tipo_personal = key1
		and ca.id_concepto_asociar=ctp2.id_concepto_tipo_personal
		and c.cod_concepto = '1601'
		and ctp2.id_concepto = c.id_concepto;
begin

	select into recCtp * from conceptotipopersonal  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal;

	idTipoPersonal := recCtp.id_tipo_personal;
	valor := pValor;
	topeMaximo := pTopeMaximo;
	topeMinimo := pTopeMinimo;

	select into cc * from conceptocargo  
               where id_concepto_tipo_personal = pIdConceptoTipoPersonal 
                 and id_cargo = pIdCargo;

	if cc.monto is not null then
		valor := cc.monto;
	end if;

	select into pv * from parametrovarios 
               where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;

	if pTipo = 'F' then
		montoTotal := valor;
	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then
		--raise notice 'pIdTrabajador%',pIdTrabajador;
		--raise notice 'pIdCTP%',pIdConceptoTipoPersonal;

		open curConceptoAsociado(pIdTrabajador,	pIdConceptoTipoPersonal);				
		loop

			fetch curConceptoAsociado into recConceptoAsociado;			
			--raise notice 'pasa 10.1';

			exit when not found;
			

			if pTipo = 'P' then
				porcentaje := valor;
			else
				porcentaje := pUnidades;
			end if;

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;
			conversion := recConceptoAsociado.base;
			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;

			if codFrecuenciaPagoAsociado = 1 or codFrecuenciaPagoAsociado = 2 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/30)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 3 then
				if conversion = 'H' then
					montoTotal := montoTotal + (monto/15)/pJornadaDiaria;	
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/15);	
				elsif conversion = 'M' then
					montoTotal := montoTotal + (monto*2);		
				else
					montoTotal := montoTotal + monto;
				end if;

			elsif codFrecuenciaPagoAsociado = 4 then
				if conversion = 'H' then
					montoTotal := montoTotal +             
					(monto/pJornadaSemanal)/pJornadaDiaria;		
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/pJornadaSemanal);
				elsif conversion = 'M' then	
					if pFormulaIntegral = '1' then
						montoTotal := montoTotal + (((monto/7)*365)/12);
					elsif pFormulaIntegral = '2' then
						montoTotal := montoTotal + ((monto/7)*30);
					elsif pFormulaIntegral = '3' then
						montoTotal := montoTotal + ((monto*52)/12);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 5 or
				codFrecuenciaPagoAsociado = 6 or
				codFrecuenciaPagoAsociado = 7 or
				codFrecuenciaPagoAsociado = 8 or
				codFrecuenciaPagoAsociado = 9 then

				if conversion = 'H' then
					montoTotal := montoTotal + 
                                                     (monto/30)/pJornadaDiaria;			
				elsif conversion = 'D' then
					montoTotal := montoTotal + (monto/30);		
				elsif conversion = 'S' then	
					if pFormulaSemanal = '1' then
						montoTotal := montoTotal + ((monto/30)*7);
					elsif pFormulaSemanal = '2' then
						montoTotal := montoTotal + monto;
					elsif pFormulaSemanal = '3' then
						montoTotal := montoTotal + ((monto*12)/52);	
					end if;
				else
					montoTotal := montoTotal + monto;
				end if;
			elsif codFrecuenciaPagoAsociado = 10 then
				if conversion = 'H' then
					montoTotal := montoTotal + 
                                         ((monto*4)/30)/pJornadaDiaria;				
				elsif conversion = 'D' then
					montoTotal := montoTotal +
                                           ((monto*4)/30);			
				elsif conversion = 'S' then	
					montoTotal := montoTotal +
                                                 monto;						
				else
					montoTotal := montoTotal + monto*4;
				end if;
			end if;
		end loop;

		close curConceptoAsociado;

		open curConceptoAlicuota(pIdConceptoTipoPersonal);	
		fetch curConceptoAlicuota into recConceptoAlicuota;	
		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			
			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, 
                                    pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');

			montoAlicuota := montoAlicuota / diasAnio;
			if recConceptoAlicuota.base = 'M' then
				montoAlicuota = montoAlicuota * 30;
			end if;
		end if;

		if pTipo <> 'D' then				
			montoTotal := montoTotal + montoAlicuota; 			
			montoTotal := (montoTotal * porcentaje)/100;	
		end if;
	else
		raise notice 'tipo no encontrado';
		return 0;
	end if;

	if pUnidades > 0 and pTipo <> 'I' then
		montoTotal := montoTotal * pUnidades;
	end if;

	if pTipo = 'D' then
		if montoTotal < valor then
			montoTotal := valor - montoTotal;
		else
			montoTotal := 0;
		end if;
	end if;

	if topeMaximo > 0 then
		if montoTotal > topeMaximo then
			montoTotal := topeMaximo;
		end if;		
	end if;

	if topeMinimo > 0 then
		if montoTotal < topeMinimo then
			montoTotal := topeMinimo;
		end if;		
	end if;

	if pCodFrecuenciaPago = 3 then 
		montoTotal := montoTotal/2;

	end if;
	return montoTotal;

end;

$_$;


--
-- TOC entry 637 (class 1255 OID 3240687)
-- Name: calcular_interes_adicional(integer, integer, integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_interes_adicional(integer, integer, integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pAnioHasta                    alias for $2;
	pMesHasta                     alias for $3;
        pfecha                        alias for $4;
        pusuario                      alias for $5;
        pproceso                      alias for $6;
       
	
        recTrabajadores               record;
        recTasaBcv                    record;
        recResumenViejoRegimen        record;
	recInteresAdicionalAcumulado  record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	  
      
        curTrabajadores cursor (pIdTipoPersonal int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
                                   
		from trabajador t, personal p, tipopersonal tp
		   where t.id_personal = p.id_personal
		     and t.id_tipo_personal = tp.id_tipo_personal
                     and t.id_tipo_personal = pIdTipoPersonal
                     and t.estatus <>  'E'
                   -- and t.id_trabajador =653
	             and t.id_trabajador in (select b.id_trabajador from resumenviejoregimen b)
                     order by t.id_personal;
        


        curResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from resumenviejoregimen rvr
		where rvr.id_trabajador = pidtrabajador; 
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipos de intereses y antiicpos de capital del viejo regimen.
---
                  and (avr.tipo_anticipo='F' OR avr.tipo_anticipo ='V')
                  and avr.estatus ='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa                        float8 :=0;
        tasa_aplicada               float8 :=0;
        tiempo                      float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        anio_ini                    int4   :=1997;
        mes_ini                     int4   :=6;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        dias_interes                float8 :=0;
        id                          int4   :=0;

begin
        ----
        ----Return 11 no esta la tasa en tasabcv
        ----
        raise notice 'PASA 0 ';
	
	anio_fin :=paniohasta;
        mes_fin  :=pmeshasta;
     
	delete from interesadicional
             where id_trabajador in (select t.id_trabajador from trabajador t
                                      where t.id_tipo_personal = PidTipoPersonal);
        raise notice 'PASA 01 ';
	delete from seguridadinteresadicional
             where id_tipo_personal = PidTipopersonal;

        raise notice 'PASA 1 ';
	open curTrabajadores(pIdTipoPersonal);
	
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;
                raise notice 'PASA 2 ';
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	

                --
                --no se estan procesando los egresados, solo los activos.
                --
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --   if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --        anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --END IF;
                raise notice 'PASA 3 ';   
		
                open curResumenViejoRegimen(recTrabajadores.id_trabajador);
		fetch curresumenviejoregimen into recresumenviejoregimen;	
		close curresumenviejoregimen;
 
                if recresumenviejoregimen.saldo_al_18061997 is not null AND
                   recresumenviejoregimen.saldo_al_18061997 <> 0 THEN		        
                   anio_interes :=anio_ini;
                   mes_interes  :=mes_ini;
 	           loop
          	     	exit when ((anio_interes > anio_fin) or
                              (anio_interes =anio_fin and mes_interes > mes_fin));
                    
                  	montoCapital := 0;	
			montoInteresMensual := 0;	
   		        raise notice 'PASA 4 ';
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(anio_interes);
                        aniosiguientebisiesto:=bisiesto(anio_interes+1);
                        diasanio := 365;
                        


                        if mes_interes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if mes_interes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if mes_interes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and mes_interes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice 'PASA 6 ';

                        if anio_interes = 1997 and mes_interes = 6 THEN
                           diasmes:=12;
                        end if;

                        if aniosiguientebisiesto = 1 and 
                           mes_interes > 4 THEN
                           diasanio:=366;
                        end if;
                        if aniobisiesto = 1 and 
                           mes_interes <= 4 THEN
                           diasanio:=366;
                        end if;

                        open curTasabcv(anio_interes,mes_interes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null 
                                     or rectasabcv.tasa_activa is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := anio_interes;
                        mesanterior  := mes_interes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := anio_interes -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
			if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                          is null then
		          recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAdicionalAcumulado;
                        raise notice 'PASA 8 ';
                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        raise notice 'PASA 9 ';
                        open curAnticipoMes(rectrabajadores.id_personal,
                                            anio_interes,
                                            mes_interes);
		        fetch curAnticipoMes into recAnticipoMes;	
			if not found or recAnticipoMes.monto_anticipo is null then
		          recAnticipoMes.monto_anticipo:=0;
	                end if;
		        close curAnticipoMes;
                        raise notice 'PASA 10 ';
                        dias_interes := diasmes;
                        montoCapital:=(recresumenviejoregimen.saldo_al_18061997 +
                                       recInteresAdicionalAcumulado.monto_interes_acumulado)
                                        -(recAnticipoAcumulado.monto_anticipo_acumulado
                                        +recAnticipoMes.monto_anticipo);
                        ---
                        ---Hasta el mes de julio del aÃ±o 2002 se
                        ---calculan los intereses a tasa promedio. A partir
                        ---de agosto del 2002 a tasa activa.
                        ---
                        raise notice 'PASA 11 ';
                        if anio_interes > 2002 OR 
                           (anio_interes =  2002 and mes_interes > 7) THEN
                            tasa := 1 + (rectasabcv.tasa_activa/100);
                            tasa_aplicada := rectasabcv.tasa_activa;
                        else
                            tasa := 1 + (rectasabcv.tasa_promedio/100);
                            tasa_aplicada := rectasabcv.tasa_promedio;
                        end if;
                        
                        tiempo := dias_interes/diasanio;
                        montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                        monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                        monto_interes_acumulado:=
                              recInteresAdicionalAcumulado.monto_interes_acumulado
                                                 +montoInteresMensual;
 
		        id := last_id_interesadicional()+1;
		        if id is null then 
		           id := 1;
		        end if;
                        raise notice 'PASA 12 ';
                        perform add_interesadicional(id,
                           recTrabajadores.id_trabajador, 
                           anio_interes,
                           mes_interes,
                           dias_interes,
                           tasa_aplicada,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado,
                           recresumenviejoregimen.saldo_al_18061997);
                
                       mes_interes := mes_interes + 1;
                       if mes_interes = 13 then
                          anio_interes := anio_interes +1;
                          mes_interes  := 1;
                       end if;
                end loop;
             end if;
        end loop;
        close curTrabajadores;
		
        raise notice 'PASA 13 ';
        if pproceso ='D' then
       
           update parametrovarios set intereses_adicionales ='S' 
             where id_tipo_personal =pIdtipopersonal;
           id := last_id_seguridadinteresadicional()+1;
   	   if id is null then 
	      id := 1;
	   end if;
           perform add_seguridadinteresadicional(id,pidtipopersonal,paniohasta,pmeshasta,
                                      tasa_aplicada,pfecha,pusuario);
           raise notice 'PASA 14 ';
        end if;

        raise notice 'PASA 15 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 670 (class 1255 OID 3240689)
-- Name: calcular_interes_adicional_mensual(integer, integer, integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_interes_adicional_mensual(integer, integer, integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pAnio                         alias for $2;
	pMes                          alias for $3;
	pfecha                        alias for $4;
        pusuario                      alias for $5;
        pproceso                      alias for $6;
        recTrabajadores               record;
        recTasaBcv                    record;
        recResumenViejoRegimen        record;
	recInteresAdicionalAcumulado  record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
        
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
                                   
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal
                and t.estatus = 'A'
		and t.id_trabajador in (select b.id_trabajador from resumenviejoregimen b)
                order by t.id_personal;
        
        curResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from resumenviejoregimen rvr
		where rvr.id_trabajador = pidtrabajador; 
        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipo Interes Adicionales  que esten aprobados.
---
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo ='F')
                  and avr.estatus='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	
        
        montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa_aplicada               float8 :=0;
        tasa                        float8 :=0;
        tiempo                      float8 :=0;
        dias_interes                float8 :=0;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        id                          int4   :=0;

       
begin




 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
        raise notice 'PASA 0 ';
	
	anio_interes :=panio;
        mes_interes  :=pmes;

        ---
        ---Se elimina el mes que se esta procesando para reprocesarlo 
        ---mientras se esta en prueba.
        --- 	 
	delete from interesadicional
          where id_trabajador in (select distinct t.id_trabajador from trabajador t
    	                            where t.id_tipo_personal= pIdTipoPersonal)
            and anio = panio
            and mes  = pmes;
        raise notice 'PASA 1 ';
	
        open curTrabajadores(pIdTipoPersonal);
	loop
	      fetch curTrabajadores into recTrabajadores;	
	      exit when not found;

              anioingreso := extract(year from recTrabajadores.fecha_ingreso);
              mesingreso := extract(month from recTrabajadores.fecha_ingreso);
              diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	          
              anioanterior := anio_interes;
              mesanterior  := mes_interes -1;
              if mesanterior =0 THEN
                 anioanterior := anio_interes -1;
                 mesanterior  := 12;
              end if;
 	
              open curResumenViejoRegimen(recTrabajadores.id_trabajador);
	      fetch curresumenviejoregimen into recresumenviejoregimen;	
	      close curresumenviejoregimen;
 
              if found and recresumenviejoregimen.saldo_al_18061997 is not null THEN
                 open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                   anioanterior,
                                                   mesanterior);
		 fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
		 if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                    is null then
		    recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	         end if;
		 close curInteresAdicionalAcumulado;

                 open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                           anioanterior,
                                           mesanterior);
		 fetch curAnticipoACumulado into recAnticipoAcumulado;	
		 if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		    recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	         end if;
                 close curAnticipoAcumulado;
		 open curAnticipoMes(rectrabajadores.id_personal,
                                     anio_interes,
                                     mes_interes);
		 fetch curAnticipoMes into recAnticipoMes;	
		 if not found or recAnticipoMes.monto_anticipo is null then
		   recAnticipoMes.monto_anticipo:=0;
	         end if;
		 close curAnticipoMes;
 
                 open curTasabcv(anio_interes,mes_interes);
		 fetch curtasabcv into rectasabcv;	
		 if not found or rectasabcv.tasa_activa is null or
                                 rectasabcv.tasa_promedio is null then
		   return 11;
	         end if;
                 close curtasabcv;
  raise notice 'PASA 2 ';
	
                    
                 montoCapital := 0;	
		 montoInteresMensual := 0;	
	  	 aniobisiesto :=0;
                 aniosiguientebisiesto:=0;
                 aniobisiesto:=bisiesto(anio_interes);
                 aniosiguientebisiesto:=bisiesto(anio_interes+1);
                 diasanio := 365;
                        


                 if mes_interes in (1,3,5,7,8,10,12) then
                    diasmes  :=31;
                 end if;
                 if mes_interes in (4,6,9,11) then
                    diasmes  :=30;
                 end if;
                 if mes_interes in (2) then
                    diasmes  :=28;
                    if aniobisiesto = 1 and mes_interes < 5 THEN
                       diasanio:=366;
                       diasmes :=29;
                    end if;
                 end if;
	
                 if anio_interes = 1997 and mes_interes = 6 THEN
                    diasmes:=12;
                 end if;

                 if aniosiguientebisiesto = 1 and 
                    mes_interes > 4 THEN
                    diasanio:=366;
                 end if;
                 if aniobisiesto = 1 and 
                    mes_interes <= 4 THEN
                    diasanio:=366;
                 end if;
  raise notice 'PASA 3 ';
	
                 dias_interes := diasmes;
                 montoCapital:=(recresumenviejoregimen.saldo_al_18061997 +
                                recInteresAdicionalAcumulado.monto_interes_acumulado)
                                -(recAnticipoAcumulado.monto_anticipo_acumulado
                                 +recAnticipoMes.monto_anticipo);
                           

                 ---
                 ---Hasta el mes de julio del aÃ±o 2002 se
                 ---calculan los intereses a tasa promedio. A partir
                 ---de agosto del 2002 a tasa activa.
                 ---
                 if anio_interes > 2002 OR 
                   (anio_interes =  2002 and mes_interes > 7) THEN
                   tasa := 1 + (rectasabcv.tasa_activa/100);
                   tasa_aplicada := rectasabcv.tasa_activa;
                 else
                    tasa := 1 + (rectasabcv.tasa_promedio/100);
                    tasa_aplicada := rectasabcv.tasa_promedio;
                 end if;      
                 tiempo := dias_interes/diasanio;
                 montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                 monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                       recAnticipoAcumulado.monto_anticipo_acumulado;
                       monto_interes_acumulado:=
                       recInteresAdicionalAcumulado.monto_interes_acumulado
                       +montoInteresMensual;
 
	         id := last_id_interesadicional()+1;
	         if id is null then 
	            id := 1;
	         end if;

  raise notice 'PASA 4 ';
	         perform add_interesadicional(id,
                         recTrabajadores.id_trabajador, 
                         anio_interes,
                         mes_interes,
                         dias_interes,
                         tasa_aplicada,
                         montoCapital,
                         montoInteresMensual,
                         monto_interes_acumulado,
                         recAnticipoMes.monto_anticipo,
                         monto_anticipo_acumulado,
                         recresumenviejoregimen.saldo_al_18061997);
                
              end if;
        end loop;
        close curTrabajadores;
                 
        if pproceso ='D' then
           id := last_id_seguridadinteresadicional()+1;
   	   if id is null then 
	      id := 1;
	   end if;
           perform add_seguridadinteresadicional(id,pidtipopersonal,panio,pmes,
                                      tasa_aplicada,pfecha,pusuario);
		
        end if;
	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 671 (class 1255 OID 3240691)
-- Name: calcular_interes_viejo_regimen(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_interes_viejo_regimen(integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	paniomesdesde                 alias for $2;
        pproceso                      alias for $3;

	recTrabajadores               record;
        recTasaBcv                    record;
        recHistoricoDevengadoIntegral record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recParametroVarios            record;
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                and p.deuda_regimen_derogado ='N'
                order by t.id_personal;

       ---
       ---Empleados es a partir del aÃ±o 1991 mes mayo
       ---Obreros a partir del aÃ±o 1975 mes mayo
       ---
       
        curHistoricoDevengadoIntegral cursor (pIdPersonal int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadoIntegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                 order by  hd.anio,hd.mes;
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_interes_acumulado) as monto_interes_acumulado from interesviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del viejo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;

	
        
        montoPrestaciones           float8 := 0;	
	montoCapital                float8 := 0;	
	montoInteresMensual         float8 := 0;
        monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8  :=0;
        tasa                        float8 := 0;
        tiempo                      float8 := 0;
        dias_interes                float8 :=0;
        diasmes                     float8  :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4 :=0;
        aniosiguientebisiesto       int4 :=0;
        anioingreso                 int4 :=0;
        mesingreso                  int4 :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4 :=0;
        anioanterior                int4 :=0;
        mesanterior                 int4 :=0;
        anio_fin                    int4 :=0;
        mes_fin                     int4 :=0;
        id                          int4 :=0;
        sueldo_transferencia        float8 :=0;
        saldo_al_18061997           float8 :=0;
        pEstatus                    char:='A' ;
begin
	


 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
    raise notice 'PASA 0 ';
	delete from interesviejoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
    raise notice 'PASA 1 ';
	delete from resumenviejoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
	    raise notice 'PASA 2 ';
        
	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoCapital                :=0;	
	        montoInteresMensual         :=0;
                monto_Interes_Acumulado     :=0;	
	        monto_Anticipo_Acumulado    :=0;	
                monto_transferencia         :=0;
                sueldo_transferencia        :=0;
                saldo_al_18061997           :=0;
  

	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        anio_fin :=1997;
                mes_fin:=6;
     
              --- 
              ---Se comento porque no se esta procesando egresados.
              --- 
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --  if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --end if;
		
                if recTrabajadores.anios_servicio_apn < 0 then
                   recTrabajadores.anios_servicio_apn:=0;
                end if;
                                    

	        open curHistoricoDevengadoIntegral(recTrabajadores.id_personal);
		loop			
			fetch curHistoricoDevengadoIntegral into recHistoricoDevengadoIntegral;	
			exit when not found;
		
                	if (recHistoricoDevengadoIntegral.anio > anio_fin OR
		              (recHistoricoDevengadoIntegral.anio = anio_fin AND
                               recHistoricoDevengadoIntegral.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 5 ';

                        aniosservicios := recHistoricoDevengadoIntegral.anio - anioingreso;
                        if (recHistoricoDevengadoIntegral.mes < mesingreso) or
                           (recHistoricoDevengadoIntegral.mes = mesingreso and
                            diaingreso > 1) then
                           aniosservicios := aniosservicios -1;
                        end if;
                        if aniosservicios < 0 then
                           aniosservicios:=0;
                        end if;
                        aniosservicios := aniosservicios+ recTrabajadores.anios_servicio_apn;
		        	

                	montoPrestaciones:= 0;	
			montoCapital := 0;	
			montoInteresMensual := 0;	
		
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio);
                        aniosiguientebisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio+1);
                        diasanio := 365;
                        if recHistoricoDevengadoIntegral.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recHistoricoDevengadoIntegral.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 6 ';

                        if recHistoricoDevengadoIntegral.anio = 1997 and
                           recHistoricoDevengadoIntegral.mes = 6 THEN
                           diasmes:=18;
                        end if;
                        if recHistoricoDevengadoIntegral.anio = 1996 and
                           recHistoricoDevengadoIntegral.mes = 12 THEN
                            sueldo_transferencia :=
                                 recHistoricoDevengadoIntegral.sueldo_integral;  
                        end if;
                        if aniosiguientebisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes > 4 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes <=4 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recHistoricoDevengadoIntegral.anio,
                                        recHistoricoDevengadoIntegral.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recHistoricoDevengadoIntegral.Anio;
                        mesanterior  := recHistoricoDevengadoIntegral.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recHistoricoDevengadoIntegral.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or recinteresacumulado.monto_interes_acumulado is null then
		          recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        if (mesingreso = rechistoricoDevengadoIntegral.mes 
                                   and diaingreso > 1) THEN
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recHistoricoDevengadoIntegral.anio,
                                            recHistoricoDevengadoIntegral.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;

                           montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                           monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                                     recAnticipoAcumulado.monto_anticipo_acumulado;
                           
                           montoCapital:=(montoprestaciones +
                                      recInteresAcumulado.monto_interes_acumulado)-
                                      monto_anticipo_acumulado;
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
                           id := last_id_interesviejoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_interesviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
            	
                           aniosservicios := aniosservicios +1;
                           dias_interes := diasmes -dias_interes;
                           if dias_interes > 0 then
                             open curAnticipoMes(rectrabajadores.id_personal,
                                              recHistoricoDevengadoIntegral.anio,
                                              recHistoricoDevengadoIntegral.mes,
                                              dias_interes+1,31);
		             fetch curAnticipoMes into recAnticipoMes;	
			     if not found or recAnticipoMes.monto_anticipo is null then
		                recAnticipoMes.monto_anticipo:=0;
	                     end if;
		             close curAnticipoMes;
                             monto_anticipo_acumulado := monto_anticipo_acumulado +
                                                         recAnticipomes.monto_anticipo;
                             montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                             montoCapital:=(montoprestaciones +
                                            monto_interes_acumulado)-
                             (monto_anticipo_acumulado);

                           
                             tiempo := (diasmes -(diaingreso-1))/diasanio;
                             montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                             monto_interes_acumulado:=monto_interes_acumulado+
                                                      MontoInteresMensual;
                             
		             id := last_id_interesviejoregimen()+1;
		             if id is null then 
		                id := 1;
		             end if;
                             perform add_interesviejoregimen(id,
                             recTrabajadores.id_trabajador, 
                             recHistoricoDevengadoIntegral.anio,
                             recHistoricoDevengadoIntegral.mes,
                             dias_interes,
                             recHistoricoDevengadoIntegral.sueldo_integral,
                             rectasabcv.tasa_promedio,
                             aniosservicios,
                             montoPrestaciones,
                             montoCapital,
                             montoInteresMensual,
                             monto_interes_acumulado,
                             recAnticipoMes.monto_anticipo,
                             monto_anticipo_acumulado);		
                          end if;
             else
	                  raise notice 'PASA 8 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recHistoricoDevengadoIntegral.anio,
                                       recHistoricoDevengadoIntegral.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;

                          dias_interes := diasmes;
                          montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado)
                                         -(recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
		          id := last_id_interesviejoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;

                          perform add_interesviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
                    end if;
                end loop;
                close curHistoricoDevengadoIntegral;
                if sueldo_transferencia = 0 AND
                   recHistoricoDevengadoIntegral.sueldo_integral is not null THEN
                   sueldo_transferencia := recHistoricoDevengadoIntegral.sueldo_integral;
                end if;
                id := last_id_resumenviejoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
                if sueldo_transferencia <> 0 THEN
                   if sueldo_transferencia > 300000 then
                      sueldo_transferencia := 300000;
                   end if;
                   if sueldo_transferencia < 15000 then
                      sueldo_transferencia := 15000;
                   end if;
                end if;
                if aniosservicios > 13 then
                   aniosservicios :=13;
                end if;
                monto_transferencia := sueldo_transferencia * aniosservicios;
                saldo_al_18061997 := montoprestaciones + monto_interes_acumulado +
                                     monto_transferencia - monto_anticipo_acumulado;

		raise notice 'PASA 9 ';

                IF saldo_al_18061997 <> 0 AND saldo_al_18061997 is not null then
                   perform add_resumenviejoregimen(id,
                              rectrabajadores.id_trabajador,
                              sueldo_transferencia,
                              aniosservicios,
                              montoprestaciones,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_transferencia,
                              saldo_al_18061997);
                END IF;		
	        
        
        end loop;

        close curTrabajadores;

        if pproceso ='D' then
           update parametrovarios set regimen_derogado_procesado ='S' 
             where id_tipo_personal =pIdtipopersonal;
           ---
           ---En caso de que se haya ejecutado ya antes todo el proceso y
           ---se haya colocado en 'N' por parametros varios para repetirlo otra vez.
           ---
           update parametrovarios set intereses_adicionales ='N' 
             where id_tipo_personal =pIdtipopersonal;
           delete from interesadicional
             where id_trabajador in (select t.id_trabajador from trabajador t
                                       where t.id_tipo_personal = PidTipoPersonal);
	
        end if;		
        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 672 (class 1255 OID 3240693)
-- Name: calcular_intereses_nuevo_regimen(integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_intereses_nuevo_regimen(integer, integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        paniohasta                    alias for $2;
        pmeshasta                     alias for $3;
        pproceso                      alias for $4;
        
	recTrabajadores               record;
	recFideicomisomes             record;
        recTasaBcv                    record;
        recprestacionesmensuales      record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recFideicomisoAcumulado       record;
        recParametroVarios            record;
        
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                order by t.id_personal;

       

       ---
       ---A partir del aÃ±o 1997 mes junio
       ---
       
       



         curprestacionesmensuales cursor (pIdtrabajador int4,paniomesdesde int4,paniomeshasta int4)
		for select hd.anio,hd.mes,hd.monto_prestaciones,hd.monto_adicional,
                    dias_mensuales,dias_adicionales
		from prestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta 
                 order by  hd.anio,hd.mes;
       
       


        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_prestaciones_acumuladas) 
                           as monto_prestaciones_acumuladas,max(inr.monto_interes_acumulado)
                           as monto_interes_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del nuevo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='N' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        

         curFideicomisoMes cursor (pIdTrabajador int4,panio int4,
                                   pmes int4,pdia1 int4,pdia2 int4)
		for select sum(f.monto_fideicomiso) as monto_fideicomiso from fideicomiso f
                where f.id_trabajador = pidtrabajador
                  and f.anio = panio
		  and f.mes = pmes
                  and extract(day from f.fecha) between pdia1 and pdia2;
        

        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_anticipo_acumulado) as monto_anticipo_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;

	curFideicomisoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_fideicomiso_acumulado) as monto_fideicomiso_acumulado from interesnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;


        
        montoPrestaciones             float8 :=0;	
	montoCapital                  float8 :=0;	
	montoInteresMensual           float8 :=0;
        monto_Interes_Acumulado       float8 :=0;	
	monto_Anticipo_Acumulado      float8 :=0;	
        monto_Fideicomiso_Acumulado   float8 :=0;	
        monto_Prestaciones_Acumuladas float8 :=0;	
        tasa                          float8 :=0;
        tiempo                        float8 :=0;
        dias_interes                  float8 :=0;
        diasmes                       float8 :=0;
        diasanio                      float8 :=0;
        diasmensuales                 int4   :=0;
        diasadicionales               int4   :=0;
        aniobisiesto                  int4   :=0;
        aniosiguientebisiesto         int4   :=0;
        anioingreso                   int4   :=0;
        mesingreso                    int4   :=0;
        diaingreso                    float8 :=0;
        aniosservicios                int4   :=0;
        anioanterior                  int4   :=0;
        mesanterior                   int4   :=0;
        aniomeshasta                  int4   :=0;
        aniomesdesde                  int4   :=0;
        anio_fin                      int4   :=0;
        mes_fin                       int4   :=0;
        id                            int4   :=0;
        pEstatus                      char   :='A' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

        if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 6 ) then
           return 2;
        end if;
    --    if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 7 ) then
    --       return 2;
    --    end if;


	delete from interesnuevoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
        
        
	delete from resumennuevoregimen where id_trabajador
              in (select t.id_trabajador from trabajador t
                     where t.id_tipo_personal = pIdTipoPersonal);
	
        
        anio_fin    :=paniohasta;
        mes_fin     :=pmeshasta;
        aniomeshasta:=paniohasta * 100 + pmeshasta;
     
        raise notice 'PASA 1 ';

	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;

                raise notice 'PASA 2 ';
        
                montoPrestaciones             :=0;	
	        montoCapital                  :=0;	
	        montoInteresMensual           :=0;
                monto_Interes_Acumulado       :=0;	
	        monto_Anticipo_Acumulado      :=0;	
                monto_Fideicomiso_Acumulado   :=0;	
                monto_Prestaciones_Acumuladas :=0;	
                diasmensuales                 :=0;
                diasadicionales               :=0;

                if rectrabajadores.fecha_ingreso > '1997-06-18 ' then 
	           anioingreso := extract(year  from recTrabajadores.fecha_ingreso);
	           mesingreso  := extract(month from recTrabajadores.fecha_ingreso);
	           diaingreso  := extract(day   from recTrabajadores.fecha_ingreso);
	        else
                   anioingreso := 1997;
	           mesingreso  := 6;
	           diaingreso  := 19;
	         --  anioingreso := 1997;
	         --  mesingreso  := 7;
	         --  diaingreso  := 19;
	      
                end if;

                aniomesdesde := anioingreso * 100 + mesingreso;

	        open curprestacionesmensuales(recTrabajadores.id_trabajador,
                                              aniomesdesde,aniomeshasta);
		loop			
			fetch curprestacionesmensuales into recprestacionesmensuales;	
			exit when not found;
		
                	if (recprestacionesmensuales.anio > anio_fin OR
		              (recprestacionesmensuales.anio = anio_fin AND
                               recprestacionesmensuales.mes > mes_fin)) THEN
	                    exit;
	                end if;
                        


	                raise notice 'PASA 3 ';

                        montoPrestaciones    :=0;	
			montoCapital         :=0;	
			montoInteresMensual  :=0;	
		
                        aniobisiesto         :=0;
                        aniosiguientebisiesto:=0;

                        aniobisiesto         :=bisiesto(recprestacionesmensuales.anio);
                        aniosiguientebisiesto:=bisiesto(recprestacionesmensuales.anio+1);
                        diasanio := 365;
                        if recprestacionesmensuales.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recprestacionesmensuales.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recprestacionesmensuales.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recprestacionesmensuales.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 4 ';

                        if recprestacionesmensuales.anio = 1997 and
                           recprestacionesmensuales.mes = 6 THEN
                           diasmes:=12;
                        end if;
                     --   if recprestacionesmensuales.anio = 1997 and
                     --      recprestacionesmensuales.mes = 7 THEN
                     --      diasmes:=13;
                     --   end if;
                        
                        if aniosiguientebisiesto = 1 and 
                           recprestacionesmensuales.mes > 5 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recprestacionesmensuales.mes <=5 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recprestacionesmensuales.anio,
                                        recprestacionesmensuales.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recprestacionesmensuales.Anio;
                        mesanterior  := recprestacionesmensuales.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recprestacionesmensuales.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 5 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or 
                           recinteresacumulado.monto_interes_acumulado is null then
		           recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        if not found or recinteresacumulado.monto_prestaciones_acumuladas 
                             is null then
		             recinteresacumulado.monto_prestaciones_acumuladas:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or 
                           recAnticipoAcumulado.monto_anticipo_acumulado is null then
		           recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        open curFideicomisoAcumulado(rectrabajadores.id_trabajador,
                                                     anioanterior,mesanterior);
		        fetch curFideicomisoACumulado into recFideicomisoAcumulado;	
			if not found or 
                           recFideicomisoAcumulado.monto_fideicomiso_acumulado is null then
		           recFideicomisoAcumulado.monto_fideicomiso_acumulado:=0;
	                end if;
                        close curFideicomisoAcumulado;
		        

                        if (diaingreso > 1 and (anioingreso <>recprestacionesmensuales.anio
                                            or mesingreso <> recprestacionesmensuales.mes))
                           then
                           raise notice 'PASA 61 ';
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recprestacionesmensuales.anio,
                                            recprestacionesmensuales.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;
                           raise notice 'PASA 62 ';
                          
                           open curFideicomisoMes(rectrabajadores.id_trabajador,
                                  recprestacionesmensuales.anio,
                                  recprestacionesmensuales.mes,1,dias_interes);                
                           fetch curFideicomisoMes into recFideicomisoMes;	
		   	   if not found or recFideicomisoMes.monto_Fideicomiso is null then
		              recFideicomisoMes.monto_Fideicomiso:=0;
	                   end if;
		           close curFideicomisoMes;

                           
                           montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                              + recprestacionesmensuales.monto_adicional);
                           
                           montoCapital:=(recInteresAcumulado.monto_prestaciones_acumuladas
                                  + recInteresAcumulado.monto_interes_acumulado)
                                  -(recAnticipoAcumulado.monto_anticipo_acumulado
                                    +recAnticipoMes.monto_anticipo
                                    +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                    +recFideicomisoMes.Monto_fideicomiso);
                           
                           raise notice 'PASA 63 ';
                          
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                           monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                 recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                           monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
                           monto_prestaciones_acumuladas:=               
                              recInteresAcumulado.monto_prestaciones_acumuladas;
          	           id := last_id_interesnuevoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_interesnuevoregimen(id,
                                 recTrabajadores.id_trabajador, 
                                 recprestacionesmensuales.anio,
                                 recprestacionesmensuales.mes,
                                 dias_interes,
                                 rectasabcv.tasa_promedio,
                                 0,
                                 0,
                                 0,
                                 0,
                                 monto_prestaciones_acumuladas,
                                 MontoCapital,
                                 montoInteresMensual,
                                 monto_interes_acumulado,
                                 recAnticipoMes.monto_anticipo,
                                 monto_anticipo_acumulado,
                                 recFideicomisoMes.monto_fideicomiso,
                                 monto_fideicomiso_acumulado);		
            	           
                           dias_interes := diasmes -dias_interes;
                           
                           if dias_interes > 0 then
                              open curAnticipoMes(rectrabajadores.id_personal,
                                               recprestacionesmensuales.anio,
                                               recprestacionesmensuales.mes,
                                               dias_interes+1,31);
		              fetch curAnticipoMes into recAnticipoMes;	
			      if not found or recAnticipoMes.monto_anticipo is null then
		                 recAnticipoMes.monto_anticipo:=0;
	                      end if;
		              close curAnticipoMes;
                              open curFideicomisoMes(rectrabajadores.id_trabajador,
                                   recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,dias_interes+1,31);                
                              fetch curFideicomisoMes into recFideicomisoMes;	
		   	      if not found or recFideicomisoMes.monto_Fideicomiso is null then
		                 recFideicomisoMes.monto_Fideicomiso:=0;
	                      end if;
		              close curFideicomisoMes;


                              montoPrestaciones:= (
                                      recprestacionesmensuales.monto_prestaciones 
                                    + recprestacionesmensuales.monto_adicional);
                           
                              montoCapital:=(montoprestaciones +
                                         monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(monto_anticipo_acumulado
                                         + recAnticipoMes.monto_anticipo
                                         + monto_fideicomiso_acumulado
                                         + recFideicomisoMes.Monto_fideicomiso);
                           
                              tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                                                    
                              tiempo := (diasmes -(diaingreso-1))/diasanio;
                              montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                              monto_interes_acumulado := monto_interes_acumulado +
                                                          montointeresmensual;
                              monto_prestaciones_acumuladas :=
                                      recInteresAcumulado.monto_prestaciones_acumuladas +
                                      montoprestaciones;
                              id := last_id_interesnuevoregimen()+1;
		              if id is null then 
		                 id := 1;
		              end if;
                              perform add_interesnuevoregimen(id,
                                    recTrabajadores.id_trabajador, 
                                    recprestacionesmensuales.anio,
                                    recprestacionesmensuales.mes,
                                    dias_interes,
                                    rectasabcv.tasa_promedio,
                                    recprestacionesmensuales.monto_prestaciones,
                                    recprestacionesmensuales.monto_adicional,
                                    recprestacionesmensuales.dias_mensuales,
                                    recprestacionesmensuales.dias_adicionales,
                                    monto_prestaciones_acumuladas,
                                    montoCapital,
                                    montoInteresMensual,
                                    monto_interes_acumulado,
                                    recAnticipoMes.monto_anticipo,
                                    monto_anticipo_acumulado,
                                    recFideicomisoMes.monto_fideicomiso,
                                    monto_fideicomiso_acumulado);		
                           end if;
             else
	                  raise notice 'PASA 7 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;
  raise notice 'PASA 8 ';
                        
                          open curFideicomisoMes(rectrabajadores.id_trabajador,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curFideicomisoMes into recFideicomisoMes;	
		   	  if not found or recFideicomisoMes.monto_Fideicomiso is null then
		             recFideicomisoMes.monto_Fideicomiso:=0;
	                  end if;
		          close curFideicomisoMes;

  raise notice 'PASA 9 ';




                          if (anioingreso =recprestacionesmensuales.anio and
                              mesingreso = recprestacionesmensuales.mes) then
                              if diasmes <> 12 then
                              --if diasmes <> 13 then

  raise notice 'PASA 99999999999999999999999999 ';
                                 dias_interes :=diasmes - diaingreso;
                              else
                                 dias_interes := diasmes;
                              end if;
                          else
                             dias_interes := diasmes;
                          end if;
                          montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                             + recprestacionesmensuales.monto_adicional);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(
                                          recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo
                                         +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                         +recFideicomisoMes.Monto_fideicomiso);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

raise notice 'PASA 91 ';
                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado

                                                    +montoInteresMensual;
raise notice 'PASA 92 ';

                          monto_prestaciones_acumuladas :=
                                          recInteresAcumulado.monto_prestaciones_acumuladas +
                                          montoprestaciones;
   raise notice 'PASA 10 ';
                        
		          id := last_id_interesnuevoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;


 

 





                          perform add_interesnuevoregimen(id,
                              recTrabajadores.id_trabajador, 
                              recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,
                              dias_interes,
                              rectasabcv.tasa_promedio,
                              recprestacionesmensuales.monto_prestaciones,
                              recprestacionesmensuales.monto_adicional,
                              recprestacionesmensuales.dias_mensuales,
                              recprestacionesmensuales.dias_adicionales,
                              monto_prestaciones_acumuladas,
                              montoCapital,
                              montoInteresMensual,
                              monto_interes_acumulado,
                              recAnticipoMes.monto_anticipo,
                              monto_anticipo_acumulado,
                              recFideicomisoMes.monto_fideicomiso,
                              monto_fideicomiso_acumulado);		
                       		
                      end if;
                      diasmensuales:= 
                            diasmensuales +recprestacionesmensuales.dias_mensuales;
                      diasadicionales:= 
                            diasadicionales +recprestacionesmensuales.dias_adicionales;
                             
                end loop;
                close curprestacionesmensuales;
                id := last_id_resumennuevoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
          	raise notice 'PASA 9 ';
                perform add_resumennuevoregimen(id,
                              rectrabajadores.id_trabajador,
                              monto_prestaciones_acumuladas,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_fideicomiso_acumulado,
                              diasmensuales,
                              diasadicionales);		
        end loop;
        close curTrabajadores;


       
      raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 673 (class 1255 OID 3240695)
-- Name: calcular_limite_mensual(double precision, character varying, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_limite_mensual(double precision, character varying, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pMontoBaseTotal alias for $1;	
	pPeriodicidad alias for $2;
	pLimiteMensual alias for $3;
begin
	if pMontoBaseTotal > pLimiteMensual then
		return pLimiteMensual;
	else
		return pMontoBaseTotal;
	end if;
end;
$_$;


--
-- TOC entry 674 (class 1255 OID 3240696)
-- Name: calcular_limite_semanal(double precision, double precision, character varying, character varying, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_limite_semanal(double precision, double precision, character varying, character varying, double precision, double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pMontoBaseTotal alias for $1;	
	pMontoBase2 alias for $2;	
	pPeriodicidad alias for $3;
	pParametro alias for $4;
	pLimiteMensual alias for $5;
	pLimiteSemanal alias for $6;
	limite float8 = 0;
begin
	if pParametro = 'SSO' or pParametro = 'SPF' then
		if pMontoBase2 = 0 then
			limite := plimiteSemanal;
		else
			limite := plimiteMensual;
		end if;
	else
		limite := pLimiteMensual;
	end if;
	if pMontoBaseTotal > limite then
		return limite;
	else
		return pMontoBaseTotal;
	end if;
end;
$_$;


--
-- TOC entry 675 (class 1255 OID 3240697)
-- Name: calcular_prestaciones_historico(integer, integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_prestaciones_historico(integer, integer, integer, integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        paniodesde                    alias for $2;
        pmesdesde                     alias for $3;
        paniohasta                    alias for $4;
        pmeshasta                     alias for $5;
        pproceso                      alias for $6;
        
	recTrabajadores               record;
        rechistoricodevengado         record;
	recPrestacionesmensuales      record;
	
        curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,t.id_tipo_personal
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = pEstatus
                order by t.id_personal;

        ---
        ---A partir del año 1997 mes junio
        ---
       
        curhistoricodevengado cursor (pIdpersonal int4,
                                      paniomesdesde int4, paniomeshasta int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadointegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta
                  order by anio,mes;
	
        curprestacionesmensuales cursor(pIdtrabajador int4,paniomesdesde int4,
                                       paniomeshasta int4)
		for select sum(hd.monto_prestaciones) as monto_prestaciones
		from prestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta;
	
        
        montoPrestaciones           float8 := 0;	
        montoAdicional              float8 := 0;	
        baseAdicional               float8 := 0;	
        diasprestaciones            int4   :=0;
        diasadicionales             int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        aniomesdesde2               int4   :=0;
        aniomeshasta2               int4   :=0;
        aniomesdesde                int4   :=0;
        aniomeshasta                int4   :=0;
        id                          int4   :=0;
        pEstatus                    char   :='A' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

        if paniohasta < 1997 or (paniohasta =1997 and pmeshasta < 6 ) then
           return 2;
        end if;
        aniomesdesde2 := paniodesde * 100 + pmesdesde;
        aniomeshasta2 := paniohasta * 100 + pmeshasta;

	--delete from prestacionesmensuales
        --   where id_trabajador
        --      in (select t.id_trabajador from trabajador t
        --             where t.id_tipo_personal = pIdTipoPersonal
        --               and t.estatus <> 'E');
	
       
        anio_fin :=paniohasta;
        mes_fin:=pmeshasta;
        raise notice 'PASA 1 ';
     
	open curTrabajadores(pIdTipoPersonal, pEstatus);
	loop
		fetch curTrabajadores into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoAdicional              :=0;

	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        raise notice 'PASA 2 ';

              --- 
              ---Se comento porque no se esta procesando egresados.
              --- 
                --if rectrabajadores.estatus ='E' then
	        --   anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        --   mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        --   diaegreso := extract(day from recTrabajadores.fecha_egreso);
                --   anio_fin  :=anioegreso;
                --   mes_fin   :=mesegreso;
                --   if anio_fin is null then
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --  if ((anio_fin > 1997) or (anio_fin =1997 and mes_fin > 6)) THEN
                --      anio_fin := 1997;
                --      mes_fin  := 6;
                --   end if;
                --end if;
		
                                    

	        open curhistoricodevengado(recTrabajadores.id_personal,
                                                   aniomesdesde2,aniomeshasta2);
		loop			
			fetch curhistoricodevengado into rechistoricodevengado;	
			exit when not found;
		
                	if (rechistoricodevengado.anio > anio_fin OR
		              (rechistoricodevengado.anio = anio_fin AND
                               rechistoricodevengado.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 3 ';

                        diasadicionales    := 0;
                        diasprestaciones   := 0;
                        montoprestaciones  := 0;	
	                montoadicional     := 0;
                        aniosservicios     := 0;
                        baseadicional      := 0;
                        aniomesdesde       := 0;
                        aniomeshasta       := 0;

                        if anioingreso < 1997 then
                           diasprestaciones := 5;
                           if rechistoricodevengado.mes = 6 then
                              aniosservicios:= rechistoricodevengado.anio - 1997;
                              aniomesdesde  := ((rechistoricodevengado.anio - 1) * 100) + 7;
                              aniomeshasta  := (rechistoricodevengado.anio * 100) + 5;
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                           end if;
                        else
                           aniomesdesde := (anioingreso * 100) + mesingreso; 
                           aniomeshasta := (rechistoricodevengado.anio * 100) +
                                           rechistoricodevengado.mes;
                           if aniomeshasta - aniomesdesde > 3 then
                              diasprestaciones := 5;
                           end if; 
                                                     
                           if rechistoricodevengado.mes = mesingreso then
                              aniosservicios := rechistoricodevengado.anio - anioingreso;
                              aniomesdesde := (rechistoricodevengado.anio - 1) * 100 
                                               + (mesingreso + 1);
                              
                              anioanterior := rechistoricodevengado.Anio;
                              mesanterior  := mesingreso -1;
                        
                              if mesanterior =0 THEN
                                 anioanterior := rechistoricodevengado.Anio -1;
                                 mesanterior  := 12;
                              end if;
 	                      aniomeshasta := anioanterior * 100 +mesanterior;
                             
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                          end if;
                        end if;
                        raise notice 'PASA 4 ';

                        montoAdicional:=0;
                        montoPrestaciones:= 
                            (rechistoricodevengado.sueldo_integral/30) 
                             * diasprestaciones;  
                        if diasadicionales > 0  then
                           open curprestacionesmensuales
                              (rectrabajadores.id_trabajador,aniomesdesde,aniomeshasta);
  			   fetch curprestacionesmensuales 
                                  into recprestacionesmensuales;	
	                   close curprestacionesmensuales;
                           if recprestacionesmensuales.monto_prestaciones is null then
                              recprestacionesmensuales.monto_prestaciones :=0;
                           end if;
                           baseadicional :=recprestacionesmensuales.monto_prestaciones+
                                           montoprestaciones;
                           montoadicional:= (baseadicional/60) * diasadicionales;
 
                        end if;
                        raise notice 'PASA 5 ';


                





                      if diasprestaciones = 5 then
                           raise notice 'PASA 6 ';
  
		           id := last_id_prestacionesmensuales()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           raise notice 'PASA 7 ';
                           perform delete_prestacionesmensuales(
                             rectrabajadores.id_tipo_personal,
                             rectrabajadores.id_trabajador,
                             rechistoricodevengado.anio,
                             rechistoricodevengado.mes);
                           perform add_prestacionesmensuales(id,
                             rectrabajadores.id_tipo_personal,
                             rectrabajadores.id_trabajador,
                             rechistoricodevengado.anio,
                             rechistoricodevengado.mes,
                             diasprestaciones,
                             diasadicionales,
                             rechistoricodevengado.sueldo_integral,
                             baseadicional,
                             montoprestaciones,
                             montoadicional,'N','N');
                       end if;                
                end loop;
                close curhistoricodevengado;
          	raise notice 'PASA 8 ';
               
        
        end loop;

        close curTrabajadores;
        raise notice 'PASA 9 ';

       		
        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 676 (class 1255 OID 3240699)
-- Name: calcular_promedios_mensual(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_promedios_mensual(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 	
	pIdTipoPersonal alias for $1;
	
	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;

	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');
begin

        ---
        ---Busca a los trabajadores
        ---
	open curTrabajadores1 (pIdTipoPersonal);                                       
	loop
		fetch curTrabajadores1 into recTrabajadores1;			                                                   
		exit when not found;
		
		montoBase1Si := 0.0;
		montoBase2Si := 0.0;
		montoBaseTotalSi := 0.0;

		montoBase1Sb := 0.0;
		montoBase2Sb := 0.0;
		montoBaseTotalSb := 0.0;

		montoBase1Co := 0.0;
		montoBase2Co := 0.0;
		montoBaseTotalCo := 0.0;

		montoBase1Pt := 0.0;
		montoBase2Pt := 0.0;
		montoBaseTotalPt := 0.0;

		montoBase1Pc := 0.0;
		montoBase2Pc := 0.0;
		montoBaseTotalPc := 0.0;

		montoBase1As := 0.0;
		montoBase2As := 0.0;
		montoBaseTotalAs := 0.0;

		montoSumar := 0.0;

                ---
                ---Busca los conceptos del trabajador
                ---
		open curPromedios(recTrabajadores1.id_trabajador);
		loop
			fetch curPromedios into recPromedios;			
			exit when not found;
			montoSumar := 0;
			if recPromedios.monto_restituir = 0 then
				montoSumar := recPromedios.monto;
			else
				montoSumar := recPromedios.monto_restituir;
			end if;
                        ---
                        ---Suma en sueldo integral si el indicador esta encendido
                        ---
			if recPromedios.sueldo_integral = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Si := montoBase1Si + (montoSumar*2);
				else
					montoBase2Si := montoBase2Si + (montoSumar);
				end if;
			end if;
                        ---
                        ---Suma en sueldo basico,compensacion,primas trabajador,
                        ---primas cargos, ajuste de sueldo de acuerdo al indicador
                        ---
			
			if recPromedios.sueldo_basico = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Sb := montoBase1Sb + (montoSumar*2);
				else
					montoBase2Sb := montoBase2Sb + (montoSumar);
				end if;

			elsif recPromedios.compensacion = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Co := montoBase1Co + (montoSumar*2);
				else
					montoBase2Co := montoBase2Co+ (montoSumar);
				end if;

			elsif recPromedios.primas_trabajador = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Pt := montoBase1Pt + (montoSumar*2);
				else
					montoBase2Pt := montoBase2Pt+ (montoSumar);
				end if;

			elsif recPromedios.primas_cargo = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1Pc := montoBase1Pc + (montoSumar*2);
				else
					montoBase2Pc := montoBase2Pc+ (montoSumar);
				end if;

			elsif recPromedios.ajuste_sueldo = 'S' then
				if recPromedios.cod_frecuencia_pago = 3 then
					montoBase1As := montoBase1As + (montoSumar*2);
				else
					montoBase1As := montoBase1As + (montoSumar*2);
				end if;
			end if;

		end loop;
		close curPromedios;
		montoBaseTotalSi := montoBase1Si + montoBase2Si;
		montoBaseTotalSb := montoBase1Sb + montoBase2Sb;
		montoBaseTotalCo := montoBase1Co + montoBase2Co;
		montoBaseTotalPt := montoBase1Pt + montoBase2Pt;
		montoBaseTotalPc := montoBase1Pc + montoBase2Pc;
		montoBaseTotalAs := montoBase1As + montoBase2As;
                
                ---actualiza la tabla sueldo promedios
		perform update_sueldo_promedio(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSi,
			montoBaseTotalSb,
			montoBaseTotalCo,
			montoBaseTotalPt,
			montoBaseTotalPc,
			montoBaseTotalAs);
               ---
               ---Actualiza el campo sueldo_basico de la ficha del trabajador
               ---
               if montoBaseTotalSb > 0 then
                  perform update_trabajador_sueldo_basico(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSb);
               end if;


	end loop;
	close curTrabajadores1;
	return true;
end;

$_$;


--
-- TOC entry 677 (class 1255 OID 3240700)
-- Name: calcular_promedios_semanal(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_promedios_semanal(integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;	
	
	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;
	
	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;
	
	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;
	
	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;
	
	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;
	
	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;
	
	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;
	
	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');
begin
	open curTrabajadores1 (pIdTipoPersonal);
	loop
		fetch curTrabajadores1 into recTrabajadores1;			
		exit when not found;

		montoBase1Si := 0.0;
		montoBase2Si := 0.0;
		montoBaseTotalSi := 0.0;

		montoBase1Sb := 0.0;
		montoBase2Sb := 0.0;
		montoBaseTotalSb := 0.0;

		montoBase1Co := 0.0;
		montoBase2Co := 0.0;
		montoBaseTotalCo := 0.0;

		montoBase1Pt := 0.0;
		montoBase2Pt := 0.0;
		montoBaseTotalPt := 0.0;

		montoBase1Pc := 0.0;
		montoBase2Pc := 0.0;
		montoBaseTotalPc := 0.0;

		montoBase1As := 0.0;
		montoBase2As := 0.0;
		montoBaseTotalAs := 0.0;

		montoSumar := 0.0;

		open curPromedios(recTrabajadores1.id_trabajador);				
		loop
			fetch curPromedios into recPromedios;			
			exit when not found;

			montoSumar := 0;
			if recPromedios.monto_restituir = 0 then
				montoSumar := recPromedios.monto;
			else
				montoSumar := recPromedios.monto_restituir;
			end if;
			if recPromedios.cod_frecuencia_pago = 4 then
			   if recPromedios.sueldo_integral = 'S' then
				montoBase1Si := montoBase1Si + recPromedios.monto;
			   end if;

			   if recPromedios.sueldo_basico = 'S' then
				montoBase1Sb := montoBase1Sb + recPromedios.monto;
			     elsif recPromedios.compensacion = 'S' then
				montoBase1Co := montoBase1Co + recPromedios.monto;
			     elsif recPromedios.primas_trabajador = 'S' then
				montoBase1Pt := montoBase1Pt + recPromedios.monto;
			     elsif recPromedios.primas_cargo = 'S' then
				montoBase1Pc := montoBase1Pc + recPromedios.monto;
			     elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase1As := montoBase1As + recPromedios.monto;
			   end if;

			elsif (recPromedios.cod_frecuencia_pago > 4 and
                                              recPromedios.cod_frecuencia_pago <> 10) then
			     if recPromedios.sueldo_integral = 'S' then
				montoBase2Si := montoBase2Si + recPromedios.monto;
                                         end if;
			      if recPromedios.sueldo_basico = 'S' then
				montoBase2Sb := montoBase2Sb + recPromedios.monto;
			      elsif recPromedios.compensacion = 'S' then
				montoBase2Co := montoBase2Co + recPromedios.monto;
			      elsif recPromedios.primas_trabajador = 'S' then
				montoBase2Pt := montoBase2Pt + recPromedios.monto;
			      elsif recPromedios.primas_cargo = 'S' then
				montoBase2Pc := montoBase2Pc + recPromedios.monto;
			      elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase2As := montoBase2As + recPromedios.monto;
			      end if;
					    
                                         elsif (recPromedios.cod_frecuencia_pago = 10) then
			        if recPromedios.sueldo_integral = 'S' then
				montoBase2Si := montoBase2Si + recPromedios.monto*4;
                                             end if;
			         if recPromedios.sueldo_basico = 'S' then
				montoBase2Sb := montoBase2Sb + recPromedios.monto*4;
			         elsif recPromedios.compensacion = 'S' then
				montoBase2Co := montoBase2Co + recPromedios.monto*4;
			         elsif recPromedios.primas_trabajador = 'S' then
				montoBase2Pt := montoBase2Pt + recPromedios.monto*4;
			         elsif recPromedios.primas_cargo = 'S' then
				montoBase2Pc := montoBase2Pc + recPromedios.monto*4;
			         elsif recPromedios.ajuste_sueldo = 'S' then
				montoBase2As := montoBase2As + recPromedios.monto*4;
			        end if;
                                     end if;


		end loop;

		close curPromedios;
		
		if recTrabajadores1.formula_integral = '1' then
			montoBaseTotalSi := (((montoBase1Si/7)+(montoBase2Si/30))*365)/12;
			montoBaseTotalSb := (((montoBase1Sb/7)+(montoBase2Sb/30))*365)/12;
			montoBaseTotalCo := (((montoBase1Co/7)+(montoBase2Co/30))*365)/12;
			montoBaseTotalPt := (((montoBase1Pt/7)+(montoBase2Pt/30))*365)/12;
			montoBaseTotalPc := (((montoBase1Pc/7)+(montoBase2Pc/30))*365)/12;
			montoBaseTotalAs := (((montoBase1As/7)+(montoBase2As/30))*365)/12;
		elsif recTrabajadores1.formula_integral = '2' then
			montoBaseTotalSi := (montoBase1Si/7)*30 + montoBase2Si;
			montoBaseTotalSb := (montoBase1Sb/7)*30 + montoBase2Sb;
			montoBaseTotalCo := (montoBase1Co/7)*30 + montoBase2Co;
			montoBaseTotalPt := (montoBase1Pt/7)*30 + montoBase2Pt;
			montoBaseTotalPc := (montoBase1Pc/7)*30 + montoBase2Pc;
			montoBaseTotalAs := (montoBase1As/7)*30 + montoBase2As;
		elsif recTrabajadores1.formula_integral = '3' then
			montoBaseTotalSi := (montoBase1Si*52)/12 + montoBase2Si;
			montoBaseTotalSb := (montoBase1Sb*52)/12 + montoBase2Sb;
			montoBaseTotalCo := (montoBase1Co*52)/12 + montoBase2Co;
			montoBaseTotalPt := (montoBase1Pt*52)/12 + montoBase2Pt;
			montoBaseTotalPc := (montoBase1Pc*52)/12 + montoBase2Pc;
			montoBaseTotalAs := (montoBase1As*52)/12 + montoBase2As;
		end if;
		
		perform update_sueldo_promedio(
			recTrabajadores1.id_trabajador, 
			montoBaseTotalSi,
			montoBaseTotalSb,
			montoBaseTotalCo,
			montoBaseTotalPt,
			montoBaseTotalPc,
			montoBaseTotalAs);			
	end loop;
	close curTrabajadores1;
	
	return true;
end;

$_$;


--
-- TOC entry 678 (class 1255 OID 3240701)
-- Name: calcular_retroactivo(integer, integer, date, date, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_retroactivo(integer, integer, date, date, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdConceptoTipoPersonal alias for $2;
	pFechaVigencia alias for $3;
	pFechaProceso alias for $4;
	pDias alias for $5;	
	pPeriodicidad alias for $6;
	
	recConcepto record;
	curConcepto cursor (pIdConceptoTipoPersonal int4, pFechaVigencia date) 
		for select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, null as fecha_ingreso,
		0 as anio_ingreso, 0 as mes_ingreso, 0 as dia_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso <= pFechaVigencia
		and t.estatus = 'A'
		union
		select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, t.fecha_ingreso as fecha_ingreso,
		t.dia_ingreso as dia_ingreso, t.mes_ingreso as mes_ingreso, t.anio_ingreso as anio_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso > pFechaVigencia
		and t.estatus = 'A';

	recConceptoRetroactivo record;
	curConceptoRetroactivo cursor(pIdConceptoTipoPersonal int4, pIdTipoPersonal int4)
		for select ctpr.id_concepto_tipo_personal, fpr.cod_frecuencia_pago, 
		ftpr.id_frecuencia_tipo_personal
		from conceptotipopersonal ctp, frecuenciatipopersonal ftpr, frecuenciapago fpr,
		concepto c, concepto cr, conceptotipopersonal ctpr
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_retroactivo = cr.id_concepto
		and ctpr.id_concepto = cr.id_concepto
		and ctpr.id_tipo_personal = pIdTipoPersonal
		and ctpr.id_frecuencia_tipo_personal = ftpr.id_frecuencia_tipo_personal
		and ftpr.id_frecuencia_pago = fpr.id_frecuencia_pago;

	idConceptoVariable int4 := 0;
	montoDiario float8 := 0;
	montoPagar float8 := 0;
	anioVigencia float8 := 0;	
	mesVigencia float8 := 0;
	diaVigencia float8 := 0;
	dias float8 := 0;
	unidades float8 := 0;
begin
	-- VERSION 1.2

	anioVigencia := date_part('year', pFechaVigencia);
	mesVigencia := date_part('month', pFechaVigencia);
	diaVigencia := date_part('day', pFechaVigencia);

	open curConceptoRetroactivo(pIdConceptoTipoPersonal, pIdTipoPersonal);
	fetch curConceptoRetroactivo into recConceptoRetroactivo;	
	if recConceptoRetroactivo.id_concepto_tipo_personal is null then
		return 10;
	end if;

	open curConcepto(pIdConceptoTipoPersonal, pFechaVigencia);

	loop
		fetch curConcepto into recConcepto;			
		exit when not found;
		montoPagar := 0;
		dias := 0;
		if recConcepto.id_trabajador = 584 then
			raise notice 'monto %', recConcepto.monto;
		end if;
		if recConcepto.cod_frecuencia_pago = 3 then
			montoDiario := recConcepto.monto/15;
		elsif (recConcepto.cod_frecuencia_pago = 1 or recConcepto.cod_frecuencia_pago = 2)
			or (recConcepto.cod_frecuencia_pago > 4 and recConcepto.cod_frecuencia_pago <> 10 ) then
			montoDiario := recConcepto.monto/30;
		elsif recConcepto.cod_frecuencia_pago = 4 or recConcepto.cod_frecuencia_pago = 10 then
			montoDiario := recConcepto.monto/7;
		end if;
		if recConcepto.id_trabajador = 584 then
			raise notice 'montoDiario %', montoDiario;
		end if;
		if recConcepto.fecha_ingreso is null then
			montoPagar := montoDiario * pDias;
			if recConcepto.id_trabajador = 584 then
				raise notice 'fecha_is_null';
				raise notice 'montoPagar%',montoPagar;
			end if;
		else
			if pPeriodicidad = 'S' then
				dias := pFechaVigencia - recConcepto.fecha_ingreso;				
			else
				
				if anioVigencia <> recConcepto.anio_ingreso then
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*((mesVigencia+12)-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);	
				else
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*(mesVigencia-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);
				end if;
			end if;
			montoPagar := montoDiario * dias;
		end if;		
		if montoPagar > 0 then
			idConceptoVariable := last_id_conceptovariable()+1;				
			if idConceptoVariable is null then				
				idConceptoVariable := 1;				
			end if;

			if dias = 0 then
				unidades := pDias;
			else
				unidades := dias;
			end if;

			--if recConceptoRetroactivo.cod_frecuencia_pago = 3 then
			--	montoPagar := montoPagar/2;
			--end if;

			perform add_conceptovariable(
				idConceptoVariable,
				recConcepto.id_trabajador,
				recConceptoRetroactivo.id_concepto_tipo_personal,
				recConceptoRetroactivo.id_frecuencia_tipo_personal,
				unidades,
				montoPagar,
				pFechaProceso,
				null,
				'A',
				0,
				0);
		end if;
	end loop;
	close curConcepto;
	close curConceptoRetroactivo;		
	return 0;

end;

$_$;


--
-- TOC entry 680 (class 1255 OID 3240702)
-- Name: calcular_retroactivo(integer, integer, date, date, integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_retroactivo(integer, integer, date, date, integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdConceptoTipoPersonal alias for $2;
	pFechaVigencia alias for $3;
	pFechaProceso alias for $4;
	pDias alias for $5;	
	pPeriodicidad alias for $6;
	pIdFrecuenciaTipoPersonal alias for $7;
	
	recConcepto record;
	curConcepto cursor (pIdConceptoTipoPersonal int4, pFechaVigencia date) 
		for select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, null as fecha_ingreso,
		0 as anio_ingreso, 0 as mes_ingreso, 0 as dia_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso <= pFechaVigencia
		and t.estatus = 'A'
		union
		select (cf.monto - cf.monto_anterior) as monto, 
		fp.cod_frecuencia_pago, cf.id_trabajador, t.fecha_ingreso as fecha_ingreso,
		t.dia_ingreso as dia_ingreso, t.mes_ingreso as mes_ingreso, t.anio_ingreso as anio_ingreso
		from conceptofijo cf, frecuenciatipopersonal ftp, frecuenciapago fp, trabajador t
		where cf.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and cf.id_trabajador = t.id_trabajador		
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.fecha_ingreso > pFechaVigencia
		and t.estatus = 'A';

	recConceptoRetroactivo record;
	curConceptoRetroactivo cursor(pIdConceptoTipoPersonal int4, pIdTipoPersonal int4)
		for select ctpr.id_concepto_tipo_personal, fpr.cod_frecuencia_pago, 
		ftpr.id_frecuencia_tipo_personal
		from conceptotipopersonal ctp, frecuenciatipopersonal ftpr, frecuenciapago fpr,
		concepto c, concepto cr, conceptotipopersonal ctpr
		where ctp.id_concepto_tipo_personal = pIdConceptoTipoPersonal
		and ctp.id_concepto = c.id_concepto
		and c.id_concepto_retroactivo = cr.id_concepto
		and ctpr.id_concepto = cr.id_concepto
		and ctpr.id_tipo_personal = pIdTipoPersonal
		and ctpr.id_frecuencia_tipo_personal = ftpr.id_frecuencia_tipo_personal
		and ftpr.id_frecuencia_pago = fpr.id_frecuencia_pago;

	idConceptoVariable int4 := 0;
	montoDiario float8 := 0;
	montoPagar float8 := 0;
	anioVigencia float8 := 0;	
	mesVigencia float8 := 0;
	diaVigencia float8 := 0;
	dias float8 := 0;
	unidades float8 := 0;
begin
	-- VERSION 1.2

	anioVigencia := date_part('year', pFechaVigencia);
	mesVigencia := date_part('month', pFechaVigencia);
	diaVigencia := date_part('day', pFechaVigencia);

	open curConceptoRetroactivo(pIdConceptoTipoPersonal, pIdTipoPersonal);
	fetch curConceptoRetroactivo into recConceptoRetroactivo;	
	if recConceptoRetroactivo.id_concepto_tipo_personal is null then
		return 10;
	end if;

	open curConcepto(pIdConceptoTipoPersonal, pFechaVigencia);

	loop
		fetch curConcepto into recConcepto;			
		exit when not found;
		montoPagar := 0;
		dias := 0;
		if recConcepto.id_trabajador = 584 then
			raise notice 'monto %', recConcepto.monto;
		end if;
		if recConcepto.cod_frecuencia_pago = 3 then
			montoDiario := recConcepto.monto/15;
		elsif (recConcepto.cod_frecuencia_pago = 1 or recConcepto.cod_frecuencia_pago = 2)
			or (recConcepto.cod_frecuencia_pago > 4 and recConcepto.cod_frecuencia_pago <> 10 ) then
			montoDiario := recConcepto.monto/30;
		elsif recConcepto.cod_frecuencia_pago = 4 or recConcepto.cod_frecuencia_pago = 10 then
			montoDiario := recConcepto.monto/7;
		end if;
		if recConcepto.id_trabajador = 584 then
			raise notice 'montoDiario %', montoDiario;
		end if;
		if recConcepto.fecha_ingreso is null then
			montoPagar := montoDiario * pDias;
			if recConcepto.id_trabajador = 584 then
				raise notice 'fecha_is_null';
				raise notice 'montoPagar%',montoPagar;
			end if;
		else
			if pPeriodicidad = 'S' then
				dias := pFechaVigencia - recConcepto.fecha_ingreso;				
			else
				
				if anioVigencia <> recConcepto.anio_ingreso then
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*((mesVigencia+12)-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);	
				else
					dias := (30-(recConcepto.dia_ingreso-1)) + (30*(mesVigencia-(recConcepto.mes_ingreso+1))) + (diaVigencia-1);
				end if;
			end if;
			montoPagar := montoDiario * dias;
		end if;		
		if montoPagar > 0 then
			idConceptoVariable := last_id_conceptovariable()+1;				
			if idConceptoVariable is null then				
				idConceptoVariable := 1;				
			end if;

			if dias = 0 then
				unidades := pDias;
			else
				unidades := dias;
			end if;

			--if recConceptoRetroactivo.cod_frecuencia_pago = 3 then
			--	montoPagar := montoPagar/2;
			--end if;

			perform add_conceptovariable(
				idConceptoVariable,
				recConcepto.id_trabajador,
				recConceptoRetroactivo.id_concepto_tipo_personal,
				pIdFrecuenciaTipoPersonal,
				unidades,
				montoPagar,
				pFechaProceso,
				null,
				'A',
				0,
				0);
		end if;
	end loop;
	close curConcepto;
	close curConceptoRetroactivo;		
	return 0;

end;

$_$;


--
-- TOC entry 681 (class 1255 OID 3240703)
-- Name: calcular_sueldo_promedio_mensual(integer, integer, character varying, character varying, boolean, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_sueldo_promedio_mensual(integer, integer, character varying, character varying, boolean, integer, boolean, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
declare 

	pIdOrganismo alias for $1;	
	pIdGrupoNomina alias for $2;
	pPeriodicidad alias for $3;
	pRecalculo alias for $4;
	pPrimeraQuincena alias for $5;
	pSemanaMes alias for $6;
	pTieneSemana5 alias for $7;
	pNumeroSemanaMes alias for $8;

	idGrupoOrganismo int4 := 0;

	montoCalculado float8 := 0;

	montoVariableSso float8 := 0.0;
	montoVariableLph float8 := 0.0;
	montoVariableFju float8 := 0.0;
        
	montoVariableSumarSso float8 := 0.0;
	montoVariableSumarLph float8 := 0.0;
	montoVariableSumarFju float8 := 0.0;


	montoBase1Sso float8 := 0.0;
	montoBase2Sso float8 := 0.0;
	montoBase5Sso float8 := 0.0;
	montoBase6Sso float8 := 0.0;
	montoBase7Sso float8 := 0.0;
	montoBase8Sso float8 := 0.0;
	montoBase9Sso float8 := 0.0;
	montoBaseTotalSso float8 := 0.0;
        montoBaseTotalSpf float8 := 0.0;
	retencionSso float8 := 0.0;

	retencionSpf float8 := 0.0;

	montoBase1Lph float8 := 0.0;
	montoBase2Lph float8 := 0.0;
	montoBase5Lph float8 := 0.0;
	montoBase6Lph float8 := 0.0;
	montoBase7Lph float8 := 0.0;
	montoBase8Lph float8 := 0.0;
	montoBase9Lph float8 := 0.0;
	montoBaseTotalLph float8 := 0.0;
	retencionLph float8 := 0.0;

	montoBase1Fju float8 := 0.0;
	montoBase2Fju float8 := 0.0;
	montoBase5Fju float8 := 0.0;
	montoBase6Fju float8 := 0.0;
	montoBase7Fju float8 := 0.0;
	montoBase8Fju float8 := 0.0;
	montoBase9Fju float8 := 0.0;
	montoBaseTotalFju float8 := 0.0;
	retencionFju float8 := 0.0;

	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;

	frecuenciaSsoSemanal boolean := false;
	frecuenciaFjuSemanal boolean := false;
	frecuenciaLphSemanal boolean := false;

	codFrecuenciaSso int4 := 0;
	codFrecuenciaLph int4 := 0;
	codFrecuenciaFju int4 := 0;

	aporteSso float8 := 0;
	aporteLph float8 := 0;
	aporteFju float8 := 0;
	aporteSpf float8 := 0;
	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recConceptosCalculados record;
	curConceptosCalculados cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, ctp.tipo, ctp.valor, ctp.tope_minimo, ctp.tope_maximo, ctp.unidades as ctp_unidades
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_trabajador = key1
		and  cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ctp.recalculo ='S'
		and c.cod_concepto not in('5001','5003','5004')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recTrabajadores2 record;
	curTrabajadores2 cursor (key1 int4) for select distinct cf.id_concepto_fijo as id, cf.monto, fp2.cod_frecuencia_pago, c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  cf.monto_restituir, cf.restituir,'F' as tipo_concepto, sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio sp
		where
		t.id_trabajador = key1
		and cf.id_trabajador   =  t.id_trabajador 
		and t.id_trabajador = sp.id_trabajador
		and c.cod_concepto in('5001','5003','5004')
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		union 
		select distinct cv.id_concepto_variable as id, cv.monto, fp2.cod_frecuencia_pago, c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  0 as monto_restituir,'N' as restituir,'V' as tipo_concepto, sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, frecuenciatipopersonal ftp, 
		conceptovariable cv, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio sp
		where
		t.id_trabajador = key1
		and cv.id_trabajador   =  t.id_trabajador 
		and c.cod_concepto in('5001','5003','5004')
		and t.id_trabajador = sp.id_trabajador
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto <'5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico ='S' 
		or c.sueldo_integral ='S' 
		or c.compensacion ='S' 
		or c.primas_trabajador ='S' 
		or c.primas_cargo ='S' 
		or c.ajuste_sueldo='S');

	recTipoPersonal record;
	curTipoPersonal cursor (key1 int4) for select id_tipo_personal, id_grupo_organismo 
		from tipopersonal
		where
		id_grupo_nomina = key1;
	
	selParametroGobierno parametrogobierno;

begin
	 raise notice 'inicio';	
	perform update_sueldo_promedio(pIdGrupoNomina);
	open curTipoPersonal (pIdGrupoNomina);
                  raise notice 'TIPO PERSONAL';
	loop
		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;
		select into selParametroGobierno * from parametrogobierno where id_grupo_organismo = recTipoPersonal.id_grupo_organismo;
		open curTrabajadores1 (recTipoPersonal.id_tipo_personal);
                                       raise notice 'TRABAJADORES1';

		loop
			fetch curTrabajadores1 into recTrabajadores1;			
                                                   --raise notice 'ID_TRABAJADOR';

			exit when not found;
						if pRecalculo ='S' then
				open curConceptosCalculados(recTrabajadores1.id_trabajador);
				loop
					montoCalculado := 0;
					fetch curConceptosCalculados into recConceptosCalculados;			
					exit when not found;
					montoCalculado := calcular_concepto(
							recConceptosCalculados.id_concepto_tipo_personal,
							recTrabajadores1.id_trabajador,
							recConceptosCalculados.unidades,
							recConceptosCalculados.tipo,
							recConceptosCalculados.cod_frecuencia_pago,
							recTrabajadores1.jornada_diaria,
							recTrabajadores1.jornada_semanal,
							recTrabajadores1.formula_integral,
							recTrabajadores1.formula_semanal,
							recTrabajadores1.id_cargo,
							recConceptosCalculados.valor,
							recConceptosCalculados.tope_minimo,
							recConceptosCalculados.tope_maximo);
						
					perform update_monto_concepto_fijo(recConceptosCalculados.id_concepto_fijo, montoCalculado);
				end loop;				

				close curConceptosCalculados;

			end if;

			montoBase1Sso := 0.0;
			montoBase2Sso := 0.0;
			montoBaseTotalSso := 0.0;
			retencionSso := 0.0;

			montoBase1Lph := 0.0;
			montoBase2Lph := 0.0;
			montoBaseTotalLph := 0.0;
			retencionLph := 0.0;

			montoBase1Fju := 0.0;
			montoBase2Fju := 0.0;
			montoBaseTotalFju := 0.0;
			retencionFju := 0.0;	

			codFrecuenciaSso := 0;
			aporteSso := 0;
			aporteLph := 0;
			aporteFju := 0;
			aporteSpf := 0;

			montoBase1Si := 0.0;
			montoBase2Si := 0.0;
			montoBaseTotalSi := 0.0;

			montoBase1Sb := 0.0;
			montoBase2Sb := 0.0;
			montoBaseTotalSb := 0.0;

			montoBase1Co := 0.0;
			montoBase2Co := 0.0;
			montoBaseTotalCo := 0.0;

			montoBase1Pt := 0.0;
			montoBase2Pt := 0.0;
			montoBaseTotalPt := 0.0;

			montoBase1Pc := 0.0;
			montoBase2Pc := 0.0;
			montoBaseTotalPc := 0.0;

			montoBase1As := 0.0;
			montoBase2As := 0.0;
			montoBaseTotalAs := 0.0;
			montoVariableSso := 0.0;
			montoVariableLph := 0.0;
			montoVariableFju := 0.0;

			montoVariableSumarSso := 0.0;
			montoVariableSumarLph := 0.0;
			montoVariableSumarFju := 0.0;
			montoSumar := 0.0;

			open curTrabajadores2 (recTrabajadores1.id_trabajador);
			loop
				fetch curTrabajadores2 into recTrabajadores2;			
				exit when not found;

				if recTrabajadores2.monto_restituir = 0 then
					montoSumar := recTrabajadores2.monto;
				else
					montoSumar := recTrabajadores2.monto_restituir;
				end if;

				if recTrabajadores2.tipo_concepto ='V' then
					if pPrimeraQuincena = true then
						if recTrabajadores2.frecuencia_retencion = 3 then
							if recTrabajadores2.cod_frecuencia_pago = 1 then
								montoSumar := montoSumar * 2;
							end if;
						elsif recTrabajadores2.frecuencia_retencion = 2 then
							if recTrabajadores2.cod_frecuencia_pago = 1 then
								if recTrabajadores2.cod_concepto ='5001' then
									montoVariableSso := montoVariableSso + montoSumar;	
								elsif recTrabajadores2.cod_concepto ='5003' then
									montoVariableLph := montoVariableLph + montoSumar;
								elsif recTrabajadores2.cod_concepto ='5004' then
									montoVariableFju := montoVariableFju + montoSumar;
								end if;
							end if;
						end if;
					else  ---- 2d quincena
						if recTrabajadores2.frecuencia_retencion = 3 then
							if recTrabajadores2.cod_frecuencia_pago = 2 then
								montoSumar := montoSumar*2;	
							end if;
						end if;
					end if;
				end if;
				
				if recTrabajadores2.cod_concepto ='5001' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Sso := montoBase1Sso + (montoSumar*2);
					else
						montoBase2Sso := montoBase2Sso + montoSumar;
					end if;
				elsif recTrabajadores2.cod_concepto ='5003' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Lph := montoBase1Lph + (recTrabajadores2.monto*2);
					else
						montoBase2Lph := montoBase2Lph + (recTrabajadores2.monto);
					end if;
				elsif recTrabajadores2.cod_concepto ='5004' then
					if recTrabajadores2.cod_frecuencia_pago = 3 then
						montoBase1Fju := montoBase1Fju + (recTrabajadores2.monto*2);
					else
						montoBase2Fju := montoBase2Fju + (recTrabajadores2.monto);
					end if;
				end if;

				if pPrimeraQuincena = false then				
					montoVariableSumarSso := recTrabajadores2.monto_variable_sso;
					montoVariableSumarLph := recTrabajadores2.monto_variable_lph;
					montoVariableSumarFju := recTrabajadores2.monto_variable_fju;								
				end if;
			end loop;

			close curTrabajadores2;

			montoBaseTotalSso := montoBase1Sso + montoBase2Sso + montoVariableSumarSso;
			montoBaseTotalLph := montoBase1Lph + montoBase2Lph + montoVariableSumarLph;			
			montoBaseTotalFju := montoBase1Fju + montoBase2Fju + montoVariableSumarFju;
			montoBaseTotalSpf := montoBaseTotalSso;

			montoBaseTotalSso := calcular_limite_mensual(montoBaseTotalSso,pPeriodicidad, selParametroGobierno.limmen_sso);
			montoBaseTotalSpf := calcular_limite_mensual(montoBaseTotalSpf,pPeriodicidad, selParametroGobierno.limmen_spf);
			montoBaseTotalLph := calcular_limite_mensual(montoBaseTotalLph, pPeriodicidad, selParametroGobierno.limmen_lph);
			montoBaseTotalFju := calcular_limite_mensual(montoBaseTotalFju, pPeriodicidad, selParametroGobierno.limmen_fju);
		
			montoBaseTotalSso := montoBaseTotalSso *12/52;			
			montoBaseTotalSpf := montoBaseTotalSpf *12/52;

			---
                        ---Calcula el aporte patronal seguro social
                        ---
			if recTrabajadores1.regimen ='I' then   ---regimen integral sso
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_integral) / 100;
			else   ---regimen parcial sso
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_parcial) / 100;
			end if;
                        ---
                        ---verifica el riesgo patronal
                        ---
			if recTrabajadores1.riesgo ='1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcbpat_sso/100;
			elsif recTrabajadores1.riesgo ='1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcmpat_sso/100;
			else
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcapat_sso/100;
			end if;

			---
                        ---Calcula el aporte patronal seguro paro forzoso
                        ---

			retencionSpf := (montoBaseTotalSpf * selParametroGobierno.porctrab_spf) / 100;
                   	aporteSpf := montoBaseTotalSpf * selParametroGobierno.porcpat_spf/100;
                        ---
                        ---Calcula el aporte patronal politica habitacional
                        ---
			retencionLph := (montoBaseTotalLph * selParametroGobierno.porctrab_lph) / 100;
			aporteLph := montoBaseTotalLph * selParametroGobierno.porcpat_lph/100;
			retencionFju := (montoBaseTotalFju * selParametroGobierno.porctrab_fju) / 100;
			aporteFju := montoBaseTotalFju * selParametroGobierno.porcpat_fju/100;

			if pRecalculo ='S' then
				open curPromedios(recTrabajadores1.id_trabajador);
				loop
					fetch curPromedios into recPromedios;			
					exit when not found;
					montoSumar := 0;
					if recPromedios.monto_restituir = 0 then
						montoSumar := recPromedios.monto;
					else
						montoSumar := recPromedios.monto_restituir;
					end if;

					if recPromedios.sueldo_integral ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Si := montoBase1Si + (montoSumar*2);
						else
							montoBase2Si := montoBase2Si + (montoSumar);
						end if;
					end if;

					if recPromedios.sueldo_basico ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Sb := montoBase1Sb + (montoSumar*2);
						else
							montoBase2Sb := montoBase2Sb + (montoSumar);
						end if;
					elsif recPromedios.compensacion ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Co := montoBase1Co + (montoSumar*2);
						else
							montoBase2Co := montoBase2Co+ (montoSumar);
						end if;
					elsif recPromedios.primas_trabajador ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Pt := montoBase1Pt + (montoSumar*2);
						else
							montoBase2Pt := montoBase2Pt+ (montoSumar);
						end if;
					elsif recPromedios.primas_cargo ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1Pc := montoBase1Pc + (montoSumar*2);
						else
							montoBase2Pc := montoBase2Pc+ (montoSumar);
						end if;
					elsif recPromedios.ajuste_sueldo ='S' then
						if recPromedios.cod_frecuencia_pago = 3 then
							montoBase1As := montoBase1As + (montoSumar*2);
						else
							montoBase1As := montoBase1As + (montoSumar*2);
						end if;
					end if;
				end loop;
				close curPromedios;
				montoBaseTotalSi := montoBase1Si + montoBase2Si;
				montoBaseTotalSb := montoBase1Sb + montoBase2Sb;
				montoBaseTotalCo := montoBase1Co + montoBase2Co;
				montoBaseTotalPt := montoBase1Pt + montoBase2Pt;
				montoBaseTotalPc := montoBase1Pc + montoBase2Pc;
				montoBaseTotalAs := montoBase1As + montoBase2As;

			end if;
					perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSso,
					retencionSso,
					retencionSpf,
					montoBaseTotalLph,
					retencionLph,
					montoBaseTotalFju,
					retencionFju,
					aporteSso,
					aporteLph,
					aporteSpf,
					aporteFju);

			if pRecalculo ='S'  then
				perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSi,
					montoBaseTotalSb,
					montoBaseTotalCo,
					montoBaseTotalPt,
					montoBaseTotalPc,
					montoBaseTotalAs);
			end if;

			if pPrimeraQuincena = true then
				perform update_sueldo_promedio(
				recTrabajadores1.id_trabajador, 
				montoVariableSso,
				montoVariableLph,
				montoVariableFju);
			end if;

		end loop;
		close curTrabajadores1;

	end loop;

	close curTipoPersonal;

	return true;

end;
$_$;


--
-- TOC entry 682 (class 1255 OID 3240705)
-- Name: calcular_sueldo_promedio_semanal(integer, integer, character varying, character varying, boolean, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION calcular_sueldo_promedio_semanal(integer, integer, character varying, character varying, boolean, integer, boolean, integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdOrganismo alias for $1;	
	pIdGrupoNomina alias for $2;
	pPeriodicidad alias for $3;
	pRecalculo alias for $4;
	pPrimeraQuincena alias for $5;
	pSemanaDelMes alias for $6;
	pTieneSemana5 alias for $7;
	pNumeroSemanaMes alias for $8;

	idGrupoOrganismo int4 := 0;

	montoCalculado float8 := 0;

	montoVariableSso float8 := 0.0;
	montoVariableLph float8 := 0.0;
	montoVariableFju float8 := 0.0;
	montoVariableSumarSso float8 := 0.0;
	montoVariableSumarLph float8 := 0.0;
	montoVariableSumarFju float8 := 0.0;
	
	montoBase1Sso float8 := 0.0;
	montoBase2Sso float8 := 0.0;
	montoBase5Sso float8 := 0.0;
	montoBase6Sso float8 := 0.0;
	montoBase7Sso float8 := 0.0;
	montoBase8Sso float8 := 0.0;
	montoBase9Sso float8 := 0.0;
	montoBaseTotalSso float8 := 0.0;
        montoBaseTotalSpf float8 := 0.0;
	retencionSso float8 := 0.0;

	retencionSpf float8 := 0.0;

	montoBase1Lph float8 := 0.0;
	montoBase2Lph float8 := 0.0;
	montoBase5Lph float8 := 0.0;
	montoBase6Lph float8 := 0.0;
	montoBase7Lph float8 := 0.0;
	montoBase8Lph float8 := 0.0;
	montoBase9Lph float8 := 0.0;
	montoBaseTotalLph float8 := 0.0;
	retencionLph float8 := 0.0;
	
	montoBase1Fju float8 := 0.0;
	montoBase2Fju float8 := 0.0;
	montoBase5Fju float8 := 0.0;
	montoBase6Fju float8 := 0.0;
	montoBase7Fju float8 := 0.0;
	montoBase8Fju float8 := 0.0;
	montoBase9Fju float8 := 0.0;
	montoBaseTotalFju float8 := 0.0;
	retencionFju float8 := 0.0;


	montoBase1Si float8 := 0.0;
	montoBase2Si float8 := 0.0;
	montoBaseTotalSi float8 := 0.0;

	montoBase1Sb float8 := 0.0;
	montoBase2Sb float8 := 0.0;
	montoBaseTotalSb float8 := 0.0;

	montoBase1Co float8 := 0.0;
	montoBase2Co float8 := 0.0;
	montoBaseTotalCo float8 := 0.0;

	montoBase1Pt float8 := 0.0;
	montoBase2Pt float8 := 0.0;
	montoBaseTotalPt float8 := 0.0;

	montoBase1Pc float8 := 0.0;
	montoBase2Pc float8 := 0.0;
	montoBaseTotalPc float8 := 0.0;

	montoBase1As float8 := 0.0;
	montoBase2As float8 := 0.0;
	montoBaseTotalAs float8 := 0.0;
	

	frecuenciaSsoSemanal boolean := false;
	frecuenciaFjuSemanal boolean := false;
	frecuenciaLphSemanal boolean := false;

	codFrecuenciaSso int4 := 0;
	codFrecuenciaLph int4 := 0;
	codFrecuenciaFju int4 := 0;

	aporteSso float8 := 0;
	aporteLph float8 := 0;
	aporteFju float8 := 0;
	aporteSpf float8 := 0;

	montoSumar float8 := 0;

	recTrabajadores1 record;
	curTrabajadores1 cursor (key1 int4) for select distinct t.id_trabajador, min(t.regimen) as regimen, 

min(tp.formula_semanal) as formula_semanal,
		min(tp.formula_integral) as formula_integral, min(t.riesgo) as riesgo,  
		min(jornada_semanal) as jornada_semanal, min(tu.jornada_diaria) as jornada_diaria, min(t.id_cargo) as 

id_cargo
		from trabajador t, tipopersonal tp, turno tu 
		where 
		tp.id_tipo_personal = key1
		and t.id_tipo_personal = tp.id_tipo_personal 
		and t.estatus = 'A'
		and t.id_turno = tu.id_turno
		group by  t.id_trabajador ;

	recConceptosCalculados record;
	curConceptosCalculados cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 

fp.cod_frecuencia_pago, cf.unidades, ctp.tipo, ctp.valor, ctp.tope_minimo, ctp.tope_maximo, ctp.unidades as ctp_unidades
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_trabajador = key1
		and  cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ctp.recalculo = 'S'
		and c.cod_concepto not in('5001', '5003', '5004')
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;
	
	recTrabajadores2 record;
	curTrabajadores2 cursor (key1 int4) for select distinct cf.id_concepto_fijo as id, cf.monto, fp2.cod_frecuencia_pago, 

c.cod_concepto, fp.cod_frecuencia_pago as frecuencia_retencion,  cf.monto_restituir, cf.restituir, 'F' as tipo_concepto, 

sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, 

frecuenciatipopersonal ftp, 
		conceptofijo cf, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, sueldopromedio 

sp
		where
		t.id_trabajador = key1
		and cf.id_trabajador   =  t.id_trabajador 
		and t.id_trabajador = sp.id_trabajador
		and c.cod_concepto in('5001', '5003', '5004')
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cf.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cf.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		union 
		select distinct cv.id_concepto_variable as id, cv.monto, fp2.cod_frecuencia_pago, c.cod_concepto, 

fp.cod_frecuencia_pago as frecuencia_retencion,  0 as monto_restituir, 'N' as restituir, 'V' as tipo_concepto, 

sp.monto_variable_sso, sp.monto_variable_lph, sp.monto_variable_fju 
		from trabajador t, conceptotipopersonal ctp,conceptoasociado ca, frecuenciatipopersonal ftp2, 

frecuenciatipopersonal ftp, 
		conceptovariable cv, concepto c, conceptotipopersonal ctp2, frecuenciapago fp2, frecuenciapago fp, 

sueldopromedio sp
		where
		t.id_trabajador = key1
		and cv.id_trabajador   =  t.id_trabajador 
		and c.cod_concepto in('5001', '5003', '5004')
		and t.id_trabajador = sp.id_trabajador
		and ctp.id_concepto = c.id_concepto
		and ca.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and cv.id_concepto_tipo_personal = ca.id_concepto_asociar
		and ca.id_concepto_asociar = ctp2.id_concepto_tipo_personal
		and cv.id_frecuencia_tipo_personal = ftp2.id_frecuencia_tipo_personal
		and ftp2.id_frecuencia_pago = fp2.id_frecuencia_pago
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago;

	recPromedios record;
	curPromedios cursor (key1 int4) for select distinct cf.id_concepto_fijo, cf.id_concepto_tipo_personal, 

fp.cod_frecuencia_pago, cf.unidades, cf.monto,  cf.monto_restituir, cf.restituir, 
		c.sueldo_basico, c.sueldo_integral, c.compensacion, c.primas_trabajador, c.primas_cargo, c.ajuste_sueldo
		from conceptofijo cf, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 
		concepto c, frecuenciapago fp
		where
		cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.cod_concepto < '5000'
		and cf.id_trabajador = key1
		and (c.sueldo_basico = 'S' 
		or c.sueldo_integral = 'S' 
		or c.compensacion = 'S' 
		or c.primas_trabajador = 'S' 
		or c.primas_cargo = 'S' 
		or c.ajuste_sueldo= 'S');

	recTipoPersonal record;
	curTipoPersonal cursor (key1 int4) for select id_tipo_personal, id_grupo_organismo 
		from tipopersonal
		where
		id_grupo_nomina = key1;

	selParametroGobierno parametrogobierno;

begin

	raise notice 'inicio';


-- Se coloco en comentario PC

	perform update_sueldo_promedio(pIdGrupoNomina);

	open curTipoPersonal (pIdGrupoNomina);

	raise notice 'TP';

	loop

		fetch curTipoPersonal into recTipoPersonal;			
		exit when not found;

		select into selParametroGobierno * from parametrogobierno where id_grupo_organismo = 

recTipoPersonal.id_grupo_organismo;

		open curTrabajadores1 (recTipoPersonal.id_tipo_personal);

		raise notice 'trabajadores_uno';

		loop

			fetch curTrabajadores1 into recTrabajadores1;			
			exit when not found;

                raise notice 'trabajadores_dos';

			if pRecalculo = 'S' then
				open curConceptosCalculados(recTrabajadores1.id_trabajador);

				loop
					montoCalculado := 0;

					fetch curConceptosCalculados into recConceptosCalculados;			
					exit when not found;

					montoCalculado := calcular_concepto(
						recConceptosCalculados.id_concepto_tipo_personal,
						recTrabajadores1.id_trabajador,
						recConceptosCalculados.unidades,
						recConceptosCalculados.tipo,
						recConceptosCalculados.cod_frecuencia_pago,
						recTrabajadores1.jornada_diaria,
						recTrabajadores1.jornada_semanal,
						recTrabajadores1.formula_integral,
						recTrabajadores1.formula_semanal,
						recTrabajadores1.id_cargo,
						recConceptosCalculados.valor,
						recConceptosCalculados.tope_minimo,
						recConceptosCalculados.tope_maximo,psemanadelmes);
						perform update_monto_concepto_fijo(recConceptosCalculados.id_concepto_fijo, 

montoCalculado);

				end loop;

				close curConceptosCalculados;

			end if;


			montoBase1Sso := 0.0;
			montoBase2Sso := 0.0;
			montoBase5Sso := 0.0;
			montoBase6Sso := 0.0;
			montoBase7Sso := 0.0;
			montoBase8Sso := 0.0;
			montoBase9Sso := 0.0;
			montoBaseTotalSso := 0.0;
                        montoBaseTotalSpf := 0.0;

			retencionSso := 0.0;

			montoBase1Lph := 0.0;
			montoBase2Lph := 0.0;
			montoBase5Lph := 0.0;
			montoBase6Lph := 0.0;
			montoBase7Lph := 0.0;
			montoBase8Lph := 0.0;
			montoBase9Lph := 0.0;
			montoBaseTotalLph := 0.0;
			retencionLph = 0.0;

			montoBase1Fju := 0.0;
			montoBase2Fju := 0.0;
			montoBase5Fju := 0.0;
			montoBase6Fju := 0.0;
			montoBase7Fju := 0.0;
			montoBase8Fju := 0.0;
			montoBase9Fju := 0.0;
			montoBaseTotalFju := 0.0;
			retencionFju := 0.0;	
			
			frecuenciaSsoSemanal := false;
			frecuenciaFjuSemanal := false;
			frecuenciaLphSemanal := false;

			codFrecuenciaSso := 0;

			aporteSso := 0;
			aporteLph := 0;
			aporteFju := 0;
			aporteSpf := 0;

			montoBase1Si := 0.0;
			montoBase2Si := 0.0;
			montoBaseTotalSi := 0.0;

			montoBase1Sb := 0.0;
			montoBase2Sb := 0.0;
			montoBaseTotalSb := 0.0;

			montoBase1Co := 0.0;
			montoBase2Co := 0.0;
			montoBaseTotalCo := 0.0;

			montoBase1Pt := 0.0;
			montoBase2Pt := 0.0;
			montoBaseTotalPt := 0.0;

			montoBase1Pc := 0.0;
			montoBase2Pc := 0.0;
			montoBaseTotalPc := 0.0;

			montoBase1As := 0.0;
			montoBase2As := 0.0;
			montoBaseTotalAs := 0.0;

			montoVariableSso := 0.0;
			montoVariableLph := 0.0;
			montoVariableFju := 0.0;

			montoVariableSumarSso := 0.0;
			montoVariableSumarLph := 0.0;
			montoVariableSumarFju := 0.0;

			montoSumar := 0.0;
 raise notice 'trabajadores_tres';
			open curTrabajadores2 (recTrabajadores1.id_trabajador);

			loop

				fetch curTrabajadores2 into recTrabajadores2;						
				exit when not found;

				if recTrabajadores2.monto_restituir = 0 then
					montoSumar := recTrabajadores2.monto;
				else
					montoSumar := recTrabajadores2.monto_restituir;
				end if;

				if recTrabajadores2.cod_concepto = '5001' then
					codFrecuenciaSso := recTrabajadores2.frecuencia_retencion;

					if codFrecuenciaSso = 4 then
						frecuenciaSsoSemanal := true;
					end if;

					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Sso := montoBase1Sso + recTrabajadores2.monto;
					else
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase5Sso := montoBase5Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase6Sso := montoBase6Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase7Sso := montoBase7Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase8Sso := montoBase8Sso + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Sso := montoBase2Sso + recTrabajadores2.monto;
							montoBase9Sso := montoBase9Sso + recTrabajadores2.monto;
						end if;
					end if;
				elsif recTrabajadores2.cod_concepto = '5003' then
					codFrecuenciaLph := recTrabajadores2.frecuencia_retencion;
					if codFrecuenciaLph = 4 then
						frecuenciaLphSemanal := true;
					end if;
					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Lph := montoBase1Lph + recTrabajadores2.monto;
					else
						
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase5Lph := montoBase5Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase6Lph := montoBase6Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase7Lph := montoBase7Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase8Lph := montoBase8Lph + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Lph := montoBase2Lph + recTrabajadores2.monto;
							montoBase9Lph := montoBase9Lph + recTrabajadores2.monto;
						end if;
					end if;

				elsif recTrabajadores2.cod_concepto = '5004' then
					codFrecuenciaFju := recTrabajadores2.frecuencia_retencion;
					if codFrecuenciaFju = 4 then
						frecuenciaFjuSemanal := true;
					end if;
					if recTrabajadores2.cod_frecuencia_pago = 4 or 
                                           (recTrabajadores2.cod_frecuencia_pago = 10 and pSemanaDelMes < 5) then
						montoBase1Fju := montoBase1Fju + recTrabajadores2.monto;
					else
						
						if recTrabajadores2.cod_frecuencia_pago = 5 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase5Fju := montoBase5Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 6 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase6Fju := montoBase6Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 7 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase7Fju := montoBase7Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 8 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase8Fju := montoBase8Fju + recTrabajadores2.monto;
						elsif recTrabajadores2.cod_frecuencia_pago = 9 then
                                                        montoBase2Fju := montoBase2Fju + recTrabajadores2.monto;
							montoBase9Fju := montoBase9Fju + recTrabajadores2.monto;
						end if;
					end if;
				end if;
			end loop;
			close curTrabajadores2;

			 raise notice 'trabajadores_cuatro';
	
			if montoBase2Sso <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Sso := (montoBase2Sso / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Sso := (montoBase2Sso * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 4 then
					montoBase1Sso := (((montoBase1Sso /7)*30)*12)/52;
					montoBase2Sso := (montoBase2Sso*12)/52; 
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Sso := montoBase5Sso;
					elsif pSemanaDelMes = 2 then
						montoBase2Sso := montoBase6Sso;
					elsif pSemanaDelMes = 3 then
						montoBase2Sso := montoBase7Sso;
					elsif pSemanaDelMes = 4 then
						montoBase2Sso := montoBase8Sso;
						if pTieneSemana5 = false then
							montoBase2Sso := montoBase2Sso+montoBase9Sso;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Sso := montoBase9Sso;
					end if;

				end if;
			end if;

			if frecuenciaFjuSemanal = true and  montoBase2Fju <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Fju := (montoBase2Fju / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Fju := (montoBase2Fju * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Fju := montoBase5Fju;
					elsif pSemanaDelMes = 2 then
						montoBase2Fju := montoBase6Fju;
					elsif pSemanaDelMes = 3 then
						montoBase2Fju := montoBase7Fju;
					elsif pSemanaDelMes = 4 then
						montoBase2Fju := montoBase8Fju;
						if pTieneSemana5 = false then
							montoBase2Fju := montoBase2Fju+montoBase9Fju;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Fju := montoBase9Fju;
					end if;
				end if;
			end if;
			if frecuenciaLphSemanal = true and  montoBase2Lph <> 0 then
				if recTrabajadores1.formula_semanal = 1 then
					montoBase2Lph := (montoBase2Lph / 30) * 7; 
				elsif recTrabajadores1.formula_semanal = 3 then
					montoBase2Lph := (montoBase2Lph * 12) / 52;
				elsif recTrabajadores1.formula_semanal = 2 then
					if pSemanaDelMes = 1 then
						montoBase2Lph := montoBase5Lph;
					elsif pSemanaDelMes = 2 then
						montoBase2Lph := montoBase6Lph;
					elsif pSemanaDelMes = 3 then
						montoBase2Lph := montoBase7Lph;
					elsif pSemanaDelMes = 4 then
						montoBase2Lph := montoBase8Lph;
						if pTieneSemana5 = false then
							montoBase2Lph := montoBase2Lph+montoBase9Lph;
						end if;
					elsif pSemanaDelMes = 5 then
						montoBase2Lph := montoBase9Lph;
					end if;
				end if;
			end if;
				
			montoBaseTotalSso := montoBase1Sso + montoBase2Sso + montoVariableSumarSso;
			montoBaseTotalLph := montoBase1Lph + montoBase2Lph + montoVariableSumarLph;			
			montoBaseTotalFju := montoBase1Fju + montoBase2Fju + montoVariableSumarFju;
	

			if frecuenciaLphSemanal = false then
				if (codFrecuenciaLph=pSemanaDelMes+4) 
					or (codFrecuenciaLph = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					if recTrabajadores1.formula_integral = 1 then
						montoBaseTotalLph := (((montoBase1Lph/7)+(montoBase2Lph/30))*365)/12;
					elsif recTrabajadores1.formula_integral = 2 then
						montoBaseTotalLph := (montoBase1Lph/7)*30 + montoBase2Lph;
					elsif recTrabajadores1.formula_integral = 3 then
						montoBaseTotalLph := (montoBase1Lph*52)/12 + montoBase2Lph;
					end if;
				end if;
			end if;
			if frecuenciaFjuSemanal = false then
				if (codFrecuenciaFju=pSemanaDelMes+4) 
					or (codFrecuenciaFju = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					if recTrabajadores1.formula_integral = 1 then
						montoBaseTotalFju := (((montoBase1Fju/7)+(montoBase2Fju/30))*365)/12;
					elsif recTrabajadores1.formula_integral = 2 then
						montoBaseTotalFju := (montoBase1Fju/7)*30 + montoBase2Fju;
					elsif recTrabajadores1.formula_integral = 3 then
						montoBaseTotalFju := (montoBase1Fju*52)/12 + montoBase2Fju;
					end if;
				end if;
			end if;
		
			montoBaseTotalSpf := montoBaseTotalSso;
			montoBaseTotalSso := calcular_limite_semanal(montoBaseTotalSso, 0,  pPeriodicidad, 'SSO', 

selParametroGobierno.limmen_sso, selParametroGobierno.limsem_sso);
			montoBaseTotalSpf := calcular_limite_semanal(montoBaseTotalSpf, 0,  pPeriodicidad, 'SPF', 

selParametroGobierno.limmen_spf, selParametroGobierno.limsem_spf);
			montoBaseTotalLph := calcular_limite_semanal(montoBaseTotalLph, 0, pPeriodicidad, 'LPH', 

selParametroGobierno.limmen_lph, selParametroGobierno.limsem_lph);
			montoBaseTotalFju := calcular_limite_semanal(montoBaseTotalFju, 0, pPeriodicidad, 'FJU', 

selParametroGobierno.limmen_fju, selParametroGobierno.limsem_fju);
			
			if frecuenciaSsoSemanal = false then
				if (codFrecuenciaSso=pSemanaDelMes+4) 
					or (codFrecuenciaSso = 9 and pSemanaDelMes = 4 
						and pTieneSemana5 = false) then
					montoBaseTotalSso := montoBaseTotalSso * pNumeroSemanasMes;
                                        montoBaseTotalSpf := montoBaseTotalSpf * pNumeroSemanasMes;
				end if;
			end if;	

			if recTrabajadores1.regimen = 'I' then
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_integral) / 100;		

		
			else
				retencionSso := (montoBaseTotalSso * selParametroGobierno.porcentaje_parcial) / 100;
			end if;	

			if recTrabajadores1.riesgo = '1' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcbpat_sso/100;
			elsif recTrabajadores1.riesgo = '2' then
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcmpat_sso/100;
			else
				aporteSso := montoBaseTotalSso * selParametroGobierno.porcapat_sso/100;
			end if;

			retencionSpf := (montoBaseTotalSpf * selParametroGobierno.porctrab_spf) / 100;
			aporteSpf := montoBaseTotalSpf * selParametroGobierno.porcpat_spf/100;
			retencionLph := (montoBaseTotalLph * selParametroGobierno.porctrab_lph) / 100;
			aporteLph := montoBaseTotalLph * selParametroGobierno.porcpat_lph/100;
			retencionFju := (montoBaseTotalFju * selParametroGobierno.porctrab_Fju) / 100;
			aporteFju := montoBaseTotalFju * selParametroGobierno.porcpat_fju/100;
			
			if pRecalculo = 'S' then
				open curPromedios(recTrabajadores1.id_trabajador);				
				loop
					fetch curPromedios into recPromedios;			
					exit when not found;

					montoSumar := 0;

					if recPromedios.monto_restituir = 0 then
						montoSumar := recPromedios.monto;
					else
						montoSumar := recPromedios.monto_restituir;
					end if;

					if recPromedios.cod_frecuencia_pago = 4 then
						if recPromedios.sueldo_integral = 'S' then
							montoBase1Si := montoBase1Si + recPromedios.monto;
						end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase1Sb := montoBase1Sb + recPromedios.monto;
						elsif recPromedios.compensacion = 'S' then
							montoBase1Co := montoBase1Co + recPromedios.monto;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase1Pt := montoBase1Pt + recPromedios.monto;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase1Pc := montoBase1Pc + recPromedios.monto;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase1As := montoBase1As + recPromedios.monto;
						end if;

					elsif (recPromedios.cod_frecuencia_pago > 4 and
                                               recPromedios.cod_frecuencia_pago <> 10) then
						if recPromedios.sueldo_integral = 'S' then
							montoBase2Si := montoBase2Si + recPromedios.monto;
                                                end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase2Sb := montoBase2Sb + recPromedios.monto;
						elsif recPromedios.compensacion = 'S' then
							montoBase2Co := montoBase2Co + recPromedios.monto;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase2Pt := montoBase2Pt + recPromedios.monto;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase2Pc := montoBase2Pc + recPromedios.monto;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase2As := montoBase2As + recPromedios.monto;
						end if;
					    
                                         elsif (recPromedios.cod_frecuencia_pago = 10) then
						if recPromedios.sueldo_integral = 'S' then
							montoBase2Si := montoBase2Si + recPromedios.monto*4;
                                                end if;
						if recPromedios.sueldo_basico = 'S' then
							montoBase2Sb := montoBase2Sb + recPromedios.monto*4;
						elsif recPromedios.compensacion = 'S' then
							montoBase2Co := montoBase2Co + recPromedios.monto*4;
						elsif recPromedios.primas_trabajador = 'S' then
							montoBase2Pt := montoBase2Pt + recPromedios.monto*4;
						elsif recPromedios.primas_cargo = 'S' then
							montoBase2Pc := montoBase2Pc + recPromedios.monto*4;
						elsif recPromedios.ajuste_sueldo = 'S' then
							montoBase2As := montoBase2As + recPromedios.monto*4;
						end if;
					   end if;


                                      end loop;

				close curPromedios;

				 raise notice 'trabajadores_cinco';

				if recTrabajadores1.formula_integral = '1' then
					montoBaseTotalSi := (((montoBase1Si/7)+(montoBase2Si/30))*365)/12;
					montoBaseTotalSb := (((montoBase1Sb/7)+(montoBase2Sb/30))*365)/12;
					montoBaseTotalCo := (((montoBase1Co/7)+(montoBase2Co/30))*365)/12;
					montoBaseTotalPt := (((montoBase1Pt/7)+(montoBase2Pt/30))*365)/12;
					montoBaseTotalPc := (((montoBase1Pc/7)+(montoBase2Pc/30))*365)/12;
					montoBaseTotalAs := (((montoBase1As/7)+(montoBase2As/30))*365)/12;
				elsif recTrabajadores1.formula_integral = '2' then
					montoBaseTotalSi := (montoBase1Si/7)*30 + montoBase2Si;
					montoBaseTotalSb := (montoBase1Sb/7)*30 + montoBase2Sb;
					montoBaseTotalCo := (montoBase1Co/7)*30 + montoBase2Co;
					montoBaseTotalPt := (montoBase1Pt/7)*30 + montoBase2Pt;
					montoBaseTotalPc := (montoBase1Pc/7)*30 + montoBase2Pc;
					montoBaseTotalAs := (montoBase1As/7)*30 + montoBase2As;
				elsif recTrabajadores1.formula_integral = '3' then
					montoBaseTotalSi := (montoBase1Si*52)/12 + montoBase2Si;
					montoBaseTotalSb := (montoBase1Sb*52)/12 + montoBase2Sb;
					montoBaseTotalCo := (montoBase1Co*52)/12 + montoBase2Co;
					montoBaseTotalPt := (montoBase1Pt*52)/12 + montoBase2Pt;
					montoBaseTotalPc := (montoBase1Pc*52)/12 + montoBase2Pc;
					montoBaseTotalAs := (montoBase1As*52)/12 + montoBase2As;
				end if;
			end if;
 raise notice 'trabajadores_seis';
			perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSso,
					retencionSso,
					retencionSpf,
					montoBaseTotalLph,
					retencionLph,
					montoBaseTotalFju,
					retencionFju,
					aporteSso,
					aporteLph,
					aporteSpf,
					aporteFju);

raise notice 'trabajadores_siete';

			if pRecalculo = 'S'  then
				perform update_sueldo_promedio(
					recTrabajadores1.id_trabajador, 
					montoBaseTotalSi,
					montoBaseTotalSb,
					montoBaseTotalCo,
					montoBaseTotalPt,
					montoBaseTotalPc,
					montoBaseTotalAs);
			end if;

raise notice 'trabajadores_ocho';
			if pPrimeraQuincena = true then
				perform update_sueldo_promedio(
				recTrabajadores1.id_trabajador, 
				montoVariableSso,
				montoVariableLph,
				montoVariableFju);
			end if;
raise notice 'trabajadores_nueve';
		end loop;

		close curTrabajadores1;
	end loop;

raise notice 'trabajadores_final';
	close curTipoPersonal;

	return true;

end;



$_$;


--
-- TOC entry 683 (class 1255 OID 3240707)
-- Name: carga_masiva_trabajador(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION carga_masiva_trabajador() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador - Ejecución del proceso 
	Revision : 1.3
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:

	carga_masiva_trabajador()

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo.
	       - Va sin acentos.
	       - Se entiende que existe la tabla cargamasivatrabajador y que la misma contiene la informacion a 
	       ser migrada.
*/


-- Creacion de los alias de los parametros

-- Definicion de las constantes

-- Definicion de las variables de trabajo
	
-- Definición de los registros y cursores

	recCargaMasiva record;
	
	curCargaMasiva cursor
		for select *
		from cargamasivatrabajador;

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion carga_masiva_trabajador()';

	open curCargaMasiva;
	loop
		fetch curCargaMasiva into recCargaMasiva;
		exit when not found;

		perform carga_masiva_trabajador_proceso(
						recCargaMasiva.id_tipo_personal, 
						recCargaMasiva.cedula, 
						recCargaMasiva.id_cargo, 
						recCargaMasiva.codigo_nomina, 
						recCargaMasiva.id_dependencia, 
						recCargaMasiva.fecha_ingreso, 
						recCargaMasiva.fecha_ingreso_apn, 
						recCargaMasiva.fecha_vacaciones, 
						recCargaMasiva.fecha_prestaciones, 
						recCargaMasiva.fecha_antiguedad,
						recCargaMasiva.id_banco_nomina,
						recCargaMasiva.tipo_cta_nomina,
						recCargaMasiva.cuenta_nomina,
						recCargaMasiva.id_banco_lph,
						recCargaMasiva.cuenta_lph,
						recCargaMasiva.id_banco_fid,
						recCargaMasiva.cuenta_fid,
						recCargaMasiva.porcentaje_islr,
						recCargaMasiva.cotiza_sso,
						recCargaMasiva.cotiza_spf,
						recCargaMasiva.cotiza_lph,
						recCargaMasiva.cotiza_fju,
						recCargaMasiva.id_causa_movimiento,
						recCargaMasiva.id_registro);
	end loop;
	close curCargaMasiva;

	raise notice 'Se actualiza Identity';

	Delete from identity where name in ('Trabajador','RegistroCargos','MovimientoSitp','RegistroSitp','HistoricoCargos','Trayectoria');	

	Insert into identity select 'Trabajador',coalesce(max(id_trabajador),0)+2 from Trabajador;
	Insert into identity select 'RegistroCargos',coalesce(max(id_registro_cargos),0)+2 from RegistroCargos;
	Insert into identity select 'MovimientoSitp',coalesce(max(id_movimiento_sitp),0)+2 from MovimientoSitp;
	Insert into identity select 'RegistroSitp',coalesce(max(id_registro_sitp),0)+2 from RegistroSitp;
	Insert into identity select 'HistoricoCargos',coalesce(max(id_historico_cargos),0)+2 from HistoricoCargos;
	Insert into identity select 'Trayectoria',coalesce(max(id_Trayectoria),0)+2 from Trayectoria;

	raise notice 'Se limpia el contenido de la tabla cargamasivatrabajador';

	Delete from cargamasivatrabajador;

	raise notice 'Se culmina la ejecucion de la funcion carga_masiva_trabajador()';

	
end;  $$;


--
-- TOC entry 684 (class 1255 OID 3240708)
-- Name: carga_masiva_trabajador_proceso(integer, integer, integer, integer, integer, date, date, date, date, date, integer, character varying, character varying, integer, character varying, integer, character varying, double precision, character varying, character varying, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION carga_masiva_trabajador_proceso(integer, integer, integer, integer, integer, date, date, date, date, date, integer, character varying, character varying, integer, character varying, integer, character varying, double precision, character varying, character varying, character varying, character varying, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador 
	Revision : 1.3
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:
		TRABAJADOR
		REGISTROCARGOS (Opcional)
		TRAYECTORIA
		MOVIMIENTOSITP

	carga_masiva_trabajador_proceso( 
				 1.- id_tipo_personal integer, 
				 2.- cedula integer, 
				 3.- id_cargo integer, 
				 4.- codigo_nomina integer, 
				 5.- id_dependencia integer, 
				 6.- fecha_ingreso date, 
				 7.- fecha_ingreso_apn date, 
				 8.- fecha_vacaciones date, 
				 9.- fecha_prestaciones date, 
				10.- fecha_antiguedad date,
				11.- id_banco_nomina integer,
				12.- tipo_cta_nomina varchar,
				13.- cuenta_nomina varchar,
				14.- id_banco_lph integer,
				15.- cuenta_lph varchar,
				16.- id_banco_fid integer,
				17.- cuenta_fid varchar,
				18.- porcentaje_islr double precision,
				19.- cotiza_sso varchar,
				20.- cotiza_spf varchar,
				21.- cotiza_lph varchar,
				22.- cotiza_fju varchar,
				23.- id_causa_movimiento integer,
				24.- id_registro integer
				)

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo, no emplear cuando ya existen datos en las entidades afectadas.
	       - Va sin acentos. 
*/


-- Creacion de los alias de los parametros

	pIdTipoPersonal alias for $1; 
	pCedula alias for $2; 
	pIdCargo alias for $3; 
	pCodigoNomina alias for $4;  
	pIdDependencia alias for $5;  
	pFechaIngreso alias for $6;  
	pFechaIngresoApn alias for $7; 
	pFechaVacaciones alias for $8;  
	pFechaPrestaciones alias for $9; 
	pFechaAntiguedad alias for $10; 
	pIdBancoNomina alias for $11; 
	pTipoCuentaNomina alias for $12; 
	pCuentaNomina alias for $13; 
	pIdBancoLph alias for $14;
	pCuentaLph alias for $15; 
	pIdBancoFid alias for $16; 
	pCuentaFid alias for $17; 
	pPorcentajeIslr alias for $18; 
	pCotizaSso alias for $19; 
	pCotizaSpf alias for $20; 
	pCotizaLph alias for $21; 
	pCotizaFju alias for $22;
	pIdCausaMovimiento alias for $23;
	pIdRegistro alias for $24;

-- Definicion de las constantes

	-- para Trabajador 
	vEstatus character varying:='A'; -- activo 
	vSituacion character varying:='1'; -- normal 
	idDetalleTabuladorMed int4 := null;
	sueldoBasico float8:=0.0;
	vPaso int4 := 1;  -- leido en la clase en la aplicacion
	fechaEgreso date:=null;
	fechaJubilacion date := null;
	formaPago character varying := '1';  -- deposito en cuenta 
	dedProxNomina character varying := 'S'; -- leido en la clase en la aplicacion
	parProxNomina character varying := 'N'; -- leido en la clase en la aplicacion
	porcentajeJubilacion float8 := 0;
	baseJubilacion float8 := 0;
	feVida character varying := 'S'; -- leido en la clase en la aplicacion
	mesJubilacion int4 :=0;
	diaJubilacion int4 :=0;
	anioJubilacion int4 :=0;
	mesEgreso int4 :=0;
	diaEgreso int4 :=0;
	anioEgreso int4 :=0;
	fechaEntradaSig date := current_date;
	fechaSalidaSig date :=null;
	codOrganismoAdscrito character varying :=null;
	lunesPrimera int4 :=0;
	lunesSegunda int4 :=0;
	lunesRetroactivo int4 :=0;
	hayRetroactivo character varying :='N';
	diasTrabajados int4 :=0;
	mesSalida int4 :=0;
	diaSalida int4 :=0;
	anioSalida int4 :=0;
	horasSemanales float8 :=0; -- leido en la clase en la aplicacion
	fechaIngresoCargo date :=null;
	mesIngresoCargo int4 :=0;
	diaIngresoCargo int4 :=0;
	anioIngresoCargo int4 :=0;
	fechaFeVida date :=null;
	fechaEncargaduria date :=null;
	fechaComisionServicio date :=null;
	organismoComisionServicio character varying :=0;
	fechaTipoPersonal date :=null;
	codigoPatronal character varying :=null;
	jubilacionPlanificada character varying :='N';
	fechaUltimoMovimiento date:=pFechaIngreso;

	-- para Registrocargos
	vSituacionRc character varying :='O'; -- Ocupado
	vEstatusRc character varying :='3'; -- En tramite MPD, leido en la clase en la aplicacion
	vCondicion character varying :='1'; -- Activo
	fechaCreacion date := current_date;
	vHoras float8 := 8;
	reportaRac int4 := 1;
	convenioGremial character varying :='N';
	idGremio int4 := null;
	idSitp int4 := 0; -- cotejado con los ambientes de produccion
	tiempoSitp date := null;
	vCompensacion float8 :=0.0; 
	primasCargo  float8 :=0.0;
	primasTrabajador float8 :=0.0;
	aprobadoMpd character varying :='N'; -- leido en la clase en la aplicacion

	-- para registrositp

	fechaRegistro date := current_date;
	fechaMovimiento date := current_date;
	vLocalidad character varying :='C'; -- leido en la clase en la aplicacion
	afectaSueldo character varying :='N';
	documentoSoporte character varying := null;-- leido en la clase en la aplicacion
	idRemesa int4 := null;
	vEstatusRsitp int4 := 0;
	vObservaciones text:= 'Registro Generado en el proceso de Carga Masiva de implantación';
	idUsuario int4 := 1; -- valor por defecto del usuario sigefirrhh
	estatusMpd character varying :=null;
	codigoDevolucion  character varying :=null;
	analistaMpd  character varying :=null;
	idAnalistaMpd int4 := 0;
	fechaInicioMpd date := null;
	fechaFinMpd date := null;
	observacionesMpd text:= null;
	fechaPuntoCuenta date := null;
	puntoCuenta character varying :=null;
	vAnio int4 := extract(year from current_date);
	anteriorCodManualCargo int4 := 0;
	anteriorCodCargo character varying := null;
	anteriorDescripcionCargo character varying := null;
	anteriorCodigoNomina int4 := 0;
	anteriorCodSede character varying := null;
	anteriorNombreSede character varying := null;
	anteriorCodDependencia character varying := null;
	anteriorNombreDependencia character varying := null;
	anteriorSueldo float8 :=0.0;
	anteriorCompensacion float8 :=0.0;
	anteriorPrimasCargo float8 :=0.0;
	anteriorPrimasTrabajador float8 :=0.0; 	
	anteriorGrado int4 := 0;
	anteriorPaso int4 := 1;
	anteriorCodRegion character varying := null;
	anteriorNombreRegion character varying := null;
	codConcurso character varying := null;
	fechaCulminacion date := null;
	

	-- para movimientoSitp

	montoJubilacion float8 :=0.0; 	
	vSueldoPromedio float8 :=0.0; 
	porcJubilacion int4 := 0;

	-- para historicocargos

	vMovimientoHc character varying := '2';

	-- para trayectoria
	anioPreparacion int4 := extract(year from current_date);
	fechaPreparacion date := current_date;
	numeroRemesa character varying := null;
	correlativoMpd int4 := 0;
	vEstatusTray character varying := 0;
	fechaEstatus date := current_date;
	fechaVigencia date := current_date;
	vNombramiento character varying := null;
	montoJubilacionSobrev float8 :=0.0;
	porcPensionSobrev float8 :=0.0;
	montoPensionSobrev float8 :=0.0;
	montoPensionInvalid float8 :=0.0;
	porcPensionInvalid float8 :=0.0;
	invalidezSact float8 :=0.0;
	primaJerarquia float8 :=0.0;
	primaServicio float8 :=0.0;
	ajusteSueldo float8 :=0.0;
	otrosPagos float8 :=0.0;
	otrosNoVicepladin float8 :=0.0;
	vOrigen character varying := 'S';
	vUsuario character varying := 'sigefirrhh';
	nombreMunicipio  character varying := null;
	
	
-- Definicion de las variables de trabajo

	-- Para trabajador
	idTrabajador int4;
	idRegistroCargos int4:=null;
	vMovimiento character varying;

	-- Para registrocargos
	-- idRegistro int4;
	
	-- Para RegistroSitp
	idRegistroSitp int4;
	numeroMovimiento int4;
	
	-- Para MovimientoSitp
	idMovimientoSitp int4;

	-- Para historicocargos
	idHistoricoCargos int4; 

	-- Para trayectoria
	idTrayectoria int4; 

	-- Para sueldopromedio
	idSueldoPromedio int4;
	
-- Definición de los registros y cursores

	recPersonal record;
	recTipoPersonal record;
	recDependencia record;
	recCargo record;
	recSede record;
	recOrganismo record;
	recCausaMovimiento record;
	recManualCargo record;
	recTabulador record;
	recLugarPago record;
	recCiudad record;
	recEstado record;
	recClasificacionPersonal record;
	recCategoriaPersonal record;
	recRelacionPersonal record;
	recRegion record;
	recGrupoOrganismo record;

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion carga_masiva_trabajador() para la cedula = %',pCedula;
	-- Busqueda de la informacion conexa 

	raise notice 'Busco los datos del tipopersonal = %',pIdTipoPersonal;
	select * into recTipoPersonal from tipopersonal where id_tipo_personal = pIdTipoPersonal;

	raise notice 'Busco los datos de la dependencia = %',pIdDependencia;
	select * into recDependencia from dependencia where id_dependencia = pIdDependencia;

	raise notice 'Busco los datos del cargo = %',pIdCargo;
	select * into recCargo from cargo where id_cargo = pIdCargo;

	raise notice 'Busco los datos de la sede = %',recDependencia.id_sede;
	select * into recSede from sede where id_sede = recDependencia.id_sede;

	raise notice 'Busco el id de trabajador';
	select coalesce(max(id_trabajador),0)+1 into idTrabajador from trabajador;

	raise notice 'Busco el id de organismo';
	select * into recOrganismo from organismo;

	raise notice 'Busco el id de personal';
	select * into recPersonal from personal where cedula = pCedula;

	raise notice 'Busco los datos de la causamovimiento = %',pIdCausaMovimiento;
	select * into recCausaMovimiento from causamovimiento where id_causa_movimiento = pIdCausaMovimiento;

	-- Registros de Registristp
	raise notice 'Busco los datos del manual de cargo = %',recCargo.id_manual_cargo;
	select * into recManualCargo from manualcargo where id_manual_cargo = recCargo.id_manual_cargo;

	raise notice 'Busco los datos del tabulador = %',recManualCargo.id_tabulador;
	select * into recTabulador from tabulador where id_tabulador = recManualCargo.id_tabulador;

	raise notice 'Busco los datos de la Region = %',recDependencia.id_region;
	select * into recRegion from region where id_region = recDependencia.id_region;


	-- Registros de Trayectoria
	raise notice 'Busco las caracteristicas geograficas de lugar de pago';
	select * into recLugarPago from lugarpago where id_lugar_pago = recSede.id_lugar_pago;
	select * into recCiudad from ciudad where id_ciudad = recLugarPago.id_ciudad;
	select * into recEstado from estado where id_estado = recCiudad.id_estado;

	raise notice 'Busco las caracteristicas de la Clasificacion de personal';
	select * into recClasificacionPersonal from clasificacionpersonal where id_clasificacion_personal = recTipoPersonal.id_clasificacion_personal;
	select * into recRelacionPersonal from relacionpersonal where id_relacion_personal = recClasificacionPersonal.id_relacion_personal;
	select * into recCategoriaPersonal from categoriapersonal where id_categoria_personal = recClasificacionPersonal.id_categoria_personal;

	select * into recGrupoOrganismo from grupoorganismo where id_grupo_organismo = recDependencia.id_grupo_organismo;
	 
	
	-- obtengo el movimiento de acuerdo a las caracteristicas del organismo 
	if recOrganismo.aprobacion_mpd = 'S'then
		vMovimiento:='T';
	else
		vMovimiento:='A';
	end if;


	-- se procede a insertar el registro en trabajador

	raise notice ' Se procede a insertar el registro en trabajador';
	insert into trabajador 
		(id_trabajador,id_personal,id_tipo_personal,cedula,cod_tipo_personal,
		estatus,movimiento,situacion,id_registro_cargos,id_cargo,
		id_detalle_tabulador_med,id_dependencia,id_lugar_pago,codigo_nomina,cod_cargo,
		sueldo_basico,paso,id_turno,riesgo,regimen,
		fecha_ingreso,fecha_ingreso_apn,fecha_vacaciones,fecha_prestaciones,fecha_antiguedad,
		fecha_egreso,fecha_jubilacion,forma_pago,id_banco_nomina,tipo_cta_nomina,
		cuenta_nomina,id_banco_lph,cuenta_lph,id_banco_fid,cuenta_fid,
		porcentaje_islr,cotiza_sso,cotiza_spf,cotiza_lph,cotiza_fju,
		ded_prox_nomina,par_prox_nomina,porcentaje_jubilacion,base_jubilacion,fe_vida,
		id_causa_movimiento,id_dependencia_real,id_cargo_real,id_organismo,mes_ingreso,
		dia_ingreso,anio_ingreso,mes_ingreso_apn,dia_ingreso_apn,anio_ingreso_apn,
		mes_vacaciones,dia_vacaciones,anio_vacaciones,mes_prestaciones,dia_prestaciones,
		anio_prestaciones,mes_antiguedad,dia_antiguedad,anio_antiguedad,mes_jubilacion,
		dia_jubilacion,anio_jubilacion,mes_egreso,dia_egreso,anio_egreso,
		fecha_entrada_sig,fecha_salida_sig,codigo_nomina_real,cod_organismo_adscrito,lunes_primera,
		lunes_segunda,lunes_retroactivo,hay_retroactivo,dias_trabajados,mes_entrada,
		dia_entrada,anio_entrada,mes_salida,dia_salida,anio_salida,horas_semanales,
		fecha_ingreso_cargo,mes_ingreso_cargo,dia_ingreso_cargo,anio_ingreso_cargo,fecha_fe_vida,
		fecha_encargaduria,fecha_comision_servicio,organismo_comision_servicio,fecha_tipo_personal,fecha_ultimo_movimiento,
		codigo_patronal,jubilacion_planificada)
	values
		(idTrabajador,recPersonal.id_personal,pIdTipoPersonal,pCedula,recTipoPersonal.cod_tipo_personal,
		vEstatus,vMovimiento,vSituacion,idRegistroCargos,pIdCargo,
		idDetalleTabuladorMed,pIdDependencia,recSede.id_lugar_pago,pCodigoNomina,recCargo.cod_cargo,
		sueldoBasico,vPaso,recSede.id_turno,recSede.riesgo,recSede.regimen,   
		pFechaIngreso,pFechaIngresoApn,pFechaVacaciones,pFechaPrestaciones,pFechaAntiguedad,
		fechaEgreso,fechaJubilacion,formaPago,pIdBancoNomina,pTipoCuentaNomina,
		pCuentaNomina,pIdBancoLph,pCuentaLph,pIdBancoFid,pCuentaFid,
		pPorcentajeIslr,pCotizaSso,pCotizaSpf,pCotizaLph,pCotizaFju,
		dedProxNomina,parProxNomina,porcentajeJubilacion,baseJubilacion,feVida,
		pIdCausaMovimiento,pIdDependencia,pIdCargo,recOrganismo.id_organismo,extract(month from pFechaIngreso),
		extract(day from pFechaIngreso),extract(year from pFechaIngreso),extract(month from pFechaIngresoApn),extract(day from pFechaIngresoApn),extract(year from pFechaIngresoApn),
		extract(month from pFechaVacaciones),extract(day from pFechaVacaciones),extract(year from pFechaVacaciones),extract(month from pFechaPrestaciones),extract(day from pFechaPrestaciones),
		extract(year from pFechaPrestaciones),extract(month from pFechaAntiguedad),extract(day from pFechaAntiguedad),extract(year from pFechaAntiguedad),mesJubilacion,
		diaJubilacion,anioJubilacion,mesEgreso,diaEgreso,anioEgreso,
		fechaEntradaSig,fechaSalidaSig,pCodigoNomina,codOrganismoAdscrito,lunesPrimera,
		lunesSegunda,lunesRetroactivo,hayRetroactivo,diasTrabajados,extract(month from fechaEntradaSig),
		extract(day from fechaEntradaSig),extract(year from fechaEntradaSig), mesSalida,diaSalida,anioSalida,horasSemanales,
		fechaIngresoCargo,mesIngresoCargo,diaIngresoCargo,anioIngresoCargo,fechaFeVida,
		fechaEncargaduria,fechaComisionServicio,organismoComisionServicio,fechaTipoPersonal,fechaUltimoMovimiento,
		codigoPatronal,jubilacionPlanificada);

	-- evaluo si el tipo de personal maneja RC y opero
	if recTipoPersonal.maneja_rac = 'S' then -- maneja estructura y tengo que operar con ella
		raise notice ' El tipo de personal maneja RAC';

		-- validar si el registrocargos existe (de ser asi ya esta vacante por la funcion de validacion)
		select coalesce(max(id_registro_cargos),0) into idRegistroCargos from registrocargos where id_registro = pIdRegistro and codigo_nomina = pCodigoNomina;

		if idRegistroCargos=0 then -- no existe el registro y tengo que insertarlo

			-- ubico el proximo id de registrocargos 
			raise notice 'Busco el id de registrocargos';
			select coalesce(max(id_registro_cargos),0)+1 into idRegistroCargos from registrocargos;

			-- inserto los registros en registrocargos
			raise notice 'Inserto el registro en registrocargos';
			insert into registrocargos 
				(
				id_registro_cargos,id_registro,codigo_nomina,situacion,estatus,
				condicion,fecha_creacion,horas,reporta_rac,id_trabajador,
				convenio_gremial,id_gremio,id_cargo,id_dependencia,id_sede,
				id_sitp,tiempo_sitp,sueldo_basico,compensacion,primas_cargo,
				primas_trabajador,aprobado_mpd
				)
				values
				(
				idRegistroCargos,pIdRegistro,pCodigoNomina,vSituacionRc,vEstatusRc,
				vCondicion,fechaCreacion,vHoras,reportaRac,idTrabajador,
				convenioGremial,idGremio,pIdCargo,pIdDependencia,recSede.id_sede,
				idSitp,tiempoSitp,sueldoBasico,vCompensacion,primasCargo,
				primasTrabajador,aprobadoMpd
				);
		
		else --- el registro existe, tengo que ocuparlo 

				update registrocargos set id_trabajador = idTrabajador, situacion = 'O' where id_registro_cargos = idRegistroCargos;

		end if;

		-- actualizo el id_registro_cargos en la tabla trabajador
		raise notice 'Actualizo el registrocargos creado en trabajador';
		update trabajador set id_registro_cargos = idRegistroCargos 
			where id_trabajador = idTrabajador;

	end if; -- Fin de trabajo de Registrocargos


	if recTipoPersonal.aprobacion_mpd = 'N' then -- No sujeto a LEFP por ende maneja registrositp 

		-- inserto registrositp

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de registrositp';
		select coalesce(max(id_registro_sitp),0)+1 into idRegistroSitp from registrositp;

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el numero movimiento';
		select coalesce(max(numero_movimiento),0)+1 into numeroMovimiento from registrositp;
	
		-- inserto los registros 
		raise notice 'Inserto el registro en registrositp';
		insert into registrositp
			(
			id_registro_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region,
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion)
			values
			(
			idRegistroSitp,fechaRegistro,fechaMovimiento,pCodigoNomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recCargo.grado,vPaso,recDependencia.cod_dependencia,
			recSede.cod_sede,recCargo.tipo_cargo,recTipoPersonal.nombre,recClasificacionPersonal.id_clasificacion_personal,recCausaMovimiento.id_causa_movimiento,
			recCausaMovimiento.cod_causa_movimiento,recManualCargo.cod_manual_cargo, recCargo.cod_cargo,recCargo.descripcion_cargo,recTabulador.cod_tabulador,
			afectaSueldo,documentoSoporte,vLocalidad,numeroMovimiento,pCedula,  
			recPersonal.primer_apellido || ' ' || recPersonal.primer_nombre, recPersonal.id_personal,idRemesa,vEstatusRsitp,recDependencia.nombre,
			recSede.nombre,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			vObservaciones,idUsuario,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegion.cod_region,
			recRegion.nombre,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,anteriorCodManualCargo,anteriorCodCargo,anteriorDescripcionCargo,
			anteriorCodigoNomina,anteriorCodSede,anteriorNombreSede,anteriorCodDependencia,
			anteriorNombreDependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,anteriorGrado,anteriorPaso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pfechaIngreso,recSede.id_turno,fechaCulminacion);		

	else -- Son  sujeto a lefp y manejan historicocargos y movimientositp

		-- historicocargos 

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de historicocargos';
		select coalesce(max(id_historico_cargos),0)+1 into IdHistoricoCargos from historicocargos;

		insert into historicocargos 
			(
			id_historico_cargos,id_registro,id_causa_movimiento,id_cargo,
			id_dependencia,	codigo_nomina,situacion,movimiento,fecha_movimiento,horas,cedula,
			primer_apellido,segundo_apellido,primer_nombre,segundo_nombre
			) 
			values 
			(
			IdHistoricoCargos,pIdRegistro,recCausaMovimiento.id_causa_movimiento,recCargo.id_cargo,
			pIdDependencia, pCodigoNomina,vSituacionRc,vMovimientoHc,fechaMovimiento,vHoras,pCedula,
			recPersonal.primer_apellido,recPersonal.segundo_apellido,recPersonal.primer_nombre,recPersonal.segundo_nombre
			);


		-- movimientositp

		-- ubico el proximo id de registrositp 
		raise notice 'Busco el id de movimientositp';
		select coalesce(max(id_movimiento_sitp),0)+1 into idMovimientoSitp from movimientositp;

		-- ubico el proximo numero de movimiento en registrositp 
		raise notice 'Busco el numero movimiento';
		select coalesce(max(numero_movimiento),0)+1 into numeroMovimiento from movimientositp;
	
		-- inserto los registros 
		raise notice 'Inserto el registro en registrositp';
		insert into movimientositp
			(
			id_movimiento_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region,
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion,monto_jubilacion,
			sueldo_promedio,porc_jubilacion)
			values
			(
			idMovimientoSitp,fechaRegistro,fechaMovimiento,pCodigoNomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recCargo.grado,vPaso,recDependencia.cod_dependencia,
			recSede.cod_sede,recCargo.tipo_cargo,recTipoPersonal.nombre,recClasificacionPersonal.id_clasificacion_personal,recCausaMovimiento.id_causa_movimiento,
			recCausaMovimiento.cod_causa_movimiento,recManualCargo.cod_manual_cargo, recCargo.cod_cargo,recCargo.descripcion_cargo,recTabulador.cod_tabulador,
			afectaSueldo,documentoSoporte,vLocalidad,numeroMovimiento,pCedula,  
			recPersonal.primer_apellido || ' ' || recPersonal.primer_nombre, recPersonal.id_personal,idRemesa,vEstatusRsitp,recDependencia.nombre,
			recSede.nombre,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			vObservaciones,idUsuario,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegion.cod_region,
			recRegion.nombre,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,anteriorCodManualCargo,anteriorCodCargo,anteriorDescripcionCargo,
			anteriorCodigoNomina,anteriorCodSede,anteriorNombreSede,anteriorCodDependencia,
			anteriorNombreDependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,anteriorGrado,anteriorPaso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pfechaIngreso,recSede.id_turno,fechaCulminacion,
			montoJubilacion, vSueldoPromedio, porcJubilacion);		
	end if;


	-- inserto trayectoria, comun a todos los tipos de personal

	-- ubico el proximo id de trayectoria 
	raise notice 'Busco el id de trayectoria';
	select coalesce(max(id_trayectoria),0)+1 into idTrayectoria from trayectoria;


	insert into trayectoria (
		id_trayectoria,cedula,primer_apellido,segundo_apellido,primer_nombre,
		segundo_nombre,anio_preparacion,fecha_preparacion,codigo_anterior_mpd,
		numero_remesa,numero_movimiento,correlativo_mpd,nombre_corto,nombre_organismo,
		estatus,fecha_estatus,fecha_vigencia,cod_ubi_geografico,estado,ciudad,
		municipio,cod_region,nombre_region,cod_dependencia,nombre_dependencia,
		cod_causa_movimiento,descripcion_movimiento,nombre_corto_grupo,nombre_largo_grupo,
		caucion,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_relacion,
		desc_relacion,cod_categoria,desc_categoria,nombramiento,grado,
		paso,codigo_nomina,monto_jubilacion,porc_jubilacion,sueldo_promedio,
		monto_jubilacion_sobrev,porc_pension_sobrev,monto_pension_sobrev,monto_pension_invalid,
		porc_pension_invalid,invalidez_sact,sueldo_basico,compensacion,prima_jerarquia,
		prima_servicio,ajuste_sueldo,otros_pagos,otros_no_vicepladin,primas_cargo,primas_trabajador,
		id_personal,horas,cod_concurso,fecha_punto_cuenta,observaciones,origen,punto_cuenta,
		usuario,cod_grupo_organismo,cod_organismo,fecha_culminacion
		)
		values
		(
		idTrayectoria,pCedula,recPersonal.primer_apellido,recPersonal.segundo_apellido,recPersonal.primer_nombre,
		recPersonal.segundo_nombre,anioPreparacion,fechaPreparacion,recOrganismo.codigo_anterior_mpd,
		numeroRemesa,numeroMovimiento, correlativoMpd, recOrganismo.nombre_corto, recOrganismo.nombre_organismo,
		vEstatusTray,fechaEstatus,fechaVigencia, recCiudad.cod_ciudad || recEstado.cod_estado,recEstado.nombre,recCiudad.nombre,
		nombreMunicipio, recRegion.cod_region, recRegion.nombre, recDependencia.cod_dependencia,recDependencia.nombre,
		recCausaMovimiento.cod_causa_movimiento,recCausaMovimiento.descripcion, recGrupoOrganismo.nombre_corto, recGrupoOrganismo.nombre,
		recCargo.caucion,recManualCargo.cod_manual_cargo, recCargo.cod_cargo, recCargo.descripcion_cargo, recRelacionPersonal.cod_relacion,
		recRelacionPersonal.desc_relacion, recCategoriaPersonal.cod_categoria,recCategoriaPersonal.desc_categoria,vNombramiento,recCargo.grado,
		VPaso,pCodigoNomina,montoJubilacion,porcJubilacion,vSueldoPromedio,
		montoJubilacionSobrev,porcPensionSobrev,montoPensionSobrev,montoPensionInvalid,
		porcPensionInvalid,invalidezSact,sueldoBasico,vCompensacion,primaJerarquia,
		primaServicio,ajusteSueldo,otrosPagos,otrosNoVicepladin,primasCargo,primasTrabajador,
		recPersonal.id_personal,vHoras,codConcurso,fechaPuntoCuenta,vObservaciones,vOrigen, puntoCuenta,
		vUsuario, recGrupoOrganismo.cod_grupo_organismo, recOrganismo.cod_organismo, fechaCulminacion
		);

	-- inserto el registro en sueldoPromedio 

	-- ubico el proximo id de sueldopromedio 
	raise notice 'Busco el id de sueldopromedio';
	select coalesce(max(id_sueldo_promedio),0)+1 into idSueldoPromedio from sueldopromedio;

	insert into sueldopromedio
		(
		id_sueldo_promedio,id_trabajador,id_tipo_personal,id_grupo_nomina,promedio_integral,
		promedio_sueldo,sueldo_anual,promedio_sso,retencion_sso,retencion_spf,
		promedio_lph,retencion_lph,retencion_fju,promedio_fju,promedio_vacaciones,
		promedio_utilidad,aporte_sso,aporte_spf,aporte_lph,aporte_fju,promedio_ajustes,
		promedio_compensacion,promedio_primasc,promedio_primast,promedio_spf,monto_variable_sso,
		monto_variable_lph,monto_variable_fju,id_sitp,tiempo_sitp
		)
		values
		(
		idSueldoPromedio,idTrabajador,pIdTipoPersonal,recTipoPersonal.id_grupo_nomina,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,0.0,0.0,0.0,
		0.0,0.0,idSitp,tiempoSitp
		);
	
end;  $_$;


--
-- TOC entry 685 (class 1255 OID 3240710)
-- Name: convert_2_decimal(double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION convert_2_decimal(double precision) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare 
	pValorInicial alias for $1;		
	valorFinal float8 := 0;
begin
	valorFinal := round(pValorInicial*100);
	valorFinal := valorFinal/100;
	return valorFinal;
end;
$_$;


--
-- TOC entry 686 (class 1255 OID 3240711)
-- Name: count_descuentoticket(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION count_descuentoticket(integer, integer, integer) RETURNS bigint
    LANGUAGE sql
    AS $_$
	select count(*) from descuentoticket 
	where id_trabajador = $1 
	and mes = $2 and anio = $3;
	
$_$;


--
-- TOC entry 687 (class 1255 OID 3240712)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes boolean)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 688 (class 1255 OID 3240713)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 690 (class 1255 OID 3240714)
-- Name: crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadorendicionmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;
	pIdAporte alias for $9;

	recEncabezadoRendicionMensual record;
	curEncabezadoRendicionMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar, pIdAporte int4)
		for select id_encabezado_rendicion_mensual as id
		from encabezadorendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes
		and id_aporte = pIdAporte;

	id int4:=0;	

begin
	-- Version 2.0
	open curEncabezadoRendicionMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes, pIdAporte);
	fetch curEncabezadoRendicionMensual into recEncabezadoRendicionMensual;
	if recEncabezadoRendicionMensual.id is null then
		id := last_id_encabezadorendicionmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadorendicionmensual
			(id_encabezado_rendicion_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes, id_aporte) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes, pIdAporte);
		return id;
	else
		return recEncabezadoRendicionMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 691 (class 1255 OID 3240715)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes boolean)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 692 (class 1255 OID 3240716)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 693 (class 1255 OID 3240717)
-- Name: crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION crear_encabezadoresumenmensual(integer, character varying, integer, integer, integer, character varying, character varying, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadAdministradora alias for $1;
	pCodUnidadAdministradora alias for $2;
	pAnio alias for $3;
	pMes alias for $4;
	pNumeroNomina alias for $5;
	pUsuario alias for $6;
	pTitulo alias for $7;
	pAportes alias for $8;
	pIdAporte alias for $9;

	recEncabezadoResumenMensual record;
	curEncabezadoResumenMensual cursor(pIdUnidadAdministradora int4, pAnio int4, 
		pMes int4, pNumeroNomina int4, pAportes varchar, pIdAporte int4)
		for select id_encabezado_resumen_mensual as id
		from encabezadoresumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and anio = pAnio 
		and mes = pMes 
		and numero_nomina = pNumeroNomina
		and aportes = pAportes
		and id_aporte = pIdAporte;

	id int4:=0;	

begin
	-- Version 1.0
	open curEncabezadoResumenMensual(pIdUnidadAdministradora, pAnio, pMes, pNumeroNomina, pAportes, pIdAporte);
	fetch curEncabezadoResumenMensual into recEncabezadoResumenMensual;
	if recEncabezadoResumenMensual.id is null then
		id := last_id_encabezadoresumenmensual()+1;
		if id is null then
			id := 1;
		end if;

		insert into encabezadoresumenmensual
			(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
			numero_nomina,cod_unidad_administ,cerrado,usuario,titulo, aportes) values(
			id, pAnio, pMes,pIdUnidadAdministradora,
			pNumeroNomina,pCodUnidadAdministradora,'N',pUsuario, pTitulo, pAportes);
		return id;
	else
		return recEncabezadoResumenMensual.id;
	end if;

end;

$_$;


--
-- TOC entry 694 (class 1255 OID 3240718)
-- Name: delete_all_planillaarc(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_all_planillaarc(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from planillaarc where id_trabajador in 
	(select id_trabajador from trabajador where id_tipo_personal = $1) and anio = $2

$_$;


--
-- TOC entry 695 (class 1255 OID 3240719)
-- Name: delete_all_ultimanomina(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_all_ultimanomina(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from ultimanomina where id_grupo_nomina = $1 and numero_nomina = $2

$_$;


--
-- TOC entry 696 (class 1255 OID 3240720)
-- Name: delete_all_ultimaprenomina(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_all_ultimaprenomina(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from ultimaprenomina where id_grupo_nomina = $1 and numero_nomina = $2

$_$;


--
-- TOC entry 697 (class 1255 OID 3240721)
-- Name: delete_conceptovariable1(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_conceptovariable1(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
delete from conceptovariable where id_concepto_variable in 
	(select id_concepto from ultimanomina where origen = 'V' 
	and numero_nomina = $2 and 
	id_grupo_nomina = $1)


$_$;


--
-- TOC entry 679 (class 1255 OID 3240722)
-- Name: delete_conceptovariable2(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_conceptovariable2(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptovariable where id_concepto_variable in 
		(select id_concepto from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago and fp.cod_frecuencia_pago = 1 and origen = 'V'
		and numero_nomina = 0 and 
		id_grupo_nomina = $1)


$_$;


--
-- TOC entry 700 (class 1255 OID 3240723)
-- Name: delete_conceptovariable3(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_conceptovariable3(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	delete from conceptovariable where id_concepto_variable in 
		(select un.id_concepto from ultimanomina un, conceptotipopersonal ctp, concepto co where origen = 'V' 
		and numero_nomina = 0  
		and un.id_concepto_tipo_personal=ctp.id_concepto_tipo_personal  
		and ctp.id_concepto=co.id_concepto 
		and co.cod_concepto in ('1500', '1601', '1701', '1502') 
		and id_grupo_nomina = $1)


$_$;


--
-- TOC entry 701 (class 1255 OID 3240724)
-- Name: delete_historico_nomina(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_historico_nomina(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico nomina de la nomina reversada
    ---
	DELETE FROM historiconomina
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


--
-- TOC entry 702 (class 1255 OID 3240725)
-- Name: delete_historico_quincena(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_historico_quincena(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico quincena de la nomina reversada
    ---
	DELETE FROM historicoquincena
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


--
-- TOC entry 703 (class 1255 OID 3240726)
-- Name: delete_historico_semana(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_historico_semana(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar el historico semana de la nomina reversada
    ---
	DELETE FROM historicosemana
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
	
$_$;


--
-- TOC entry 704 (class 1255 OID 3240727)
-- Name: delete_historicobaseislr(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_historicobaseislr(integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$

	DELETE FROM historicobaseislr
	  where id_grupo_nomina = $1
            and numero_nomina = $2
            and anio = $3
            and mes = $4
            and semana_quincena = $5;
$_$;


--
-- TOC entry 705 (class 1255 OID 3240728)
-- Name: delete_prestacionesmensuales(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_prestacionesmensuales(integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
   DELETE FROM  prestacionesmensuales
     WHERE id_tipo_personal = $1
       AND id_trabajador =$2
       AND anio = $3
       AND mes = $4;
	
$_$;


--
-- TOC entry 706 (class 1255 OID 3240729)
-- Name: delete_seguridadordinaria(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_seguridadordinaria(integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar seguridad ordinaria  de la nomina reversada
    ---
DELETE FROM seguridadordinaria
   WHERE id_seguridad_ordinaria = $1;
$_$;


--
-- TOC entry 707 (class 1255 OID 3240730)
-- Name: delete_ultimanomina_reverso(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION delete_ultimanomina_reverso(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---borrar la ultima nomina reversada
    ---
	DELETE FROM ultimanomina
	  where id_grupo_nomina = $1
            and numero_nomina = $2;
	
$_$;


--
-- TOC entry 708 (class 1255 OID 3240731)
-- Name: desactivar_fe_vida(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION desactivar_fe_vida(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4) 
	for select count(*) as cantidad from trabajador 
	where id_tipo_personal = pIdTipoPersonal
	and fe_vida = 'S';

	cantidad int4 := 0;
begin

	open curTrabajadores(pIdTipoPersonal);
	fetch curTrabajadores into recTrabajadores;

	if recTrabajadores.cantidad is not null then
		cantidad := recTrabajadores.cantidad;
	end if;

	update trabajador set  fe_vida = 'N' 
		where id_tipo_personal = pIdTipoPersonal and fe_vida = 'S' and estatus = 'A';

	return cantidad;
end;

$_$;


--
-- TOC entry 709 (class 1255 OID 3240732)
-- Name: egresos_fraccionados(integer, date, date, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION egresos_fraccionados(integer, date, date, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	pIdGrupoNomina alias for $1;
	pFechaInicio alias for $2;
	pFechaFin alias for $3;
	pPrimeraQuincena alias for $4;



	recTrabajadores record;
	curTrabajadores cursor(pIdGrupoNomina int4, pFechaInicio date, pFechaFin date)
		for select distinct id_trabajador, dia_egreso 
		from trabajador where estatus = 'E'
		and fecha_egreso between pFechaInicio and pFechaFin
		and id_tipo_personal in 
		(select id_tipo_personal from tipopersonal where id_grupo_nomina = pIdGrupoNomina);

	recConceptoFijo record;
	curConceptoFijo cursor(pIdTrabajador int4)
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;


	dias int4 := 0;
	monto float8:=0;
	unidades float8:=0;
	montoRestituir float8:=0;
	unidadesRestituir float8:=0;
begin

-- Lee los trabajadores egresados y calcula los montos de los conceptos
-- que seran aplicados en forma fraccionada

	open curTrabajadores(pIdGrupoNomina, pFechaInicio,pFechaFin);
	loop
		fetch curTrabajadores into recTrabajadores;
		exit when not found;
		raise notice 'paso 0';
		dias := (recTrabajadores.dia_egreso - extract(day from pFechaInicio))+1;
		open curConceptoFijo(recTrabajadores.id_trabajador);
		loop
			raise notice 'paso 1';
			fetch curConceptoFijo into recConceptoFijo;
			exit when not found;

			montoRestituir := 0;
			unidadesRestituir := 0;
			monto := 0;
			unidades :=0;

			montoRestituir := recConceptoFijo.monto;
			unidadesRestituir := recConceptoFijo.unidades;
			unidades := dias;
			if recConceptoFijo.cod_frecuencia_pago = 3 then
				monto:= (recConceptoFijo.monto/15)*dias;
			elsif recConceptoFijo.cod_frecuencia_pago = 2 then
				monto := (recConceptoFijo.monto/30)*dias;
			elsif recConceptoFijo.cod_frecuencia_pago = 1 and pPrimeraQuincena = true then
				monto := (recConceptoFijo.monto/30)*dias;
			
                        elsif recConceptoFijo.cod_frecuencia_pago = 4 then
				monto := (recConceptoFijo.monto/7)*dias;
                        end if;
		      
			if monto <> 0 then
				perform actualizar_montos_conceptofijo(recConceptoFijo.id_concepto_fijo,
					monto,unidades,montoRestituir,unidadesRestituir, 'S');
                        end if;
			
		end loop;
		close curConceptoFijo;
		raise notice 'id_trabajador %',recTrabajadores.id_trabajador;
		raise notice 'monto %',monto;
		raise notice 'unidades %',unidades;
	end loop;

	return 0;

end;

$_$;


--
-- TOC entry 710 (class 1255 OID 3240733)
-- Name: generar_cesta_ticket(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_cesta_ticket(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;

	pt parametroticket;

	

	curConceptoCargo cursor (key1 int4, key2 int4) for select distinct monto from conceptocargo

		where id_cargo = key1 and id_concepto_tipo_personal = key2;



begin

	select into pt * from parametroticket  where id_tipo_personal = pIdTipoPersonal;
	

	if cc.monto is not null then

		valor := cc.monto;

	end if;



	select into pv * from parametrovarios where id_tipo_personal = idTipoPersonal;

	diasAnio := pv.dias_anio;



	if pTipo = 'F' then

		montoTotal := valor;



	elsif pTipo = 'P' or pTipo = 'I' or  pTipo = 'D' then


		open curConceptoAsociado(pIdTrabajador, pIdConceptoTipoPersonal);				

		loop
			
			fetch curConceptoAsociado into recConceptoAsociado;			

			exit when not found;

			
			if pTipo = 'P' then

				porcentaje := valor;

			else

				porcentaje := pUnidades;

			end if;

			

			monto := recConceptoAsociado.monto*recConceptoAsociado.factor;

			conversion := recConceptoAsociado.base;

			codFrecuenciaPagoAsociado := recConceptoAsociado.cod_frecuencia_pago;



			if codFrecuenciaPagoAsociado = 1 or codFrecuenciaPagoAsociado = 2 then

				if conversion = 'H' then

					montoTotal := montoTotal + (monto/30)/pJornadaDiaria;	

				elsif conversion = 'D' then

					montoTotal := montoTotal + (monto/30);		

				else

					montoTotal := montoTotal + monto;

				end if;



			elsif codFrecuenciaPagoAsociado = 3 then

				if conversion = 'H' then

					montoTotal := montoTotal + (monto/15)/pJornadaDiaria;	

				elsif conversion = 'D' then

					montoTotal := montoTotal + (monto/15);	

				elsif conversion = 'M' then

					montoTotal := montoTotal + (monto*2);		

				else

					montoTotal := montoTotal + monto;

				end if;

			elsif codFrecuenciaPagoAsociado = 4 then

				if conversion = 'H' then

					montoTotal := montoTotal + (monto/pJornadaSemanal)/pJornadaDiaria;		

				elsif conversion = 'D' then

					montoTotal := montoTotal + (monto/pJornadaDiaria);

				elsif conversion = 'M' then	

					if pFormulaIntegral = '1' then

						montoTotal := montoTotal + (((monto/7)*365)/12);

					elsif pFormulaIntegral = '2' then

						montoTotal := montoTotal + ((monto/7)*30);

					elsif pFormulaIntegral = '3' then

						montoTotal := montoTotal + ((monto*52)/12);	

					end if;

				else

					montoTotal := montoTotal + monto;

				end if;

			elsif codFrecuenciaPagoAsociado = 5 or

				codFrecuenciaPagoAsociado = 6 or

				codFrecuenciaPagoAsociado = 7 or

				codFrecuenciaPagoAsociado = 8 or

				codFrecuenciaPagoAsociado = 9 then

				

				if conversion = 'H' then

					montoTotal := montoTotal + (monto/30)/jornadaDiaria;			

				elsif conversion = 'D' then

					montoTotal := montoTotal + (monto/30);		

				elsif conversion = 'S' then	

					if pFormulaSemanal = '1' then

						montoTotal := montoTotal + ((monto/30)*7);

					elsif pFormulaSemanal = '2' then

						montoTotal := montoTotal + monto;

					elsif pFormulaSemanal = '3' then

						montoTotal := montoTotal + ((monto*12)/52);	

					end if;

				else

					montoTotal := montoTotal + monto;

				end if;

			elsif codFrecuenciaPagoAsociado = 10 then

				if conversion = 'H' then

					montoTotal := montoTotal + ((monto*4)/30)/pJornadaDiaria;				

				elsif conversion = 'D' then

					montoTotal := montoTotal + ((monto*4)/30);			

				elsif conversion = 'S' then	

					montoTotal := montoTotal + monto;						

				else

					montoTotal := montoTotal + monto*4;

				end if;

			end if;

		end loop;

		close curConceptoAsociado;



		open curConceptoAlicuota(pIdConceptoTipoPersonal);	

		fetch curConceptoAlicuota into recConceptoAlicuota;	

		close curConceptoAlicuota; 

		if recConceptoAlicuota.id_concepto_tipo_personal > 0  then			

			montoAlicuota := calcular_concepto(pIdConceptoTipoPersonal, pIdTrabajador, 0, 'D', 0, 0, 0, '0', '0');

			montoAlicuota := montoAlicuota / diasAnio;

			if recConceptoAlicuota.base = 'M' then

				montoAlicuota = montoAlicuota * 30;

			end if;

		end if;

		if pTipo <> 'D' then				

			montoTotal := montoTotal + montoAlicuota;					

			montoTotal := (montoTotal * porcentaje)/100;	

		end if;

		

	else

		raise notice 'tipo no encontrado';

		return 0;

	end if;

	if pUnidades > 0 and pTipo <> 'I' then

		montoTotal := montoTotal * pUnidades;

	end if;

	if pTipo = 'D' then

		if montoTotal < valor then

			montoTotal := valor - montoTotal;

		else

			montoTotal := 0;

		end if;

	end if;

	if topeMaximo > 0 then

		if montoTotal > topeMaximo then

			montoTotal := topeMaximo;

		end if;		

	end if;

	if topeMinimo > 0 then

		if montoTotal < topeMinimo then

			montoTotal := topeMinimo;

		end if;		

	end if;

	if pCodFrecuenciaPago = 3 then 

		montoTotal := montoTotal/2;

	end if;

	return montoTotal;



end;

$_$;


--
-- TOC entry 714 (class 1255 OID 3240734)
-- Name: generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pNumeroNomina alias for $2;
	pPeriodicidad alias for $3;
	pEstatus alias for $4;
	pAnio alias for $5;
	pMes alias for $6;
	pIdUnidadAdministradora alias for $7;

	recConceptos record;
	curConceptos cursor (pIdTrabajador int4, f1 int4,f2 int4,f3 int4,f4 int4,f5 int4,f6 int4,f7 int4) 
		for select distinct cf.id_concepto_fijo, cf.monto as monto, 
		cf.id_concepto_tipo_personal as id_concepto_tipo_personal,		
		cf.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cf.unidades as unidades, t.id_trabajador,
		'F' as tipo
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 
		conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and t.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7)
	union
		select distinct cv.id_concepto_variable, cv.monto as monto, 
		cv.id_concepto_tipo_personal as id_concepto,
		cv.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cv.unidades as unidades, t.id_trabajador,
		'V' as tipo
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and t.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (key1 int4) 
		for select distinct cf.monto, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = key1
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;
			
	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pIdUnidadAdministradora int4)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp, dependencia d, administradorauel auel
		where 
		t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = auel.id_administradora_uel
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;
	
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	f4 int4 := 0;
	f5 int4 := 0;
	f6 int4 := 0;
	f7 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	
begin

	if pNumeroNomina = 0 then

		---if pPeriodicidad <> 'S' and pPagosFraccionados = 'S' then
		---	perform egresos_fraccionados(pIdGrupoNomina, pFechaInicio, pFechaFin,pPrimeraQuincena);
		---end if;



		if pPeriodicidad = 'S' then
			f1:= 4;
			f2:= 5;
			f3:= 6;
			f4:= 7;
			f5:= 8;
			f6:= 9;
			f7:= 10;
		else
			f1:= 1;
			f2:= 2;
			f3:= 3;
		end if;

	else
		f1 := pFrecuencia;

		---open curNominaEspecial(pIdNominaEspecial);
		---fetch curNominaEspecial into recNominaEspecial;
		---if recNominaEspecial.id_nomina_especial = null then
		---	return 0;
		---end if;
	end if;
	
	
	
	delete from conceptoresumen 
		where anio = pAnio and  mes = pMes and numero_nomina = pNumeroNomina
		and id_trabajador in(select id_trabajador 
		from trabajador
		where id_tipo_personal = pIdTipoPersonal)
		and id_unidad_administradora = pIdUnidadAdministradora;

	
	id := last_id_conceptoresumen()+1;
	if id is null then
		id := 1;
	end if;

	open curTrabajadores (pIdTipoPersonal, pEstatus, pIdUnidadAdministradora);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		open curConceptos(recTrabajadores.id_trabajador, f1,f2,f3,f4,f5,f6,f7);

		loop
			fetch curConceptos into recConceptos;			
			exit when not found;
					
			id := id+1;

			perform add_conceptoresumen(id,
				recTrabajadores.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_frecuencia_tipo_personal,
				pIdUnidadAdministradora,
				pAnio, pMes,pNumeroNomina,
				recConceptos.unidades,
				convert_2_decimal(recConceptos.monto),
				recConceptos.tipo);			
		end loop;
		close curConceptos;
	end loop;
	close curTrabajadores;
			
	

	return id;

end;

$_$;


--
-- TOC entry 715 (class 1255 OID 3240735)
-- Name: generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_conceptoresumen(integer, integer, character varying, character varying, integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	pNumeroNomina alias for $2;
	pPeriodicidad alias for $3;
	pEstatus alias for $4;
	pAnio alias for $5;
	pMes alias for $6;
	pIdUnidadAdministradora alias for $7;
	pFrecuenciaEspecial alias for $8;

	recConceptos record;
	curConceptos cursor (pIdTrabajador int4, f1 int4,f2 int4,f3 int4,f4 int4,f5 int4,f6 int4,f7 int4) 
		for select distinct cf.id_concepto_fijo, cf.monto as monto, 
		cf.id_concepto_tipo_personal as id_concepto_tipo_personal,		
		cf.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cf.unidades as unidades, t.id_trabajador,
		'F' as tipo
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 
		conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and t.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7)
	union
		select distinct cv.id_concepto_variable, cv.monto as monto, 
		cv.id_concepto_tipo_personal as id_concepto,
		cv.id_frecuencia_tipo_personal as id_frecuencia_tipo_personal,
		cv.unidades as unidades, t.id_trabajador,
		'V' as tipo
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and t.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3,f4,f5,f6,f7);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (key1 int4) 
		for select distinct cf.monto, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = key1
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;
			
	recTrabajadores record;
	curTrabajadores cursor (pIdTipoPersonal int4, pEstatus varchar, pIdUnidadAdministradora int4)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp, dependencia d, administradorauel auel
		where 
		t.id_tipo_personal = tp.id_tipo_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = auel.id_administradora_uel
		and auel.id_unidad_administradora = pIdUnidadAdministradora
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, tp.formula_semanal, t.id_cargo
		from trabajador t, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;
	
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	f4 int4 := 0;
	f5 int4 := 0;
	f6 int4 := 0;
	f7 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	
begin

	if pNumeroNomina = 0 then

		if pPeriodicidad = 'S' then
			f1:= 4;
			f2:= 5;
			f3:= 6;
			f4:= 7;
			f5:= 8;
			f6:= 9;
			f7:= 10;
		else
			f1:= 1;
			f2:= 2;
			f3:= 3;
		end if;

	else
		f1 := pFrecuenciaEspecial;

		---open curNominaEspecial(pIdNominaEspecial);
		---fetch curNominaEspecial into recNominaEspecial;
		---if recNominaEspecial.id_nomina_especial = null then
		---	return 0;
		---end if;
	end if;
	
	
	
	delete from conceptoresumen 
		where anio = pAnio and  mes = pMes and numero_nomina = pNumeroNomina
		and id_trabajador in(select id_trabajador 
		from trabajador
		where id_tipo_personal = pIdTipoPersonal)
		and id_unidad_administradora = pIdUnidadAdministradora;

	
	id := last_id_conceptoresumen()+1;
	if id is null then
		id := 1;
	end if;

	open curTrabajadores (pIdTipoPersonal, pEstatus, pIdUnidadAdministradora);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		open curConceptos(recTrabajadores.id_trabajador, f1,f2,f3,f4,f5,f6,f7);

		loop
			fetch curConceptos into recConceptos;			
			exit when not found;
					
			id := id+1;

			perform add_conceptoresumen(id,
				recTrabajadores.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_frecuencia_tipo_personal,
				pIdUnidadAdministradora,
				pAnio, pMes,pNumeroNomina,
				recConceptos.unidades,
				convert_2_decimal(recConceptos.monto),
				recConceptos.tipo);			
		end loop;
		close curConceptos;
	end loop;
	close curTrabajadores;
			
	

	return id;

end;

$_$;


--
-- TOC entry 716 (class 1255 OID 3240736)
-- Name: generar_cuadro_onapre(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_cuadro_onapre(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pAnio                         alias for $1;
	pidrelacionpersonal           alias for $2;
	
	

        curTrabajadores_proyecto cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,t.id_trabajador,pro.id_proyecto,
                      c.tipo_cargo,p.sexo,tu.jornada,
                      tp.id_clasificacion_personal
		from trabajador t, trabajadorespecifica te, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c,personal p, turno tu
                   where t.id_trabajador        = te.id_trabajador
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = te.id_uel_especifica
                     and ue.id_accion_especifica= ae.id_accion_especifica
                     and ae.id_proyecto         = pro.id_proyecto
                     and pro.anio = panio
                     and ae.tipo       ='P'   ---Proyecto
                     and c.id_cargo    = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;
                   
        curTrabajadores_accion cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
                 t.id_trabajador,ac.id_accion_centralizada,
                      c.tipo_cargo,p.sexo,
                      tu.jornada,tp.id_clasificacion_personal
             from trabajador t, trabajadorespecifica te, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c,personal p, turno  tu
		   where t.id_trabajador        = te.id_trabajador
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = te.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_accion_centralizada   = ac.id_accion_centralizada
                     and ae.tipo       ='A'     ---Accio Centralizada
                     and ac.anio = panio
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;


       curTrabajadores_proyecto_cargo cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
                  t.id_trabajador,pro.id_proyecto,c.tipo_cargo,
                  p.sexo,tu.jornada,tp.id_clasificacion_personal
		from trabajador t, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c,personal p, turno  tu
		   where t.id_registro_cargos   = ce.id_registro_cargos
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = ce.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_proyecto         = pro.id_proyecto
                     and pro.anio = panio
                     and ae.tipo       ='P'   ---Proyecto
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;
                   
        curTrabajadores_accion_cargo cursor (panio int4,pidrelacionpersonal int4)
      	   for select t.id_organismo,
               t.id_trabajador,ac.id_accion_centralizada,c.tipo_cargo,
                  p.sexo,tu.jornada,tp.id_clasificacion_personal
		from trabajador t, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c,personal p, turno  tu
		   where t.id_registro_cargos   = ce.id_registro_cargos
		     and t.id_tipo_personal     = tp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica   = ce.id_uel_especifica
                     and ue.id_accion_especifica = ae.id_accion_especifica
                     and ae.id_accion_centralizada   = ac.id_accion_centralizada
                     and ae.tipo       ='A'     ---Accion Centralizada
                     and ac.anio = panio
                     and c.id_cargo = t.id_cargo
                     and t.id_personal = p.id_personal
                     and t.estatus <>  'E'
                     and t.id_turno= tu.id_turno;




        cursueldobasico cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador= pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.sueldo_basico ='S' or c.ajuste_sueldo = 'S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);

        curcompensacion cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador = pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.compensacion ='S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);
         
         curprimas  cursor (pidtrabajador int4)
           for select cf.monto,fp.cod_frecuencia_pago from 
                         conceptofijo cf,conceptotipopersonal ctp, 
                         concepto c,frecuenciatipopersonal ftp ,
                         frecuenciapago fp
                     where cf.id_trabajador = pidtrabajador
                       and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
                       and ctp.id_concepto = c.id_concepto
                       and (c.primas_cargo  ='S' OR c.primas_trabajador ='S')
                       and cf.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
                       and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
                       and fp.cod_frecuencia_pago in (1,2,3,4,5,6,7,8,9,10);
         


        curcargo_proyecto cursor (panio int4,pidrelacionpersonal int4)
      	   for select  pro.id_organismo,pro.id_proyecto,c.tipo_cargo,tu.jornada,
                     c.id_manual_cargo,dt.monto,c.id_cargo,
                     tp.id_clasificacion_personal
		from registrocargos rc, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, proyecto pro,
                     cargo c, turno  tu,registropersonal rtp ,
                     manualcargo ma, tabulador t,detalletabulador dt
		   where rc.id_registro_cargos   = ce.id_registro_cargos
                     and rc.estatus ='V'   -----Vacantes
                     and rtp.id_registro         = rc.id_registro
                     and tp.id_tipo_personal     = rtp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica    = ce.id_uel_especifica
                     and ae.id_accion_especifica = ue.id_accion_especifica
                     and ae.tipo = 'P'    ---Proyecto
                     and pro.id_proyecto = ae.id_proyecto
                     and pro.anio = panio
                     and c.id_cargo = rc.id_cargo
                     and tp.id_turno= tu.id_turno
                     and ma.id_manual_cargo = c.id_manual_cargo
                     and t.id_tabulador = ma.id_tabulador
                     and dt.id_tabulador = dt.id_tabulador
                     and dt.paso =1;



        curcargo_accion cursor (panio int4,pidrelacionpersonal int4)
      	   for select  ac.id_organismo,ac.id_accion_centralizada,
                      c.tipo_cargo,tu.jornada,
                     c.id_manual_cargo,dt.monto,c.id_cargo,
                     tp.id_clasificacion_personal
		from registrocargos rc, cargoespecifica ce, tipopersonal tp,
                     uelespecifica ue, accionespecifica ae, accioncentralizada ac,
                     cargo c, turno  tu,registropersonal rtp ,
                     manualcargo ma, tabulador t,detalletabulador dt
		   where rc.id_registro_cargos   = ce.id_registro_cargos
                     and rc.estatus ='V'   -----Vacantes
                     and rtp.id_registro         = rc.id_registro
                     and tp.id_tipo_personal     = rtp.id_tipo_personal
                     and tp.id_clasificacion_personal in (
                            select id_clasificacion_personal from clasificacionpersonal 
                                where id_relacion_personal = pidrelacionpersonal)
                     and ue.id_uel_especifica    = ce.id_uel_especifica
                     and ae.id_accion_especifica = ue.id_accion_especifica
                     and ae.tipo = 'A'    ---Accion Centralizada
                     and ac.id_accion_centralizada = ae.id_accion_centralizada
                     and ac.anio = panio
                     and c.id_cargo = rc.id_cargo
                     and tp.id_turno= tu.id_turno
                     and ma.id_manual_cargo = c.id_manual_cargo
                     and t.id_tabulador = ma.id_tabulador
                     and dt.id_tabulador = dt.id_tabulador
                     and dt.paso =1;


        curconcepto_cargo cursor (pCargo int4)
      	   for select cc.monto,cc.porcentaje
		from conceptocargo cc
		   where cc.id_cargo  = pcargo;
             
        recTrabajadores               record;

        recCargos                     record;
        recConceptosfijos             record;
        recConceptoscargos            record;
        recconceptocargo              record;


        montoconcepto               float8 :=0;
	montocompensacion           float8 :=0;	
        montosueldobasico           float8 :=0;
        montoprimas                 float8 :=0;
        id                          int4   :=0;	
begin
       
        raise notice 'PASA 0 ';

	delete from cuadroonapre
             where anio = panio
               and id_clasificacion_personal = pidrelacionpersonal;
       
        raise notice 'PASA 1 ';

        
	open curTrabajadores_proyecto(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_proyecto into recTrabajadores;	
		exit when not found;
          
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 1 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 2 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 1 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 2 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;

raise notice 'monto oprimas ';
raise notice 'Monto Primas_%', montoprimas;



                end loop;
                close curprimas;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 10 ';

                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         rectrabajadores.id_proyecto,
                         null,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'PROYECTO');

        end loop;
        close curTrabajadores_proyecto;
		
        raise notice 'PASA 2 ';

        open curTrabajadores_accion(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_accion into recTrabajadores;	
		exit when not found;
             
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;

                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 1 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 2 then
                       montoconcepto := recconceptosfijos.monto ;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 1 then
                       montoconcepto := recconceptosfijos.monto;
                    end if;
                   if recconceptosfijos.cod_frecuencia_pago = 2 then
                       montoconcepto := recconceptosfijos.monto;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;

raise notice 'monto oprimas ';
raise notice 'Monto Primas_%', montoprimas;

                end loop;
                close curprimas;

                raise notice 'PASA 20 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         null,
                         rectrabajadores.id_accion_centralizada,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'ACCION CENTALIZADA');


        end loop;
        close curTrabajadores_accion;

		
        raise notice 'PASA 3 ';


        open curTrabajadores_proyecto_cargo(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_proyecto_cargo into recTrabajadores;	
		exit when not found;
          
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 10 ';

                perform add_cuadroonapre
                	(id,
                         rectrabajadores.id_organismo,
                         rectrabajadores.id_proyecto,
                         null,
                         rectrabajadores.id_clasificacion_personal,
                         panio,
                         rectrabajadores.tipo_cargo,
                         rectrabajadores.jornada,
                         rectrabajadores.sexo,
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas,
                         'PROYECTO');

        end loop;
        close curTrabajadores_proyecto_cargo;
		
        raise notice 'PASA 6 ';

        open curTrabajadores_accion_cargo(panio,pidrelacionpersonal);
	loop
		fetch curTrabajadores_accion_cargo into recTrabajadores;	
		exit when not found;
             
                montosueldobasico :=0;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
                open cursueldobasico(rectrabajadores.id_trabajador);
	        loop
	   	    fetch cursueldobasico into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montosueldobasico := montosueldobasico + montoconcepto;
                end loop;
                close cursueldobasico;
                montoconcepto:=0;
                open curcompensacion(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curcompensacion  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montocompensacion := montocompensacion + montoconcepto;
                end loop;
                close curcompensacion;
                montoconcepto:=0;
                open curprimas(rectrabajadores.id_trabajador);
	        loop
	   	    fetch curprimas  into recConceptosfijos;	
		    exit when not found;
                    if recconceptosfijos.cod_frecuencia_pago = 3 then
                       montoconcepto := recconceptosfijos.monto * 2;
                    end if;
                    if recconceptosfijos.cod_frecuencia_pago = 4 then
                       montoconcepto := recconceptosfijos.monto/7*30;
                    end if;
                    montoprimas := montoprimas + montoconcepto;
                end loop;
                close curprimas;

                raise notice 'PASA 20 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
               -- perform add_cuadroonapre
               -- 	(id,
               --          rectrabajadores.id_organismo,
               --          null,
               --          rectrabajadores.id_accion_centralizada,
               --          rectrabajadores.id_clasificacion_personal,
               --          panio,
               --          rectrabajadores.tipo_cargo,
               --          rectrabajadores.jornada,
               --          rectrabajadores.sexo,
               --          1,
               --          montosueldobasico,
               --          montocompensacion,
               --          montoprimas,
               --          'ACCION CENTRALIZADA');



        end loop;
        close curTrabajadores_accion_cargo;
	

        raise notice 'PASA 7 ';

        ----
        ----Cargos vacantes por proyetos.
        ----

	open curcargo_proyecto(panio,pidrelacionpersonal);
	loop
		fetch curcargo_proyecto into reccargos;
		exit when not found;
          
                montosueldobasico :=reccargos.monto;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;
              
                open curconcepto_cargo(reccargos.id_cargo);
	        loop
	   	    fetch curconcepto_cargo  into recconceptocargo;	
		    exit when not found;
                    if recconceptocargo.monto > 0 then
                       montoconcepto:=recconceptocargo.monto;
                    elsif recconceptocargo.porcentaje > 0 then
                          montoconcepto:=montosueldobasico * recconceptocargo.porcentaje/100;
                    end if;
                    montoprimas:= montoprimas + montoconcepto;
                end loop;
                close curconcepto_cargo;

                raise notice 'PASA 30 ';

                id:= last_id_cuadroonapre();
                id:=id+1;
                perform add_cuadroonapre
                	(id,
                         reccargos.id_organismo,
                         reccargos.id_proyecto,
                         null,
                         reccargos.id_clasificacion_personal,
                         panio,
                         reccargos.tipo_cargo,
                         reccargos.jornada,
                         'V',
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas, 
                        'PROYECTO');



        end loop;
        close curcargo_proyecto;
		
        raise notice 'PASA 8 ';

      	----
        ----Cargos vacantes por Accion Centralizada
        ----

	open curcargo_accion(panio,pidrelacionpersonal);
	loop
		fetch curcargo_accion into reccargos;
		exit when not found;
          
                montosueldobasico :=reccargos.monto;
                montocompensacion :=0;
                montoprimas       :=0;
                montoconcepto     :=0;

                open curconcepto_cargo(reccargos.id_cargo);
	        loop
	   	    fetch curconcepto_cargo  into recconceptocargo;	
		    exit when not found;
                    if recconceptocargo.monto > 0 then
                       montoconcepto:=recconceptocargo.monto;
                    elsif recconceptocargo.porcentaje > 0 then
                          montoconcepto:=montosueldobasico * recconceptocargo.porcentaje/100;
                    end if;
                    montoprimas:= montoprimas + montoconcepto;
                end loop;
                close curconcepto_cargo;
                id:= last_id_cuadroonapre();
                id:=id+1;

                raise notice 'PASA 40 ';

                perform add_cuadroonapre
                	(id,
                         reccargos.id_organismo,
                         null,
                         reccargos.id_accion_centralizada,
                         reccargos.id_clasificacion_personal,
                         panio,
                         reccargos.tipo_cargo,
                         reccargos.jornada,
                         'V',
                         1,
                         montosueldobasico,
                         montocompensacion,
                         montoprimas, 
                        'ACCION CENTRALIZADA');


        end loop;
        close curcargo_accion;
		
        raise notice 'PASA 9 ';

        
	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 717 (class 1255 OID 3240738)
-- Name: generar_dotacionentregada(integer, integer, integer, integer, integer, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_dotacionentregada(integer, integer, integer, integer, integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	


	pIdTipoPersonal ALIAS FOR $1;
	pIdTipoDotacion ALIAS FOR $2;
	pIdSubTipoDotacion ALIAS FOR $3;
	pAnio ALIAS FOR $4;
	pMes ALIAS FOR $5;
	pFecha ALIAS FOR $6;
	pAccion ALIAS FOR $7;

	---
        ---Selecciona la dotaciones correspondientes al  trabajador 
        ---desde la tabla temporal dotaciontrabajador para ldlenar
        ---la tabla dotacionentrega
        ---
        curDotacionTipo cursor ( pIdTipoPersonal int4,  pIdTipoDotacion int4 )
                              FOR  SELECT dt.id_trabajador, 
                                       dt.id_subtipo_dotacion, 
                                       dt.talla, dt.cantidad
				FROM  dotaciontrabajador dt, trabajador t
				  WHERE t.id_tipo_personal = pIdTipoPersonal 
                                    AND t.id_trabajador = dt.id_trabajador
                                    AND dt.id_subtipo_dotacion IN(
                                         SELECT td.id_subtipo_dotacion from subtipodotacion td
                                            WHERE td.id_tipo_dotacion = pIdTipoDotacion);

        curDotacionSubTipo cursor  ( pIdTipoPersonal int4, pIdTipoDotacion int4,
                                     pIdSubtipoDotacion int4 )
                              FOR SELECT dt.id_trabajador,
                                        dt.id_subtipo_dotacion, 
                                        dt.talla, dt.cantidad
				FROM  dotaciontrabajador dt, trabajador t
				  WHERE t.id_tipo_personal = pIdTipoPersonal 
                                    AND t.id_trabajador = dt.id_trabajador
                                    AND dt.id_subtipo_dotacion IN(
                                         SELECT td.id_subtipo_dotacion from subtipodotacion td
                                            WHERE td.id_tipo_dotacion = pIdTipoDotacion
                                              AND td.id_subtipo_dotacion = pIdSubtipoDotacion);



	recDotacionTrabajador record;

	idDotacionEntregada int4 = 0;


        recDotacionExiste record;
	curDotacionExiste cursor (pIdTrabajador int4, pIdSubTipoDotacion int4, 
                                  pAnio int4,pMes int4)
		for SELECT de.id_dotacion_entregada as id FROM dotacionentregada de 
			 WHERE de.id_trabajador = pIdTrabajador
                           AND de.id_subtipo_dotacion = pIdSubTipoDotacion
                           AND de.anio = pAnio
                           AND de.mes  = pMes;

  


begin

        

	IF pAccion = 'A' THEN
                
                idDotacionEntregada := last_id_dotacionentregada();
		IF pIdSubTipoDotacion = 0 THEN
                  
                   OPEN curDotacionTipo(PidTipoPersonal,pIdTipoDotacion);
                   LOOP
			FETCH curDotacionTipo INTO recDotacionTrabajador;
			EXIT WHEN NOT FOUND;
                        

                        OPEN curDotacionExiste (recDotacionTrabajador.id_trabajador,
                                                recDotacionTrabajador.id_subtipo_dotacion,
                                                panio,pmes);

			FETCH curDotacionExiste INTO recDotacionExiste;	
		 
        	        IF recDotacionExiste.id is null THEN
                           idDotacionEntregada := idDotacionEntregada + 1;
			   INSERT INTO dotacionentregada
				(
				id_dotacion_entregada,
				id_trabajador,
				id_subtipo_dotacion,
				talla,
				cantidad,
				anio,
				mes,
				fecha)
				VALUES (
					idDotacionEntregada,
					recDotacionTrabajador.id_trabajador,
					recDotacionTrabajador.id_subtipo_dotacion,
					recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad,
					pAnio, pMes, pFecha);
                         ELSE
                            perform update_dotacion_entregada(recDotacionExiste.id,
                                        recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad);
                         END IF;
                         CLOSE curDotacionExiste;
		  END LOOP;
		  CLOSE curDotacionTipo;
                ELSE
                  
		   OPEN curDotacionSubtipo(PidTipoPersonal,pIdTipoDotacion,pIdSubTipoDotacion);
		   LOOP
			FETCH curDotacionSubTipo INTO recDotacionTrabajador;
			EXIT WHEN NOT FOUND;
                       

                        OPEN curDotacionExiste (recDotacionTrabajador.id_trabajador,
                                                recDotacionTrabajador.id_subtipo_dotacion,
                                                panio,pmes);

			FETCH curDotacionExiste INTO recDotacionExiste;			 
        	        IF recDotacionExiste.id is null THEN
                           idDotacionEntregada := idDotacionEntregada + 1;
			   INSERT INTO dotacionentregada
				(
				id_dotacion_entregada,
				id_trabajador,
				id_subtipo_dotacion,
				talla,
				cantidad,
				anio,
				mes,
				fecha)
				VALUES (
					idDotacionEntregada,
					recDotacionTrabajador.id_trabajador,
					recDotacionTrabajador.id_subtipo_dotacion,
					recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad,
					pAnio, pMes, pFecha);
                         ELSE
                            perform update_dotacion_entregada(recDotacionExiste.id,
                                        recDotacionTrabajador.talla,
					recDotacionTrabajador.cantidad);
                         END IF;
                         CLOSE curDotacionExiste;
		  END LOOP;
		  CLOSE curDotacionSubTipo;
	        END IF;
                

            ELSE
	        
		IF pIdSubTipoDotacion = 0 THEN
                       
			DELETE FROM dotacionentregada 
                              WHERE id_dotacion_entregada IN (
				SELECT id_dotacion_entregada 
                         FROM ( dotacionentregada dt
                            INNER JOIN trabajador      AS t USING (id_trabajador) )
			    INNER JOIN subtipodotacion AS sd USING (id_subtipo_dotacion)
			       WHERE t.id_tipo_personal = pIdTipoPersonal
				AND sd.id_tipo_dotacion = pIdTipoDotacion
				AND dt.anio = pAnio 
                                AND dt.mes = pMes );
                       
		ELSE
                        
			DELETE FROM dotacionentregada WHERE id_dotacion_entregada IN (
				SELECT id_dotacion_entregada
				FROM dotacionentregada dt 
				INNER JOIN trabajador AS t USING (id_trabajador)
			WHERE t.id_tipo_personal = pIdTipoPersonal
				AND dt.id_subtipo_dotacion = pIdSubtipoDotacion
				AND dt.anio = pAnio 
                                AND dt.mes  = pMes );
                        
		END IF;
	END IF;
        

	return 0;
end;
$_$;


--
-- TOC entry 718 (class 1255 OID 3240739)
-- Name: generar_dotaciontrabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_dotaciontrabajador(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal alias for $1;
	pIdSubTipoDotacion alias for $2;
	recTrabajador record;
	curTrabajador refcursor;
	idDotacion int4 = 0;

begin
	IF pIdSubTipoDotacion = 0 THEN
		OPEN curTrabajador FOR 
			SELECT trabajador.id_trabajador,
				dotaciontrabajador.id_dotacion_trabajador,
				subtipodotacion.id_subtipo_dotacion,
				dotacioncargo.cantidad
			FROM ( ( ( ( (dotaciontrabajador
				RIGHT OUTER JOIN trabajador USING (id_trabajador) )
				INNER JOIN personal USING (id_personal) )
				INNER JOIN cargo USING (id_cargo) )
				INNER JOIN dotacioncargo USING (id_cargo) )
				INNER JOIN subtipodotacion
					ON (dotacioncargo.id_subtipo_dotacion = subtipodotacion.id_subtipo_dotacion) )
			WHERE
				(personal.sexo = subtipodotacion.sexo OR
                                 subtipodotacion.sexo = 'A') AND
				trabajador.estatus = 'A';
	ELSE
		OPEN curTrabajador FOR 
			SELECT trabajador.id_trabajador,
				dotaciontrabajador.id_dotacion_trabajador,
				subtipodotacion.id_subtipo_dotacion,
				dotacioncargo.cantidad
			FROM ( ( ( ( (dotaciontrabajador
				RIGHT OUTER JOIN trabajador USING (id_trabajador) )
				INNER JOIN personal USING (id_personal) )
				INNER JOIN cargo USING (id_cargo) )
				INNER JOIN dotacioncargo USING (id_cargo) )
				INNER JOIN subtipodotacion
					ON (dotacioncargo.id_subtipo_dotacion = subtipodotacion.id_subtipo_dotacion) )
			WHERE
				(personal.sexo = subtipodotacion.sexo OR
                                 subtipodotacion.sexo = 'A') AND
				trabajador.estatus = 'A' AND
				trabajador.id_tipo_personal = pIdTipoPersonal;
	END IF;
	idDotacion := last_id_dotaciontrabajador();
	LOOP
		FETCH curTrabajador INTO recTrabajador;
		EXIT WHEN NOT FOUND;
		IF recTrabajador.id_dotacion_trabajador IS NULL THEN
			idDotacion := idDotacion + 1;
			INSERT INTO dotaciontrabajador
				(
				id_dotacion_trabajador,
				id_trabajador,
				id_subtipo_dotacion,
				cantidad)
				VALUES (
					idDotacion,
					recTrabajador.id_trabajador,
					recTrabajador.id_subtipo_dotacion,
					recTrabajador.cantidad);
		ELSE
			UPDATE dotaciontrabajador 
				SET  cantidad = recTrabajador.cantidad
				WHERE id_dotacion_trabajador = recTrabajador.id_dotacion_trabajador;
		END IF;
	END LOOP;
	CLOSE curTrabajador;
	return 0;
end;
$_$;


--
-- TOC entry 719 (class 1255 OID 3240740)
-- Name: generar_dotaciontrabajador(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_dotaciontrabajador(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	pIdTipoPersonal alias for $1;
	pIdTipoDotacion alias for $2;
	pIdSubTipoDotacion alias for $3;
        vcantidad  int4;
	id_dotacion int4;
	recTrabajadorTipo record;
        ---
        ---Selecciona la dotaciones correspondientes al cargo del trabajador para
        ---llenar la tabla temporal dotaciontrabajador
        ---
	curTrabajadorTipo cursor (pIdTipoPersonal int4, pIdTipoDotacion int4)
		for select tr.id_trabajador, st.id_subtipo_dotacion, dc.cantidad
		    from trabajador tr, subtipodotacion st, dotacioncargo dc, personal p
		    where tr.id_cargo = dc.id_cargo
		      and tr.id_tipo_personal = pIdTipoPersonal
		      and tr.estatus = 'A'
		      and st.id_tipo_dotacion = pIdTipoDotacion
		      and dc.id_subtipo_dotacion = st.id_subtipo_dotacion
  		      and tr.id_personal = p.id_personal
		      and (p.sexo = st.sexo or st.sexo = 'A');
        recTrabajadorSubtipo record;
	curTrabajadorSubtipo cursor (pIdTipoPersonal int4, pIdSubTipoDotacion int4)
		for select tr.id_trabajador, st.id_subtipo_dotacion, dc.cantidad
		    from trabajador tr, subtipodotacion st, dotacioncargo dc, personal p
		    where tr.id_cargo = dc.id_cargo
		      and tr.id_tipo_personal = pIdTipoPersonal
		      and tr.estatus = 'A'
                      and st.id_subtipo_dotacion = pIdSubTipoDotacion
		      and dc.id_subtipo_dotacion = st.id_subtipo_dotacion
  		      and tr.id_personal = p.id_personal
		      and (p.sexo = st.sexo or st.sexo = 'A');
	recDotacionExiste record;
	curDotacionExiste cursor (pIdTrabajador int4, pIdSubTipoDotacion int4)
		for SELECT id_dotacion_trabajador as id FROM dotaciontrabajador dt 
			 WHERE dt.id_trabajador = pIdTrabajador
			 AND   dt.id_subtipo_dotacion = pIdSubTipoDotacion;
begin
	id_dotacion := last_id_dotaciontrabajador();
	if id_dotacion is null then
	   id_dotacion := 0;
   	end if;
        ---
        ---Todos los tipos de dotación
        ---
        IF pIdSubTipoDotacion = 0 THEN
           OPEN curTrabajadorTipo (pIdTipoPersonal, pIdTipoDotacion); 
		loop 		
       			fetch curTrabajadorTipo into recTrabajadorTipo;			 
        		exit when not found; 
                        vcantidad := recTrabajadorTipo.cantidad;
			OPEN curDotacionExiste (recTrabajadorTipo.id_trabajador,
					recTrabajadorTipo.id_subtipo_dotacion);

			FETCH curDotacionExiste INTO recDotacionExiste;			 
                        IF recDotacionExiste.id is null THEN
                           
				id_dotacion := id_dotacion + 1;
				INSERT INTO dotaciontrabajador
					(id_dotacion_trabajador,
					id_trabajador,
					id_subtipo_dotacion,
					cantidad)
					VALUES (id_dotacion,
						recTrabajadorTipo.id_trabajador,
						recTrabajadorTipo.id_subtipo_dotacion,
						vcantidad);
                        
			ELSE
                          PERFORM  update_dotacion_trabajador(recDotacionExiste.id,
                		                                vcantidad);
			END IF;
		        CLOSE curdotacionexiste;		
		end loop;
		close curTrabajadorTipo;
	ELSE  ---Un subtipo de dotacion
		OPEN curTrabajadorSubtipo (pIdTipoPersonal,  pIdSubtipoDotacion); 
		loop 		
       			fetch curTrabajadorSubtipo into recTrabajadorSubtipo;			 
        		exit when not found; 
                        vcantidad := recTrabajadorSubtipo.cantidad;
			OPEN curDotacionExiste (recTrabajadorSubtipo.id_trabajador,
					recTrabajadorSubtipo.id_subtipo_dotacion);
			FETCH curDotacionExiste INTO recDotacionExiste;			 
			IF recDotacionExiste.id is null THEN
                      	   id_dotacion := id_dotacion + 1;
			   INSERT INTO dotaciontrabajador
					(id_dotacion_trabajador,
					id_trabajador,
					id_subtipo_dotacion,
					cantidad)
					VALUES (id_dotacion,
						recTrabajadorSubtipo.id_trabajador,
						recTrabajadorSubtipo.id_subtipo_dotacion,
						vcantidad);
			ELSE
                           PERFORM update_dotacion_trabajador(recDotacionExiste.id,
                			vcantidad);
			END IF;
			close curDotacionExiste;
		end loop;
		close curTrabajadorSubtipo;
	END IF;
	return 0;
end;
$_$;


--
-- TOC entry 720 (class 1255 OID 3240741)
-- Name: generar_nomina(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_nomina(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pPrenomina alias for $1;
	pOrdinaria alias for $2;
	pIdGrupoNomina alias for $3;	
	pPeriodicidad alias for $4;	
	pRecalculo alias for $5;
	pFechaInicio alias for $6;
	pFechaFin alias for $7;
	pIdOrganismo alias for $8;
	pLunesPrQuincena alias for $9;
	pLunesSeQuincena alias for $10;
	pTieneSemana5 alias for $11;
	pSemanaMes alias for $12;
	pUsuario alias for $13;
	pSemanaAnio alias for $14;
	pMesSemanal alias for $15;
	pPrimeraQuincena alias for $16;
	pSemanaQuincena alias for $17;
	pNumeroNomina alias for $18;
	pFecha alias for $19;
	pMes alias for $20;
	pAnio alias for $21;
	pFechaTopeLphFemeninoInicio alias for $22;
	pFechaTopeLphFemeninoFin alias for $23;
	pFechaTopeLphMasculinoInicio alias for $24;
	pFechaTopeLphMasculinoFin alias for $25;
	pIdNominaEspecial alias for $26;
	pCodFrecuenciaPago alias for $27;
	pEstatus alias for $28;
	pPagosFraccionados alias for $29;
	

	recAporte record;
	curAporte cursor (pIdConcepto int4, pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, valor, 
		tope_minimo, tope_maximo
		from conceptotipopersonal where id_concepto = pIdConcepto and id_tipo_personal = 			pIdTipoPersonal;


	recConceptoFijoDeduccion record;
	curConceptoFijoDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);	

	recConceptoFijoDeduccionEgresados record;
	curConceptoFijoDeduccionEgresados cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte,
		cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

	recConceptoFijoAsignacion record;
	curConceptoFijoAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

-- Cursor para los conceptos variable Egresados ASIGNACIONES Y DEDUCCIONES. 

	recConceptoVariableDeduccionEgresados record;
	curConceptoVariableDeduccionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;



	recConceptoVariableAsignacionEgresados record;
	curConceptoVariableAsignacionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

 -- Fin conceptos variables Egresados 
		

	recConceptoVariableDeduccion record;
	curConceptoVariableDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoVariableAsignacion record;
	curConceptoVariableAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoPrestamo record;
	curConceptoPrestamo cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4)
		for select distinct p.id_prestamo, p.monto_cuota, p.documento_soporte, 			p.id_concepto_tipo_personal,
		p.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, prestamo p, frecuenciatipopersonal ftp, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = p.id_trabajador
		and p.monto_cuota > 0
		and p.estatus = 'A'
		and ftp.id_frecuencia_tipo_personal = p.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recDeduccionSso record;

	curDeduccionSso cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5001'
		and c2.cod_concepto = '4990'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresSso record;
	curTrabajadoresSso cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_sso, 			sp.aporte_sso, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 				
		sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_sso = 'S'
		and sp.retencion_sso > 0;


	recDeduccionSpf record;
	curDeduccionSpf cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte,  ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2 
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago	
		and ftp.id_tipo_personal = tp.id_tipo_personal	
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5002'		
		and c2.cod_concepto = '4991'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recTrabajadoresSpf record;
	curTrabajadoresSpf cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_spf, 			sp.aporte_spf, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 		
		t.id_tipo_personal = pIdTipoPersonal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'		
		and t.cotiza_spf = 'S'
		and sp.retencion_spf > 0;


	recDeduccionLph record;
	curDeduccionLph cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo, ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2  
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal		
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5003'		
		and c2.cod_concepto = '4992'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresLph record;
	curTrabajadoresLph cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_lph, 			sp.aporte_lph, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo  
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp 
		where 
		t.id_turno = tu.id_turno		
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_lph = 'S'
		and sp.retencion_lph > 0;


	recDeduccionFju record;
	curDeduccionFju cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, c2.id_concepto as 
		id_concepto_aporte, ctp2.id_concepto_tipo_personal as id_concepto_retroactivo, 
		ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5004'
		and c2.cod_concepto = '4993'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresFju record;
	curTrabajadoresFju cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_fju, 			sp.aporte_fju, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral,
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo 
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.id_turno = tu.id_turno
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'
		and t.cotiza_fju = 'S'		
		and sp.retencion_fju > 0;


	recTiposPersonalIslr record;
	curTiposPersonalIslr cursor (pIdGrupoNomina int4)
		for select distinct ctp.id_concepto_tipo_personal,
		ctp.id_frecuencia_tipo_personal, ctp.id_tipo_personal, c.id_concepto, 
		fp.cod_frecuencia_pago 
		from conceptotipopersonal ctp, concepto c, tipopersonal tp, frecuenciapago fp, 			frecuenciatipopersonal ftp
		where ctp.id_concepto = c.id_concepto 
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and c.cod_concepto = '9999'
		and tp.id_grupo_nomina  = pIdGrupoNomina;

	
	recTrabajadoresNominaIslr record;
	curTrabajadoresNominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimanomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresPrenominaIslr record;
	curTrabajadoresPrenominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimaprenomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresIslrQuincenaAnterior record;
	curTrabajadoresIslrQuincenaAnterior cursor (pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select distinct t.id_trabajador, sum(hq.monto_asigna) - sum(hq.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from historicoquincena hq, trabajador t, conceptotipopersonal
		ctp, concepto c
		where hq.id_trabajador = t.id_trabajador
		and t.porcentaje_islr <> 0
		and ctp.id_concepto_tipo_personal = hq.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.estatus = 'A'
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.anio = pAnio
		and hq.mes = pMes
		and hq.numero_nomina = 0
		group by t.id_trabajador;


	recTrabajadoresIslrActualNomina record;
	curTrabajadoresIslrActualNomina cursor (pIdTrabajador int4)
		for select distinct un.id_trabajador, un.monto_deduce as monto, 			un.id_ultima_nomina 
		from ultimanomina un,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and un.id_trabajador = pIdTrabajador
		and un.numero_nomina = 0;

	recTrabajadoresIslrActualPrenomina record;
	curTrabajadoresIslrActualPrenomina cursor (pIdTrabajador int4)
		for select distinct up.id_trabajador, up.monto_deduce as monto, 			up.id_ultima_prenomina 
		from ultimaprenomina up,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = up.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and up.id_trabajador = pIdTrabajador
		and up.numero_nomina = 0;

	recSobregiradosPrenomina record;
	curSobregiradosPrenomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimaprenomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);


	recSobregiradosNomina record;
	curSobregiradosNomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimanomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);

	recHistoricoNominaRegistroCargos record;
	curHistoricoNominaRegistroCargos cursor(pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, 
		min(t.situacion) as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		min(r.numero_registro) as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(rg.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo
		from trabajador t, dependencia d, unidadejecutora ue, 
		registrocargos rc, registro r, ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region rg
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = rg.id_region 
		and t.id_registro_cargos = rc.id_registro_cargos 
		and c.id_cargo = rc.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and rc.id_registro = r.id_registro 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaRegistroCargos record;
	curValidarHistoricoNominaRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 
                    tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			registrocargos rc, registro r, ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region rg
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = rg.id_region 
			and t.id_registro_cargos = rc.id_registro_cargos 
			and c.id_cargo = rc.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and rc.id_registro = r.id_registro 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'S'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);


	recHistoricoNominaSinRegistroCargos record;
	curHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, min(t.situacion) 			as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		0 as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(r.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo 
		from trabajador t, dependencia d, unidadejecutora ue, 
		ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region r 
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = r.id_region 
		and c.id_cargo = t.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaSinRegistroCargos record;
	curValidarHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 			tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region r 
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = r.id_region 
			and c.id_cargo = t.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'N'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);

	recHistoricoDetalle record;
	curHistoricoDetalle cursor (pIdGrupoNomina int4, pAnio int4, pMes int4, 
		pSemanaQuincena int4, pNumeroNomina int4 )
		for select distinct un.id_trabajador, un.id_concepto_tipo_personal, 			un.id_frecuencia_tipo_personal, un.numero_nomina, 
		un.unidades, un.monto_asigna, un.monto_deduce, un.origen, un.documento_soporte,  
		un.id_tipo_personal, un.id_grupo_nomina, un.id_nomina_especial, un.id_concepto, 			un.monto_aporte, un.id_concepto_aporte, 
		hn.id_historico_nomina 
		from ultimanomina un, historiconomina hn  
		where un.id_trabajador = hn.id_trabajador 
		and un.id_grupo_nomina = pIdGrupoNomina
		and hn.id_grupo_nomina = pIdGrupoNomina
		and hn.anio = pAnio
		and hn.mes = pMes
		and hn.semana_quincena = pSemanaQuincena
		and hn.numero_nomina = pNumeroNomina
		and un.numero_nomina = pNumeroNomina;


	recPrestamo record;
	curPrestamo cursor (pIdGrupoNomina int4)
		for select distinct p.id_prestamo, p.monto_cuota, p.monto_pagado, 			p.monto_prestamo, p.cuotas_pagadas 
		from ultimanomina un, prestamo p 
		where p.id_prestamo = un.id_concepto 
		and origen = 'P' 		
		and un.numero_nomina = 0 
		and un.id_grupo_nomina = pIdGrupoNomina;


	recTrabajadores1 record;
	curTrabajadores1 cursor (pIdGrupoNomina int4, pEstatus varchar)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdGrupoNomina
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdTrabajador
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;

	recNominaEspecial record;
	curNominaEspecial cursor (pIdNominaEspecial int4)
		for select distinct ne.id_frecuencia_pago, ne.id_nomina_especial
		from nominaespecial ne
		where ne.id_nomina_especial = pIdNominaEspecial;
		
	recFrecuenciaTipoPersonalEspecial record;
	curFrecuenciaTipoPersonalEspecial cursor (pIdTipoPersonal int4, pIdFrecuenciaPago int4)
		for select distinct ftp.id_frecuencia_tipo_personal
		from frecuenciatipopersonal ftp
		where ftp.id_tipo_personal = pIdTipoPersonal
		and ftp.id_frecuencia_pago = pIdFrecuenciaPago;

		
	recMontoNetoQuincenal record;
	curMontoNetoQuincenal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina, 
		min(hq.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 		
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hq.id_tipo_personal) as id_tipo_personal
		from historicoquincena hq,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hq.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;

	recMontoNetoSemanal record;
	curMontoNetoSemanal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina,
		min(hs.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hs.id_tipo_personal) as id_tipo_personal
		from historicosemana hs,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hs.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;


	recActualizarTipoPago record;
	curActualizarTipoPago  cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimanomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador;

	recDatosTipoPago record;
	curDatosTipoPago cursor (pIdTrabajador int4)
		for  select  t.forma_pago, t.id_banco_nomina, t.tipo_cta_nomina, t.cuenta_nomina 
		from trabajador t 
		where t.estatus = 'A' 
		and t.id_trabajador IN (pIdTrabajador);


		
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	montoAporte float8 := 0;
	idAporte int4 := 0;		
	retencion float8 := 0;
	montoCalculado float8 := 0;
	montoAnterior float8 := 0;
	tieneIslrAnterior boolean;
	idBanco int4 := 0;
	idHistoricoNomina int4 := 0;
	idHistoricoDetalle int4 := 0;	
	montoPagado float8 := 0;
	cuotas int4 := 0;
	montoCuota float8 := 0;
	estatus varchar := 'A';
	borrarLunesPrimera boolean := false;
	borrarLunesSegunda boolean := false;

	pid_trabajador_proce int4 := 0; 
begin
	-- ERRORES 
	-- 100 La integridad de los datos, impide grabar en los historicos
	-- 101 La nomina especial no existe

	if pPrenomina = true then

		--- INICIO codigo nuevo de llamada a la prima por hijos 

		perform sundde_calcular_prima_por_hijo(pIdGrupoNomina, pFechaInicio);

		--- FIN codigo nuevo de llamada a la prima por hijos 
	end if;

	if pOrdinaria = true then

		if pPeriodicidad <> 'S' and pPagosFraccionados = 'S' then
			perform egresos_fraccionados(pIdGrupoNomina, pFechaInicio, pFechaFin,pPrimeraQuincena);
		end if;

		if pPeriodicidad = 'M' then
			f1 := 2;		
			f2 := 3;
		elsif pPeriodicidad = 'Q' then
			f1 := 3;
			if pPrimeraQuincena = true then
				f2 := 1;
			else
				f2 := 2;
			end if;
		elsif pPeriodicidad = 'S' then
			f1:= 4;
			f2:= pSemanaMes+4;
			if pSemanaMes = 4 AND pTieneSemana5 = false then
				f3:=9;
			end if;
		end if;

	else
		f1 := pCodFrecuenciaPago;

		open curNominaEspecial(pIdNominaEspecial);
		fetch curNominaEspecial into recNominaEspecial;
		if recNominaEspecial.id_nomina_especial is null then
			return 101;
		end if;
	end if;

	

	if pPrenomina = true then

		--- INICIO codigo nuevo de llamada a la prima por hijos 

		--- perform sundde_calcular_prima_por_hijo(pIdGrupoNomina, pFechaInicio);

		--- FIN codigo nuevo de llamada a la prima por hijos 
			
		id := last_id_ultimaprenomina()+1;
		if id is null then
			id := 1;
		end if;

		perform delete_all_ultimaprenomina(pIdGrupoNomina, pNumeroNomina);

	elsif pPrenomina = false then
		id := last_id_ultimanomina()+1;
		if id is null then
			id := 1;

		end if;

		perform delete_all_ultimanomina(pIdGrupoNomina, pNumeroNomina);
		idHistoricoNomina := last_id_historiconomina()+1;
		if idHistoricoNomina is null then
			idHistoricoNomina = 1;
		end if;

		if pPeriodicidad = 'S' then
			idHistoricoDetalle := last_id_historicosemana()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		else
			idHistoricoDetalle := last_id_historicoquincena()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		end if;

	end if;

	if pPagosFraccionados = 'S' then
		--------TRABAJADORES EGRESADOS---------------------------
		raise notice '0_va abrir cursor de TrabajadoresEgresados';
	
		open curTrabajadoresEgresados (pIdGrupoNomina,pFechaInicio,pFechaFin);
	
		raise notice '1_abrio cursor de TrabajadoresEgresados';
	
		loop		
	
			fetch curTrabajadoresEgresados into recTrabajadoresEgresados;
	
			exit when not found;
			open curConceptoFijoDeduccionEgresados
			(recTrabajadoresEgresados.id_trabajador);
	
			loop
	
				fetch curConceptoFijoDeduccionEgresados into
					recConceptoFijoDeduccionEgresados;			
				exit when not found;
				montoAporte := 0;
	
				if recConceptoFijoDeduccionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
	
					-- ************** NOMINAS ORDINARIAS **************
		
					if pPrenomina = false and pOrdinaria = true then
		
						if  recConceptoFijoDeduccionEgresados.aporte_patronal = 'S' then
							open curAporte(recConceptoFijoDeduccionEgresados.id_concepto_aporte, recTrabajadoresEgresados.id_trabajador);
							loop
		
								fetch curAporte into recAporte;
								exit when not found;
								montoAporte := calcular_concepto(
									recAporte.id_concepto_tipo_personal,
									recTrabajadoresEgresados.id_trabajador,
									1, recAporte.tipo,
									recConceptoFijoDeduccionEgresados.cod_frecuencia_pago,
									1,1, recTrabajadoresEgresados.formula_integral, 
									recTrabajadoresEgresados.formula_semanal, 
									recTrabajadoresEgresados.id_cargo,
									recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
								idAporte := recAporte.id_concepto_tipo_personal;
		
							end loop;				
		
							close curAporte;
		
						end if;
		
					end if;
		
		
		
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						if montoAporte = 0 then
		
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								0, null);
		
						else
				
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								convert_2_decimal(montoAporte), idAporte);
		
						end if;
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimaprenomina(
							id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
							recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoDeduccionEgresados.unidades, 
							0,
							convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 
							'F', 
							recConceptoFijoDeduccionEgresados.documento_soporte, 
							recConceptoFijoDeduccionEgresados.id_tipo_personal, 
							pIdGrupoNomina,
							null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoDeduccionEgresados.id_concepto_fijo,
					recConceptoFijoDeduccionEgresados.monto_restituir,recConceptoFijoDeduccionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;			
			close curConceptoFijoDeduccionEgresados;
	
	
			open curConceptoFijoAsignacionEgresados(recTrabajadoresEgresados.id_trabajador);
			loop
				fetch curConceptoFijoAsignacionEgresados into recConceptoFijoAsignacionEgresados;			
				exit when not found;
	
				-- ************ NOMINAS ORDINARIAS ****************
				if recConceptoFijoAsignacionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, recConceptoFijoAsignacionEgresados.unidades,
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
							null, recConceptoFijoAsignacionEgresados.id_concepto_fijo,
							0, null);
					
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
						perform add_ultimaprenomina(id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoAsignacionEgresados.unidades, 
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 
							0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, 
							pIdGrupoNomina, null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoAsignacionEgresados.id_concepto_fijo,
					recConceptoFijoAsignacionEgresados.monto_restituir,recConceptoFijoAsignacionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;
	
			close curConceptoFijoAsignacionEgresados;

-- Loop para Conceptos variables para Pesonal Egresados 

		
		open curConceptoVariableDeduccionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccionEgresados into recConceptoVariableDeduccionEgresados;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccionEgresados;



		open curConceptoVariableAsignacionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacionEgresados into recConceptoVariableAsignacionEgresados;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacionEgresados;


-- Fin del Loop de Conceptos variables Personal Egresado.,





		end loop;
		close curTrabajadoresEgresados;
	end if;

	------------------------------------
	------------------------------------
	-----------TRABAJADORES ACTIVOS ------------------------------------
	------------------------------------
	------------------------------------
	
	raise notice '0_va abrir cursor de Trabajadores1';

	open curTrabajadores1 (pIdGrupoNomina, pEstatus);

	raise notice '1_abrio cursor de Trabajadores1';

	loop
		fetch curTrabajadores1 into recTrabajadores1;			
		exit when not found;

		raise notice '1_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoDeduccion (recTrabajadores1.id_trabajador, f1, f2, f3);

		raise notice ' curConceptoFijoDeduccion (%,%,%,%)',recTrabajadores1.id_trabajador, f1, f2, f3;

		loop
			fetch curConceptoFijoDeduccion into recConceptoFijoDeduccion;			
			exit when not found;
			montoAporte := 0;

			-- ************** NOMINAS ORDINARIAS **************

			if pPrenomina = false and pOrdinaria = true then
				
				if  recConceptoFijoDeduccion.aporte_patronal = 'S' then
					open curAporte(recConceptoFijoDeduccion.id_concepto_aporte, recTrabajadores1.id_tipo_personal);
					loop
						fetch curAporte into recAporte;
						exit when not found;
						montoAporte := calcular_concepto(
							recAporte.id_concepto_tipo_personal,
							recTrabajadores1.id_trabajador,
							1, recAporte.tipo,
							recConceptoFijoDeduccion.cod_frecuencia_pago,
							1,1, recTrabajadores1.formula_integral, 
							recTrabajadores1.formula_semanal, 
							recTrabajadores1.id_cargo,
							recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
						idAporte := recAporte.id_concepto_tipo_personal;
						
					end loop;				

					close curAporte;
					
				end if;

			end if;



			if pPrenomina = false and pOrdinaria = true then
				
				id := id+1;
				
				if montoAporte = 0 then
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						0, null);
				else
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						convert_2_decimal(montoAporte), idAporte);
				end if;

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;
				perform add_ultimaprenomina(
					id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);

			end if;



			-- ************** NOMINAS ESPECIALES *****************

			if pPrenomina = false and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoDeduccion.id_concepto_fijo,
					0, null);	

			elsif pPrenomina = true and pOrdinaria = false then

				id := id+1;
				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0, convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);

			end if;

		end loop;

		close curConceptoFijoDeduccion;

		raise notice '2_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		raise notice ' curConceptoFijoAsignacion (%,%,%,%)',recTrabajadores1.id_trabajador, f1, f2, f3;

		loop

			fetch curConceptoFijoAsignacion into recConceptoFijoAsignacion;			
			exit when not found;

			-- ************ NOMINAS ORDINARIAS ****************

			if pPrenomina = false and pOrdinaria = true then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,	null);

			end if;



			-- *************** NOMINAS ESPECIALES ****************


			if pPrenomina = false and pOrdinaria = false then

				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;
		end loop;

		close curConceptoFijoAsignacion;

		raise notice '3_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableDeduccion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccion into recConceptoVariableDeduccion;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccion;



		raise notice '4_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacion into recConceptoVariableAsignacion;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacion;


		-- ****************** SOLO NOMINAS ORDINARIAS (PRESTAMOS) *******************

		if pOrdinaria = true then

			raise notice '5_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curConceptoPrestamo(recTrabajadores1.id_trabajador, f1, f2, f3);

			loop
				fetch curConceptoPrestamo into recConceptoPrestamo;			
				exit when not found;

				if pPrenomina = false and pOrdinaria = true then

					id := id+1;

					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 0, 0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoPrestamo.id_prestamo,
						0, null);
				

				elsif pPrenomina = true and pOrdinaria = true then
				
					id := id+1;
					perform add_ultimaprenomina(id,
						recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 
						0, 
						0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 
						'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, 
						pIdGrupoNomina,
						null);

				end if;

			end loop;

			close curConceptoPrestamo;

		end if;

	end loop;

	close curTrabajadores1;


                --
		-- ************* SOLO NOMINAS ORDINARIAS (DEDUCCIONES LEGALES) ****************
                --
		if pOrdinaria = true  then

			--raise notice '6_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSso(pIdGrupoNomina, f1, f2, f3);

			raise notice '6_ curDeduccionSso(%,%,%,%)',pIdGrupoNomina, f1, f2, f3;
			

			loop
				fetch curDeduccionSso into recDeduccionSso;			
				exit when not found;

				open curTrabajadoresSso(recDeduccionSso.id_tipo_personal);

				loop
					fetch curTrabajadoresSso into recTrabajadoresSso;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera = false;
					borrarLunesSegunda = false;
					if pPeriodicidad = 'M' then
	
						if recTrabajadoresSso.lunes_primera = -1 and  recTrabajadoresSso.lunes_segunda > 0 then
							monto:=recTrabajadoresSso.retencion_sso * recTrabajadoresSso.lunes_segunda;
						elsif recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda = 0 then
							monto:=recTrabajadoresSso.retencion_sso * pLunesSeQuincena;									 						
						elsif recTrabajadoresSso.lunes_primera > 0 then
							monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSso.retencion_sso *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;

						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSso.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSso.lunes_primera > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_primera;
									montoAporte :=  recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_primera;
									
								elsif recTrabajadoresSso.lunes_primera =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesPrQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSso.lunes_segunda > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
									montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
									borrarLunesSegunda = true;
								elsif recTrabajadoresSso.lunes_segunda =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;
								end if;
							end if;	
                                                        borrarLunesPrimera := true;																					 						
						else
							if recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
								montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;	
								borrarLunesPrimera = true;							 						
							elsif recTrabajadoresSso.lunes_primera =-1 and recTrabajadoresSso.lunes_segunda >0 then
								monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
								montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
								borrarLunesPrimera = true;
								borrarLunesSegunda = true;
							elsif recTrabajadoresSso.lunes_primera >0 then
								monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera = true;
							elsif recTrabajadoresSso.lunes_primera=0 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
		
						end if;
					else
						 if recDeduccionSso.cod_frecuencia_pago = f1 
							or recDeduccionSso.cod_frecuencia_pago = f2
							or recDeduccionSso.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSso.retencion_sso;	
							montoAporte:=recTrabajadoresSso.aporte_sso;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);
							
						end if;				
					end if;
                                        if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L2', pIdGrupoNomina);
					end if;

					-- if rectrabajadoresSso.lunes_retroactivo <> 0 then -- comentado para obviar el calculo del retroactivo en tiempo de nomina 
					if rectrabajadoresSso.lunes_retroactivo <> rectrabajadoresSso.lunes_retroactivo then
						monto:=recTrabajadoresSso.retencion_sso*(recTrabajadoresSso.lunes_retroactivo);
						montoAporte := recTrabajadoresSso.aporte_sso*(recTrabajadoresSso.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							
							id := id+1;
							
							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);

								perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'LR', pIdGrupoNomina);
						end if;		
						
					end if;				
				end loop;

				close curTrabajadoresSso;

			end loop;

			close curDeduccionSso;

			raise notice 'sale de SSO';

				--raise notice '7_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSpf(pIdGrupoNomina, f1, f2, f3);

			loop
				fetch curDeduccionSpf into recDeduccionSpf;			
				exit when not found;
	
				open curTrabajadoresSpf(recDeduccionSpf.id_tipo_personal);
				loop

					fetch curTrabajadoresSpf into recTrabajadoresSpf;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera := false;
					borrarLunesSegunda := false;
					if pPeriodicidad = 'M' then	
						if recTrabajadoresSpf.lunes_primera = -1 and  recTrabajadoresSpf.lunes_segunda > 0 then
							monto:=recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_segunda;							
						elsif recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda = 0 then
							monto:=recTrabajadoresSpf.retencion_spf * pLunesSeQuincena;									 						
						elsif recTrabajadoresSpf.lunes_primera > 0 then
							monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSpf.retencion_spf *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;
						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSpf.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSpf.lunes_primera > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_primera;
									montoAporte :=  recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_primera;
								elsif recTrabajadoresSpf.lunes_primera = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesPrQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSpf.lunes_segunda > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
									montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
									borrarLunesSegunda := true;
								elsif recTrabajadoresSpf.lunes_segunda = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;
								end if;
							end if;
                                          borrarLunesPrimera := true;																							 						
						else
							if recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
								montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;	
								borrarLunesPrimera := true;							 						
							elsif recTrabajadoresSpf.lunes_primera =-1 and recTrabajadoresSpf.lunes_segunda >0 then
								monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
								montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
								borrarLunesPrimera := true;
								borrarLunesSegunda := true;
							elsif recTrabajadoresSpf.lunes_primera >0 then
								monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera := true;
							elsif recTrabajadoresSpf.lunes_primera=0 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
						end if;
					else
						  if recDeduccionSpf.cod_frecuencia_pago = f1 
							or recDeduccionSpf.cod_frecuencia_pago = f2
							or recDeduccionSpf.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSpf.retencion_spf;	
							montoAporte:=recTrabajadoresSpf.aporte_spf;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);
						end if;				

					end if;
	                                if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L2', pIdGrupoNomina);
					end if;
						

					-- if rectrabajadoresSpf.lunes_retroactivo <> 0 then -- comentado para obviar el calculo del retroactivo en tiempo de nomina 
					if rectrabajadoresSpf.lunes_retroactivo <> rectrabajadoresSpf.lunes_retroactivo then
						monto:=recTrabajadoresSpf.retencion_spf*(recTrabajadoresSpf.lunes_retroactivo);
						montoAporte := recTrabajadoresSpf.aporte_spf*(recTrabajadoresSpf.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;
							retencion := 0;
							retencion := recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_retroactivo;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);

							perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'LR', pIdGrupoNomina);
						end if;				
					end if;				
				end loop;
				close curTrabajadoresSpf;
			end loop;
			close curDeduccionSpf;
			raise notice 'sale de SPF';

			--raise notice '8_id_trabajador_%',recTrabajadores1.id_trabajador;
			open curDeduccionLph(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionLph into recDeduccionLph;			
				exit when not found;
				open curTrabajadoresLph(recDeduccionLph.id_tipo_personal);
				loop
					fetch curTrabajadoresLph into recTrabajadoresLph;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresLph.retencion_lph;	
						 montoAporte:=recTrabajadoresLph.aporte_lph;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionLph.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresLph.retencion_lph/2;
							montoAporte:=recTrabajadoresLph.aporte_lph/2;																														 					
						 else
							 monto:=recTrabajadoresLph.retencion_lph;
							 montoAporte:=recTrabajadoresLph.aporte_lph;
						 end if;											  									 			
					 else
						 if recDeduccionLph.cod_frecuencia_pago = f1 
							or recDeduccionLph.cod_frecuencia_pago = f2
							or recDeduccionLph.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresLph.retencion_lph;
							montoAporte:=recTrabajadoresLph.aporte_lph;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;
							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
								
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionLph.id_concepto_aporte);
						end if;		
					end if;

					-- if recTrabajadoresLph.hay_retroactivo = 'S' then -- comentado para obviar el calculo del retroactivo en tiempo de nomina 
					if recTrabajadoresLph.hay_retroactivo = 'ZZ' then

						if recDeduccionLph.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 2, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						else
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 1, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then

							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresLph.id_trabajador, 'HR', pIdGrupoNomina);
						end if;	
					end if;
				end loop;
				close curTrabajadoresLph;
			end loop;
			close curDeduccionLph;

			raise notice 'sale de LPH';

			--raise notice '9_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionFju(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionFju into recDeduccionFju;			
				exit when not found;
				open curTrabajadoresFju(recDeduccionFju.id_tipo_personal);
				loop
					fetch curTrabajadoresFju into recTrabajadoresFju;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresFju.retencion_fju;	
						 montoAporte:=recTrabajadoresFju.aporte_fju;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionFju.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresFju.retencion_fju/2;
							montoAporte:=recTrabajadoresFju.aporte_fju/2;																														 					
						 else
							 monto:=recTrabajadoresFju.retencion_fju;
							 montoAporte:=recTrabajadoresFju.aporte_fju;
						 end if;											  									 			
					 else
						 if recDeduccionFju.cod_frecuencia_pago = f1 
							or recDeduccionFju.cod_frecuencia_pago = f2
							or recDeduccionFju.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresFju.retencion_fju;
							montoAporte:=recTrabajadoresFju.aporte_fju;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
										
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionFju.id_concepto_aporte);
						end if;		
					end if;
					-- if recTrabajadoresFju.hay_retroactivo = 'S' then -- comentado para obviar el calculo del retroactivo en tiempo de nomina 
					if recTrabajadoresFju.hay_retroactivo = 'ZZ' then
						if recDeduccionFju.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 2, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);		
						else
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 1, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresFju.id_trabajador, 'HR', pIdGrupoNomina);
						end if;		
					end if;
				end loop;
				close curTrabajadoresFju;
			end loop;
			close curDeduccionFju;
			raise notice 'sale de FJU';
		end if;

		raise notice 'curTiposPersonalIslr(%)',pIdGrupoNomina ;
		open curTiposPersonalIslr(pIdGrupoNomina);
		loop
			fetch curTiposPersonalIslr into recTiposPersonalIslr;			
			exit when not found;

			-- *********** NOMINAS ORDINARIAS ************

			if pOrdinaria = true then
				if (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND extract(day from pFechaInicio)= 16) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 3 ) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'M') then
					-- PRENOMINA
					if pPrenomina = true then
						open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
						loop
							fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
							exit when not found;
							monto := 0;
							id:= id+1;
							monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
								
								perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,	
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);
						end loop;
						close curTrabajadoresPrenominaIslr;
					else
						open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);	
						loop
							fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
							exit when not found;
							monto := 0;
							monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
							id:= id+1;								

							perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
								recTiposPersonalIslr.id_concepto_tipo_personal,
								recTiposPersonalIslr.id_frecuencia_tipo_personal,
								pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
								null, 0, 0, null);
						end loop;
						close curTrabajadoresNominaIslr;
					end if;
				end if;					

				if recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'Q' then
					open curTrabajadoresIslrQuincenaAnterior(recTiposPersonalIslr.id_tipo_personal, pAnio, pMes);
					loop
						fetch curTrabajadoresIslrQuincenaAnterior into recTrabajadoresIslrQuincenaAnterior;			
						exit when not found;
						montoAnterior := 0;	
						tieneIslrAnterior := false;

						if pPrenomina = true then
							open curTrabajadoresIslrActualPrenomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualPrenomina into recTrabajadoresIslrActualPrenomina;			
								exit when not found;							
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimaprenomina(recTrabajadoresIslrActualPrenomina.id_ultima_prenomina, convert_2_decimal(montoAnterior));							
								tieneIslrAnterior := true;
							end loop;
						else
							open curTrabajadoresIslrActualNomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualNomina into recTrabajadoresIslrActualNomina;			
								exit when not found;						
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimanomina(recTrabajadoresIslrActualNomina.id_ultima_nomina, convert_2_decimal(montoAnterior));
								tieneIslrAnterior := true;	
							end loop;

						end if;
						if tieneIslranterior = false then

							montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);													

							if pPrenomina = true then

								id := id+1;

								perform add_ultimaprenomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(montoAnterior), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);

							elsif pPrenomina = false then

								id:=id+1;

								perform add_ultimanomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null, 0, 0, null);
							end if;												
						end if;
						if pPrenomina = true then
							close curTrabajadoresIslrActualPrenomina;																					
						else
							close curTrabajadoresIslrActualNomina;
						end if;

					end loop;

					close curTrabajadoresIslrQuincenaAnterior;				

				end if;

			else
				
				open curFrecuenciaTipoPersonalEspecial(recTiposPersonalIslr.id_tipo_personal, recNominaEspecial.id_frecuencia_pago);
				fetch curFrecuenciaTipoPersonalEspecial into recFrecuenciaTipoPersonalEspecial;	
				if recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal is null then
					return 0;
				end if;

				-- ************* NOMINAS ESPECIALES *************
				if pPrenomina = true  then

					open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
					loop
						fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
						exit when not found;
						monto := 0;
						monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
						

						id := id+1;						
						perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial);
					end loop;
					close curTrabajadoresPrenominaIslr;
				elsif pPrenomina = false  then
					open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);

					loop
						fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
						exit when not found;
					
						id:= id+1;								
						monto := 0;
						monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
						perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial, 0, 0, null);
					end loop;

					close curTrabajadoresNominaIslr;

				end if;	
			end if;
		end loop;

		close curTiposPersonalIslr;
		raise notice 'sale de ISLR';
		raise notice 'va entrar sobregirado';

	
		if pPrenomina = false then
			open curSobregiradosNomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosNomina into recSobregiradosNomina;			
				exit when not found;
				return 1;
			end loop;
		else
			open curSobregiradosPrenomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosPrenomina into recSobregiradosPrenomina;			
				exit when not found;
				return 1;
			end loop;
		end if;

		raise notice 'sale de  sobregirado';

-- ********************* VALIDACIONES Y CALCULO DE LOS TOPES DE HORAS EXTRAS Y DEDUCCIONES POR AUSENCIAS 

	delete from mensajesprenomina;
	perform calcular_ausencias(pPrenomina,pIdNominaEspecial,pIdGrupoNomina,f1,f2,f3);	

	perform validar_tope_horas_extra(pOrdinaria, pIdNominaEspecial, pIdGrupoNomina, pAnio, f1, f2, f3);


-- ********************* A PARTIR DE AQUI SOLO NOMINAS **********************

		if pPrenomina = false then 

			-- Se validan los historicos
			open curValidarHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);			
			fetch curValidarHistoricoNominaRegistroCargos into recValidarHistoricoNominaRegistroCargos;	
			if recValidarHistoricoNominaRegistroCargos.cantidad <> 0 then
				return 100;
			end if;

			raise notice 'van inciar los historicos';
			open curHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaRegistroCargos into recHistoricoNominaRegistroCargos;			
				exit when not found;

				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;


				if pOrdinaria = true then
					if pPeriodicidad = 'S' then	
						-- ********** NOMINAS ORDINARIAS SEMANALES **********	
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);

					end if;
				else
					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaRegistroCargos.id_dependencia,
						recHistoricoNominaRegistroCargos.id_cargo,
						recHistoricoNominaRegistroCargos.numero_registro,
						recHistoricoNominaRegistroCargos.codigo_nomina,
						recHistoricoNominaRegistroCargos.forma_pago,
						recHistoricoNominaRegistroCargos.id_banco,
						recHistoricoNominaRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaRegistroCargos.cuenta_nomina,
						recHistoricoNominaRegistroCargos.estatus,
						recHistoricoNominaRegistroCargos.situacion,
						recHistoricoNominaRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaRegistroCargos.id_lugar_pago,
						recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.id_unidad_administradora,
						recHistoricoNominaRegistroCargos.cod_dependencia,
						recHistoricoNominaRegistroCargos.cod_cargo, 
						recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.cod_unidad_administ,
						recHistoricoNominaRegistroCargos.id_sede,
						recHistoricoNominaRegistroCargos.id_region,
						recHistoricoNominaRegistroCargos.cod_sede,
						recHistoricoNominaRegistroCargos.cod_region,
						recHistoricoNominaRegistroCargos.codigo_patronal);

                                            perform update_historiconomina(idHistoricoNomina,
                                                       recHistoricoNominaRegistroCargos.lunes_primera,
                                                       recHistoricoNominaRegistroCargos.lunes_segunda,
                                                       recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                       recHistoricoNominaRegistroCargos.hay_retroactivo);

				end if;
			end loop;
			close curHistoricoNominaRegistroCargos;	


			open curValidarHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);			
			fetch curValidarHistoricoNominaSinRegistroCargos into recValidarHistoricoNominaSinRegistroCargos;	
			if recValidarHistoricoNominaSinRegistroCargos.cantidad <> 0 then
				return 100;
			end if;
			open curHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaSinRegistroCargos into recHistoricoNominaSinRegistroCargos;			
				exit when not found;
						
				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaSinRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;

				if pOrdinaria = true then

					-- ********** NOMINAS ORDINARIAS **********
					if pPeriodicidad = 'S' then	 
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco, 
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco,
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					end if;
				else

					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaSinRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaSinRegistroCargos.id_dependencia,
						recHistoricoNominaSinRegistroCargos.id_cargo,
						recHistoricoNominaSinRegistroCargos.numero_registro,
						recHistoricoNominaSinRegistroCargos.codigo_nomina,
						recHistoricoNominaSinRegistroCargos.forma_pago,
						recHistoricoNominaSinRegistroCargos.id_banco,
						recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaSinRegistroCargos.cuenta_nomina,
						recHistoricoNominaSinRegistroCargos.estatus,
						recHistoricoNominaSinRegistroCargos.situacion,
						recHistoricoNominaSinRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaSinRegistroCargos.id_lugar_pago,
						recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
						recHistoricoNominaSinRegistroCargos.cod_dependencia,
						recHistoricoNominaSinRegistroCargos.cod_cargo, 
						recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
						recHistoricoNominaSinRegistroCargos.id_sede,
						recHistoricoNominaSinRegistroCargos.id_region,
						recHistoricoNominaSinRegistroCargos.cod_sede,
						recHistoricoNominaSinRegistroCargos.cod_region,
						recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                          perform update_historiconomina(idHistoricoNomina,
                                                  recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                  recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                  recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                  recHistoricoNominaSinRegistroCargos.hay_retroactivo);

				end if;

			end loop;

			close curHistoricoNominaSinRegistroCargos;
	
                        perform actualizar_aporte_patronal(pIdGrupoNomina,pnumeronomina,pidorganismo);
			

	                                if pPeriodicidad = 'S' then
                                                           if pOrdinaria = true then
				 open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaAnio, pNumeroNomina);
                                                          else
				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);
                                                          end if;

			else

				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);

			end if;


			loop
				fetch curHistoricoDetalle into recHistoricoDetalle;			
				exit when not found;
						
				idHistoricoDetalle := idHistoricoDetalle+1;	

				-- ********** NOMINAS ORDINARIAS **********		

				if pOrdinaria = true then				
					if pPeriodicidad = 'S' then						
						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);
					end if;

				else

				-- ********** NOMINAS ESPECIALES **********	

					if pPeriodicidad = 'S' then						

						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else

						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					end if;

				end if;

			end loop;
			close curHistoricoDetalle;
			raise notice 'termino de grabar los historicos ';


			if pPeriodicidad <> 'S' then
				open curMontoNetoQuincenal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoQuincenal into recMontoNetoQuincenal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoQuincenal;
			else
				open curMontoNetoSemanal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoSemanal into recMontoNetoSemanal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoSemanal;		
			end if;
			raise notice 'termino de grabar los NETOS ';

			---- ************* NOMINAS ORDINARIAS (ACTUALIZAR PRESTAMOS) ***************

			if pOrdinaria = true then
				open curPrestamo(pIdGrupoNomina);
				loop
					fetch curPrestamo into recPrestamo;			
					exit when not found;

					estatus := 'A';	

					montoPagado := recPrestamo.monto_pagado + recPrestamo.monto_cuota;
					cuotas := recPrestamo.cuotas_pagadas + 1;

					montoCuota := recPrestamo.monto_cuota; 

					if recPrestamo.monto_prestamo = (recPrestamo.monto_pagado+recPrestamo.monto_cuota) then
						estatus := 'P'; 
					end if;

					if (recPrestamo.monto_pagado+(RecPrestamo.monto_cuota*2)) > recPrestamo.monto_prestamo then
						montoCuota := recPrestamo.monto_prestamo-(recPrestamo.monto_pagado+recPrestamo.monto_cuota); 							
					end if;

					perform update_prestamo(recPrestamo.id_prestamo, montoPagado, cuotas, convert_2_decimal(montoCuota), estatus);				

				end loop;
				raise notice 'ya paso por actualizar prestamos ';
			end if;

			if pOrdinaria = true then

				-- ******** NOMINAS ORDINARIAS ***********
				if pPeriodicidad = 'M' OR pPeriodicidad = 'S' OR pPrimeraQuincena = false then
					perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);
				else
					perform delete_conceptovariable2(pIdGrupoNomina);
				end if;

				raise notice 'ya borro los conceptos variables ';

				if pPeriodicidad = 'Q' AND pPrimeraQuincena = true then
					perform delete_conceptovariable3(pIdGrupoNomina);
				end if;

				perform restituir_conceptofijo(pIdGrupoNomina);

				perform borrar_conceptofijo(pIdGrupoNomina, pFechaInicio, pFechaFin);

				perform actualizar_cotiza_lph_femenino(
					pIdGrupoNomina, pFechaTopeLphFemeninoInicio, pFechaTopeLphFemeninoFin);

				perform actualizar_cotiza_lph_masculino(
					pIdGrupoNomina, pFechaTopeLphMasculinoInicio, pFechaTopeLphMasculinoFin);
						
				perform actualizar_monto_variable(pIdGrupoNomina);

				perform actualizar_trabajador_temporal(pIdGrupoNomina);

				raise notice 'actualizo cotiza, restituir, lunes y monto_variable ';

				id:= last_id_seguridadordinaria()+1;
				if pPeriodicidad <> 'S' then
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina);
				else
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaAnio, pFecha, pUsuario, pIdGruponomina);
				end if;
				
				raise notice 'actualizo la seguridad ordinaria';

			else

				--- ************ NOMINAS ESPECIALES

				perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);

				raise notice 'ya borro los conceptos variables ';

				id:= last_id_seguridadespecial()+1;
				if id is null then 
					id := 1;
				end if;
				perform add_seguridadespecial(id, pAnio, pMes, 
					pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina, pIdNominaEspecial);
		
				raise notice 'actualizo la seguridad especial';

				perform update_nominaespecial(pIdNominaEspecial, pFecha, 'P', pMes, pAnio); 									

				raise notice 'actualizo estatus y fecha de nominaespecial';

			end if;


		end if;
	
		-- se llena la tabla de historicos de base de cálculos del ISLR
	if pPrenomina = false then
				if pPeriodicidad <> 'S' then
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaQuincena);
				else
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaAnio);

				end if;
		raise notice 'se lleno historicobaseislr';
	end if;

	-- se llena la forma de pago para que sea una sola VEZ y no los cambios posteriores del trabajador
	if pPrenomina = false then
		raise notice 'EMPIEZA FORMA DE PAGO';
		raise notice 'curActualizarTipoPago(%, %) ', pIdGrupoNomina, pNumeroNomina;
		
				open curActualizarTipoPago(pIdGrupoNomina, pNumeroNomina);
				loop
				fetch curActualizarTipoPago into recActualizarTipoPago;			
				exit when not found;
					--Busco el trabajador
					pid_trabajador_proce := recActualizarTipoPago.id_trabajador;				
					
					--raise notice 'curDatosTipoPago(%) ', pid_trabajador_proce;

					open curDatosTipoPago(pid_trabajador_proce);
					loop
						fetch curDatosTipoPago into recDatosTipoPago;			
						exit when not found;
						--Actualiza los registro del trabajador con los datos de FORMA DE PAGO
						if  recDatosTipoPago.forma_pago = '1' then
							perform update_ultimanominaFormaPago(pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago, recDatosTipoPago.id_banco_nomina, recDatosTipoPago.tipo_cta_nomina, recDatosTipoPago.cuenta_nomina);			
						else
							--raise notice ' update_ultimanominaFormaPago(%,%, %,%)', pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago;
							perform update_ultimanominaFormaPago(pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago,NULL,NULL,NULL);			
						end if;
						
					end loop; --curHistoricoDetalle
					close curDatosTipoPago;
				end loop; --curActualizarTipoPago

				raise notice 'TERMINA FORMA DE PAGO';								
	end if;
			
	
	raise notice 'termino ';
	delete from identity;

	return 2;

end;
$_$;


--
-- TOC entry 689 (class 1255 OID 3240743)
-- Name: generar_nomina_old(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_nomina_old(boolean, boolean, integer, character varying, character varying, date, date, integer, integer, integer, boolean, integer, character varying, integer, integer, boolean, integer, integer, date, integer, integer, date, date, date, date, integer, integer, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pPrenomina alias for $1;
	pOrdinaria alias for $2;
	pIdGrupoNomina alias for $3;	
	pPeriodicidad alias for $4;	
	pRecalculo alias for $5;
	pFechaInicio alias for $6;
	pFechaFin alias for $7;
	pIdOrganismo alias for $8;
	pLunesPrQuincena alias for $9;
	pLunesSeQuincena alias for $10;
	pTieneSemana5 alias for $11;
	pSemanaMes alias for $12;
	pUsuario alias for $13;
	pSemanaAnio alias for $14;
	pMesSemanal alias for $15;
	pPrimeraQuincena alias for $16;
	pSemanaQuincena alias for $17;
	pNumeroNomina alias for $18;
	pFecha alias for $19;
	pMes alias for $20;
	pAnio alias for $21;
	pFechaTopeLphFemeninoInicio alias for $22;
	pFechaTopeLphFemeninoFin alias for $23;
	pFechaTopeLphMasculinoInicio alias for $24;
	pFechaTopeLphMasculinoFin alias for $25;
	pIdNominaEspecial alias for $26;
	pCodFrecuenciaPago alias for $27;
	pEstatus alias for $28;
	pPagosFraccionados alias for $29;
	

	recAporte record;
	curAporte cursor (pIdConcepto int4, pIdTipoPersonal int4) 
		for select distinct id_concepto_tipo_personal, tipo, valor, 
		tope_minimo, tope_maximo
		from conceptotipopersonal where id_concepto = pIdConcepto and id_tipo_personal = 			pIdTipoPersonal;


	recConceptoFijoDeduccion record;
	curConceptoFijoDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);	

	recConceptoFijoDeduccionEgresados record;
	curConceptoFijoDeduccionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			c.aporte_patronal, c.id_concepto_aporte,
		cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

	recConceptoFijoAsignacion record;
	curConceptoFijoAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);

	recConceptoFijoAsignacionEgresados record;
	curConceptoFijoAsignacionEgresados cursor (pIdTrabajador int4) 
		for select distinct cf.id_concepto_fijo, cf.unidades, cf.monto, 			cf.documento_soporte, cf.id_concepto_tipo_personal,
		cf.id_frecuencia_tipo_personal, t.id_tipo_personal, fp.cod_frecuencia_pago, 			cf.monto_restituir, cf.unidades_restituir
		from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cf.id_trabajador
		and cf.monto > 0
		and cf.estatus = 'A'
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

-- Cursor para los conceptos variable Egresados ASIGNACIONES Y DEDUCCIONES. 

	recConceptoVariableDeduccionEgresados record;
	curConceptoVariableDeduccionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;



	recConceptoVariableAsignacionEgresados record;
	curConceptoVariableAsignacionEgresados cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago < 11;

 -- Fin conceptos variables Egresados 
		

	recConceptoVariableDeduccion record;
	curConceptoVariableDeduccion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto > '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoVariableAsignacion record;
	curConceptoVariableAsignacion cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4) 
		for select distinct cv.id_concepto_variable, cv.unidades, cv.monto, 			cv.documento_soporte, cv.id_concepto_tipo_personal,
		cv.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, conceptovariable cv, frecuenciatipopersonal ftp, 			conceptotipopersonal ctp, concepto c, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = cv.id_trabajador
		and cv.monto > 0
		and cv.estatus = 'A'
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and c.cod_concepto < '5000'	 
		and ftp.id_frecuencia_tipo_personal = cv.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recConceptoPrestamo record;
	curConceptoPrestamo cursor (pIdTrabajador int4, f1 int4, f2 int4, f3 int4)
		for select distinct p.id_prestamo, p.monto_cuota, p.documento_soporte, 			p.id_concepto_tipo_personal,
		p.id_frecuencia_tipo_personal, t.id_tipo_personal
		from trabajador t, prestamo p, frecuenciatipopersonal ftp, frecuenciapago fp
		where t.id_trabajador = pIdTrabajador
		and t.id_trabajador = p.id_trabajador
		and p.monto_cuota > 0
		and p.estatus = 'A'
		and ftp.id_frecuencia_tipo_personal = p.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recDeduccionSso record;

	curDeduccionSso cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5001'
		and c2.cod_concepto = '4990'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresSso record;
	curTrabajadoresSso cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_sso, 			sp.aporte_sso, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 				
		sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_sso = 'S'
		and sp.retencion_sso > 0;


	recDeduccionSpf record;
	curDeduccionSpf cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte,  ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo 
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2 
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago	
		and ftp.id_tipo_personal = tp.id_tipo_personal	
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5002'		
		and c2.cod_concepto = '4991'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);



	recTrabajadoresSpf record;
	curTrabajadoresSpf cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_spf, 			sp.aporte_spf, t.lunes_primera, t.lunes_segunda, t.lunes_retroactivo 
		from trabajador t, sueldopromedio sp 
		where 		
		t.id_tipo_personal = pIdTipoPersonal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'		
		and t.cotiza_spf = 'S'
		and sp.retencion_spf > 0;


	recDeduccionLph record;
	curDeduccionLph cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, 
		c2.id_concepto as id_concepto_aporte, ctp2.id_concepto_tipo_personal as 
		id_concepto_retroactivo, ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2  
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal		
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5003'		
		and c2.cod_concepto = '4992'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresLph record;
	curTrabajadoresLph cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_lph, 			sp.aporte_lph, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral, 
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo  
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp 
		where 
		t.id_turno = tu.id_turno		
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'		
		and t.cotiza_lph = 'S'
		and sp.retencion_lph > 0;


	recDeduccionFju record;
	curDeduccionFju cursor (pIdGrupoNomina int4, f1 int4, f2 int4, f3 int4)
		for select distinct tp.id_tipo_personal, ctp.id_concepto_tipo_personal, 		ctp.id_frecuencia_tipo_personal, fp.cod_frecuencia_pago, c2.id_concepto as 
		id_concepto_aporte, ctp2.id_concepto_tipo_personal as id_concepto_retroactivo, 
		ctp2.valor, ctp2.tope_minimo, ctp2.tope_maximo
		from tipopersonal tp, conceptotipopersonal ctp, frecuenciatipopersonal ftp, 			concepto c, frecuenciapago fp,  concepto c2, conceptotipopersonal ctp2
		where tp.id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and ftp.id_frecuencia_tipo_personal = ctp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ftp.id_tipo_personal = tp.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5004'
		and c2.cod_concepto = '4993'
		and ctp2.id_concepto = c.id_concepto_retroactivo
		and ctp2.id_tipo_personal = ctp.id_tipo_personal
		and ftp.cod_frecuencia_pago in (f1,f2,f3);


	recTrabajadoresFju record;
	curTrabajadoresFju cursor (pIdTipoPersonal int4)
		for select distinct t.id_trabajador, t.id_tipo_personal,  sp.retencion_fju, 			sp.aporte_fju, tu.jornada_diaria, tu.jornada_semanal, tp.formula_integral,
		tp.formula_semanal, t.lunes_retroactivo, t.id_cargo, t.hay_retroactivo 
		from trabajador t, sueldopromedio sp, turno tu, tipopersonal tp
		where 
		t.id_tipo_personal = pIdTipoPersonal
		and t.id_turno = tu.id_turno
		and t.id_tipo_personal= tp.id_tipo_personal
		and sp.id_trabajador = t.id_trabajador
		and t.estatus = 'A'
		and t.cotiza_fju = 'S'		
		and sp.retencion_fju > 0;


	recTiposPersonalIslr record;
	curTiposPersonalIslr cursor (pIdGrupoNomina int4)
		for select distinct ctp.id_concepto_tipo_personal,
		ctp.id_frecuencia_tipo_personal, ctp.id_tipo_personal, c.id_concepto, 
		fp.cod_frecuencia_pago 
		from conceptotipopersonal ctp, concepto c, tipopersonal tp, frecuenciapago fp, 			frecuenciatipopersonal ftp
		where ctp.id_concepto = c.id_concepto 
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and ctp.id_tipo_personal = tp.id_tipo_personal
		and c.cod_concepto = '9999'
		and tp.id_grupo_nomina  = pIdGrupoNomina;

	
	recTrabajadoresNominaIslr record;
	curTrabajadoresNominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimanomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresPrenominaIslr record;
	curTrabajadoresPrenominaIslr cursor (pIdTipoPersonal int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, sum(un.monto_asigna) - sum(un.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from ultimaprenomina un, trabajador t, conceptotipopersonal
		ctp, concepto c
		where un.id_trabajador = t.id_trabajador
		and ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.porcentaje_islr <> 0
		and t.id_tipo_personal = pIdTipoPersonal
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;


	recTrabajadoresIslrQuincenaAnterior record;
	curTrabajadoresIslrQuincenaAnterior cursor (pIdTipoPersonal int4, pAnio int4, pMes int4)
		for select distinct t.id_trabajador, sum(hq.monto_asigna) - sum(hq.monto_deduce) 			as monto, min(t.porcentaje_islr) as porcentaje_islr
		from historicoquincena hq, trabajador t, conceptotipopersonal
		ctp, concepto c
		where hq.id_trabajador = t.id_trabajador
		and t.porcentaje_islr <> 0
		and ctp.id_concepto_tipo_personal = hq.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.gravable = 'S'
		and t.estatus = 'A'
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.anio = pAnio
		and hq.mes = pMes
		and hq.numero_nomina = 0
		group by t.id_trabajador;


	recTrabajadoresIslrActualNomina record;
	curTrabajadoresIslrActualNomina cursor (pIdTrabajador int4)
		for select distinct un.id_trabajador, un.monto_deduce as monto, 			un.id_ultima_nomina 
		from ultimanomina un,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = un.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and un.id_trabajador = pIdTrabajador
		and un.numero_nomina = 0;

	recTrabajadoresIslrActualPrenomina record;
	curTrabajadoresIslrActualPrenomina cursor (pIdTrabajador int4)
		for select distinct up.id_trabajador, up.monto_deduce as monto, 			up.id_ultima_prenomina 
		from ultimaprenomina up,  conceptotipopersonal
		ctp, concepto c
		where 
		ctp.id_concepto_tipo_personal = up.id_concepto_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '9999'
		and up.id_trabajador = pIdTrabajador
		and up.numero_nomina = 0;

	recSobregiradosPrenomina record;
	curSobregiradosPrenomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimaprenomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);


	recSobregiradosNomina record;
	curSobregiradosNomina cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimanomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador having sum(monto_deduce) > sum(monto_asigna);

	recHistoricoNominaRegistroCargos record;
	curHistoricoNominaRegistroCargos cursor(pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, 
		min(t.situacion) as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		min(r.numero_registro) as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(rg.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo
		from trabajador t, dependencia d, unidadejecutora ue, 
		registrocargos rc, registro r, ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region rg
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = rg.id_region 
		and t.id_registro_cargos = rc.id_registro_cargos 
		and c.id_cargo = rc.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and rc.id_registro = r.id_registro 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaRegistroCargos record;
	curValidarHistoricoNominaRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 
                    tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'S'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			registrocargos rc, registro r, ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region rg
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = rg.id_region 
			and t.id_registro_cargos = rc.id_registro_cargos 
			and c.id_cargo = rc.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and rc.id_registro = r.id_registro 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'S'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);


	recHistoricoNominaSinRegistroCargos record;
	curHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct t.id_trabajador, min(t.id_dependencia) as id_dependencia, 
		min(t.id_cargo) as id_cargo, 
		min(t.codigo_nomina) as codigo_nomina, 
                min(t.codigo_patronal) as codigo_patronal,
                min(t.forma_pago) as forma_pago,  
		min(t.id_banco_nomina) as id_banco, min(t.tipo_cta_nomina) as tipo_cta_nomina,  
		min(t.cuenta_nomina) as cuenta_nomina, min(t.estatus) as estatus, min(t.situacion) 			as situacion, 
		min(t.id_tipo_personal) as id_tipo_personal, min(t.id_lugar_pago) as 			id_lugar_pago,  
		min(au.id_unidad_ejecutora) as id_unidad_ejecutora, 
		min(au.id_unidad_administradora) as id_unidad_administradora, 
		0 as numero_registro, min(c.cod_cargo) as cod_cargo, 
		min(d.cod_dependencia) as cod_dependencia, min(ue.cod_unidad_ejecutora) as 			cod_unidad_ejecutora,  
		min(ua.cod_unidad_administ) as cod_unidad_administ, 
		min(d.id_sede) as id_sede, min(s.cod_sede) as cod_sede, 
		min(s.id_region) as id_region, min(r.cod_region) as cod_region,
                min(t.lunes_primera) as lunes_primera,
                min(t.lunes_segunda) as lunes_segunda,
                min(t.lunes_retroactivo) as lunes_retroactivo,
                min(t.hay_retroactivo) as hay_retroactivo 
		from trabajador t, dependencia d, unidadejecutora ue, 
		ultimanomina un, cargo c,
		unidadadministradora ua, administradorauel au, tipopersonal tp, 
		sede s, region r 
		where t.id_dependencia = d.id_dependencia 
		and d.id_sede = s.id_sede and s.id_region = r.id_region 
		and c.id_cargo = t.id_cargo 
		and t.id_trabajador = un.id_trabajador 
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_administradora = ua.id_unidad_administradora
		and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
		and un.id_grupo_nomina = tp.id_grupo_nomina
		and un.id_tipo_personal= tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_grupo_nomina = pIdGrupoNomina
		and un.numero_nomina = pNumeroNomina
		group by t.id_trabajador;

	recValidarHistoricoNominaSinRegistroCargos record;
	curValidarHistoricoNominaSinRegistroCargos cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select count(un.id_trabajador) as cantidad from ultimanomina un, trabajador t, 			tipopersonal tp 
		where un.id_grupo_nomina = pIdGrupoNomina 
		and un.numero_nomina = pNumeroNomina
		and un.id_trabajador = t.id_trabajador 
		and t.id_tipo_personal = tp.id_tipo_personal
		and tp.maneja_rac = 'N'
		and un.id_trabajador not in(
			select distinct t.id_trabajador
			from trabajador t, dependencia d, unidadejecutora ue, 
			ultimanomina un, cargo c,
			unidadadministradora ua, administradorauel au, tipopersonal tp, 
			sede s, region r 
			where t.id_dependencia = d.id_dependencia 
			and d.id_sede = s.id_sede and s.id_region = r.id_region 
			and c.id_cargo = t.id_cargo 
			and t.id_trabajador = un.id_trabajador 
			and d.id_administradora_uel = au.id_administradora_uel
			and au.id_unidad_administradora = ua.id_unidad_administradora
			and au.id_unidad_ejecutora = ue.id_unidad_ejecutora
			and un.id_grupo_nomina = tp.id_grupo_nomina
			and un.id_tipo_personal= tp.id_tipo_personal
			and tp.maneja_rac = 'N'
			and un.id_grupo_nomina = pIdGrupoNomina
			and un.numero_nomina = pNumeroNomina
			group by t.id_trabajador);

	recHistoricoDetalle record;
	curHistoricoDetalle cursor (pIdGrupoNomina int4, pAnio int4, pMes int4, 
		pSemanaQuincena int4, pNumeroNomina int4 )
		for select distinct un.id_trabajador, un.id_concepto_tipo_personal, 			un.id_frecuencia_tipo_personal, un.numero_nomina, 
		un.unidades, un.monto_asigna, un.monto_deduce, un.origen, un.documento_soporte,  
		un.id_tipo_personal, un.id_grupo_nomina, un.id_nomina_especial, un.id_concepto, 			un.monto_aporte, un.id_concepto_aporte, 
		hn.id_historico_nomina 
		from ultimanomina un, historiconomina hn  
		where un.id_trabajador = hn.id_trabajador 
		and un.id_grupo_nomina = pIdGrupoNomina
		and hn.id_grupo_nomina = pIdGrupoNomina
		and hn.anio = pAnio
		and hn.mes = pMes
		and hn.semana_quincena = pSemanaQuincena
		and hn.numero_nomina = pNumeroNomina
		and un.numero_nomina = pNumeroNomina;


	recPrestamo record;
	curPrestamo cursor (pIdGrupoNomina int4)
		for select distinct p.id_prestamo, p.monto_cuota, p.monto_pagado, 			p.monto_prestamo, p.cuotas_pagadas 
		from ultimanomina un, prestamo p 
		where p.id_prestamo = un.id_concepto 
		and origen = 'P' 		
		and un.numero_nomina = 0 
		and un.id_grupo_nomina = pIdGrupoNomina;


	recTrabajadores1 record;
	curTrabajadores1 cursor (pIdGrupoNomina int4, pEstatus varchar)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdGrupoNomina
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = pEstatus;

	recTrabajadoresEgresados record;
	curTrabajadoresEgresados cursor (pIdTrabajador int4, pFechaInicio date, pFechaFin date)
		for select distinct t.id_trabajador, t.id_tipo_personal, tp.formula_integral, 			tp.formula_semanal, t.id_cargo
		from trabajador t, gruponomina gp, tipopersonal tp
		where gp.id_grupo_nomina = pIdTrabajador
		and gp.id_grupo_nomina = tp.id_grupo_nomina
		and t.id_tipo_personal = tp.id_tipo_personal
		and t.estatus = 'E'
		and t.fecha_egreso between pFechaInicio and pFechaFin;

	recNominaEspecial record;
	curNominaEspecial cursor (pIdNominaEspecial int4)
		for select distinct ne.id_frecuencia_pago, ne.id_nomina_especial
		from nominaespecial ne
		where ne.id_nomina_especial = pIdNominaEspecial;
		
	recFrecuenciaTipoPersonalEspecial record;
	curFrecuenciaTipoPersonalEspecial cursor (pIdTipoPersonal int4, pIdFrecuenciaPago int4)
		for select distinct ftp.id_frecuencia_tipo_personal
		from frecuenciatipopersonal ftp
		where ftp.id_tipo_personal = pIdTipoPersonal
		and ftp.id_frecuencia_pago = pIdFrecuenciaPago;

		
	recMontoNetoQuincenal record;
	curMontoNetoQuincenal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina, 
		min(hq.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 		
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hq.id_tipo_personal) as id_tipo_personal
		from historicoquincena hq,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hq.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;

	recMontoNetoSemanal record;
	curMontoNetoSemanal cursor (pIdGrupoNomina int4, pNumeroNomina int4, pAnio int4, 
		pMes int4, pSemanaQuincena int4)
		for select distinct (sum(monto_asigna) - sum(monto_deduce)) as neto, 
		min(id_historico_nomina) as id_historico_nomina,
		min(hs.id_trabajador) as id_trabajador, 
		min(ctp.id_concepto_tipo_personal) as id_concepto_tipo_personal, 
		min(ctp.id_frecuencia_tipo_personal) as id_frecuencia_tipo_personal,
		min(hs.id_tipo_personal) as id_tipo_personal
		from historicosemana hs,  conceptotipopersonal ctp, concepto c 
		where id_grupo_nomina = pIdGrupoNomina
		and ctp.id_tipo_personal = hs.id_tipo_personal
		and c.id_concepto = ctp.id_concepto
		and c.cod_concepto = '5000'
		and numero_nomina = pNumeroNomina
		and anio = pAnio
		and mes = pMes
		and semana_quincena = pSemanaQuincena
		group by id_trabajador;


	recActualizarTipoPago record;
	curActualizarTipoPago  cursor (pIdGrupoNomina int4, pNumeroNomina int4)
		for select distinct id_trabajador 
		from ultimanomina 
		where numero_nomina = pNumeroNomina
		and  id_grupo_nomina = pIdGrupoNomina
		group by id_trabajador;

	recDatosTipoPago record;
	curDatosTipoPago cursor (pIdTrabajador int4)
		for  select  t.forma_pago, t.id_banco_nomina, t.tipo_cta_nomina, t.cuenta_nomina 
		from trabajador t 
		where t.estatus = 'A' 
		and t.id_trabajador IN (pIdTrabajador);


		
	f1 int4 := 0;
	f2 int4 := 0;	
	f3 int4 := 0;
	id int4 := 0;
	idTrabajador int4 := 0;
	monto float8 := 0;
	montoAporte float8 := 0;
	idAporte int4 := 0;		
	retencion float8 := 0;
	montoCalculado float8 := 0;
	montoAnterior float8 := 0;
	tieneIslrAnterior boolean;
	idBanco int4 := 0;
	idHistoricoNomina int4 := 0;
	idHistoricoDetalle int4 := 0;	
	montoPagado float8 := 0;
	cuotas int4 := 0;
	montoCuota float8 := 0;
	estatus varchar := 'A';
	borrarLunesPrimera boolean := false;
	borrarLunesSegunda boolean := false;

	pid_trabajador_proce int4 := 0; 
begin
	-- ERRORES 
	-- 100 La integridad de los datos, impide grabar en los historicos
	-- 101 La nomina especial no existe

	if pOrdinaria = true then

		if pPeriodicidad <> 'S' and pPagosFraccionados = 'S' then
			perform egresos_fraccionados(pIdGrupoNomina, pFechaInicio, 				pFechaFin,pPrimeraQuincena);
		end if;

		if pPeriodicidad = 'M' then
			f1 := 2;		
			f2 := 3;
		elsif pPeriodicidad = 'Q' then
			f1 := 3;
			if pPrimeraQuincena = true then
				f2 := 1;
			else
				f2 := 2;
			end if;
		elsif pPeriodicidad = 'S' then
			f1:= 4;
			f2:= pSemanaMes+4;
			if pSemanaMes = 4 AND pTieneSemana5 = false then
				f3:=9;
			end if;
		end if;

	else
		f1 := pCodFrecuenciaPago;

		open curNominaEspecial(pIdNominaEspecial);
		fetch curNominaEspecial into recNominaEspecial;
		if recNominaEspecial.id_nomina_especial is null then
			return 101;
		end if;
	end if;

	

	if pPrenomina = true then
		id := last_id_ultimaprenomina()+1;
		if id is null then
			id := 1;
		end if;

		perform delete_all_ultimaprenomina(pIdGrupoNomina, pNumeroNomina);

	elsif pPrenomina = false then
		id := last_id_ultimanomina()+1;
		if id is null then
			id := 1;

		end if;

		perform delete_all_ultimanomina(pIdGrupoNomina, pNumeroNomina);
		idHistoricoNomina := last_id_historiconomina()+1;
		if idHistoricoNomina is null then
			idHistoricoNomina = 1;
		end if;

		if pPeriodicidad = 'S' then
			idHistoricoDetalle := last_id_historicosemana()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		else
			idHistoricoDetalle := last_id_historicoquincena()+1;
			if idHistoricoDetalle is null then
				idHistoricoDetalle = 1;
			end if;
		end if;

	end if;

	if pPagosFraccionados = 'S' then
		--------TRABAJADORES EGRESADOS---------------------------
		raise notice '0_va abrir cursor de TrabajadoresEgresados';
	
		open curTrabajadoresEgresados (pIdGrupoNomina,pFechaInicio,pFechaFin);
	
		raise notice '1_abrio cursor de TrabajadoresEgresados';
	
		loop		
	
			fetch curTrabajadoresEgresados into recTrabajadoresEgresados;
	
			exit when not found;
			open curConceptoFijoDeduccionEgresados
			(recTrabajadoresEgresados.id_trabajador,f1, f2, f3);
	
			loop
	
				fetch curConceptoFijoDeduccionEgresados into
					recConceptoFijoDeduccionEgresados;			
				exit when not found;
				montoAporte := 0;
	
				if recConceptoFijoDeduccionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
	
					-- ************** NOMINAS ORDINARIAS **************
		
					if pPrenomina = false and pOrdinaria = true then
		
						if  recConceptoFijoDeduccionEgresados.aporte_patronal = 'S' then
							open curAporte(recConceptoFijoDeduccionEgresados.id_concepto_aporte, recTrabajadoresEgresados.id_trabajador);
							loop
		
								fetch curAporte into recAporte;
								exit when not found;
								montoAporte := calcular_concepto(
									recAporte.id_concepto_tipo_personal,
									recTrabajadoresEgresados.id_trabajador,
									1, recAporte.tipo,
									recConceptoFijoDeduccionEgresados.cod_frecuencia_pago,
									1,1, recTrabajadoresEgresados.formula_integral, 
									recTrabajadoresEgresados.formula_semanal, 
									recTrabajadoresEgresados.id_cargo,
									recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
								idAporte := recAporte.id_concepto_tipo_personal;
		
							end loop;				
		
							close curAporte;
		
						end if;
		
					end if;
		
		
		
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						if montoAporte = 0 then
		
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								0, null);
		
						else
				
							perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
								recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
								recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
								pNumeroNomina, recConceptoFijoDeduccionEgresados.unidades, 0,
								convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 'F', 
								recConceptoFijoDeduccionEgresados.documento_soporte, 
								recConceptoFijoDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
								null, recConceptoFijoDeduccionEgresados.id_concepto_fijo,
								convert_2_decimal(montoAporte), idAporte);
		
						end if;
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimaprenomina(
							id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoDeduccionEgresados.id_concepto_tipo_personal,
							recConceptoFijoDeduccionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoDeduccionEgresados.unidades, 
							0,
							convert_2_decimal(recConceptoFijoDeduccionEgresados.monto), 
							'F', 
							recConceptoFijoDeduccionEgresados.documento_soporte, 
							recConceptoFijoDeduccionEgresados.id_tipo_personal, 
							pIdGrupoNomina,
							null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoDeduccionEgresados.id_concepto_fijo,
					recConceptoFijoDeduccionEgresados.monto_restituir,recConceptoFijoDeduccionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;			
			close curConceptoFijoDeduccionEgresados;
	
	
			open curConceptoFijoAsignacionEgresados(recTrabajadoresEgresados.id_trabajador);
			loop
				fetch curConceptoFijoAsignacionEgresados into recConceptoFijoAsignacionEgresados;			
				exit when not found;
	
				-- ************ NOMINAS ORDINARIAS ****************
				if recConceptoFijoAsignacionEgresados.cod_frecuencia_pago = 1 
					and pPrimeraQuincena = false then
				else
					if pPrenomina = false and pOrdinaria = true then
		
						id := id+1;
		
						perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, recConceptoFijoAsignacionEgresados.unidades,
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
							null, recConceptoFijoAsignacionEgresados.id_concepto_fijo,
							0, null);
					
		
					elsif pPrenomina = true and pOrdinaria = true then
		
						id := id+1;
						perform add_ultimaprenomina(id,
							recTrabajadoresEgresados.id_trabajador,
							recConceptoFijoAsignacionEgresados.id_concepto_tipo_personal,
							recConceptoFijoAsignacionEgresados.id_frecuencia_tipo_personal,
							pNumeroNomina, 
							recConceptoFijoAsignacionEgresados.unidades, 
							convert_2_decimal(recConceptoFijoAsignacionEgresados.monto), 
							0, 'F', 
							recConceptoFijoAsignacionEgresados.documento_soporte, 
							recConceptoFijoAsignacionEgresados.id_tipo_personal, 
							pIdGrupoNomina, null);
		
					end if;
				end if;
				perform actualizar_montos_conceptofijo(recConceptoFijoAsignacionEgresados.id_concepto_fijo,
					recConceptoFijoAsignacionEgresados.monto_restituir,recConceptoFijoAsignacionEgresados.unidades_restituir,0,0, 'N');
	
			end loop;
	
			close curConceptoFijoAsignacionEgresados;

-- Loop para Conceptos variables para Pesonal Egresados 

		
		open curConceptoVariableDeduccionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccionEgresados into recConceptoVariableDeduccionEgresados;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccionEgresados.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccionEgresados.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableDeduccionEgresados.id_concepto_tipo_personal,
					recConceptoVariableDeduccionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccionEgresados.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccionEgresados.monto), 
					'V', 
					recConceptoVariableDeduccionEgresados.documento_soporte, 
					recConceptoVariableDeduccionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccionEgresados;



		open curConceptoVariableAsignacionEgresados(recTrabajadoresEgresados.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacionEgresados into recConceptoVariableAsignacionEgresados;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacionEgresados.unidades,
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 0, 'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacionEgresados.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadoresEgresados.id_trabajador,
					recConceptoVariableAsignacionEgresados.id_concepto_tipo_personal,
					recConceptoVariableAsignacionEgresados.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacionEgresados.unidades, 
					convert_2_decimal(recConceptoVariableAsignacionEgresados.monto), 
					0,'V', 
					recConceptoVariableAsignacionEgresados.documento_soporte, 
					recConceptoVariableAsignacionEgresados.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacionEgresados;


-- Fin del Loop de Conceptos variables Personal Egresado.,





		end loop;
		close curTrabajadoresEgresados;
	end if;

	------------------------------------
	------------------------------------
	-----------TRABAJADORES ACTIVOS ------------------------------------
	------------------------------------
	------------------------------------
	
	raise notice '0_va abrir cursor de Trabajadores1';

	open curTrabajadores1 (pIdGrupoNomina, pEstatus);

	raise notice '1_abrio cursor de Trabajadores1';

	loop
		fetch curTrabajadores1 into recTrabajadores1;			
		exit when not found;

		raise notice '1_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoDeduccion (recTrabajadores1.id_trabajador, f1, f2, f3);

		raise notice ' curConceptoFijoDeduccion (%,%,%,%)',recTrabajadores1.id_trabajador, f1, f2, f3;

		loop
			fetch curConceptoFijoDeduccion into recConceptoFijoDeduccion;			
			exit when not found;
			montoAporte := 0;

			-- ************** NOMINAS ORDINARIAS **************

			if pPrenomina = false and pOrdinaria = true then
				
				if  recConceptoFijoDeduccion.aporte_patronal = 'S' then
					open curAporte(recConceptoFijoDeduccion.id_concepto_aporte, recTrabajadores1.id_tipo_personal);
					loop
						fetch curAporte into recAporte;
						exit when not found;
						montoAporte := calcular_concepto(
							recAporte.id_concepto_tipo_personal,
							recTrabajadores1.id_trabajador,
							1, recAporte.tipo,
							recConceptoFijoDeduccion.cod_frecuencia_pago,
							1,1, recTrabajadores1.formula_integral, 
							recTrabajadores1.formula_semanal, 
							recTrabajadores1.id_cargo,
							recAporte.valor, recAporte.tope_minimo, recAporte.tope_maximo);
						idAporte := recAporte.id_concepto_tipo_personal;
						
					end loop;				

					close curAporte;
					
				end if;

			end if;



			if pPrenomina = false and pOrdinaria = true then
				
				id := id+1;
				
				if montoAporte = 0 then
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						0, null);
				else
					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoFijoDeduccion.id_concepto_tipo_personal,
						recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
						pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
						convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
						recConceptoFijoDeduccion.documento_soporte, 
						recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoFijoDeduccion.id_concepto_fijo,
						convert_2_decimal(montoAporte), idAporte);
				end if;

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;
				perform add_ultimaprenomina(
					id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);

			end if;



			-- ************** NOMINAS ESPECIALES *****************

			if pPrenomina = false and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoDeduccion.unidades, 0,
					convert_2_decimal(recConceptoFijoDeduccion.monto), 'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoDeduccion.id_concepto_fijo,
					0, null);	

			elsif pPrenomina = true and pOrdinaria = false then

				id := id+1;
				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoDeduccion.id_concepto_tipo_personal,
					recConceptoFijoDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoDeduccion.unidades, 
					0, convert_2_decimal(recConceptoFijoDeduccion.monto), 
					'F', 
					recConceptoFijoDeduccion.documento_soporte, 
					recConceptoFijoDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);

			end if;

		end loop;

		close curConceptoFijoDeduccion;

		raise notice '2_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoFijoAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		raise notice ' curConceptoFijoAsignacion (%,%,%,%)',recTrabajadores1.id_trabajador, f1, f2, f3;

		loop

			fetch curConceptoFijoAsignacion into recConceptoFijoAsignacion;			
			exit when not found;

			-- ************ NOMINAS ORDINARIAS ****************

			if pPrenomina = false and pOrdinaria = true then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then

				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,	null);

			end if;



			-- *************** NOMINAS ESPECIALES ****************


			if pPrenomina = false and pOrdinaria = false then

				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoFijoAsignacion.unidades,
					convert_2_decimal(recConceptoFijoAsignacion.monto), 0, 'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoFijoAsignacion.id_concepto_fijo,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoFijoAsignacion.id_concepto_tipo_personal,
					recConceptoFijoAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoFijoAsignacion.unidades, 
					convert_2_decimal(recConceptoFijoAsignacion.monto), 
					0,'F', 
					recConceptoFijoAsignacion.documento_soporte, 
					recConceptoFijoAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;
		end loop;

		close curConceptoFijoAsignacion;

		raise notice '3_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableDeduccion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableDeduccion into recConceptoVariableDeduccion;			
			exit when not found;

			-- *************** NOMINAS ORDINARIAS *****************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			-- *************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableDeduccion.unidades, 0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableDeduccion.id_concepto_variable,
					0, null);
				

			elsif pPrenomina = true and pOrdinaria = false then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableDeduccion.id_concepto_tipo_personal,
					recConceptoVariableDeduccion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableDeduccion.unidades, 
					0,
					convert_2_decimal(recConceptoVariableDeduccion.monto), 
					'V', 
					recConceptoVariableDeduccion.documento_soporte, 
					recConceptoVariableDeduccion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableDeduccion;



		raise notice '4_id_trabajador_%',recTrabajadores1.id_trabajador;

		open curConceptoVariableAsignacion(recTrabajadores1.id_trabajador, f1, f2, f3);

		loop
			fetch curConceptoVariableAsignacion into recConceptoVariableAsignacion;			
			exit when not found;

			--****************** NOMINAS ORDINARIAS ******************

			if pPrenomina = false and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					null, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);
			

			elsif pPrenomina = true and pOrdinaria = true then
			
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					null);
			end if;


			--****************** NOMINAS ESPECIALES ******************

			if pPrenomina = false and pOrdinaria = false then
					
				id := id+1;

				perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, recConceptoVariableAsignacion.unidades,
					convert_2_decimal(recConceptoVariableAsignacion.monto), 0, 'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, pIdGrupoNomina,
					pIdNominaEspecial, recConceptoVariableAsignacion.id_concepto_variable,
					0, null);

			elsif pPrenomina = true and pOrdinaria = false then
				
				id := id+1;

				perform add_ultimaprenomina(id,
					recTrabajadores1.id_trabajador,
					recConceptoVariableAsignacion.id_concepto_tipo_personal,
					recConceptoVariableAsignacion.id_frecuencia_tipo_personal,
					pNumeroNomina, 
					recConceptoVariableAsignacion.unidades, 
					convert_2_decimal(recConceptoVariableAsignacion.monto), 
					0,'V', 
					recConceptoVariableAsignacion.documento_soporte, 
					recConceptoVariableAsignacion.id_tipo_personal, 
					pIdGrupoNomina,
					pIdNominaEspecial);
			end if;

		end loop;

		close curConceptoVariableAsignacion;


		-- ****************** SOLO NOMINAS ORDINARIAS (PRESTAMOS) *******************

		if pOrdinaria = true then

			raise notice '5_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curConceptoPrestamo(recTrabajadores1.id_trabajador, f1, f2, f3);

			loop
				fetch curConceptoPrestamo into recConceptoPrestamo;			
				exit when not found;

				if pPrenomina = false and pOrdinaria = true then

					id := id+1;

					perform add_ultimanomina(id,recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 0, 0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, pIdGrupoNomina,
						null, recConceptoPrestamo.id_prestamo,
						0, null);
				

				elsif pPrenomina = true and pOrdinaria = true then
				
					id := id+1;
					perform add_ultimaprenomina(id,
						recTrabajadores1.id_trabajador,
						recConceptoPrestamo.id_concepto_tipo_personal,
						recConceptoPrestamo.id_frecuencia_tipo_personal,
						pNumeroNomina, 
						0, 
						0,
						convert_2_decimal(recConceptoPrestamo.monto_cuota), 
						'P', 
						recConceptoPrestamo.documento_soporte, 
						recConceptoPrestamo.id_tipo_personal, 
						pIdGrupoNomina,
						null);

				end if;

			end loop;

			close curConceptoPrestamo;

		end if;

	end loop;

	close curTrabajadores1;


                --
		-- ************* SOLO NOMINAS ORDINARIAS (DEDUCCIONES LEGALES) ****************
                --
		if pOrdinaria = true  then

			--raise notice '6_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSso(pIdGrupoNomina, f1, f2, f3);

			raise notice '6_ curDeduccionSso(%,%,%,%)',pIdGrupoNomina, f1, f2, f3;
			

			loop
				fetch curDeduccionSso into recDeduccionSso;			
				exit when not found;

				open curTrabajadoresSso(recDeduccionSso.id_tipo_personal);

				loop
					fetch curTrabajadoresSso into recTrabajadoresSso;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera = false;
					borrarLunesSegunda = false;
					if pPeriodicidad = 'M' then
	
						if recTrabajadoresSso.lunes_primera = -1 and  recTrabajadoresSso.lunes_segunda > 0 then
							monto:=recTrabajadoresSso.retencion_sso * recTrabajadoresSso.lunes_segunda;
						elsif recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda = 0 then
							monto:=recTrabajadoresSso.retencion_sso * pLunesSeQuincena;									 						
						elsif recTrabajadoresSso.lunes_primera > 0 then
							monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSso.retencion_sso *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;

						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSso.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSso.lunes_primera > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_primera;
									montoAporte :=  recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_primera;
									
								elsif recTrabajadoresSso.lunes_primera =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesPrQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSso.lunes_segunda > 0 then
									monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
									montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
									borrarLunesSegunda = true;
								elsif recTrabajadoresSso.lunes_segunda =  0  then
									monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
									montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;
								end if;
							end if;	
                                                        borrarLunesPrimera := true;																					 						
						else
							if recTrabajadoresSso.lunes_primera = -1 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*pLunesSeQuincena;
								montoAporte := recTrabajadoresSso.aporte_sso*pLunesSeQuincena;	
								borrarLunesPrimera = true;							 						
							elsif recTrabajadoresSso.lunes_primera =-1 and recTrabajadoresSso.lunes_segunda >0 then
								monto:=recTrabajadoresSso.retencion_sso*recTrabajadoresSso.lunes_segunda;
								montoAporte := recTrabajadoresSso.aporte_sso*recTrabajadoresSso.lunes_segunda;
								borrarLunesPrimera = true;
								borrarLunesSegunda = true;
							elsif recTrabajadoresSso.lunes_primera >0 then
								monto:=recTrabajadoresSso.retencion_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso *(recTrabajadoresSso.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera = true;
							elsif recTrabajadoresSso.lunes_primera=0 and recTrabajadoresSso.lunes_segunda=0 then
								monto:=recTrabajadoresSso.retencion_sso*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSso.aporte_sso*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
		
						end if;
					else
						 if recDeduccionSso.cod_frecuencia_pago = f1 
							or recDeduccionSso.cod_frecuencia_pago = f2
							or recDeduccionSso.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSso.retencion_sso;	
							montoAporte:=recTrabajadoresSso.aporte_sso;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_tipo_personal,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);
							
						end if;				
					end if;
                                        if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'L2', pIdGrupoNomina);
					end if;

					if rectrabajadoresSso.lunes_retroactivo <> 0 then
						monto:=recTrabajadoresSso.retencion_sso*(recTrabajadoresSso.lunes_retroactivo);
						montoAporte := recTrabajadoresSso.aporte_sso*(recTrabajadoresSso.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
							
							id := id+1;
							
							perform add_ultimanomina(id,recTrabajadoresSso.id_trabajador,
								recDeduccionSso.id_concepto_retroactivo,
								recDeduccionSso.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSso.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSso.id_concepto_aporte);

								perform actualizar_trabajador_temporal(recTrabajadoresSso.id_trabajador, 'LR', pIdGrupoNomina);
						end if;		
						
					end if;				
				end loop;

				close curTrabajadoresSso;

			end loop;

			close curDeduccionSso;

			raise notice 'sale de SSO';

				--raise notice '7_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionSpf(pIdGrupoNomina, f1, f2, f3);

			loop
				fetch curDeduccionSpf into recDeduccionSpf;			
				exit when not found;
	
				open curTrabajadoresSpf(recDeduccionSpf.id_tipo_personal);
				loop

					fetch curTrabajadoresSpf into recTrabajadoresSpf;			
					exit when not found;
					monto := 0;
					montoAporte := 0;
					borrarLunesPrimera := false;
					borrarLunesSegunda := false;
					if pPeriodicidad = 'M' then	
						if recTrabajadoresSpf.lunes_primera = -1 and  recTrabajadoresSpf.lunes_segunda > 0 then
							monto:=recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_segunda;							
						elsif recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda = 0 then
							monto:=recTrabajadoresSpf.retencion_spf * pLunesSeQuincena;									 						
						elsif recTrabajadoresSpf.lunes_primera > 0 then
							monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
						else
							monto:=recTrabajadoresSpf.retencion_spf *(pLunesPrQuincena+pLunesSeQuincena);				
						end if;
						borrarLunesPrimera := true;
						borrarLunesSegunda := true;
					elsif pPeriodicidad = 'Q' then	
						if recDeduccionSpf.cod_frecuencia_pago = 3 then						
							if pPrimeraQuincena=true then
								if recTrabajadoresSpf.lunes_primera > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_primera;
									montoAporte :=  recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_primera;
								elsif recTrabajadoresSpf.lunes_primera = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesPrQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf* pLunesPrQuincena;
								end if;
							else
								if recTrabajadoresSpf.lunes_segunda > 0 then
									monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
									montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
									borrarLunesSegunda := true;
								elsif recTrabajadoresSpf.lunes_segunda = 0 then
									monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
									montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;
								end if;
							end if;
                                          borrarLunesPrimera := true;																							 						
						else
							if recTrabajadoresSpf.lunes_primera = -1 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*pLunesSeQuincena;
								montoAporte := recTrabajadoresSpf.aporte_spf*pLunesSeQuincena;	
								borrarLunesPrimera := true;							 						
							elsif recTrabajadoresSpf.lunes_primera =-1 and recTrabajadoresSpf.lunes_segunda >0 then
								monto:=recTrabajadoresSpf.retencion_spf*recTrabajadoresSpf.lunes_segunda;
								montoAporte := recTrabajadoresSpf.aporte_spf*recTrabajadoresSpf.lunes_segunda;
								borrarLunesPrimera := true;
								borrarLunesSegunda := true;
							elsif recTrabajadoresSpf.lunes_primera >0 then
								monto:=recTrabajadoresSpf.retencion_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf *(recTrabajadoresSpf.lunes_primera+pLunesSeQuincena);			
								borrarLunesPrimera := true;
							elsif recTrabajadoresSpf.lunes_primera=0 and recTrabajadoresSpf.lunes_segunda=0 then
								monto:=recTrabajadoresSpf.retencion_spf*(pLunesPrQuincena+pLunesSeQuincena);
								montoAporte := recTrabajadoresSpf.aporte_spf*(pLunesPrQuincena+pLunesSeQuincena);
							end if;
						end if;
					else
						  if recDeduccionSpf.cod_frecuencia_pago = f1 
							or recDeduccionSpf.cod_frecuencia_pago = f2
							or recDeduccionSpf.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresSpf.retencion_spf;	
							montoAporte:=recTrabajadoresSpf.aporte_spf;								 			
						 else
							monto:=0;
							montoAporte:=0;
						 end if;				 	
					end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_tipo_personal,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);
						end if;				

					end if;
	                                if borrarLunesPrimera = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L1', pIdGrupoNomina);
					end if;
                                        if borrarLunesSegunda = true then
					   perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'L2', pIdGrupoNomina);
					end if;
						

					if rectrabajadoresSpf.lunes_retroactivo <> 0 then
						monto:=recTrabajadoresSpf.retencion_spf*(recTrabajadoresSpf.lunes_retroactivo);
						montoAporte := recTrabajadoresSpf.aporte_spf*(recTrabajadoresSpf.lunes_retroactivo);
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;
							retencion := 0;
							retencion := recTrabajadoresSpf.retencion_spf * recTrabajadoresSpf.lunes_retroactivo;

							perform add_ultimanomina(id,recTrabajadoresSpf.id_trabajador,
								recDeduccionSpf.id_concepto_retroactivo,
								recDeduccionSpf.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresSpf.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionSpf.id_concepto_aporte);

							perform actualizar_trabajador_temporal(recTrabajadoresSpf.id_trabajador, 'LR', pIdGrupoNomina);
						end if;				
					end if;				
				end loop;
				close curTrabajadoresSpf;
			end loop;
			close curDeduccionSpf;
			raise notice 'sale de SPF';

			--raise notice '8_id_trabajador_%',recTrabajadores1.id_trabajador;
			open curDeduccionLph(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionLph into recDeduccionLph;			
				exit when not found;
				open curTrabajadoresLph(recDeduccionLph.id_tipo_personal);
				loop
					fetch curTrabajadoresLph into recTrabajadoresLph;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresLph.retencion_lph;	
						 montoAporte:=recTrabajadoresLph.aporte_lph;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionLph.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresLph.retencion_lph/2;
							montoAporte:=recTrabajadoresLph.aporte_lph/2;																														 					
						 else
							 monto:=recTrabajadoresLph.retencion_lph;
							 montoAporte:=recTrabajadoresLph.aporte_lph;
						 end if;											  									 			
					 else
						 if recDeduccionLph.cod_frecuencia_pago = f1 
							or recDeduccionLph.cod_frecuencia_pago = f2
							or recDeduccionLph.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresLph.retencion_lph;
							montoAporte:=recTrabajadoresLph.aporte_lph;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;

					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;
							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
								
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_tipo_personal,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionLph.id_concepto_aporte);
						end if;		
					end if;

					if recTrabajadoresLph.hay_retroactivo = 'S' then

						if recDeduccionLph.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 2, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						else
							montoCalculado := calcular_concepto(recDeduccionLph.id_concepto_retroactivo, recTrabajadoresLph.id_trabajador, 1, 'P', recDeduccionLph.cod_frecuencia_pago, recTrabajadoresLph.jornada_diaria, recTrabajadoresLph.jornada_semanal, recTrabajadoresLph.formula_integral, recTrabajadoresLph.formula_semanal, recTrabajadoresLph.id_cargo, recDeduccionLph.valor, recDeduccionLph.tope_minimo, recDeduccionLph.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then

							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresLph.id_trabajador,
								recDeduccionLph.id_concepto_retroactivo,
								recDeduccionLph.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresLph.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresLph.id_trabajador, 'HR', pIdGrupoNomina);
						end if;	
					end if;
				end loop;
				close curTrabajadoresLph;
			end loop;
			close curDeduccionLph;

			raise notice 'sale de LPH';

			--raise notice '9_id_trabajador_%',recTrabajadores1.id_trabajador;

			open curDeduccionFju(pIdGrupoNomina, f1, f2, f3);
			loop
				fetch curDeduccionFju into recDeduccionFju;			
				exit when not found;
				open curTrabajadoresFju(recDeduccionFju.id_tipo_personal);
				loop
					fetch curTrabajadoresFju into recTrabajadoresFju;			
					exit when not found;
					monto := 0;	
					montoAporte := 0;				 						 	
					 if pPeriodicidad = 'M' then										 						
						 monto:=recTrabajadoresFju.retencion_fju;	
						 montoAporte:=recTrabajadoresFju.aporte_fju;				  									 					
					 elsif pPeriodicidad = 'Q' then
						 if  recDeduccionFju.cod_frecuencia_pago = 3 then							
							monto:=recTrabajadoresFju.retencion_fju/2;
							montoAporte:=recTrabajadoresFju.aporte_fju/2;																														 					
						 else
							 monto:=recTrabajadoresFju.retencion_fju;
							 montoAporte:=recTrabajadoresFju.aporte_fju;
						 end if;											  									 			
					 else
						 if recDeduccionFju.cod_frecuencia_pago = f1 
							or recDeduccionFju.cod_frecuencia_pago = f2
							or recDeduccionFju.cod_frecuencia_pago = f3 then
							monto:=recTrabajadoresFju.retencion_fju;
							montoAporte:=recTrabajadoresFju.aporte_fju;									
						else
							monto:=0;
							montoAporte:=0;	 			
						end if;
					 end if;
					if monto <> 0 then
						if pPrenomina = true and pOrdinaria = true then
										
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);
						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_tipo_personal,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								convert_2_decimal(montoAporte), recDeduccionFju.id_concepto_aporte);
						end if;		
					end if;
					if recTrabajadoresFju.hay_retroactivo = 'S' then
						if recDeduccionFju.cod_frecuencia_pago = 3 then
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 2, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);		
						else
							montoCalculado := calcular_concepto(recDeduccionFju.id_concepto_retroactivo, recTrabajadoresFju.id_trabajador, 1, 'P', recDeduccionFju.cod_frecuencia_pago, recTrabajadoresFju.jornada_diaria, recTrabajadoresFju.jornada_semanal, recTrabajadoresFju.formula_integral, recTrabajadoresFju.formula_semanal, recTrabajadoresFju.id_cargo, recDeduccionFju.valor, recDeduccionFju.tope_minimo, recDeduccionFju.tope_maximo);	
						end if;
						if pPrenomina = true and pOrdinaria = true then
									
							id := id+1;

							perform add_ultimaprenomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null);

						elsif pPrenomina = false and pOrdinaria = true then
						
							id := id+1;

							perform add_ultimanomina(id,recTrabajadoresFju.id_trabajador,
								recDeduccionFju.id_concepto_retroactivo,
								recDeduccionFju.id_frecuencia_tipo_personal,
								pNumeroNomina, 0, 0,
								convert_2_decimal(montoCalculado), 'C', 
								null, 
								recTrabajadoresFju.id_tipo_personal, pIdGrupoNomina,
								null, 0,
								0, null);

							perform actualizar_trabajador_temporal(recTrabajadoresFju.id_trabajador, 'HR', pIdGrupoNomina);
						end if;		
					end if;
				end loop;
				close curTrabajadoresFju;
			end loop;
			close curDeduccionFju;
			raise notice 'sale de FJU';
		end if;

		raise notice 'curTiposPersonalIslr(%)',pIdGrupoNomina ;
		open curTiposPersonalIslr(pIdGrupoNomina);
		loop
			fetch curTiposPersonalIslr into recTiposPersonalIslr;			
			exit when not found;

			-- *********** NOMINAS ORDINARIAS ************

			if pOrdinaria = true then
				if (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND extract(day from pFechaInicio)= 16) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 3 ) 
					OR (recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'M') then
					-- PRENOMINA
					if pPrenomina = true then
						open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
						loop
							fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
							exit when not found;
							monto := 0;
							id:= id+1;
							monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
								
								perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,	
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);
						end loop;
						close curTrabajadoresPrenominaIslr;
					else
						open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);	
						loop
							fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
							exit when not found;
							monto := 0;
							monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
							id:= id+1;								

							perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
								recTiposPersonalIslr.id_concepto_tipo_personal,
								recTiposPersonalIslr.id_frecuencia_tipo_personal,
								pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
								convert_2_decimal(monto), 'C', 
								null, 
								recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
								null, 0, 0, null);
						end loop;
						close curTrabajadoresNominaIslr;
					end if;
				end if;					

				if recTiposPersonalIslr.cod_frecuencia_pago = 2 AND pPeriodicidad = 'Q' then
					open curTrabajadoresIslrQuincenaAnterior(recTiposPersonalIslr.id_tipo_personal, pAnio, pMes);
					loop
						fetch curTrabajadoresIslrQuincenaAnterior into recTrabajadoresIslrQuincenaAnterior;			
						exit when not found;
						montoAnterior := 0;	
						tieneIslrAnterior := false;

						if pPrenomina = true then
							open curTrabajadoresIslrActualPrenomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualPrenomina into recTrabajadoresIslrActualPrenomina;			
								exit when not found;							
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimaprenomina(recTrabajadoresIslrActualPrenomina.id_ultima_prenomina, convert_2_decimal(montoAnterior));							
								tieneIslrAnterior := true;
							end loop;
						else
							open curTrabajadoresIslrActualNomina(recTrabajadoresIslrQuincenaAnterior.id_trabajador);
							loop
								fetch curTrabajadoresIslrActualNomina into recTrabajadoresIslrActualNomina;			
								exit when not found;						
								montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);							
								perform update_ultimanomina(recTrabajadoresIslrActualNomina.id_ultima_nomina, convert_2_decimal(montoAnterior));
								tieneIslrAnterior := true;	
							end loop;

						end if;
						if tieneIslranterior = false then

							montoAnterior := recTrabajadoresIslrQuincenaAnterior.monto*(recTrabajadoresIslrQuincenaAnterior.porcentaje_islr/100);													

							if pPrenomina = true then

								id := id+1;

								perform add_ultimaprenomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(montoAnterior), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null);

							elsif pPrenomina = false then

								id:=id+1;

								perform add_ultimanomina(id,recTrabajadoresIslrQuincenaAnterior.id_trabajador,
									recTiposPersonalIslr.id_concepto_tipo_personal,
									recTiposPersonalIslr.id_frecuencia_tipo_personal,
									pNumeroNomina, recTrabajadoresIslrQuincenaAnterior.porcentaje_islr, 0,
									convert_2_decimal(monto), 'C', 
									null, 
									recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
									null, 0, 0, null);
							end if;												
						end if;
						if pPrenomina = true then
							close curTrabajadoresIslrActualPrenomina;																					
						else
							close curTrabajadoresIslrActualNomina;
						end if;

					end loop;

					close curTrabajadoresIslrQuincenaAnterior;				

				end if;

			else
				
				open curFrecuenciaTipoPersonalEspecial(recTiposPersonalIslr.id_tipo_personal, recNominaEspecial.id_frecuencia_pago);
				fetch curFrecuenciaTipoPersonalEspecial into recFrecuenciaTipoPersonalEspecial;	
				if recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal is null then
					return 0;
				end if;

				-- ************* NOMINAS ESPECIALES *************
				if pPrenomina = true  then

					open curTrabajadoresPrenominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);
					loop
						fetch curTrabajadoresPrenominaIslr into recTrabajadoresPrenominaIslr;			
						exit when not found;
						monto := 0;
						monto := recTrabajadoresPrenominaIslr.monto * (recTrabajadoresPrenominaIslr.porcentaje_islr/100);
						

						id := id+1;						
						perform add_ultimaprenomina(id,recTrabajadoresPrenominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresPrenominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial);
					end loop;
					close curTrabajadoresPrenominaIslr;
				elsif pPrenomina = false  then
					open curTrabajadoresNominaIslr(recTiposPersonalIslr.id_tipo_personal, pNumeroNomina);

					loop
						fetch curTrabajadoresNominaIslr into recTrabajadoresNominaIslr;			
						exit when not found;
					
						id:= id+1;								
						monto := 0;
						monto := recTrabajadoresNominaIslr.monto * (recTrabajadoresNominaIslr.porcentaje_islr/100);
						perform add_ultimanomina(id,recTrabajadoresNominaIslr.id_trabajador,
							recTiposPersonalIslr.id_concepto_tipo_personal,
							recFrecuenciaTipoPersonalEspecial.id_frecuencia_tipo_personal,
							pNumeroNomina, recTrabajadoresNominaIslr.porcentaje_islr, 0,
							convert_2_decimal(monto), 'C', null, 
							recTiposPersonalIslr.id_tipo_personal, pIdGrupoNomina,
							pIdNominaEspecial, 0, 0, null);
					end loop;

					close curTrabajadoresNominaIslr;

				end if;	
			end if;
		end loop;

		close curTiposPersonalIslr;
		raise notice 'sale de ISLR';
		raise notice 'va entrar sobregirado';

	
		if pPrenomina = false then
			open curSobregiradosNomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosNomina into recSobregiradosNomina;			
				exit when not found;
				return 1;
			end loop;
		else
			open curSobregiradosPrenomina(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curSobregiradosPrenomina into recSobregiradosPrenomina;			
				exit when not found;
				return 1;
			end loop;
		end if;

		raise notice 'sale de  sobregirado';

-- ********************* VALIDACIONES Y CALCULO DE LOS TOPES DE HORAS EXTRAS Y DEDUCCIONES POR AUSENCIAS 

	delete from mensajesprenomina;
	perform calcular_ausencias(pPrenomina,pIdNominaEspecial,pIdGrupoNomina,f1,f2,f3);	

	perform validar_tope_horas_extra(pOrdinaria, pIdNominaEspecial, pIdGrupoNomina, pAnio, f1, f2, f3);


-- ********************* A PARTIR DE AQUI SOLO NOMINAS **********************

		if pPrenomina = false then 

			-- Se validan los historicos
			open curValidarHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);			
			fetch curValidarHistoricoNominaRegistroCargos into recValidarHistoricoNominaRegistroCargos;	
			if recValidarHistoricoNominaRegistroCargos.cantidad <> 0 then
				return 100;
			end if;

			raise notice 'van inciar los historicos';
			open curHistoricoNominaRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaRegistroCargos into recHistoricoNominaRegistroCargos;			
				exit when not found;

				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;


				if pOrdinaria = true then
					if pPeriodicidad = 'S' then	
						-- ********** NOMINAS ORDINARIAS SEMANALES **********	
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaRegistroCargos.id_dependencia,
							recHistoricoNominaRegistroCargos.id_cargo,
							recHistoricoNominaRegistroCargos.numero_registro,
							recHistoricoNominaRegistroCargos.codigo_nomina,
							recHistoricoNominaRegistroCargos.forma_pago,
							recHistoricoNominaRegistroCargos.id_banco,
							recHistoricoNominaRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaRegistroCargos.cuenta_nomina,
							recHistoricoNominaRegistroCargos.estatus,
							recHistoricoNominaRegistroCargos.situacion,
							recHistoricoNominaRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaRegistroCargos.id_lugar_pago,
							recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.id_unidad_administradora,
							recHistoricoNominaRegistroCargos.cod_dependencia,
							recHistoricoNominaRegistroCargos.cod_cargo, 
							recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaRegistroCargos.cod_unidad_administ,
							recHistoricoNominaRegistroCargos.id_sede,
							recHistoricoNominaRegistroCargos.id_region,
							recHistoricoNominaRegistroCargos.cod_sede,
							recHistoricoNominaRegistroCargos.cod_region,
							recHistoricoNominaRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaRegistroCargos.lunes_primera,
                                                        recHistoricoNominaRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaRegistroCargos.hay_retroactivo);

					end if;
				else
					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaRegistroCargos.id_dependencia,
						recHistoricoNominaRegistroCargos.id_cargo,
						recHistoricoNominaRegistroCargos.numero_registro,
						recHistoricoNominaRegistroCargos.codigo_nomina,
						recHistoricoNominaRegistroCargos.forma_pago,
						recHistoricoNominaRegistroCargos.id_banco,
						recHistoricoNominaRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaRegistroCargos.cuenta_nomina,
						recHistoricoNominaRegistroCargos.estatus,
						recHistoricoNominaRegistroCargos.situacion,
						recHistoricoNominaRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaRegistroCargos.id_lugar_pago,
						recHistoricoNominaRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.id_unidad_administradora,
						recHistoricoNominaRegistroCargos.cod_dependencia,
						recHistoricoNominaRegistroCargos.cod_cargo, 
						recHistoricoNominaRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaRegistroCargos.cod_unidad_administ,
						recHistoricoNominaRegistroCargos.id_sede,
						recHistoricoNominaRegistroCargos.id_region,
						recHistoricoNominaRegistroCargos.cod_sede,
						recHistoricoNominaRegistroCargos.cod_region,
						recHistoricoNominaRegistroCargos.codigo_patronal);

                                            perform update_historiconomina(idHistoricoNomina,
                                                       recHistoricoNominaRegistroCargos.lunes_primera,
                                                       recHistoricoNominaRegistroCargos.lunes_segunda,
                                                       recHistoricoNominaRegistroCargos.lunes_retroactivo,
                                                       recHistoricoNominaRegistroCargos.hay_retroactivo);

				end if;
			end loop;
			close curHistoricoNominaRegistroCargos;	


			open curValidarHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);			
			fetch curValidarHistoricoNominaSinRegistroCargos into recValidarHistoricoNominaSinRegistroCargos;	
			if recValidarHistoricoNominaSinRegistroCargos.cantidad <> 0 then
				return 100;
			end if;
			open curHistoricoNominaSinRegistroCargos(pIdGrupoNomina, pNumeroNomina);
			loop
				fetch curHistoricoNominaSinRegistroCargos into recHistoricoNominaSinRegistroCargos;			
				exit when not found;
						
				idHistoricoNomina := idHistoricoNomina+1;			
			--	if recHistoricoNominaSinRegistroCargos.id_banco = 0 then
			--		idBanco := 1;
			--	end if;

				if pOrdinaria = true then

					-- ********** NOMINAS ORDINARIAS **********
					if pPeriodicidad = 'S' then	 
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaAnio, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco, 
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					else
						perform add_historiconomina(idHistoricoNomina,
							recHistoricoNominaSinRegistroCargos.id_trabajador,
							pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
							recHistoricoNominaSinRegistroCargos.id_dependencia,
							recHistoricoNominaSinRegistroCargos.id_cargo,
							recHistoricoNominaSinRegistroCargos.numero_registro,
							recHistoricoNominaSinRegistroCargos.codigo_nomina,
							recHistoricoNominaSinRegistroCargos.forma_pago,
							recHistoricoNominaSinRegistroCargos.id_banco,
							recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
							recHistoricoNominaSinRegistroCargos.cuenta_nomina,
							recHistoricoNominaSinRegistroCargos.estatus,
							recHistoricoNominaSinRegistroCargos.situacion,
							recHistoricoNominaSinRegistroCargos.id_tipo_personal,
							pIdGrupoNomina, null,
							recHistoricoNominaSinRegistroCargos.id_lugar_pago,
							recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
							recHistoricoNominaSinRegistroCargos.cod_dependencia,
							recHistoricoNominaSinRegistroCargos.cod_cargo, 
							recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
							recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
							recHistoricoNominaSinRegistroCargos.id_sede,
							recHistoricoNominaSinRegistroCargos.id_region,
							recHistoricoNominaSinRegistroCargos.cod_sede,
							recHistoricoNominaSinRegistroCargos.cod_region,
							recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                             perform update_historiconomina(idHistoricoNomina,
                                                        recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                        recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                        recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                        recHistoricoNominaSinRegistroCargos.hay_retroactivo);
					end if;
				else

					-- ********** NOMINAS ESPECIALES **********

					perform add_historiconomina(idHistoricoNomina,
						recHistoricoNominaSinRegistroCargos.id_trabajador,
						pNumeroNomina, pAnio, pMes, pSemanaQuincena, pFecha,
						recHistoricoNominaSinRegistroCargos.id_dependencia,
						recHistoricoNominaSinRegistroCargos.id_cargo,
						recHistoricoNominaSinRegistroCargos.numero_registro,
						recHistoricoNominaSinRegistroCargos.codigo_nomina,
						recHistoricoNominaSinRegistroCargos.forma_pago,
						recHistoricoNominaSinRegistroCargos.id_banco,
						recHistoricoNominaSinRegistroCargos.tipo_cta_nomina,
						recHistoricoNominaSinRegistroCargos.cuenta_nomina,
						recHistoricoNominaSinRegistroCargos.estatus,
						recHistoricoNominaSinRegistroCargos.situacion,
						recHistoricoNominaSinRegistroCargos.id_tipo_personal,
						pIdGrupoNomina, pIdNominaEspecial,
						recHistoricoNominaSinRegistroCargos.id_lugar_pago,
						recHistoricoNominaSinRegistroCargos.id_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.id_unidad_administradora,
						recHistoricoNominaSinRegistroCargos.cod_dependencia,
						recHistoricoNominaSinRegistroCargos.cod_cargo, 
						recHistoricoNominaSinRegistroCargos.cod_unidad_ejecutora,
						recHistoricoNominaSinRegistroCargos.cod_unidad_administ,
						recHistoricoNominaSinRegistroCargos.id_sede,
						recHistoricoNominaSinRegistroCargos.id_region,
						recHistoricoNominaSinRegistroCargos.cod_sede,
						recHistoricoNominaSinRegistroCargos.cod_region,
						recHistoricoNominaSinRegistroCargos.codigo_patronal);

                                          perform update_historiconomina(idHistoricoNomina,
                                                  recHistoricoNominaSinRegistroCargos.lunes_primera,
                                                  recHistoricoNominaSinRegistroCargos.lunes_segunda,
                                                  recHistoricoNominaSinRegistroCargos.lunes_retroactivo,
                                                  recHistoricoNominaSinRegistroCargos.hay_retroactivo);

				end if;

			end loop;

			close curHistoricoNominaSinRegistroCargos;
	
                        perform actualizar_aporte_patronal(pIdGrupoNomina,pnumeronomina,pidorganismo);
			

	                                if pPeriodicidad = 'S' then
                                                           if pOrdinaria = true then
				 open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaAnio, pNumeroNomina);
                                                          else
				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);
                                                          end if;

			else

				open curHistoricoDetalle(pIdGrupoNomina, pAnio, pMes, pSemanaQuincena, pNumeroNomina);

			end if;


			loop
				fetch curHistoricoDetalle into recHistoricoDetalle;			
				exit when not found;
						
				idHistoricoDetalle := idHistoricoDetalle+1;	

				-- ********** NOMINAS ORDINARIAS **********		

				if pOrdinaria = true then				
					if pPeriodicidad = 'S' then						
						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);
					end if;

				else

				-- ********** NOMINAS ESPECIALES **********	

					if pPeriodicidad = 'S' then						

						perform add_historicosemana(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					else

						perform add_historicoquincena(idHistoricoDetalle,			
							recHistoricoDetalle.id_trabajador,
							recHistoricoDetalle.id_concepto_tipo_personal,
							recHistoricoDetalle.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							recHistoricoDetalle.unidades,
							convert_2_decimal(recHistoricoDetalle.monto_asigna),
							convert_2_decimal(recHistoricoDetalle.monto_deduce),
							recHistoricoDetalle.origen,
							recHistoricoDetalle.documento_soporte,
							recHistoricoDetalle.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recHistoricoDetalle.id_historico_nomina,
							recHistoricoDetalle.id_concepto,
							convert_2_decimal(recHistoricoDetalle.monto_aporte),
							recHistoricoDetalle.id_concepto_aporte);

					end if;

				end if;

			end loop;
			close curHistoricoDetalle;
			raise notice 'termino de grabar los historicos ';


			if pPeriodicidad <> 'S' then
				open curMontoNetoQuincenal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoQuincenal into recMontoNetoQuincenal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicoquincena(idHistoricoDetalle,			
							recMontoNetoQuincenal.id_trabajador,
							recMontoNetoQuincenal.id_concepto_tipo_personal,
							recMontoNetoQuincenal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaQuincena,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoQuincenal.neto),
							0,
							'C',
							null,
							recMontoNetoQuincenal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoQuincenal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoQuincenal;
			else
				open curMontoNetoSemanal(pIdGrupoNomina, pNumeroNomina, pAnio, pMes, pSemanaQuincena);
				loop
					fetch curMontoNetoSemanal into recMontoNetoSemanal;
					exit when not found;					
					idHistoricoDetalle := idHistoricoDetalle+1;
					if pOrdinaria = true then												
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							null,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
	
					else
						perform add_historicosemana(idHistoricoDetalle,			
							recMontoNetoSemanal.id_trabajador,
							recMontoNetoSemanal.id_concepto_tipo_personal,
							recMontoNetoSemanal.id_frecuencia_tipo_personal,
							pNumeroNomina,
							pAnio,
							pMes,
							pSemanaAnio,
							pFecha,
							0,
							convert_2_decimal(recMontoNetoSemanal.neto),
							0,
							'C',
							null,
							recMontoNetoSemanal.id_tipo_personal,
							pIdGrupoNomina,
							pIdNominaEspecial,
							recMontoNetoSemanal.id_historico_nomina,
							0,
							0,
							null);
					end if;					
				end loop;
				close curMontoNetoSemanal;		
			end if;
			raise notice 'termino de grabar los NETOS ';

			---- ************* NOMINAS ORDINARIAS (ACTUALIZAR PRESTAMOS) ***************

			if pOrdinaria = true then
				open curPrestamo(pIdGrupoNomina);
				loop
					fetch curPrestamo into recPrestamo;			
					exit when not found;

					estatus := 'A';	

					montoPagado := recPrestamo.monto_pagado + recPrestamo.monto_cuota;
					cuotas := recPrestamo.cuotas_pagadas + 1;

					montoCuota := recPrestamo.monto_cuota; 

					if recPrestamo.monto_prestamo = (recPrestamo.monto_pagado+recPrestamo.monto_cuota) then
						estatus := 'P'; 
					end if;

					if (recPrestamo.monto_pagado+(RecPrestamo.monto_cuota*2)) > recPrestamo.monto_prestamo then
						montoCuota := recPrestamo.monto_prestamo-(recPrestamo.monto_pagado+recPrestamo.monto_cuota); 							
					end if;

					perform update_prestamo(recPrestamo.id_prestamo, montoPagado, cuotas, convert_2_decimal(montoCuota), estatus);				

				end loop;
				raise notice 'ya paso por actualizar prestamos ';
			end if;

			if pOrdinaria = true then

				-- ******** NOMINAS ORDINARIAS ***********
				if pPeriodicidad = 'M' OR pPeriodicidad = 'S' OR pPrimeraQuincena = false then
					perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);
				else
					perform delete_conceptovariable2(pIdGrupoNomina);
				end if;

				raise notice 'ya borro los conceptos variables ';

				if pPeriodicidad = 'Q' AND pPrimeraQuincena = true then
					perform delete_conceptovariable3(pIdGrupoNomina);
				end if;

				perform restituir_conceptofijo(pIdGrupoNomina);

				perform borrar_conceptofijo(pIdGrupoNomina, pFechaInicio, pFechaFin);

				perform actualizar_cotiza_lph_femenino(
					pIdGrupoNomina, pFechaTopeLphFemeninoInicio, pFechaTopeLphFemeninoFin);

				perform actualizar_cotiza_lph_masculino(
					pIdGrupoNomina, pFechaTopeLphMasculinoInicio, pFechaTopeLphMasculinoFin);
						
				perform actualizar_monto_variable(pIdGrupoNomina);

				perform actualizar_trabajador_temporal(pIdGrupoNomina);

				raise notice 'actualizo cotiza, restituir, lunes y monto_variable ';

				id:= last_id_seguridadordinaria()+1;
				if pPeriodicidad <> 'S' then
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina);
				else
					perform add_seguridadordinaria(id, pAnio, pMes, 
						pFechaInicio, pFechaFin, pSemanaAnio, pFecha, pUsuario, pIdGruponomina);
				end if;
				
				raise notice 'actualizo la seguridad ordinaria';

			else

				--- ************ NOMINAS ESPECIALES

				perform delete_conceptovariable1(pIdGrupoNomina, pNumeroNomina);

				raise notice 'ya borro los conceptos variables ';

				id:= last_id_seguridadespecial()+1;
				if id is null then 
					id := 1;
				end if;
				perform add_seguridadespecial(id, pAnio, pMes, 
					pFechaInicio, pFechaFin, pSemanaQuincena, pFecha, pUsuario, pIdGruponomina, pIdNominaEspecial);
		
				raise notice 'actualizo la seguridad especial';

				perform update_nominaespecial(pIdNominaEspecial, pFecha, 'P', pMes, pAnio); 									

				raise notice 'actualizo estatus y fecha de nominaespecial';

			end if;


		end if;
	
		-- se llena la tabla de historicos de base de cálculos del ISLR
	if pPrenomina = false then
				if pPeriodicidad <> 'S' then
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaQuincena);
				else
					perform add_historicobaseislr(pIdGrupoNomina,pNumeroNomina,pAnio,pMes,pSemanaAnio);

				end if;
		raise notice 'se lleno historicobaseislr';
	end if;

	-- se llena la forma de pago para que sea una sola VEZ y no los cambios posteriores del trabajador
	if pPrenomina = false then
		raise notice 'EMPIEZA FORMA DE PAGO';
		raise notice 'curActualizarTipoPago(%, %) ', pIdGrupoNomina, pNumeroNomina;
		
				open curActualizarTipoPago(pIdGrupoNomina, pNumeroNomina);
				loop
				fetch curActualizarTipoPago into recActualizarTipoPago;			
				exit when not found;
					--Busco el trabajador
					pid_trabajador_proce := recActualizarTipoPago.id_trabajador;				
					
					--raise notice 'curDatosTipoPago(%) ', pid_trabajador_proce;

					open curDatosTipoPago(pid_trabajador_proce);
					loop
						fetch curDatosTipoPago into recDatosTipoPago;			
						exit when not found;
						--Actualiza los registro del trabajador con los datos de FORMA DE PAGO
						if  recDatosTipoPago.forma_pago = '1' then
							perform update_ultimanominaFormaPago(pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago, recDatosTipoPago.id_banco_nomina, recDatosTipoPago.tipo_cta_nomina, recDatosTipoPago.cuenta_nomina);			
						else
							--raise notice ' update_ultimanominaFormaPago(%,%, %,%)', pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago;
							perform update_ultimanominaFormaPago(pid_trabajador_proce,pIdGrupoNomina, pNumeroNomina,recDatosTipoPago.forma_pago,NULL,NULL,NULL);			
						end if;
						
					end loop; --curHistoricoDetalle
					close curDatosTipoPago;
				end loop; --curActualizarTipoPago

				raise notice 'TERMINA FORMA DE PAGO';								
	end if;
			
	
	raise notice 'termino ';
	delete from identity;

	return 2;

end;
$_$;


--
-- TOC entry 721 (class 1255 OID 3240745)
-- Name: generar_partidauelespecifica(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_partidauelespecifica(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pIdFuenteFinanciamiento alias for $1;
	pAnio alias for $2;
	
	recUelEspecifica record;
	curUelEspecifica cursor (pAnio int4) 
		for select distinct id_uel_especifica
		from uelespecifica 
		where anio = pAnio;

	recCuentaPresupuesto record;
	curCuentaPresupuesto cursor 
		for select distinct id_cuenta_presupuesto		
		from cuentapresupuesto;	

	id int4 := 0;
begin

	delete from partidauelespecifica;

	open curUelEspecifica (pAnio);
	loop
		fetch curUelEspecifica into recUelEspecifica;			
		exit when not found;

		open curCuentaPresupuesto;
		loop
			fetch curCuentaPresupuesto into recCuentaPresupuesto;			
			exit when not found;					
			id := id+1;
			insert into partidauelespecifica 
				(id_partida_uel_especifica, id_uel_especifica,
				id_cuenta_presupuesto, id_fuente_financiamiento, anio)
				values(id, recUelEspecifica.id_uel_especifica,
				recCuentaPresupuesto.id_cuenta_presupuesto, 
				pIdFuenteFinanciamiento, pAnio);
		end loop;
		close curCuentaPresupuesto;
	end loop;
	close curUelEspecifica;
			
	return 0;
end;
$_$;


--
-- TOC entry 722 (class 1255 OID 3240746)
-- Name: generar_planillaarc(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_planillaarc(integer, character varying, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 
	pIdTipoPersonal alias for $1;
	pPeriodicidad alias for $2;	
	pAnio alias for $3;
	
	recDevengadoSemana record;
	curDevengadoSemana cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, (sum (hq.monto_asigna) - sum(hq.monto_deduce)) as devengado
		from historicoSemana hq, trabajador t, conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.gravable = 'S'
		group by t.id_trabajador;

	recDeduccionSemana record;
	curDeduccionSemana cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, sum(hq.monto_deduce) as deduccion, max(hq.unidades) as porcentaje
		from historicoSemana hq, trabajador t,  conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.cod_concepto = '9999'
		group by t.id_trabajador;

        recDevengadoQuincena record;
	curDevengadoQuincena cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, (sum (hq.monto_asigna) - sum(hq.monto_deduce)) as devengado
		from historicoquincena hq, trabajador t, conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.gravable = 'S'
		group by t.id_trabajador;

	recDeduccionQuincena record;
	curDeduccionQuincena cursor (pAnio int4, pMes int4, pIdTipoPersonal int4) 
		for select distinct t.id_trabajador, sum(hq.monto_deduce) as deduccion, max(hq.unidades) as porcentaje
		from historicoquincena hq, trabajador t,  conceptotipopersonal ctp, concepto c	
		where hq.anio = pAnio and hq.mes = pMes
		and hq.id_trabajador = t.id_trabajador
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal		
		and ctp.id_concepto = c.id_concepto
		and t.id_tipo_personal = pIdTipoPersonal
		and (t.estatus = 'A' or t.estatus = 'E')
		and c.cod_concepto = '9999'
		group by t.id_trabajador;


	
	recTrabajador record;
	curTrabajador cursor (pIdTrabajador int4, pAnio int4)
		for select count(*) as cantidad
		from planillaarc 
		where id_trabajador = pIdTrabajador and anio = pAnio;

	i int4 := 0;
	id int4 := 0;
begin
	perform delete_all_planillaarc(pIdTipoPersonal, pAnio);
        id := last_id_planillaarc()+1;
        if id is null then 
	   id := 1;
	end if;
	if pPeriodicidad <> 'S' then
		for i in 1..12 loop
			open curDevengadoQuincena(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDevengadoQuincena into recDevengadoQuincena;			
					exit when not found;					 
										
					open curTrabajador(recDevengadoQuincena.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						
						id := id +1;
						
						perform add_planillaarc(id, recDevengadoQuincena.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set devengado_enero = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set devengado_febrero = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set devengado_marzo = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set devengado_abril = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set devengado_mayo = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set devengado_junio = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set devengado_julio = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set devengado_agosto = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set devengado_septiembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set devengado_octubre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set devengado_noviembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set devengado_diciembre = recDevengadoQuincena.devengado 
							where id_trabajador = recDevengadoQuincena.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDevengadoQuincena;

			open curDeduccionQuincena(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDeduccionQuincena into recDeduccionQuincena;			
					exit when not found;					 
										
					open curTrabajador(recDeduccionQuincena.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						--raise notice 'i=%', i;
						id := last_id_planillaarc()+1;
						if id is null then 
							id := 1;
						end if;
						perform add_planillaarc(id, recDeduccionQuincena.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set retencion_enero = recDeduccionQuincena.deduccion, 
							    porcentaje_enero = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set retencion_febrero = recDeduccionQuincena.deduccion, 
							    porcentaje_febrero = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set retencion_marzo = recDeduccionQuincena.deduccion, 
							    porcentaje_marzo = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set retencion_abril = recDeduccionQuincena.deduccion, 
							    porcentaje_abril = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set retencion_mayo = recDeduccionQuincena.deduccion, 
							    porcentaje_mayo = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set retencion_junio = recDeduccionQuincena.deduccion, 
							    porcentaje_junio = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set retencion_julio = recDeduccionQuincena.deduccion, 
							    porcentaje_julio = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set retencion_agosto = recDeduccionQuincena.deduccion, 
							    porcentaje_agosto = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set retencion_septiembre = recDeduccionQuincena.deduccion, 
							    porcentaje_septiembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set retencion_octubre = recDeduccionQuincena.deduccion, 
							    porcentaje_octubre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set retencion_noviembre = recDeduccionQuincena.deduccion,
							    porcentaje_noviembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set retencion_diciembre = recDeduccionQuincena.deduccion, 
							    porcentaje_diciembre = recDeduccionQuincena.porcentaje 
							where id_trabajador = recDeduccionQuincena.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDeduccionQuincena;
			
		end loop;

	end if;


if pPeriodicidad = 'S' then
		for i in 1..12 loop
			open curDevengadosemana(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDevengadosemana into recDevengadosemana;			
					exit when not found;					 
										
					open curTrabajador(recDevengadosemana.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						
						id := id +1;
						
						perform add_planillaarc(id, recDevengadosemana.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set devengado_enero = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set devengado_febrero = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set devengado_marzo = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set devengado_abril = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set devengado_mayo = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set devengado_junio = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set devengado_julio = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set devengado_agosto = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set devengado_septiembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set devengado_octubre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set devengado_noviembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set devengado_diciembre = recDevengadosemana.devengado 
							where id_trabajador = recDevengadosemana.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDevengadosemana;

			open curDeduccionsemana(pAnio,i,pIdTipoPersonal);				
				loop
					fetch curDeduccionsemana into recDeduccionsemana;			
					exit when not found;					 
										
					open curTrabajador(recDeduccionsemana.id_trabajador, pAnio);
					fetch curTrabajador into recTrabajador;			
					if recTrabajador.cantidad = 0 then
						--raise notice 'i=%', i;
						id := last_id_planillaarc()+1;
						if id is null then 
							id := 1;
						end if;
						perform add_planillaarc(id, recDeduccionsemana.id_trabajador, pAnio);
					end if;
					close curTrabajador;
					if i = 1 then						
						update planillaarc 
							set retencion_enero = recDeduccionsemana.deduccion, 
							    porcentaje_enero = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 2 then						
						update planillaarc 
							set retencion_febrero = recDeduccionsemana.deduccion, 
							    porcentaje_febrero = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 3 then						
						update planillaarc 
							set retencion_marzo = recDeduccionsemana.deduccion, 
							    porcentaje_marzo = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 4 then						
						update planillaarc 
							set retencion_abril = recDeduccionsemana.deduccion, 
							    porcentaje_abril = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;	
					elsif i = 5 then						
						update planillaarc 
							set retencion_mayo = recDeduccionsemana.deduccion, 
							    porcentaje_mayo = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 6 then						
						update planillaarc 
							set retencion_junio = recDeduccionsemana.deduccion, 
							    porcentaje_junio = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 7 then						
						update planillaarc 
							set retencion_julio = recDeduccionsemana.deduccion, 
							    porcentaje_julio = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;					
					elsif i = 8 then						
						update planillaarc 
							set retencion_agosto = recDeduccionsemana.deduccion, 
							    porcentaje_agosto = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 9 then						
						update planillaarc 
							set retencion_septiembre = recDeduccionsemana.deduccion, 
							    porcentaje_septiembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 10 then						
						update planillaarc 
							set retencion_octubre = recDeduccionsemana.deduccion, 
							    porcentaje_octubre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					elsif i = 11 then						
						update planillaarc 
							set retencion_noviembre = recDeduccionsemana.deduccion,
							    porcentaje_noviembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;					
					elsif i = 12 then						
						update planillaarc 
							set retencion_diciembre = recDeduccionsemana.deduccion, 
							    porcentaje_diciembre = recDeduccionsemana.porcentaje 
							where id_trabajador = recDeduccionsemana.id_trabajador
							and anio = pAnio;
					end if;
				end loop;
			close curDeduccionsemana;
			
		end loop;

	end if;









	return i;

end;
$_$;


--
-- TOC entry 723 (class 1255 OID 3240748)
-- Name: generar_poliza_beneficiario(integer, integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_poliza_beneficiario(integer, integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;
	pFechaInclusion alias for $3;
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4) 
		for select distinct p.id_personal as id_personal, t.id_cargo
		from personal p, trabajador t
		where p.id_personal = t.id_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A';

	recFamiliares record;
	curFamiliares cursor (pIdPersonal int4, pParentesco varchar, pFechaDesde date, pFechaHasta date, pIdPlanPoliza int4) 
		for select distinct f.id_familiar as id_familiar, f.sexo as sexo
		from familiar f
		where f.id_personal = pIdPersonal		
		and f.fecha_nacimiento between pFechaDesde and pFechaHasta
		and f.parentesco = pParentesco
		and id_familiar not in 
		(select id_familiar from beneficiario
		where id_plan_poliza = pIdPlanPoliza)
		and id_familiar not in 
			(select id_familiar from excepcionbeneficiario 
			where id_plan_poliza = pIdPlanPoliza);

	recPrimasPlan record;
	curPrimasPlan cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan, pr.id_plan_poliza, 
		pr.cobertura_parentesco, pr.porcentaje_trabajador, 
		pr.porcentaje_trabajador, pr.porcentaje_patron, 
		pr.prima_femenino, pr.prima_masculino,
		pr.edad_minima, pr.edad_maxima, pr.parentesco
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza and pr.parentesco <> 'T';

	recPrimasCargo record;
	curPrimasCargo cursor (pIdPrimasPlan int4, pIdCargo int4 )
		for select  pr.porcentaje_patron, pr.porcentaje_trabajador		
		from primascargo pr
		where pr.id_primas_plan = pIdPrimasPlan and pr.id_cargo = pIdCargo;
	
	id int4 := 0;
	montoPrima float8 := 0;
	montoPatron float8 := 0;
	montoTrabajador float8 := 0;
	fechaDesde date;
	fechaHasta date;
	porcentajePatron float8 = 0;
	porcentajeTrabajador float8 = 0;
begin
	
	id := last_id_beneficiario();	
	
	open curTrabajadores(pIdTipoPersonal);
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;
		open curPrimasPlan(pIdPlanPoliza);			
		loop
			fetch curPrimasPlan into recPrimasPlan;			
			exit when not found;
			porcentajePatron = recPrimasPlan.porcentaje_patron;
			porcentajeTrabajador = recPrimasPlan.porcentaje_trabajador;

			open curPrimasCargo(recPrimasPlan.id_primas_plan, recTrabajadores.id_cargo);
			fetch curPrimasCargo into recPrimasCargo;			
			if recPrimasCargo.porcentaje_patron is not null then
				porcentajePatron = recPrimasCargo.porcentaje_patron;
				porcentajeTrabajador = recPrimasCargo.porcentaje_trabajador;
			end if;
			close curPrimasCargo;
			fechaDesde = add_years(pFechaInclusion, -recPrimasPlan.edad_maxima);
			fechaHasta = add_years(pFechaInclusion, -recPrimasPlan.edad_minima);

			open curFamiliares(recTrabajadores.id_personal, recPrimasPlan.parentesco, fechaDesde, fechaHasta, pIdPlanPoliza);
			loop
				fetch curFamiliares into recFamiliares;			
				exit when not found;
				id := id + 1;
		
				if recFamiliares.sexo = 'F'	then
					montoPrima := recPrimasPlan.prima_femenino;
				else
					montoPrima := recPrimasPlan.prima_masculino;
				end if;
		
				montoPatron := (montoPrima * porcentajePatron) / 100;
				montoTrabajador := (montoPrima * porcentajeTrabajador) / 100;
		
				insert into beneficiario(id_beneficiario, id_personal, id_familiar, id_tipo_personal, 
					id_plan_poliza, id_primas_plan, monto_prima, monto_patron,
					monto_trabajador, cobertura, cobertura_extra, prima_extra,
					fecha_inclusion, fecha_exclusion, estatus) values(id,
					recTrabajadores.id_personal, recFamiliares.id_familiar, pIdTipoPersonal,
					recPrimasPlan.id_plan_poliza, recPrimasPlan.id_primas_plan,
					convert_2_decimal(montoPrima), convert_2_decimal(montoPatron), 
					convert_2_decimal(montoTrabajador), recPrimasPlan.cobertura_parentesco,
					0, 0, pFechaInclusion, null, 'A');
			end loop;
			close curFamiliares;
		end loop;
		close curPrimasPlan;
	end loop;
	close curTrabajadores;
	
	
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 724 (class 1255 OID 3240749)
-- Name: generar_poliza_titular(integer, integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_poliza_titular(integer, integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;
	pFechaInclusion alias for $3;
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4, pFechaDesde date, pFechaHasta date, pIdPlanPoliza int4) 
		for select distinct p.id_personal as id_personal, max(p.sexo) as sexo, max(t.id_cargo) as id_cargo
		from personal p, trabajador t
		where p.id_personal = t.id_personal
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and p.fecha_nacimiento between pFechaDesde and pFechaHasta
		and p.id_personal not in 
		(select id_personal from titular
		where id_plan_poliza = pIdPlanPoliza)
		and p.id_personal not in 
			(select id_personal from excepciontitular 
			where id_plan_poliza = pIdPlanPoliza)
		group by p.id_personal;

	recPrimasPlan record;
	curPrimasPlan cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan, pr.id_plan_poliza, 
		pr.cobertura_parentesco, pr.porcentaje_trabajador, 
		pr.porcentaje_trabajador, pr.porcentaje_patron, 
		pr.prima_femenino, pr.prima_masculino,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza and pr.parentesco = 'T';
	
	recPrimasCargo record;
	curPrimasCargo cursor (pIdPrimasPlan int4, pIdCargo int4 )
		for select  pr.porcentaje_patron, pr.porcentaje_trabajador		
		from primascargo pr
		where pr.id_primas_plan = pIdPrimasPlan and pr.id_cargo = pIdCargo;
	
	id int4 := 0;
	montoPrima float8 := 0;
	montoPatron float8 := 0;
	montoTrabajador float8 := 0;
	fechaDesde date;
	fechaHasta date;
	porcentajePatron float8 = 0;
	porcentajeTrabajador float8 = 0;

begin	
	id := last_id_titular();	
	open curPrimasPlan(pIdPlanPoliza);	
	fetch curPrimasPlan into recPrimasPlan;			
	if recPrimasPlan.id_primas_plan is null then
		return 10;
	end if;

	fechaDesde = add_years(pFechaInclusion, -recPrimasPlan.edad_maxima);
	fechaHasta = add_years(pFechaInclusion, -recPrimasPlan.edad_minima);

	open curTrabajadores(pIdTipoPersonal, fechaDesde, fechaHasta, pIdPlanPoliza);
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;
		porcentajePatron = recPrimasPlan.porcentaje_patron;
		porcentajeTrabajador = recPrimasPlan.porcentaje_trabajador;

		open curPrimasCargo(recPrimasPlan.id_primas_plan, recTrabajadores.id_cargo);
		fetch curPrimasCargo into recPrimasCargo;			
		if recPrimasCargo.porcentaje_patron is not null then
			porcentajePatron = recPrimasCargo.porcentaje_patron;
			porcentajeTrabajador = recPrimasCargo.porcentaje_trabajador;
		end if;
		close curPrimasCargo;

		id := id + 1;

		if recTrabajadores.sexo = 'F'	then
			montoPrima := recPrimasPlan.prima_femenino;
		else
			montoPrima := recPrimasPlan.prima_masculino;
		end if;

		montoPatron := (montoPrima * porcentajePatron) / 100;
		montoTrabajador := (montoPrima * porcentajeTrabajador) / 100;

		insert into titular(id_titular, id_personal, id_tipo_personal, 
			id_plan_poliza, id_primas_plan, monto_prima, monto_patron,
			monto_trabajador, cobertura, cobertura_extra, prima_extra,
			fecha_inclusion, fecha_exclusion, estatus) values(id,
			recTrabajadores.id_personal, pIdTipoPersonal,
			recPrimasPlan.id_plan_poliza, recPrimasPlan.id_primas_plan,
			convert_2_decimal(montoPrima), convert_2_decimal(montoPatron), 
			convert_2_decimal(montoTrabajador), recPrimasPlan.cobertura_parentesco,
			0, 0, pFechaInclusion, null, 'A');
		
	end loop;
	close curTrabajadores;
		
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 725 (class 1255 OID 3240750)
-- Name: generar_prestamos_desde_poliza(integer, integer, character varying, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_prestamos_desde_poliza(integer, integer, character varying, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;	
	pTipo alias for $3;
	pIdConceptoTipoPersonal alias for $4;
        pIdFrecuenciaTipoPersonal alias for $5;
	pNumeroCuotas alias for $6;
	
	recRegistro record;

	curTitular cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select  sum(ti.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from titular ti, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and ti.id_personal = t.id_personal
		and ti.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador;

	curBeneficiario cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select  sum(be.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from beneficiario be, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and be.id_personal = t.id_personal
		and be.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador;	
	
	curBeneficiarioTitular cursor (pIdPlanPoliza int4, pIdTipoPersonal int4)
		for select sum(monto) as monto, id_trabajador from (
		select  sum(be.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from beneficiario be, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and be.id_personal = t.id_personal
		and be.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador
		union
		select  sum(ti.monto_trabajador) as monto,
		t.id_trabajador as id_trabajador
		from titular ti, trabajador t, primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and ti.id_personal = t.id_personal
		and ti.id_primas_plan = pr.id_primas_plan
		and t.id_tipo_personal = pIdTipoPersonal		
		group by t.id_trabajador) as total group by id_trabajador;

	montoCuota float8;
	id int4;
begin
	id := last_id_prestamo();

	if pTipo = 'T' then
		open curTitular(pIdPlanPoliza, pIdTipoPersonal);			
		loop
			
			fetch curTitular into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	end if;
	if pTipo = 'B' then
		open curBeneficiario(pIdPlanPoliza, pIdTipoPersonal);			
		loop			
			fetch curBeneficiario into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	
	end if;

	if pTipo = 'A' then
		open curBeneficiarioTitular(pIdPlanPoliza, pIdTipoPersonal);			
		loop			
			fetch curBeneficiarioTitular into recRegistro;	
			
			exit when not found;			
			id := id + 1 ;
			montoCuota = convert_2_decimal(recRegistro.monto/pNumeroCuotas);
			insert into prestamo (id_prestamo, id_trabajador, id_concepto_tipo_personal,
				id_frecuencia_tipo_personal, monto_prestamo, monto_cuota, monto_pagado,
				numero_cuotas, cuotas_pagadas, fecha_otorgo, fecha_comienzo_pago,
				fecha_registro, documento_soporte, estatus) values(
				id, recRegistro.id_trabajador, pIdConceptoTipoPersonal, 
				pIdFrecuenciaTipoPersonal, recRegistro.monto, montoCuota, 0, 
				pNumeroCuotas, 0, current_date, current_date, current_date, null, 'A');
		end loop;
	end if;
	return 0;

end;

$_$;


--
-- TOC entry 726 (class 1255 OID 3240751)
-- Name: generar_rendicionmensual(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_rendicionmensual(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;	
	pQuincena alias for $8;	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pQuincena int4) 
		for select hq.monto_asigna as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and hq.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto				
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina
		and hq.semana_quincena = pQuincena;
	id int4 := 0;
begin
	-- VERSION 06-02-2006

	delete from rendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_rendicion_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pQuincena);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		raise notice 'v2';
		--- PRIMERA QUINCENA (1)
		--raise notice 'pasa ';
		
		perform actualizar_rendicionmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			pQuincena,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 731 (class 1255 OID 3240752)
-- Name: generar_rendicionmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_rendicionmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;
	pIdConceptoAporte alias for $8;
	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pIdConceptoAporte int4) 
		for select hq.monto_aporte as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_aporte = c.id_concepto
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_concepto_tipo_personal = pIdConceptoAporte
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina;
	id int4 := 0;
begin
	-- VERSION 06-02-2006 - 1

	delete from rendicionmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_rendicion_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pIdConceptoAporte);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		
		
		perform actualizar_rendicionmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			2,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 732 (class 1255 OID 3240753)
-- Name: generar_resumenmensual(integer, integer, integer, integer, integer, boolean, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_resumenmensual(integer, integer, integer, integer, integer, boolean, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;


	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, 
pNumeroNomina int4, pIdUnidadAdministradora int4)
		for select cr.monto, ctp.id_concepto_tipo_personal,
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion
		from conceptoresumen cr, frecuenciatipopersonal ftp, frecuenciapago 
fp,
		conceptotipopersonal ctp, concepto c, trabajador t,
		conceptocuenta cc, cuentapresupuesto cp
		where cr.id_unidad_administradora = pIdUnidadAdministradora
		and cr.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and cr.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto
		and t.id_trabajador = cr.id_trabajador
		and cr.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto
		and cr.anio = pAnio and cr.mes = pMes
		and numero_nomina = pNumeroNomina
		and cr.id_unidad_administradora = pIdUnidadAdministradora
		and t.id_trabajador in
		(select id_trabajador from trabajador where id_tipo_personal = 
pIdtipoPersonal);
	id int4 := 0;
begin
	-- VERSION 06-02-2006

	--delete from encabezadoresumenmensual
	--	where id_unidad_administradora = pIdUnidadAdministradora
	--	and anio = pAnio and mes = pMes and numero_nomina = pNumeroNomina;

	delete from resumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora
		and id_encabezado_resumen_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	--id := last_id_resumenmensual()+1;
	--if id is null then
	--	id := 1;
	--end if;

	--insert into encabezadoresumenmensual
	--	(id_encabezado_resumen_mensual,anio,mes,id_unidad_administradora,
	--	numero_nomina,cod_unidad_administ,cerrado,usuario) values(
	--	id, pAnio, pMes,pIdUnidadAdministradora,
	--	pNumeroNomina,pCodUnidadAdminist,'N',pUsuario);

	raise notice 'v100';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, 
pIdUnidadAdministradora);

	loop
		fetch curConceptos into recConceptos;
		exit when not found;

		--- PRIMERA QUINCENA (1)
		raise notice 'inicia ';
		if recConceptos.cod_frecuencia_pago = 1 then
			raise notice 'primera_quincena ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				1,
				recConceptos.distribucion, pAnio);
		--- SEGUNDA QUINCENA (2)
		elsif recConceptos.cod_frecuencia_pago = 2 then
			raise notice 'segunda_quincena ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				2,
				recConceptos.distribucion, pAnio);
		--- AMBAS QUINCENAS (3)

		elsif recConceptos.cod_frecuencia_pago = 3 then
			raise notice 'ambas_quincenas ';
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				3,
				recConceptos.distribucion, pAnio);

		--- SEMANAL (4)
		elsif recConceptos.cod_frecuencia_pago = 4 then
			if pTieneSemana5 = true then
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto*3,
					1,
					recConceptos.distribucion, pAnio);
			else
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto*2,
					1,
					recConceptos.distribucion, pAnio);
			end if;

			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				2,
				recConceptos.distribucion, pAnio);
		--- PRIMERA Y SEGUNDA SEMANA (5,6)
		elsif recConceptos.cod_frecuencia_pago = 5 or 
recConceptos.cod_frecuencia_pago = 6 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				1,
				recConceptos.distribucion, pAnio);
		--- SEMANAL (7)
		elsif recConceptos.cod_frecuencia_pago = 7 then
			if pTieneSemana5 = true then
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto,
					1,
					recConceptos.distribucion, pAnio);
			else
				perform actualizar_resumenmensual(
					pIdEncabezado,
					pIdUnidadAdministradora,
					recConceptos.id_trabajador,
					recConceptos.id_concepto_tipo_personal,
					recConceptos.id_cuenta_presupuesto,
					recConceptos.cod_concepto,
					recConceptos.cod_presupuesto,
					recConceptos.monto,
					2,
					recConceptos.distribucion, pAnio);
			end if;
		--- SEMANAL (8,9)
		elsif recConceptos.cod_frecuencia_pago = 8 or 
recConceptos.cod_frecuencia_pago = 9 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto,
				2,
				recConceptos.distribucion, pAnio);
		--- SEMANAL (10)
		elsif recConceptos.cod_frecuencia_pago = 10 then
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				1,
				recConceptos.distribucion, pAnio);
			perform actualizar_resumenmensual(
				pIdEncabezado,
				pIdUnidadAdministradora,
				recConceptos.id_trabajador,
				recConceptos.id_concepto_tipo_personal,
				recConceptos.id_cuenta_presupuesto,
				recConceptos.cod_concepto,
				recConceptos.cod_presupuesto,
				recConceptos.monto*2,
				2,
				recConceptos.distribucion, pAnio);
		end if;

	end loop;
	close curConceptos;




	return 0;

end;

$_$;


--
-- TOC entry 733 (class 1255 OID 3240754)
-- Name: generar_resumenmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_resumenmensual_aportes(integer, integer, integer, integer, integer, boolean, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdEncabezado alias for $1;
	pIdTipoPersonal alias for $2;
	pNumeroNomina alias for $3;
	pAnio alias for $4;
	pMes alias for $5;
	pTieneSemana5 alias for $6;
	pIdUnidadAdministradora alias for $7;
	pIdConceptoAporte alias for $8;
	
	
	recConceptos record;
	curConceptos cursor (piTipoPersonal int4, pAnio int4, pMes int4, pNumeroNomina int4, pIdUnidadAdministradora int4, pIdConceptoAporte int4) 
		for select hq.monto_aporte as monto, ctp.id_concepto_tipo_personal, 
		t.id_trabajador, fp.cod_frecuencia_pago, c.cod_concepto	,	
		cp.id_cuenta_presupuesto, cp.cod_presupuesto, ctp.distribucion		
		from historicoquincena hq, historiconomina hn, frecuenciatipopersonal ftp, frecuenciapago fp, 
		conceptotipopersonal ctp, concepto c, trabajador t, 
		conceptocuenta cc, cuentapresupuesto cp
		where 
		hn.id_unidad_administradora = pIdUnidadAdministradora
		and hq.id_historico_nomina = hn.id_historico_nomina
		and hq.anio = pAnio and hq.mes = pMes
		and hq.id_concepto_aporte = c.id_concepto
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago		
		and ctp.id_concepto = c.id_concepto
		and ctp.id_tipo_personal = pIdTipoPersonal
		and ctp.id_concepto_tipo_personal = pIdConceptoAporte
		and t.id_trabajador = hq.id_trabajador		
		and ctp.id_concepto_tipo_personal = cc.id_concepto_tipo_personal
		and cc.id_cuenta_presupuesto = cp.id_cuenta_presupuesto		
		and hq.id_tipo_personal = pIdTipoPersonal
		and hq.numero_nomina = pNumeroNomina;
	id int4 := 0;
begin
	-- VERSION 06-02-2006 - 1

	delete from resumenmensual
		where id_unidad_administradora = pIdUnidadAdministradora 
		and id_encabezado_resumen_mensual = pIdEncabezado
		and id_concepto_tipo_personal in(select id_concepto_tipo_personal 
		from conceptotipopersonal where id_tipo_personal = pIdTipoPersonal);
	
	raise notice 'v1';
	open curConceptos (pIdTipoPersonal, pAnio, pMes, pNumeroNomina, pIdUnidadAdministradora, pIdConceptoAporte);

	loop
		fetch curConceptos into recConceptos;			
		exit when not found;
		
		raise notice 'pasa 1';
		perform actualizar_resumenmensual(
			pIdEncabezado,
			pIdUnidadAdministradora,
			recConceptos.id_trabajador,
			recConceptos.id_concepto_tipo_personal,
			recConceptos.id_cuenta_presupuesto,
			recConceptos.cod_concepto,
			recConceptos.cod_presupuesto,	
			recConceptos.monto,
			2,				
			recConceptos.distribucion, pAnio);
		
		
	end loop;
	close curConceptos;
	
	
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 734 (class 1255 OID 3240755)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, double precision) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pAnio alias for $3;
	pPorcentaje alias for $4;

	
	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;
	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4) 
		for select id_registro_cargos 
		from registrocargos rc, dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	delete from trabajadorespecifica where anio = pAnio and id_uel_especifica = pIdUelEspecifica ;
	

	delete from cargoespecifica where anio = pAnio and id_uel_especifica = pIdUelEspecifica ;
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	open curTrabajadores(pIdUnidadEjecutora);				
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
		if sobregirado = false then						
			insert into trabajadorespecifica (id_trabajador_especifica, 
			id_uel_especifica, id_trabajador, anio, porcentaje) values
			(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idTrabajadorEspecifica := idTrabajadorEspecifica +1;
	end loop;

	open curRegistroCargos(pIdUnidadEjecutora);				
	loop
		fetch curRegistroCargos into recRegistroCargos;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
		if sobregirado = false then						
			insert into cargoespecifica (id_cargo_especifica, 
			id_uel_especifica, id_registro_cargos, anio, porcentaje) values
			(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idCargoEspecifica := idCargoEspecifica +1;
	end loop;


	
	return 1;
end;

$_$;


--
-- TOC entry 735 (class 1255 OID 3240756)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPorcentaje alias for $5;

	
	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;
	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_registro_cargos 
		from registrocargos rc, registro r, registropersonal rp, 
		dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	delete from trabajadorespecifica where anio = pAnio 
		and id_uel_especifica = pIdUelEspecifica 
		and id_trabajador in 
		(select id_trabajador from trabajador  
		where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
	

	delete from cargoespecifica where anio = pAnio 
		and id_uel_especifica = pIdUelEspecifica 
		and id_registro_cargos in 
		(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
		where rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal);
	
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	open curTrabajadores(pIdUnidadEjecutora, pIdTipoPersonal);				
	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
		if sobregirado = false then						
			insert into trabajadorespecifica (id_trabajador_especifica, 
			id_uel_especifica, id_trabajador, anio, porcentaje) values
			(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idTrabajadorEspecifica := idTrabajadorEspecifica +1;
	end loop;

	open curRegistroCargos(pIdUnidadEjecutora, pIdTipoPersonal);				
	loop
		fetch curRegistroCargos into recRegistroCargos;			
		exit when not found;

		sobregirado := false;
		sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
		if sobregirado = false then						
			insert into cargoespecifica (id_cargo_especifica, 
			id_uel_especifica, id_registro_cargos, anio, porcentaje) values
			(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
			pAnio, pPorcentaje);
		else
		
		end if;
		idCargoEspecifica := idCargoEspecifica +1;
	end loop;

	delete from identity;
	return 1;
end;

$_$;


--
-- TOC entry 736 (class 1255 OID 3240757)
-- Name: generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION generar_trabajadorcargoespecifica(integer, integer, integer, integer, double precision, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdUnidadEjecutora alias for $1;
	pIdUelEspecifica alias for $2;
	pIdTipoPersonal alias for $3;
	pAnio alias for $4;
	pPorcentaje alias for $5;
	pIdOrganismo alias for $6;

	recUnidadEjecutora record;
	curUnidadEjecutora cursor(pIdOrganismo int4)
		for select distinct au.id_unidad_ejecutora 
		from unidadadministradora ua, administradorauel au
		where ua.id_unidad_administradora = au.id_unidad_administradora
		and ua.id_organismo = pIdOrganismo;		

	recUelEspecifica record;
	curUelEspecifica cursor(pIdUnidadEjecutora int4, pAnio int4)
		for select id_uel_especifica
		from uelespecifica
		where id_unidad_ejecutora = pIdUnidadEjecutora
		and anio = pAnio;
	

	recTrabajadores record;
	curTrabajadores cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_trabajador 
		from trabajador t, dependencia d, administradorauel au
		where t.id_dependencia = d.id_dependencia
		and d.id_administradora_uel = au.id_administradora_uel
		and t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A'
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;

	
	recRegistroCargos record;
	curRegistroCargos cursor (pIdUnidadEjecutora int4, pIdTipoPersonal int4) 
		for select id_registro_cargos 
		from registrocargos rc, registro r, registropersonal rp, 
		dependencia d, administradorauel au
		where rc.id_dependencia = d.id_dependencia
		and rc.id_registro = r.id_registro
		and r.id_registro = rp.id_registro
		and rp.id_tipo_personal = pIdTipoPersonal
		and d.id_administradora_uel = au.id_administradora_uel
		and au.id_unidad_ejecutora = pIdUnidadEjecutora;


	sobregirado boolean := false;
	idTrabajadorEspecifica int4 := 0;
	idCargoEspecifica int4 := 0;
begin
	if pIdUnidadEjecutora <> 0 then
		delete from trabajadorespecifica where anio = pAnio 
			and id_uel_especifica = pIdUelEspecifica 
			and id_trabajador in 
			(select id_trabajador from trabajador  
			where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
		
	
		delete from cargoespecifica where anio = pAnio 
			and id_uel_especifica = pIdUelEspecifica 
			and id_registro_cargos in 
			(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
			where rc.id_registro = r.id_registro
			and r.id_registro = rp.id_registro
			and rp.id_tipo_personal = pIdTipoPersonal);
	else
		delete from trabajadorespecifica where anio = pAnio 
			and id_trabajador in 
			(select id_trabajador from trabajador  
			where estatus = 'A' and id_tipo_personal = pIdTipoPersonal);
		
	
		delete from cargoespecifica where anio = pAnio 
			and id_registro_cargos in 
			(select rc.id_registro_cargos from registrocargos rc, registro r, registropersonal rp 
			where rc.id_registro = r.id_registro
			and r.id_registro = rp.id_registro
			and rp.id_tipo_personal = pIdTipoPersonal);
	end if;
	

	idTrabajadorEspecifica := last_id_trabajadorespecifica()+1;
	if idTrabajadorEspecifica is null then
		idTrabajadorEspecifica := 1;

	end if;

	idCargoEspecifica := last_id_cargoespecifica()+1;
	if idCargoEspecifica is null then
		idCargoEspecifica := 1;

	end if;

	if pIdUnidadEjecutora = 0 then
		open curUnidadEjecutora(pIdOrganismo);
		loop
			fetch curUnidadEjecutora into recUnidadEjecutora;	
			exit when not found;

			open curUelEspecifica(recUnidadEjecutora.id_unidad_ejecutora, pAnio);
			loop
				fetch curUelEspecifica into recUelEspecifica;
				exit when not found;

					----------------ASIGNACION A TRABAJADORES
					open curTrabajadores(recUnidadEjecutora.id_unidad_ejecutora, pIdTipoPersonal);
					loop		
						fetch curTrabajadores into recTrabajadores;			
						
						exit when not found;
				
						sobregirado := false;
						sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
						if sobregirado = false then						
							insert into trabajadorespecifica (id_trabajador_especifica, 
							id_uel_especifica, id_trabajador, anio, porcentaje) values
							(idTrabajadorEspecifica, recUelEspecifica.id_uel_especifica, 
							recTrabajadores.id_trabajador, pAnio, pPorcentaje);
						else
						
						end if;
						idTrabajadorEspecifica := idTrabajadorEspecifica +1;
					end loop;	
					close curTrabajadores;
					
		
					----------------ASIGNACION A REGISTRO_CARGOS
					open curRegistroCargos(recUnidadEjecutora.id_unidad_ejecutora, pIdTipoPersonal);	
					loop
						
						fetch curRegistroCargos into recRegistroCargos;			
						
						exit when not found;
				
						sobregirado := false;
						sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
						if sobregirado = false then						
							insert into cargoespecifica (id_cargo_especifica, 
							id_uel_especifica, id_registro_cargos, anio, porcentaje) values
							(idCargoEspecifica, recUelEspecifica.id_uel_especifica, 
							recRegistroCargos.id_registro_cargos, pAnio, pPorcentaje);
						else
						
						end if;
						idCargoEspecifica := idCargoEspecifica +1;
					end loop;	
					close curRegistroCargos;	
				
			end loop;
			close curUelEspecifica;
		end loop;
		close curUnidadEjecutora;

	else
		----------------ASIGNACION A TRABAJADORES
		open curTrabajadores(pIdUnidadEjecutora, pIdTipoPersonal);
		loop		
			fetch curTrabajadores into recTrabajadores;			
			
			exit when not found;
	
			sobregirado := false;
			sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'T');
			if sobregirado = false then						
				insert into trabajadorespecifica (id_trabajador_especifica, 
				id_uel_especifica, id_trabajador, anio, porcentaje) values
				(idTrabajadorEspecifica, pIdUelEspecifica, recTrabajadores.id_trabajador, 
				pAnio, pPorcentaje);
			else
			
			end if;
			idTrabajadorEspecifica := idTrabajadorEspecifica +1;
		end loop;	
		close curTrabajadores;		
	

		----------------ASIGNACION A REGISTRO_CARGOS	
		open curRegistroCargos(pIdUnidadEjecutora, pIdTipoPersonal);	
		loop
			
			fetch curRegistroCargos into recRegistroCargos;			
			
			exit when not found;
	
			sobregirado := false;
			sobregirado := verificar_sobregirado_trabajadorcargoespecifica(recTrabajadores.id_trabajador, pAnio, pPorcentaje, 'R');
			if sobregirado = false then						
				insert into cargoespecifica (id_cargo_especifica, 
				id_uel_especifica, id_registro_cargos, anio, porcentaje) values
				(idCargoEspecifica, pIdUelEspecifica, recRegistroCargos.id_registro_cargos, 
				pAnio, pPorcentaje);
			else
			
			end if;
			idCargoEspecifica := idCargoEspecifica +1;
		end loop;	
		close curRegistroCargos;	
	end if;


	delete from identity;
	return 1;
end;

$_$;


--
-- TOC entry 698 (class 1255 OID 3240758)
-- Name: last_id_aplicartabulador(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_aplicartabulador() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_aplicar_tabulador)
	from aplicartabulador
	
	
$$;


--
-- TOC entry 699 (class 1255 OID 3240759)
-- Name: last_id_aumentoevaluacion(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_aumentoevaluacion() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_aumento_evaluacion)
	from aumentoevaluacion
	
	
$$;


--
-- TOC entry 711 (class 1255 OID 3240760)
-- Name: last_id_beneficiario(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_beneficiario() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_beneficiario) from beneficiario);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 712 (class 1255 OID 3240761)
-- Name: last_id_calculobonofinanio(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_calculobonofinanio() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_calculo_bono_fin_anio)
	from calculobonofinanio
	
	
$$;


--
-- TOC entry 713 (class 1255 OID 3240762)
-- Name: last_id_calculoticket(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_calculoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_calculo_ticket)
	from calculoticket
	
	
$$;


--
-- TOC entry 727 (class 1255 OID 3240763)
-- Name: last_id_cargoespecifica(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_cargoespecifica() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_cargo_especifica)
	from cargoespecifica
	
	
$$;


--
-- TOC entry 728 (class 1255 OID 3240764)
-- Name: last_id_conceptofijo(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_conceptofijo() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_fijo)
	from conceptofijo
	
	
$$;


--
-- TOC entry 729 (class 1255 OID 3240765)
-- Name: last_id_conceptomovimiento(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_conceptomovimiento() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_movimiento)
	from conceptomovimiento
	
	
$$;


--
-- TOC entry 730 (class 1255 OID 3240766)
-- Name: last_id_conceptoresumen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_conceptoresumen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_resumen)
	from conceptoresumen
	
	
$$;


--
-- TOC entry 737 (class 1255 OID 3240767)
-- Name: last_id_conceptovariable(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_conceptovariable() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_concepto_variable)
	from conceptovariable
	
	
$$;


--
-- TOC entry 738 (class 1255 OID 3240768)
-- Name: last_id_cuadroonapre(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_cuadroonapre() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_cuadro_onapre) from cuadroonapre);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 739 (class 1255 OID 3240769)
-- Name: last_id_descuentoticket(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_descuentoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_descuento_ticket)
	from descuentoticket
	
	
$$;


--
-- TOC entry 740 (class 1255 OID 3240770)
-- Name: last_id_dotacionentregada(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_dotacionentregada() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_dotacion_entregada)
		from dotacionentregada);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
	
$$;


--
-- TOC entry 741 (class 1255 OID 3240771)
-- Name: last_id_dotaciontrabajador(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_dotaciontrabajador() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_dotacion_trabajador)
		from dotaciontrabajador);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
	
$$;


--
-- TOC entry 742 (class 1255 OID 3240772)
-- Name: last_id_encabezadorendicionmensual(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_encabezadorendicionmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_encabezado_rendicion_mensual)
	from encabezadorendicionmensual
	
	
$$;


--
-- TOC entry 743 (class 1255 OID 3240773)
-- Name: last_id_encabezadoresumenmensual(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_encabezadoresumenmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_encabezado_resumen_mensual)
	from encabezadoresumenmensual
	
	
$$;


--
-- TOC entry 744 (class 1255 OID 3240774)
-- Name: last_id_historiconomina(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_historiconomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_nomina)
	from historiconomina
	
	
	
$$;


--
-- TOC entry 745 (class 1255 OID 3240775)
-- Name: last_id_historicoquincena(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_historicoquincena() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_quincena)
	from historicoquincena
	
	
	
$$;


--
-- TOC entry 746 (class 1255 OID 3240776)
-- Name: last_id_historicosemana(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_historicosemana() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_semana)
	from historicosemana
	
	
	
$$;


--
-- TOC entry 747 (class 1255 OID 3240777)
-- Name: last_id_historicoticket(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_historicoticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_historico_ticket)
	from historicoticket
	
	
$$;


--
-- TOC entry 748 (class 1255 OID 3240778)
-- Name: last_id_interesadicional(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_interesadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_adicional)
	from interesadicional
$$;


--
-- TOC entry 749 (class 1255 OID 3240779)
-- Name: last_id_interesnuevoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_interesnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_nuevo_regimen)
	from interesnuevoregimen
$$;


--
-- TOC entry 750 (class 1255 OID 3240780)
-- Name: last_id_interesviejoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_interesviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_interes_viejo_regimen)
	from interesviejoregimen
	
	
	
$$;


--
-- TOC entry 751 (class 1255 OID 3240781)
-- Name: last_id_juguete(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_juguete() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_juguete) from juguete);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 752 (class 1255 OID 3240782)
-- Name: last_id_liquidacioninteresadicional(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacioninteresadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_adicional)
	from liquidacioninteresadicional
	
	
	
$$;


--
-- TOC entry 753 (class 1255 OID 3240783)
-- Name: last_id_liquidacioninteresnuevoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacioninteresnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_nuevo_regimen)
	from liquidacioninteresnuevoregimen
	
	
	
$$;


--
-- TOC entry 754 (class 1255 OID 3240784)
-- Name: last_id_liquidacioninteresviejoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacioninteresviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_interes_viejo_regimen)
	from liquidacioninteresviejoregimen
	
	
	
$$;


--
-- TOC entry 755 (class 1255 OID 3240785)
-- Name: last_id_liquidacionprestacionesmensuales(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacionprestacionesmensuales() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_prestaciones_mensuales)
	from liquidacionprestacionesmensuales
	
	
$$;


--
-- TOC entry 756 (class 1255 OID 3240786)
-- Name: last_id_liquidacionresumennuevoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacionresumennuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_resumen_nuevo_regimen)
	from liquidacionresumennuevoregimen
	
	
	
$$;


--
-- TOC entry 757 (class 1255 OID 3240787)
-- Name: last_id_liquidacionresumenviejoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_liquidacionresumenviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_liquidacion_resumen_viejo_regimen)
	from liquidacionresumenviejoregimen
	

	
$$;


--
-- TOC entry 758 (class 1255 OID 3240788)
-- Name: last_id_pagoguarderia(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_pagoguarderia() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_pago_guarderia) from pagoguarderia);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 759 (class 1255 OID 3240789)
-- Name: last_id_planillaarc(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_planillaarc() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_planilla_arc)
	from planillaarc
	
	
$$;


--
-- TOC entry 760 (class 1255 OID 3240790)
-- Name: last_id_prestacionesmensuales(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_prestacionesmensuales() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_prestaciones_mensuales)
	from prestacionesmensuales
	
	
$$;


--
-- TOC entry 761 (class 1255 OID 3240791)
-- Name: last_id_rendicionmensual(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_rendicionmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_rendicion_mensual)
	from rendicionmensual
	
	
$$;


--
-- TOC entry 762 (class 1255 OID 3240792)
-- Name: last_id_resumenmensual(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_resumenmensual() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_mensual)
	from resumenmensual
	
	
$$;


--
-- TOC entry 763 (class 1255 OID 3240793)
-- Name: last_id_resumennuevoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_resumennuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_nuevo_regimen)
	from resumennuevoregimen
	
	
	
$$;


--
-- TOC entry 764 (class 1255 OID 3240794)
-- Name: last_id_resumenviejoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_resumenviejoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_resumen_viejo_regimen)
	from resumenviejoregimen
	
	
	
$$;


--
-- TOC entry 765 (class 1255 OID 3240795)
-- Name: last_id_seguridadespecial(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadespecial() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_especial)
	from seguridadespecial
	
	
	
$$;


--
-- TOC entry 766 (class 1255 OID 3240796)
-- Name: last_id_seguridadinteresadicional(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadinteresadicional() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_interes_adicional)
	from seguridadinteresadicional
	
	
$$;


--
-- TOC entry 767 (class 1255 OID 3240797)
-- Name: last_id_seguridadnuevoregimen(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadnuevoregimen() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_nuevo_regimen) from seguridadnuevoregimen
	
	
$$;


--
-- TOC entry 768 (class 1255 OID 3240798)
-- Name: last_id_seguridadordinaria(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadordinaria() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_ordinaria)
	from seguridadordinaria
	
	
$$;


--
-- TOC entry 769 (class 1255 OID 3240799)
-- Name: last_id_seguridadordinaria_reverso(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadordinaria_reverso(integer) RETURNS integer
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---obtener el id de seguridad la ultima nomina procesada
    ---
	select max(id_seguridad_ordinaria)
	from seguridadordinaria
           where id_grupo_nomina = $1;
	
	
$_$;


--
-- TOC entry 770 (class 1255 OID 3240800)
-- Name: last_id_seguridadticket(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_seguridadticket() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_seguridad_ticket)
	from seguridadticket


$$;


--
-- TOC entry 771 (class 1255 OID 3240801)
-- Name: last_id_titular(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_titular() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_titular) from titular);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 772 (class 1255 OID 3240802)
-- Name: last_id_trabajadorespecifica(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_trabajadorespecifica() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_trabajador_especifica)
	from trabajadorespecifica
	
	
$$;


--
-- TOC entry 773 (class 1255 OID 3240803)
-- Name: last_id_ultimanomina(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_ultimanomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_ultima_nomina)
	from ultimanomina
	
	
$$;


--
-- TOC entry 774 (class 1255 OID 3240804)
-- Name: last_id_ultimaprenomina(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_ultimaprenomina() RETURNS integer
    LANGUAGE sql
    AS $$
	select max(id_ultima_prenomina)
	from ultimaprenomina
	
	
$$;


--
-- TOC entry 775 (class 1255 OID 3240805)
-- Name: last_id_utiles(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION last_id_utiles() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
	id int4 = 0;
BEGIN
	id := (select max(id_utiles) from utiles);
	IF id IS NULL THEN
		return 0;
	ELSE
		return id;
	END IF;
END
$$;


--
-- TOC entry 776 (class 1255 OID 3240806)
-- Name: liquidar_interes_adicional(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION liquidar_interes_adicional(integer, integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdTrabajador                 alias for $2;
	pAnioHasta                    alias for $3;
	pMesHasta                     alias for $4;
        
	
        recTrabajadores                      record;
        recTasaBcv                           record;
        recLiquidacionResumenViejoRegimen    record;
	recInteresAdicionalAcumulado         record;
        recAnticipoMes                       record;
        recAnticipoAcumulado                 record;
	  
      
        curTrabajadores_3 cursor (pIdTipoPersonal int4,Pidtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,t.estatus
             from trabajador t, personal p, tipopersonal tp
		   where t.id_personal = p.id_personal
		     and t.id_tipo_personal = tp.id_tipo_personal
                     and t.id_tipo_personal = pIdTipoPersonal
                     and t.id_trabajador =pIdtrabajador
	             and t.estatus =  'E'  ---Solo Egresado
                     and t.id_trabajador in 
                      (select b.id_trabajador from LiquidacionResumenViejoRegimen b)
              order by t.id_personal;
        


        curLiquidacionResumenViejoRegimen cursor (pIdtrabajador int4)
		for select rvr.saldo_al_18061997 from liquidacionResumenViejoRegimen rvr
		where rvr.id_trabajador = pidtrabajador; 

        curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAdicionalAcumulado cursor (pidtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_interes_acumulado) as monto_interes_acumulado 
                from liquidacioninteresadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
---
---Anticipos de intereses y antiicpos de capital del viejo regimen.
---
                  and (avr.tipo_anticipo='F' OR avr.tipo_anticipo ='V')
                  and avr.estatus ='A';
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ia.monto_anticipo_acumulado) as monto_anticipo_acumulado 
                from liquidacioninteresadicional ia
                where ia.id_trabajador = pidtrabajador
                  and ia.anio = panio
		  and ia.mes = pmes;

	montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        montoInteresMensualFraccion float8 :=0;	
	monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        sueldo_transferencia        float8 :=0;
        tasa                        float8 :=0;
        tasa_aplicada               float8 :=0;
        tiempo                      float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        anio_ini                    int4   :=1997;
        mes_ini                     int4   :=6;
        anio_interes                int4   :=1997;
        mes_interes                 int4   :=6;
        dias_interes                float8 :=0;
        id                          int4   :=0;

begin
        ----
        ----Return 11 no esta la tasa en tasabcv
        ----
        raise notice 'PASA 0 ';
	
	anio_fin :=paniohasta;
        mes_fin  :=pmeshasta;
     
	open curTrabajadores_3(pIdTipoPersonal,Pidtrabajador);
	
	loop
		fetch curTrabajadores_3 into recTrabajadores;	
		exit when not found;
                raise notice 'PASA 2 ';
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	

                
                open curLiquidacionResumenViejoRegimen(recTrabajadores.id_trabajador);
		fetch curLiquidacionResumenViejoRegimen into recLiquidacionResumenViejoRegimen;	
		close curLiquidacionResumenViejoRegimen;
 
                if recLiquidacionResumenViejoRegimen.saldo_al_18061997 is not null AND
                   recLiquidacionResumenViejoRegimen.saldo_al_18061997 <> 0 THEN		        
                   anio_interes :=anio_ini;
                   mes_interes  :=mes_ini;
 	           loop
          	     	exit when ((anio_interes > anio_fin) or
                              (anio_interes =anio_fin and mes_interes > mes_fin));
                    
                  	montoCapital := 0;	
			montoInteresMensual := 0;	
   		        raise notice 'PASA 4 ';
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(anio_interes);
                        aniosiguientebisiesto:=bisiesto(anio_interes+1);
                        diasanio := 365;
                        


                        if mes_interes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if mes_interes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if mes_interes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and mes_interes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice 'PASA 6 ';

                        if anio_interes = 1997 and mes_interes = 6 THEN
                           diasmes:=12;
                        end if;

                        if aniosiguientebisiesto = 1 and 
                           mes_interes > 4 THEN
                           diasanio:=366;
                        end if;
                        if aniobisiesto = 1 and 
                           mes_interes <= 4 THEN
                           diasanio:=366;
                        end if;

                        open curTasabcv(anio_interes,mes_interes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null 
                                     or rectasabcv.tasa_activa is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := anio_interes;
                        mesanterior  := mes_interes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := anio_interes -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAdicionalAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresAdicionalACumulado into recInteresAdicionalAcumulado;	
			if not found or recinteresAdicionalacumulado.monto_interes_acumulado 
                          is null then
		          recinteresAdicionalacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAdicionalAcumulado;
                        raise notice 'PASA 8 ';
                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        raise notice 'PASA 9 ';
                        open curAnticipoMes(rectrabajadores.id_personal,
                                            anio_interes,
                                            mes_interes);
		        fetch curAnticipoMes into recAnticipoMes;	
			if not found or recAnticipoMes.monto_anticipo is null then
		          recAnticipoMes.monto_anticipo:=0;
	                end if;
		        close curAnticipoMes;
                        raise notice 'PASA 10 ';
                        dias_interes := diasmes;
                        montoCapital:=(recLiquidacionResumenViejoRegimen.saldo_al_18061997 +
                                       recInteresAdicionalAcumulado.monto_interes_acumulado)
                                        -(recAnticipoAcumulado.monto_anticipo_acumulado
                                        +recAnticipoMes.monto_anticipo);
                        ---
                        ---Hasta el mes de julio del aÃ±o 2002 se
                        ---calculan los intereses a tasa promedio. A partir
                        ---de agosto del 2002 a tasa activa.
                        ---
                        raise notice 'PASA 11 ';
                        if anio_interes > 2002 OR 
                           (anio_interes =  2002 and mes_interes > 7) THEN
                            tasa := 1 + (rectasabcv.tasa_activa/100);
                            tasa_aplicada := rectasabcv.tasa_activa;
                        else
                            tasa := 1 + (rectasabcv.tasa_promedio/100);
                            tasa_aplicada := rectasabcv.tasa_promedio;
                        end if;
                        
                        tiempo := dias_interes/diasanio;
                        montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                        monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                        monto_interes_acumulado:=
                              recInteresAdicionalAcumulado.monto_interes_acumulado
                                                 +montoInteresMensual;
 
		        id := last_id_liquidacioninteresadicional()+1;
		        if id is null then 
		           id := 1;
		        end if;
                        raise notice 'PASA 12 ';
                        perform add_liquidacioninteresadicional(id,
                           recTrabajadores.id_trabajador, 
                           anio_interes,
                           mes_interes,
                           dias_interes,
                           tasa_aplicada,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado,
                           recLiquidacionResumenViejoRegimen.saldo_al_18061997);
                
                       mes_interes := mes_interes + 1;
                       if mes_interes = 13 then
                          anio_interes := anio_interes +1;
                          mes_interes  := 1;
                       end if;
                end loop;
             end if;
        end loop;

        perform update_liquidacion_resumen_viejo_regimen
              (pIdtrabajador,monto_interes_acumulado);

        close curTrabajadores_3;
		
        raise notice 'PASA 13 ';
      
        raise notice 'PASA 15 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 777 (class 1255 OID 3240808)
-- Name: liquidar_interes_nuevo_regimen(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION liquidar_interes_nuevo_regimen(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        pIdtrabajador                 alias for $2;
        
	recTrabajadores               record;
	recFideicomisomes             record;
        recTasaBcv                    record;
        recprestacionesmensuales      record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recFideicomisoAcumulado       record;
        recParametroVarios            record;
        
        curTrabajadores_4 cursor (pIdTipoPersonal int4, pIdtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus =  'E'
                and t.id_trabajador = Pidtrabajador
                order by t.id_personal;

       

       ---
       ---A partir del aÃ±o 1997 mes junio
       ---
       
       



         curprestacionesmensuales cursor (pIdtrabajador int4)
		for select hd.anio,hd.mes,hd.monto_prestaciones,hd.monto_adicional,
                    dias_mensuales,dias_adicionales
		from liquidacionprestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and hd.anio *100 + hd.mes >=199706
                 order by  hd.anio,hd.mes;
       
       


        curTasaBcv_4 cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_prestaciones_acumuladas) 
                           as monto_prestaciones_acumuladas,max(inr.monto_interes_acumulado)
                           as monto_interes_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del nuevo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='N' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        

         curFideicomisoMes cursor (pIdTrabajador int4,panio int4,
                                   pmes int4,pdia1 int4,pdia2 int4)
		for select sum(f.monto_fideicomiso) as monto_fideicomiso from fideicomiso f
                where f.id_trabajador = pidtrabajador
                  and f.anio = panio
		  and f.mes = pmes
                  and extract(day from f.fecha) between pdia1 and pdia2;
        
---
---OJO
---restar fideicomiso                                           ok
---poner seguridad en parametros varios                         ok
---picar por fecha de ingreso                                   ok
---crear seguridad de intresesnuevoregimen                      ok
---liquidacion todas las tablas iguales con liq adelante
---crear fecha de corte en el calculo historico de prestaciones ok
---ojo: se capitaliza o n o el interes ?
---
---
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_anticipo_acumulado) as monto_anticipo_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;

	curFideicomisoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(inr.monto_fideicomiso_acumulado) as monto_fideicomiso_acumulado from liquidacioninteresnuevoregimen inr
                where inr.id_trabajador = pidtrabajador
                  and inr.anio = panio
		  and inr.mes = pmes;


        
        montoPrestaciones             float8 :=0;	
	montoCapital                  float8 :=0;	
	montoInteresMensual           float8 :=0;
        monto_Interes_Acumulado       float8 :=0;	
	monto_Anticipo_Acumulado      float8 :=0;	
        monto_Fideicomiso_Acumulado   float8 :=0;	
        monto_Prestaciones_Acumuladas float8 :=0;	
        tasa                          float8 :=0;
        tiempo                        float8 :=0;
        dias_interes                  float8 :=0;
        diasmes                       float8 :=0;
        diasanio                      float8 :=0;
        diasmensuales                 int4   :=0;
        diasadicionales               int4   :=0;
        aniobisiesto                  int4   :=0;
        aniosiguientebisiesto         int4   :=0;
        anioingreso                   int4   :=0;
        mesingreso                    int4   :=0;
        diaingreso                    float8 :=0;
        aniosservicios                int4   :=0;
        anioanterior                  int4   :=0;
        mesanterior                   int4   :=0;
        aniomeshasta                  int4   :=0;
        aniomesdesde                  int4   :=0;
        anio_fin                      int4   :=0;
        mes_fin                       int4   :=0;
        id                            int4   :=0;
        pEstatus                      char   :='E' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

       

	delete from liquidacioninteresnuevoregimen 
          where id_trabajador =pidtrabajador;
        
       
        raise notice 'PASA 1 ';

	open curTrabajadores_4(pIdTipoPersonal, pIdtrabajador);
	loop
		fetch curTrabajadores_4 into recTrabajadores;	
		exit when not found;

                raise notice 'PASA 2 ';
        
                montoPrestaciones             :=0;	
	        montoCapital                  :=0;	
	        montoInteresMensual           :=0;
                monto_Interes_Acumulado       :=0;	
	        monto_Anticipo_Acumulado      :=0;	
                monto_Fideicomiso_Acumulado   :=0;	
                monto_Prestaciones_Acumuladas :=0;	
                diasmensuales                 :=0;
                diasadicionales               :=0;

                if rectrabajadores.fecha_ingreso > '1997-06-18 ' then 
	           anioingreso := extract(year  from recTrabajadores.fecha_ingreso);
	           mesingreso  := extract(month from recTrabajadores.fecha_ingreso);
	           diaingreso  := extract(day   from recTrabajadores.fecha_ingreso);
	        else
                   anioingreso := 1997;
	           mesingreso  := 6;
	           diaingreso  := 19;
	         --  anioingreso := 1997;
	         --  mesingreso  := 7;
	         --  diaingreso  := 19;
	      
                end if;

                aniomesdesde := anioingreso * 100 + mesingreso;

	        open curprestacionesmensuales(recTrabajadores.id_trabajador);
		loop			
			fetch curprestacionesmensuales into recprestacionesmensuales;	
			exit when not found;
		
                	
	                raise notice 'PASA 3 ';

                        montoPrestaciones    :=0;	
			montoCapital         :=0;	
			montoInteresMensual  :=0;	
		
                        aniobisiesto         :=0;
                        aniosiguientebisiesto:=0;

                        aniobisiesto         :=bisiesto(recprestacionesmensuales.anio);
                        aniosiguientebisiesto:=bisiesto(recprestacionesmensuales.anio+1);
                        diasanio := 365;
                        if recprestacionesmensuales.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recprestacionesmensuales.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recprestacionesmensuales.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recprestacionesmensuales.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 4 ';

                        if recprestacionesmensuales.anio = 1997 and
                           recprestacionesmensuales.mes = 6 THEN
                           diasmes:=12;
                        end if;
                     --   if recprestacionesmensuales.anio = 1997 and
                     --      recprestacionesmensuales.mes = 7 THEN
                     --      diasmes:=13;
                     --   end if;
                        
                        if aniosiguientebisiesto = 1 and 
                           recprestacionesmensuales.mes > 5 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recprestacionesmensuales.mes <=5 THEN
                           diasanio:=366;
                        end if;
   
                       
                        open curTasaBcv_4(recprestacionesmensuales.anio,
                                        recprestacionesmensuales.mes);
		        fetch curTasaBcv_4 into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curTasaBcv_4;

                        anioanterior := recprestacionesmensuales.Anio;
                        mesanterior  := recprestacionesmensuales.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recprestacionesmensuales.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 5 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or 
                           recinteresacumulado.monto_interes_acumulado is null then
		           recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        if not found or recinteresacumulado.monto_prestaciones_acumuladas 
                             is null then
		             recinteresacumulado.monto_prestaciones_acumuladas:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or 
                           recAnticipoAcumulado.monto_anticipo_acumulado is null then
		           recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        open curFideicomisoAcumulado(rectrabajadores.id_trabajador,
                                                     anioanterior,mesanterior);
		        fetch curFideicomisoACumulado into recFideicomisoAcumulado;	
			if not found or 
                           recFideicomisoAcumulado.monto_fideicomiso_acumulado is null then
		           recFideicomisoAcumulado.monto_fideicomiso_acumulado:=0;
	                end if;
                        close curFideicomisoAcumulado;
		        

                        if (diaingreso > 1 and (anioingreso <>recprestacionesmensuales.anio
                                            or mesingreso <> recprestacionesmensuales.mes))
                           then
                           raise notice 'PASA 61 ';
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recprestacionesmensuales.anio,
                                            recprestacionesmensuales.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;
                           raise notice 'PASA 62 ';
                          
                           open curFideicomisoMes(rectrabajadores.id_trabajador,
                                  recprestacionesmensuales.anio,
                                  recprestacionesmensuales.mes,1,dias_interes);                
                           fetch curFideicomisoMes into recFideicomisoMes;	
		   	   if not found or recFideicomisoMes.monto_Fideicomiso is null then
		              recFideicomisoMes.monto_Fideicomiso:=0;
	                   end if;
		           close curFideicomisoMes;

                           
                           montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                              + recprestacionesmensuales.monto_adicional);
                           
                           montoCapital:=(recInteresAcumulado.monto_prestaciones_acumuladas
                                  + recInteresAcumulado.monto_interes_acumulado)
                                  -(recAnticipoAcumulado.monto_anticipo_acumulado
                                    +recAnticipoMes.monto_anticipo
                                    +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                    +recFideicomisoMes.Monto_fideicomiso);
                           
                           raise notice 'PASA 63 ';
                          
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                 recAnticipoAcumulado.monto_anticipo_acumulado;
                           monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                 recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                           monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
                           monto_prestaciones_acumuladas:=               
                              recInteresAcumulado.monto_prestaciones_acumuladas;
          	           id := last_id_liquidacioninteresnuevoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_liquidacioninteresnuevoregimen(id,
                                 recTrabajadores.id_trabajador, 
                                 recprestacionesmensuales.anio,
                                 recprestacionesmensuales.mes,
                                 dias_interes,
                                 rectasabcv.tasa_promedio,
                                 0,
                                 0,
                                 0,
                                 0,
                                 monto_prestaciones_acumuladas,
                                 MontoCapital,
                                 montoInteresMensual,
                                 monto_interes_acumulado,
                                 recAnticipoMes.monto_anticipo,
                                 monto_anticipo_acumulado,
                                 recFideicomisoMes.monto_fideicomiso,
                                 monto_fideicomiso_acumulado);		
            	           
                           dias_interes := diasmes -dias_interes;
                           
                           if dias_interes > 0 then
                              open curAnticipoMes(rectrabajadores.id_personal,
                                               recprestacionesmensuales.anio,
                                               recprestacionesmensuales.mes,
                                               dias_interes+1,31);
		              fetch curAnticipoMes into recAnticipoMes;	
			      if not found or recAnticipoMes.monto_anticipo is null then
		                 recAnticipoMes.monto_anticipo:=0;
	                      end if;
		              close curAnticipoMes;
                              open curFideicomisoMes(rectrabajadores.id_trabajador,
                                   recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,dias_interes+1,31);                
                              fetch curFideicomisoMes into recFideicomisoMes;	
		   	      if not found or recFideicomisoMes.monto_Fideicomiso is null then
		                 recFideicomisoMes.monto_Fideicomiso:=0;
	                      end if;
		              close curFideicomisoMes;


                              montoPrestaciones:= (
                                      recprestacionesmensuales.monto_prestaciones 
                                    + recprestacionesmensuales.monto_adicional);
                           
                              montoCapital:=(montoprestaciones +
                                         monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(monto_anticipo_acumulado
                                         + recAnticipoMes.monto_anticipo
                                         + monto_fideicomiso_acumulado
                                         + recFideicomisoMes.Monto_fideicomiso);
                           
                              tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                                                    
                              tiempo := (diasmes -(diaingreso-1))/diasanio;
                              montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                              monto_interes_acumulado := monto_interes_acumulado +
                                                          montointeresmensual;
                              monto_prestaciones_acumuladas :=
                                      recInteresAcumulado.monto_prestaciones_acumuladas +
                                      montoprestaciones;
                              id := last_id_liquidacioninteresnuevoregimen()+1;
		              if id is null then 
		                 id := 1;
		              end if;
                              perform add_liquidacioninteresnuevoregimen(id,
                                    recTrabajadores.id_trabajador, 
                                    recprestacionesmensuales.anio,
                                    recprestacionesmensuales.mes,
                                    dias_interes,
                                    rectasabcv.tasa_promedio,
                                    recprestacionesmensuales.monto_prestaciones,
                                    recprestacionesmensuales.monto_adicional,
                                    recprestacionesmensuales.dias_mensuales,
                                    recprestacionesmensuales.dias_adicionales,
                                    monto_prestaciones_acumuladas,
                                    montoCapital,
                                    montoInteresMensual,
                                    monto_interes_acumulado,
                                    recAnticipoMes.monto_anticipo,
                                    monto_anticipo_acumulado,
                                    recFideicomisoMes.monto_fideicomiso,
                                    monto_fideicomiso_acumulado);		
                           end if;
             else
	                  raise notice 'PASA 7 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;
  raise notice 'PASA 8 ';
                        
                          open curFideicomisoMes(rectrabajadores.id_trabajador,
                                       recprestacionesmensuales.anio,
                                       recprestacionesmensuales.mes,1,31);                
                          fetch curFideicomisoMes into recFideicomisoMes;	
		   	  if not found or recFideicomisoMes.monto_Fideicomiso is null then
		             recFideicomisoMes.monto_Fideicomiso:=0;
	                  end if;
		          close curFideicomisoMes;

  raise notice 'PASA 9 ';




                          if (anioingreso =recprestacionesmensuales.anio and
                              mesingreso = recprestacionesmensuales.mes) then
                              if diasmes <> 12 then
                              --if diasmes <> 13 then
                                 dias_interes :=diasmes - diaingreso;
                              else
                                 dias_interes := diasmes;
                              end if;
                          else
                             dias_interes := diasmes;
                          end if;
                          montoPrestaciones:= (recprestacionesmensuales.monto_prestaciones 
                                             + recprestacionesmensuales.monto_adicional);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado+
                                         recInteresAcumulado.monto_prestaciones_acumuladas)
                                         -(
                                          recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo
                                         +recFideicomisoAcumulado.monto_fideicomiso_acumulado
                                         +recFideicomisoMes.Monto_fideicomiso);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

raise notice 'PASA 91 ';
                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_fideicomiso_acumulado:=recFideicomisoMes.monto_fideicomiso +
                                recfideicomisoAcumulado.monto_fideicomiso_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado

                                                    +montoInteresMensual;
raise notice 'PASA 92 ';

                          monto_prestaciones_acumuladas :=
                                          recInteresAcumulado.monto_prestaciones_acumuladas +
                                          montoprestaciones;
   raise notice 'PASA 10 ';
                        
		          id := last_id_liquidacioninteresnuevoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;
                          perform add_liquidacioninteresnuevoregimen(id,
                              recTrabajadores.id_trabajador, 
                              recprestacionesmensuales.anio,
                              recprestacionesmensuales.mes,
                              dias_interes,
                              rectasabcv.tasa_promedio,
                              recprestacionesmensuales.monto_prestaciones,
                              recprestacionesmensuales.monto_adicional,
                              recprestacionesmensuales.dias_mensuales,
                              recprestacionesmensuales.dias_adicionales,
                              monto_prestaciones_acumuladas,
                              montoCapital,
                              montoInteresMensual,
                              monto_interes_acumulado,
                              recAnticipoMes.monto_anticipo,
                              monto_anticipo_acumulado,
                              recFideicomisoMes.monto_fideicomiso,
                              monto_fideicomiso_acumulado);		
                       		
                      end if;
                      diasmensuales:= 
                            diasmensuales +recprestacionesmensuales.dias_mensuales;
                      diasadicionales:= 
                            diasadicionales +recprestacionesmensuales.dias_adicionales;
                             
                end loop;
                close curprestacionesmensuales;
                raise notice 'PASA 9 ';
                perform update_liquidacion_resumen_nuevo_regimen(
                              rectrabajadores.id_trabajador,
                              monto_prestaciones_acumuladas,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_fideicomiso_acumulado,
                              diasmensuales,
                              diasadicionales);		
        end loop;
        close curTrabajadores_4;

        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 778 (class 1255 OID 3240810)
-- Name: liquidar_interes_viejo_regimen(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION liquidar_interes_viejo_regimen(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdtrabajador                 alias for $2;

	recTrabajadores               record;
        recTasaBcv                    record;
        recHistoricoDevengadoIntegral record;
	recInteresAcumulado           record;
        recAnticipoMes                record;
        recAnticipoAcumulado          record;
	recParametroVarios            record;
        
        curTrabajadores_1 cursor (pIdTipoPersonal int4, PIdtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,p.anios_servicio_apn,
                                    cp1.cod_categoria
		from trabajador t, personal p, tipopersonal tp, clasificacionpersonal cp, categoriapersonal cp1
		where t.id_personal = p.id_personal
		and t.id_tipo_personal = tp.id_tipo_personal
                and tp.id_clasificacion_personal = cp.id_clasificacion_personal
                and cp1.id_categoria_personal = cp.id_categoria_personal
                and t.id_tipo_personal = pIdtipopersonal
                and t.id_trabajador    = pIdtrabajador 
                and t.estatus = 'E'
                and p.deuda_regimen_derogado ='N'
                order by t.id_personal;
       ---
       ---
       ---Empleados es a partir del aÃ±o 1991 mes mayo
       ---Obreros a partir del aÃ±o 1975 mes mayo
       ---
       
        curHistoricoDevengadoIntegral cursor (pIdPersonal int4, paniomesdesde  int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadoIntegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                 order by  hd.anio,hd.mes;
       curTasaBcv cursor (panio int4, pmes int4)
		for select t.tasa_promedio,t.tasa_activa
		from tasabcv t
                where t.anio = panio
		and t.mes = pmes;
        
        curInteresAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_interes_acumulado) as monto_interes_acumulado from liquidacioninteresviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;
        
	curAnticipoMes cursor (pIdpersonal int4,panio int4, pmes int4,pdia1 int4,pdia2 int4)
		for select sum(avr.monto_anticipo) as monto_anticipo from anticipo avr
                where avr.id_personal = pidpersonal
                  and avr.anio = panio
		  and avr.mes = pmes
                  and extract(day from avr.fecha_anticipo) between pdia1 and pdia2
--
--Anticipos de Capital e intereses del viejo regimen que esten aprobados.
--
                  and (avr.tipo_anticipo='V' or avr.tipo_anticipo='F')
                  and avr.estatus ='A' ;  
        
        curAnticipoAcumulado cursor (pIdtrabajador int4,panio int4, pmes int4)
		for select max(ivr.monto_anticipo_acumulado) as monto_anticipo_acumulado from liquidacioninteresviejoregimen ivr
                where ivr.id_trabajador = pidtrabajador
                  and ivr.anio = panio
		  and ivr.mes = pmes;

	
        
        montoPrestaciones           float8 :=0;	
	montoCapital                float8 :=0;	
	montoInteresMensual         float8 :=0;
        monto_Interes_Acumulado     float8 :=0;	
	monto_Anticipo_Acumulado    float8 :=0;	
        monto_transferencia         float8 :=0;
        tasa                        float8 :=0;
        tiempo                      float8 :=0;
        dias_interes                float8 :=0;
        diasmes                     float8 :=0;
        diasanio                    float8 :=0;
        aniobisiesto                int4   :=0;
        aniosiguientebisiesto       int4   :=0;
        anioingreso                 int4   :=0;
        aniomesdesde                int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        anioegreso                  int4   :=0;
        mesegreso                   int4   :=0;
        diaegreso                   float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        id                          int4   :=0;
        sueldo_transferencia        float8 :=0;
        saldo_al_18061997           float8 :=0;
        pEstatus                    char:='E' ;
begin
	
    ----
    ----Return 11 no esta la tasa en tasabcv
    ----
    raise notice 'PASA 0 ';
	
    
	open curTrabajadores_1(pIdTipoPersonal, pIdtrabajador);
	loop
		fetch curTrabajadores_1 into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoCapital                :=0;	
	        montoInteresMensual         :=0;
                monto_Interes_Acumulado     :=0;	
	        monto_Anticipo_Acumulado    :=0;	
                monto_transferencia         :=0;
                sueldo_transferencia        :=0;
                saldo_al_18061997           :=0;
  
              if recTrabajadores.cod_categoria = 2 then
                 aniomesdesde := 1975;    --Obreros
              else
                 aniomesdesde := 1991;    --Empleados y Otros.
              end if;
	        anioingreso := extract(year from recTrabajadores.fecha_ingreso);
	        mesingreso := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso := extract(day from recTrabajadores.fecha_ingreso);
	        anioegreso := extract(year from recTrabajadores.fecha_egreso);
	        mesegreso := extract(month from recTrabajadores.fecha_egreso);
	        anio_fin :=1997;
                mes_fin:=6;
     
                
                if recTrabajadores.anios_servicio_apn < 0 then
                   recTrabajadores.anios_servicio_apn:=0;
                end if;
                                    

	        open curHistoricoDevengadoIntegral(recTrabajadores.id_personal,aniomesdesde);
		loop			
			fetch curHistoricoDevengadoIntegral into recHistoricoDevengadoIntegral;	
			exit when not found;
		
                	if (recHistoricoDevengadoIntegral.anio > anio_fin OR
		              (recHistoricoDevengadoIntegral.anio = anio_fin AND
                               recHistoricoDevengadoIntegral.mes > mes_fin)) THEN
	                    exit;
	                end if;

	                raise notice 'PASA 5 ';

                        aniosservicios := recHistoricoDevengadoIntegral.anio - anioingreso;
                        if (recHistoricoDevengadoIntegral.mes < mesingreso) or
                           (recHistoricoDevengadoIntegral.mes = mesingreso and
                            diaingreso > 1) then
                           aniosservicios := aniosservicios -1;
                        end if;

                        aniosservicios := aniosservicios+ recTrabajadores.anios_servicio_apn;
		        	

                	montoPrestaciones:= 0;	
			montoCapital := 0;	
			montoInteresMensual := 0;	
		
                        aniobisiesto :=0;
                        aniosiguientebisiesto:=0;
                        aniobisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio);
                        aniosiguientebisiesto:=bisiesto(recHistoricoDevengadoIntegral.anio+1);
                        diasanio := 365;
                        if recHistoricoDevengadoIntegral.mes in (1,3,5,7,8,10,12) then
                           diasmes  :=31;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (4,6,9,11) then
                           diasmes  :=30;
                        end if;
                        if recHistoricoDevengadoIntegral.mes in (2) then
                           diasmes  :=28;
                           if aniobisiesto = 1 and recHistoricoDevengadoIntegral.mes < 5 THEN
                              diasanio:=366;
                              diasmes :=29;
                           end if;
                        end if;
	                raise notice  'PASA 6 ';

                        if recHistoricoDevengadoIntegral.anio = 1997 and
                           recHistoricoDevengadoIntegral.mes = 6 THEN
                           diasmes:=18;
                        end if;
                        if recHistoricoDevengadoIntegral.anio = 1996 and
                           recHistoricoDevengadoIntegral.mes = 12 THEN
                            sueldo_transferencia :=
                                 recHistoricoDevengadoIntegral.sueldo_integral;  
                        end if;
                        if aniosiguientebisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes > 4 THEN
                           diasanio:=366;
                        end if;
                                          
                        if aniobisiesto = 1 and 
                           recHistoricoDevengadoIntegral.mes <=4 THEN
                           diasanio:=366;
                        end if;
   
                        open curTasabcv(recHistoricoDevengadoIntegral.anio,
                                        recHistoricoDevengadoIntegral.mes);
		        fetch curtasabcv into rectasabcv;	
			if not found or rectasabcv.tasa_promedio is null then
		          return 11;
	                end if;
                        close curtasabcv;

                        anioanterior := recHistoricoDevengadoIntegral.Anio;
                        mesanterior  := recHistoricoDevengadoIntegral.mes -1;
                        
                        if mesanterior =0 THEN
                           anioanterior := recHistoricoDevengadoIntegral.Anio -1;
                           mesanterior  := 12;
                        end if;
 	                raise notice 'PASA 7 ';

                        open curInteresAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curInteresACumulado into recInteresAcumulado;	
			if not found or recinteresacumulado.monto_interes_acumulado is null then
		          recinteresacumulado.monto_interes_acumulado:=0;
	                end if;
		        close curInteresAcumulado;

                        open curAnticipoAcumulado(rectrabajadores.id_trabajador,
                                                 anioanterior,
                                                 mesanterior);
		        fetch curAnticipoACumulado into recAnticipoAcumulado;	
			if not found or recAnticipoAcumulado.monto_anticipo_acumulado is null then
		          recAnticipoAcumulado.monto_anticipo_acumulado:=0;
	                end if;
                        close curAnticipoAcumulado;
		        
                        if (mesingreso = rechistoricoDevengadoIntegral.mes 
                                   and diaingreso > 1) THEN
                           dias_interes := diaingreso -1;
                           if dias_interes > diasmes then
                              dias_interes := diasmes;
                           end if;
                           open curAnticipoMes(rectrabajadores.id_personal,
                                            recHistoricoDevengadoIntegral.anio,
                                            recHistoricoDevengadoIntegral.mes,1,dias_interes);
		           fetch curAnticipoMes into recAnticipoMes;	
			   if not found or recAnticipoMes.monto_anticipo is null then
		              recAnticipoMes.monto_anticipo:=0;
	                   end if;
		           close curAnticipoMes;

                           montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                           monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                                     recAnticipoAcumulado.monto_anticipo_acumulado;
                           
                           montoCapital:=(montoprestaciones +
                                      recInteresAcumulado.monto_interes_acumulado)-
                                      monto_anticipo_acumulado;
                           tasa := 1 + (rectasabcv.tasa_promedio/100);
                           
                           tiempo := dias_interes/diasanio;
                           montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			   monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
                           id := last_id_liquidacioninteresviejoregimen()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           perform add_liquidacioninteresviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
            	
                           aniosservicios := aniosservicios +1;
                           dias_interes := diasmes -dias_interes;
                           if dias_interes > 0 then
                             open curAnticipoMes(rectrabajadores.id_personal,
                                              recHistoricoDevengadoIntegral.anio,
                                              recHistoricoDevengadoIntegral.mes,
                                              dias_interes+1,31);
		             fetch curAnticipoMes into recAnticipoMes;	
			     if not found or recAnticipoMes.monto_anticipo is null then
		                recAnticipoMes.monto_anticipo:=0;
	                     end if;
		             close curAnticipoMes;
                             monto_anticipo_acumulado := monto_anticipo_acumulado +
                                                         recAnticipomes.monto_anticipo;
                             montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                             montoCapital:=(montoprestaciones +
                                            monto_interes_acumulado)-
                             (monto_anticipo_acumulado);

                           
                             tiempo := (diasmes -(diaingreso-1))/diasanio;
                             montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			
                             monto_interes_acumulado:=monto_interes_acumulado+
                                                      MontoInteresMensual;
                             
		             id := last_id_liquidacioninteresviejoregimen()+1;
		             if id is null then 
		                id := 1;
		             end if;
                             perform add_liquidacioninteresviejoregimen(id,
                             recTrabajadores.id_trabajador, 
                             recHistoricoDevengadoIntegral.anio,
                             recHistoricoDevengadoIntegral.mes,
                             dias_interes,
                             recHistoricoDevengadoIntegral.sueldo_integral,
                             rectasabcv.tasa_promedio,
                             aniosservicios,
                             montoPrestaciones,
                             montoCapital,
                             montoInteresMensual,
                             monto_interes_acumulado,
                             recAnticipoMes.monto_anticipo,
                             monto_anticipo_acumulado);		
                          end if;
             else
	                  raise notice 'PASA 8 ';
                          open curAnticipoMes(rectrabajadores.id_personal,
                                       recHistoricoDevengadoIntegral.anio,
                                       recHistoricoDevengadoIntegral.mes,1,31);                
                          fetch curAnticipoMes into recAnticipoMes;	
		   	  if not found or recAnticipoMes.monto_anticipo is null then
		             recAnticipoMes.monto_anticipo:=0;
	                  end if;
		          close curAnticipoMes;

                          dias_interes := diasmes;
                          montoPrestaciones:= (recHistoricoDevengadoIntegral.sueldo_integral 
                                            * aniosservicios);
                          montoCapital:=(montoprestaciones +
                                         recInteresAcumulado.monto_interes_acumulado)
                                         -(recAnticipoAcumulado.monto_anticipo_acumulado
                                         +recAnticipoMes.monto_anticipo);
                           
                          tasa := 1 + (rectasabcv.tasa_promedio/100);
                        
                          tiempo := dias_interes/diasanio;

                          montoInteresMensual:=montoCapital * (pow(tasa,tiempo) -1);
			  monto_anticipo_acumulado:=recAnticipoMes.monto_anticipo +
                                recAnticipoAcumulado.monto_anticipo_acumulado;
                          monto_interes_acumulado:=recInteresAcumulado.monto_interes_acumulado
                                                    +montoInteresMensual;
 
		          id := last_id_liquidacioninteresviejoregimen()+1;
		          if id is null then 
		             id := 1;
		          end if;

                          perform add_liquidacioninteresviejoregimen(id,
                           recTrabajadores.id_trabajador, 
                           recHistoricoDevengadoIntegral.anio,
                           recHistoricoDevengadoIntegral.mes,
                           dias_interes,
                           recHistoricoDevengadoIntegral.sueldo_integral,
                           rectasabcv.tasa_promedio,
                           aniosservicios,
                           montoPrestaciones,
                           montoCapital,
                           montoInteresMensual,
                           monto_interes_acumulado,
                           recAnticipoMes.monto_anticipo,
                           monto_anticipo_acumulado);		
                    end if;
                end loop;
                close curHistoricoDevengadoIntegral;
                if sueldo_transferencia = 0 AND
                   recHistoricoDevengadoIntegral.sueldo_integral is not null THEN
                   sueldo_transferencia := recHistoricoDevengadoIntegral.sueldo_integral;
                end if;
                id := last_id_liquidacionresumenviejoregimen()+1;
		if id is null then 
                   id := 1;
		end if;
                if sueldo_transferencia <> 0 THEN
                   if sueldo_transferencia > 300000 then
                      sueldo_transferencia := 300000;
                   end if;
                   if sueldo_transferencia < 15000 then
                      sueldo_transferencia := 15000;
                   end if;
                end if;
                if aniosservicios > 13 then
                   aniosservicios :=13;
                end if;
                monto_transferencia := sueldo_transferencia * aniosservicios;
                saldo_al_18061997 := montoprestaciones + monto_interes_acumulado +
                                     monto_transferencia - monto_anticipo_acumulado;

		raise notice 'PASA 9 ';

                IF saldo_al_18061997 <> 0 AND saldo_al_18061997 is not null then
                   perform add_liquidacionresumenviejoregimen(id,
                              rectrabajadores.id_trabajador,
                              sueldo_transferencia,
                              aniosservicios,
                              montoprestaciones,
                              monto_interes_acumulado,
                              monto_anticipo_acumulado,
                              monto_transferencia,
                              saldo_al_18061997,0);
              END IF;		
	        
        
        end loop;
        close curTrabajadores_1;

        raise notice 'PASA 10 ';

        perform liquidar_interes_adicional
                   (pIdTipoPersonal,pIdtrabajador,anioegreso,mesegreso);
       
        
        raise notice 'PASA 11 ';

        delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 779 (class 1255 OID 3240812)
-- Name: liquidar_prestaciones_historico(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION liquidar_prestaciones_historico(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
        pIdtrabajador                 alias for $2;
        
	recTrabajadores                           record;
        rechistoricodevengado                     record;
	recPrestacionesmensuales                  record;
	recPrestacionesmensualesadicional         record;
	recLiquidacionPrestacionesmensuales       record;
	
        curTrabajadores_2 cursor (pIdTipoPersonal int4, pidtrabajador int4)
		for select distinct t.id_personal,t.cedula,
                                    t.id_trabajador, t.fecha_ingreso,t.fecha_egreso,
                                    t.estatus,t.id_tipo_personal
		from trabajador t, personal p, tipopersonal tp
		where t.id_personal = p.id_personal
		and t.id_trabajador = Pidtrabajador
                and t.id_tipo_personal = tp.id_tipo_personal
                and t.id_tipo_personal = pIdTipoPersonal 
                and t.estatus = 'E'
                order by t.id_personal;

        ---
        ---A partir del aÃ±o 1997 (12 de dias de junio o 13 dias de JUlio)
        ---
       
        curhistoricodevengado cursor (pIdpersonal int4)
		for select hd.anio,hd.mes,hd.sueldo_integral
		from historicodevengadointegral hd
		where hd.id_personal = pidpersonal
                  and (hd.anio * 100 + hd.mes) >= 199706 
                  order by hd.anio,hd.mes;
	
        
        curprestacionesmensuales cursor(pIdtrabajador int4,paniomesdesde int4)
		for select anio,mes,dias_mensuales,dias_adicionales,
                           base_mensual,base_adicional,monto_prestaciones,
                           monto_adicional,fideicomiso,dias_cancelados
      		  from prestacionesmensuales hd
		    where hd.id_trabajador = pidtrabajador
                      and (hd.anio * 100 + hd.mes) >paniomesdesde;
	
        curprestacionesmensualesadicional cursor(pIdtrabajador int4,paniomesdesde int4,
                                       paniomeshasta int4)
		for select sum(dias_mensuales) as dias_mensuales,
                           sum(hd.monto_prestaciones) as monto_prestaciones
		from prestacionesmensuales hd
		where hd.id_trabajador = pidtrabajador
                  and (hd.anio * 100 + hd.mes) >=paniomesdesde 
                  and (hd.anio * 100 + hd.mes) <=paniomeshasta;
	
        
        montoPrestaciones           float8 :=0;	
        ultimomontoprestaciones     float8 :=0;
        montoAdicional              float8 :=0;	
        baseAdicional               float8 :=0;	
        diasprestaciones            int4   :=0;
        diasadicionales             int4   :=0;
        anioingreso                 int4   :=0;
        mesingreso                  int4   :=0;
        diaingreso                  float8 :=0;
        anioegreso                  int4   :=0;
        mesegreso                   int4   :=0;
        diaegreso                   float8 :=0;
        aniosservicios              int4   :=0;
        anioanterior                int4   :=0;
        mesanterior                 int4   :=0;
        anio_fin                    int4   :=0;
        mes_fin                     int4   :=0;
        aniomesdesde                int4   :=0;
        aniomeshasta                int4   :=0;
        id                          int4   :=0;
        pEstatus                    char   :='E' ;
begin
	

 ----
 ----Return 11 no esta la tasa en tasabcv
 ----
 ----
 ----Return 2 periodo inferior al mes de junio de 1997.Debe ser mayor a esta fecha
 ----
 ----

        
	delete from liquidacionprestacionesmensuales
           where id_trabajador =PIdtrabajador;

       
        raise notice 'PASA 1 ';
     
 	open curTrabajadores_2(pIdTipoPersonal, pIdtrabajador);
	loop
		fetch curTrabajadores_2 into recTrabajadores;	
		exit when not found;


                montoPrestaciones           :=0;	
	        montoAdicional              :=0;

	        anioingreso := extract(year  from recTrabajadores.fecha_ingreso);
	        mesingreso  := extract(month from recTrabajadores.fecha_ingreso);
	        diaingreso  := extract(day   from recTrabajadores.fecha_ingreso);
	        anioegreso  := extract(year  from recTrabajadores.fecha_egreso);
	        mesegreso   := extract(month from recTrabajadores.fecha_egreso);
	        diaegreso   := extract(day   from recTrabajadores.fecha_egreso);
	        
                ----
                ----los trabajadores que ingresaron en este periodo
                ----se le asume que ingresaron el '1997-06-19'
                ----por lo que se le comienza a cancelar cinco dias
                ----de prestaciones en el mes de octubre.
                ----
                if rectrabajadores.fecha_ingreso > '1996-12-31' and 
                   rectrabajadores.fecha_ingreso < '1997-06-19'then 
                   anioingreso := 1997;
	           mesingreso  := 6;
	           diaingreso  := 19;
	        end if;

                raise notice 'PASA 2 ';
		
	        open curhistoricodevengado(recTrabajadores.id_personal);
		loop			
			fetch curhistoricodevengado into rechistoricodevengado;	
			exit when not found;
		
                	raise notice 'PASA 3 ';

                        diasadicionales    := 0;
                        diasprestaciones   := 0;
                        montoprestaciones  := 0;
                        ultimomontoprestaciones:=0;
	                montoadicional     := 0;
                        aniosservicios     := 0;
                        baseadicional      := 0;
                        aniomesdesde       := 0;
                        aniomeshasta       := 0;

                        if extract(year  from recTrabajadores.fecha_ingreso) < 1997 then
                           diasprestaciones := 5;
                           if rechistoricodevengado.mes = 6 then
                              aniosservicios:= rechistoricodevengado.anio - 1997;
                              aniomesdesde  := ((rechistoricodevengado.anio - 1) * 100) + 7;
                              aniomeshasta  := (rechistoricodevengado.anio * 100) + 5;
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                           end if;
                        else
                           aniomesdesde := (anioingreso * 100) + mesingreso; 
                           aniomeshasta := (rechistoricodevengado.anio * 100) +
                                           rechistoricodevengado.mes;
                           if aniomeshasta - aniomesdesde > 3 then
                              diasprestaciones := 5;
                           end if; 
                                                     
                           if rechistoricodevengado.mes = mesingreso then
                              aniosservicios := rechistoricodevengado.anio - anioingreso;
                              aniomesdesde := (rechistoricodevengado.anio - 1) * 100 
                                               + (mesingreso + 1);
                              
                              anioanterior := rechistoricodevengado.Anio;
                              mesanterior  := mesingreso -1;
                        
                              if mesanterior =0 THEN
                                 anioanterior := rechistoricodevengado.Anio -1;
                                 mesanterior  := 12;
                              end if;
 	                      aniomeshasta := anioanterior * 100 +mesanterior;
                             
                              if aniosservicios <2 then 
                                 diasadicionales := 0;
                              elsif aniosservicios = 2 then
                                 diasadicionales := 2;
                              elsif aniosservicios =3 then 
                                 diasadicionales := 4;
                              elsif aniosservicios =4 then 
                                 diasadicionales := 6;
                              elsif aniosservicios =5 then 
                                 diasadicionales := 8;
                              elsif aniosservicios =6 then 
                                 diasadicionales := 10;
                              elsif aniosservicios =7 then 
                                 diasadicionales := 12;
                              elsif aniosservicios =8 then 
                                 diasadicionales := 14;
                              elsif aniosservicios =9 then 
                                 diasadicionales := 16;
                              elsif aniosservicios =10 then 
                                 diasadicionales := 18;
                              elsif aniosservicios =11 then 
                                 diasadicionales := 20;
                              elsif aniosservicios =12 then 
                                 diasadicionales := 22;
                              elsif aniosservicios =13 then 
                                 diasadicionales := 24;
                              elsif aniosservicios =14 then 
                                 diasadicionales := 26;
                              elsif aniosservicios =15 then 
                                diasadicionales := 28;
                              elsif aniosservicios =16 then 
                                 diasadicionales := 30;
                              else
                                 diasadicionales := 30;
                              end if;                            
                          end if;
                        end if;
                        raise notice 'PASA 4 ';

                        montoAdicional:=0;
                        montoPrestaciones:= 
                            (rechistoricodevengado.sueldo_integral/30) 
                             * diasprestaciones;  
                        if diasadicionales > 0  then
                           open curprestacionesmensualesadicional
                              (rectrabajadores.id_trabajador,aniomesdesde,aniomeshasta);
  			   fetch curprestacionesmensualesadicional 
                                  into recprestacionesmensualesadicional;	
	                   close curprestacionesmensualesadicional;
                           if recprestacionesmensualesadicional.monto_prestaciones is null then
                              recprestacionesmensualesadicional.monto_prestaciones :=0;
                           end if;
                           baseadicional :=recprestacionesmensualesadicional.monto_prestaciones
                                          + montoprestaciones;
                           montoadicional:= (baseadicional/60) * diasadicionales;
 
                        end if;
                        raise notice 'PASA 5 ';


                





                      if diasprestaciones = 5 then
                           raise notice 'PASA 6 ';
  
		           id := last_id_liquidacionprestacionesmensuales()+1;
		           if id is null then 
		              id := 1;
		           end if;
                           raise notice 'PASA 7 ';

                           perform add_liquidacionprestacionesmensuales(
                             id,
                             rectrabajadores.id_tipo_personal,
                             rectrabajadores.id_trabajador,
                             rechistoricodevengado.anio,
                             rechistoricodevengado.mes,
                             diasprestaciones,
                             diasadicionales,
                             rechistoricodevengado.sueldo_integral,
                             baseadicional,
                             montoprestaciones,
                             montoadicional,
                             'N',
                             'N');
 
                      end if;                
                      anio_fin :=rechistoricodevengado.anio;
                      mes_fin  :=rechistoricodevengado.mes;
                      ultimomontoprestaciones:=montoprestaciones;
                end loop;
                close curhistoricodevengado;
          	raise notice 'PASA 8 ';
               
                aniomesdesde:=anio_fin * 100 + mes_fin;
                open curprestacionesmensuales(recTrabajadores.id_trabajador,
                                              aniomesdesde);
		loop			
			fetch curprestacionesmensuales into recprestacionesmensuales;	
			exit when not found;
	                id := last_id_liquidacionprestacionesmensuales()+1;
		        if id is null then 
		           id := 1;
		        end if;
                        raise notice 'PASA 7 ';

                        perform add_liquidacionprestacionesmensuales(
                           id,
                           rectrabajadores.id_tipo_personal,
                           rectrabajadores.id_trabajador,
                           recprestacionesmensuales.anio,
                           recprestacionesmensuales.mes,
                           recprestacionesmensuales.dias_mensuales,
                           recprestacionesmensuales.dias_adicionales,
                           recprestacionesmensuales.base_mensual,
                           recprestacionesmensuales.base_adicional,
                           recprestacionesmensuales.monto_prestaciones,
                           recprestacionesmensuales.monto_adicional,
                           recprestacionesmensuales.fideicomiso,
                           recprestacionesmensuales.dias_cancelados);
                anio_fin :=recprestacionesmensuales.anio;
                mes_fin  :=recprestacionesmensuales.mes;
                ultimomontoprehstaciones:=recprestacionesmensuales.monto_prestaciones;
              end loop;
              close curprestacionesmensuales;
       
        
           ---
           ---Calcular fraccion de los dias adicionales y de prestaciones mensuales al egreso
           ---
                           
           aniosservicios := anioegreso - anioingreso;
           if mesegreso > mesingreso then
              aniosservicios:=aniosservicios + 1;
           end if;

           montoprestaciones :=0;
           montoadicional    :=0;
           diasprestaciones  :=0;
                             
           if aniosservicios <2 then 
              diasadicionales := 0;
           elsif aniosservicios = 2 then
              diasadicionales := 2;
           elsif aniosservicios =3 then 
              diasadicionales := 4;
           elsif aniosservicios =4 then 
              diasadicionales := 6;
           elsif aniosservicios =5 then 
              diasadicionales := 8;
           elsif aniosservicios =6 then 
              diasadicionales := 10;
           elsif aniosservicios =7 then 
              diasadicionales := 12;
           elsif aniosservicios =8 then 
              diasadicionales := 14;
           elsif aniosservicios =9 then 
              diasadicionales := 16;
           elsif aniosservicios =10 then 
              diasadicionales := 18;
           elsif aniosservicios =11 then 
              diasadicionales := 20;
           elsif aniosservicios =12 then 
              diasadicionales := 22;
           elsif aniosservicios =13 then 
              diasadicionales := 24;
           elsif aniosservicios =14 then 
              diasadicionales := 26;
           elsif aniosservicios =15 then 
              diasadicionales := 28;
           elsif aniosservicios =16 then 
              diasadicionales := 30;
           else
              diasadicionales := 30;
           end if;                            
                        
           ---
           ---Se busca lo que ha percibido por prestaciones
           ---en el ultimo aÃ±o a partir del mes de ingreso.
           ---Para completar segun el art. 108 de la LOT
           ---de acuerdo a la antiguedad del trabajador.
           ---
        
            aniomeshasta := (anio_fin * 100) + mes_fin;
            aniomesdesde := ((anio_fin) * 100) + mesingreso;
                           
            open curprestacionesmensualesadicional
                 (rectrabajadores.id_trabajador,aniomesdesde,aniomeshasta);
  	    fetch curprestacionesmensualesadicional 
                 into recprestacionesmensualesadicional;	
   	    close curprestacionesmensualesadicional;
            if recprestacionesmensualesadicional.monto_prestaciones is null then
               recprestacionesmensualesadicional.monto_prestaciones :=0;
            end if;
            if recprestacionesmensualesadicional.dias_mensuales is null then
               recprestacionesmensualesadicional.dias_mensuales :=0;
            end if;
            ---
            --- Si en el ultimao aÃ±o, a partir del mes de ingreso
            --- se le generaron los igual o mas de 30 dias
            --- (30 dias equivalente a seis meses, 5 por mes)
            --- le corresponde la fraccion por los dias adicionales
            --- y el resto de 5 dias por mes hasta completar 60 dias.
            ---
            if recprestacionesmensualesadicional.dias_mensuales >=30 then
               montoadicional :=
               (recprestacionesmensualesadicional.monto_prestaciones/
                recprestacionesmensualesadicional.dias_mensuales)
                * diasadicionales;
            end if; 
            ----
            ----Completando el aÃ±o de prestaciones(5 dias por mes).
            ----
            if (anioegreso * 100 + mesegreso) -
               (anioingreso * 100 + mesingreso) <= 3 then
                aniosservicios := 0;
                diasprestaciones :=0;
            end if;
            ----
            ----Si trabajo entre 4 y 6 meses se completan  15 dias
            ----
            if (anioegreso * 100 + mesegreso) -
               (anioingreso * 100 + mesingreso) between 4 and 6 then
                diasprestaciones := 15;
                montoprestaciones :=
                (ultimomontoprestaciones/ 5)
                 *(diasprestaciones-
                  recprestacionesmensualesadicional.dias_mensuales);
            end if;
            ----
            ----Si trabajo entre 7 y 12 meses se completan  45 dias
            ----
            if (anioegreso * 100 + mesegreso) -
               (anioingreso * 100 + mesingreso) between 7 and 12 then
               diasprestaciones := 45;
               montoprestaciones :=
               (ultimomontoprestaciones/ 5)
               *(diasprestaciones-
                recprestacionesmensualesadicional.dias_mensuales);
            end if;
            ----
            ----Si trabajo mas de un aÃ±o y en el
            ----ultimo aÃ±o trabajo mayor o igual a seis meses
            ----se completan los 60 dias.
            ----
            if ((anioegreso * 100 + mesegreso) -
             (anioingreso * 100 + mesingreso) > 12) and
             (recprestacionesmensualesadicional.dias_mensuales >=30) then
               diasprestaciones := 60;
               montoprestaciones :=
               (ultimomontoprestaciones/ 5)
                *(diasprestaciones-recprestacionesmensualesadicional.dias_mensuales);
            end if;
                           
           -- montoprestaciones := diasadicionales;
           -- montoadicional    := recprestacionesmensualesadicional.dias_mensuales;
           if montoprestaciones > 0 or montoadicional > 0 then
              id := last_id_liquidacionresumennuevoregimen()+1;
	      if id is null then 
                 id := 1;
	      end if;
              raise notice 'PASA 9 ';
              perform add_liquidacionresumennuevoregimen(id,
                            rectrabajadores.id_trabajador,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            montoadicional,
                            montoprestaciones);   
           end if;  
        end loop;    
        close curTrabajadores_2;

        raise notice 'PASA 10 ';

	delete from identity;

	return 1;
end;
$_$;


--
-- TOC entry 780 (class 1255 OID 3240814)
-- Name: liquidar_trabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION liquidar_trabajador(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  declare 
	pIdTipoPersonal               alias for $1;
	pIdtrabajador                 alias for $2;

begin
	
     raise notice 'PASA 00 ';

        ----
        ----  Se elimina de las tablas de interes de viejo y nuevo regimen
        ----  donde se mantiene la deuda total del organismo.
        ----
	delete from interesviejoregimen 
           where id_trabajador =Pidtrabajador;
 
	delete from resumenviejoregimen
           where id_trabajador =Pidtrabajador;

 	delete from interesadicional
            where id_trabajador =Pidtrabajador;
        
        delete from interesnuevoregimen 
           where id_trabajador =Pidtrabajador;
 
        delete from resumennuevoregimen
           where id_trabajador =Pidtrabajador;

        ---
        ---Se elimina de las tablas de calculo de la
        ---liquidacion para llenar nuevamente en el proceso.
        ---
	delete from liquidacioninteresviejoregimen 
              where id_trabajador =Pidtrabajador;

	delete from liquidacionresumenviejoregimen
           where id_trabajador =Pidtrabajador;

       	delete from liquidacioninteresadicional
           where id_trabajador =Pidtrabajador;
 	
        delete from liquidacioninteresnuevoregimen 
           where id_trabajador =Pidtrabajador;

        delete from liquidacionresumennuevoregimen 
           where id_trabajador =Pidtrabajador;

        delete from liquidacionprestacionesmensuales 
           where id_trabajador =Pidtrabajador;

        raise notice 'va a entrar 01 ';


        perform liquidar_interes_viejo_regimen
           (pIdTipoPersonal,pidtrabajador);
        raise notice 'va a entrar 02 ';
        
       
        perform liquidar_prestaciones_historico(pIdTipopersonal,Pidtrabajador);
        raise notice 'va a entrar 03 ';

        perform liquidar_interes_nuevo_regimen (pIdTipopersonal,Pidtrabajador);
        
        
        raise notice 'va a entrar 04 ';

        delete from identity;

        return 1;

end;
$_$;


--
-- TOC entry 781 (class 1255 OID 3240815)
-- Name: pagar_guarderias(integer, date, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION pagar_guarderias(integer, date, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	
	pIdTipoPersonal ALIAS FOR $1;
	pFecha ALIAS FOR $2;
	pTipoConcepto ALIAS FOR $3;
	pInscripcion ALIAS FOR $4;

	curFamiliar refcursor;
	recFamiliar record;

	curPersonal refcursor;
	recPersonal record;

	recParametros record;
	recIdentificadores record;

	fechaDesde date;
	fechaHasta date;
	fechaActual date;		
	
	montoPatron float8;
	montoConcepto float8;

	idConceptoVariable int4;
	idPagoGuarderia int4;	
	validado bool;
        inserto bool;
        quienCobra varchar(1);

	anioProceso int4;
	mesProceso int4;
begin

        inserto := FALSE;
        ---
        ---Selecciona el concepto por tipo de personal predefinido de guarderias
        ---
	SELECT INTO recIdentificadores id_concepto_tipo_personal, id_frecuencia_tipo_personal 
		FROM ConceptoTipoPersonal AS ctp INNER JOIN concepto AS c USING (id_concepto)
		WHERE c.cod_concepto = '4008' AND
			ctp.id_tipo_personal = pIdTipoPersonal;

        ---
        ---Selecciona los parametros del  tipo de personal 
        ---
	SELECT INTO recParametros  edad_maxima,  monto_patron, quien_cobra, pago_nomina 
		FROM parametroguarderia 
		WHERE id_tipo_personal = pIdTipoPersonal;

		fechaDesde = add_years(pFecha, -recParametros.edad_maxima);	
		montoPatron = recParametros.monto_patron;

        quienCobra := 'A';
	IF recParametros.quien_cobra = 'M' THEN
           quienCobra := 'F';
        END IF;
        IF recParametros.quien_cobra = 'P' THEN
           quienCobra := 'M';
        END IF;

	
	fechaActual = current_date;
	anioProceso = extract(day from pFecha);
	mesProceso = extract(month from pFecha);

        ---
        ---Abre el cursor para seleccionar a los hijos de los trabajadores
        ---activos del tipo de personal
        ---
	OPEN curPersonal FOR 
		SELECT p.id_personal, MAX(t.id_trabajador) as id_trabajador, MAX(p.sexo) as sexo
			FROM guarderiafamiliar AS gf, familiar AS f, personal AS p, 
			trabajador AS t
			WHERE gf.id_familiar = f.id_familiar AND
				f.id_personal = p.id_personal AND
				p.id_personal = t.id_personal AND				
				f.fecha_nacimiento BETWEEN fechaDesde AND pFecha AND
				t.id_tipo_personal = pIdTipoPersonal AND
				f.parentesco = 'H' AND
				t.estatus = 'A'
	GROUP BY (p.id_personal);

	idConceptoVariable = last_id_conceptovariable();
        IF idConceptoVariable is null THEN
           idConceptoVariable:=1;
        END IF;	
	idPagoGuarderia = last_id_pagoguarderia();	
	montoConcepto = 0;

	LOOP
		FETCH curPersonal INTO recPersonal;
		EXIT WHEN NOT FOUND;
		validado = TRUE;
                ---
                ---Verifica quien cobra el beneficio (Padre, Madre o Ambos)
                ---
		IF quienCobra <> recPersonal.sexo AND 
			recParametros.quien_cobra <> 'A' THEN
			IF  (validar_conyuge(recPersonal.id_personal)=0) THEN
				validado = TRUE;
			ELSE
				validado = FALSE;
			END IF;
		END IF;
                ---
                ---Validado el titular
                ---
		IF validado = TRUE THEN
			OPEN curFamiliar FOR 
				SELECT gf.monto_mensualidad, gf.monto_inscripcion, gf.id_familiar, gf.id_guarderia
				FROM guarderiafamiliar AS gf INNER JOIN familiar as f USING (id_familiar)
				WHERE f.id_personal = recPersonal.id_personal
				AND f.fecha_nacimiento BETWEEN fechaDesde AND pFecha AND
				f.parentesco = 'H';
			
			LOOP
				
				FETCH curFamiliar INTO recFamiliar;
				EXIT WHEN NOT FOUND;	
                                ---
                                ---Si es inscripcion
                                ---		
				IF pInscripcion = 'S' THEN
					IF recFamiliar.monto_inscripcion > montoPatron THEN
						montoConcepto = montoConcepto + montoPatron;
					ELSE
						montoConcepto = montoConcepto + recFamiliar.monto_inscripcion;
					END IF;
				ELSE
					IF recFamiliar.monto_mensualidad > montoPatron THEN
						montoConcepto = montoConcepto + montoPatron;
					ELSE
						montoConcepto = montoConcepto + recFamiliar.monto_mensualidad;
					END IF;
				END IF;
				IF recParametros.pago_nomina = 'N' THEN
					idPagoGuarderia = idPagoGuarderia + 1;
					INSERT INTO pagoguarderia (id_pago_guarderia, id_personal, id_familiar,
					id_guarderia, anio, mes, monto, inscripcion) values(idPagoGuarderia, 
					recPersonal.id_personal, recFamiliar.id_familiar, recFamiliar.id_guarderia,
					anioProceso, mesProceso, montoConcepto, pInscripcion);
					
				END IF;
						
			END LOOP;
			CLOSE curFamiliar;
		END IF;
                ---
                ---(Si Grabar en Variables o esta la inscripcion) y esta validado, y
                ---se paga por nomina se graba en conceptos variables.
                ---
		IF (pTipoConcepto = 'V') OR pInscripcion = 'S' AND validado = TRUE 
			AND recParametros.pago_nomina = 'S' THEN			
			idConceptoVariable = idConceptoVariable + 1;
			INSERT INTO conceptovariable
				(id_concepto_variable,
				id_trabajador,
				id_concepto_tipo_personal,
				id_frecuencia_tipo_personal,
				monto,
				fecha_registro,
				estatus)
			VALUES (
				idConceptoVariable,
				recPersonal.id_trabajador,
				recIdentificadores.id_concepto_tipo_personal,
				recIdentificadores.id_frecuencia_tipo_personal,
				montoConcepto,
				fechaActual,
				'A');
                        inserto :=true;
		END IF;

	END LOOP;
	CLOSE curPersonal;

        ---
         
        IF inserto=TRUE THEN
            UPDATE identity set last = idConceptoVariable
               WHERE name ='ConceptoVariable';
        END IF;			

	return 0;
end;
$_$;


--
-- TOC entry 782 (class 1255 OID 3240817)
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


--
-- TOC entry 783 (class 1255 OID 3240818)
-- Name: procesar_traslado_mutuo(integer, integer, date, date, character varying, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION procesar_traslado_mutuo(integer, integer, date, date, character varying, character varying, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pIdRegistroCargos1 alias for $1;
	pIdRegistroCargos2 alias for $2;	
	pFechaVigencia alias for $3;
	pFechaPunto alias for $4;
	pNumeroPunto alias for $5;	
	pObservaciones alias for $6;
	pIdUsuario alias for $7;
	pIdOrganismo alias for $8;

	---- variables de cálculo
	vSueldoPromedio float8 := 0.0;
	vNumeroMovimiento int8 := 0;
	vIdCausaMovimiento int8 := 5;
	vCausaMovimiento character varying := '';
	vCodCausaMovimiento character varying := '';
	vUsuario character varying := '';


	
	-- Para trayectoria
	idTrayectoria int4; 

	-- Para RegistroSitp
	idRegistroSitp int4;	

	-- constantes para registrositp
	sueldoBasico float8:=0.0;
	vCompensacion float8 :=0.0; 
	primasCargo  float8 :=0.0;
	primasTrabajador float8 :=0.0;
	vCodTabulador character varying := null;
	idSitp int4 := 0; -- cotejado con los ambientes de produccion
	tiempoSitp date := null;
	
	fechaRegistro date := current_date;
	fechaMovimiento date := current_date;
	vLocalidad character varying :='C'; -- leido en la clase en la aplicacion
	afectaSueldo character varying :='N';
	documentoSoporte character varying := null;-- leido en la clase en la aplicacion
	idRemesa int4 := null;
	vEstatusRsitp int4 := 0;
	--vObservaciones text:= 'Registro Generado en el proceso de Carga Masiva de implantación';
	idUsuario int4 := 1; -- valor por defecto del usuario sigefirrhh
	estatusMpd character varying :=null;
	codigoDevolucion  character varying :=null;
	analistaMpd  character varying :=null;
	idAnalistaMpd int4 := 0;
	fechaInicioMpd date := null;
	fechaFinMpd date := null;
	observacionesMpd text:= null;
	fechaPuntoCuenta date := null;
	puntoCuenta character varying :=null;
	vAnio int4 := extract(year from current_date);
	--anteriorCodManualCargo int4 := 0;
	--anteriorCodCargo character varying := null;
	--anteriorDescripcionCargo character varying := null;
	--anteriorCodigoNomina int4 := 0;
	--anteriorCodSede character varying := null;
	--anteriorNombreSede character varying := null;
	--anteriorCodDependencia character varying := null;
	--anteriorNombreDependencia character varying := null;
	anteriorSueldo float8 :=0.0;
	anteriorCompensacion float8 :=0.0;
	anteriorPrimasCargo float8 :=0.0;
	anteriorPrimasTrabajador float8 :=0.0; 	
	anteriorGrado int4 := 0;
	anteriorPaso int4 := 1;
	anteriorCodRegion character varying := null;
	anteriorNombreRegion character varying := null;
	codConcurso character varying := null;
	fechaCulminacion date := null;	

	-- constantes para trayectoria
	anioPreparacion int4 := extract(year from current_date);
	fechaPreparacion date := current_date;
	numeroRemesa character varying := null;
	correlativoMpd int4 := 0;
	vEstatusTray character varying := 0;
	fechaEstatus date := current_date;
	fechaVigencia date := current_date;
	vNombramiento character varying := null;
	montoJubilacionSobrev float8 :=0.0;
	porcPensionSobrev float8 :=0.0;
	montoPensionSobrev float8 :=0.0;
	montoPensionInvalid float8 :=0.0;
	porcPensionInvalid float8 :=0.0;
	invalidezSact float8 :=0.0;
	primaJerarquia float8 :=0.0;
	primaServicio float8 :=0.0;
	ajusteSueldo float8 :=0.0;
	otrosPagos float8 :=0.0;
	otrosNoVicepladin float8 :=0.0;
	vOrigen character varying := 'S';
	-- vUsuario character varying := 'sigefirrhh';
	nombreMunicipio  character varying := null;
	montoJubilacion float8 :=0.0; 
	porcJubilacion int4 := 0;
	vHoras float8 := 8;			


	-- registros y cursores 
	recOrganismo record;
	recClasificacionPersonal record;
	recCategoriaPersonal record;
	recRelacionPersonal record;	
		
	recRegistro1 record;
	curRegistro1 cursor (cIdRegistroCargos1 int4) for
		select p.id_personal, p.cedula, p.primer_nombre, p.primer_apellido, p.segundo_nombre, p.segundo_apellido,
			t.id_trabajador, t.estatus, t.paso,
			rc.codigo_nomina,rc.situacion,rc.id_registro,
			d.id_dependencia, d.cod_dependencia,d.nombre as nombre_dependencia,
			c.id_cargo, c.cod_cargo, c.descripcion_cargo, c.grado, c.sub_grado, c.tipo_cargo, c.caucion,
			se.id_lugar_pago,se.nombre as nombre_Sede, se.cod_sede, se.id_turno, re.cod_region, re.nombre as nombre_region,
			tp.id_tipo_personal, tp.nombre as nombre_tipo_personal,tp.id_clasificacion_personal,
			mc.cod_manual_cargo,
			cu.cod_ciudad, cu.nombre as nombre_ciudad, edo.nombre as nombre_estado, edo.cod_estado, 
			go.nombre as nombre_grupo_organismo, go.nombre_corto, go.cod_grupo_organismo
		from trabajador t, registrocargos rc, cargo c, dependencia d, sede se, personal p, tipopersonal tp,
			region re, manualcargo mc,ciudad cu, estado edo, grupoorganismo go
		where t.id_registro_cargos = rc.id_registro_cargos
		and t.id_personal = p.id_personal
		and rc.id_cargo = c.id_cargo
		and se.id_ciudad = cu.id_ciudad
		and cu.id_estado = edo.id_estado
		and rc.id_dependencia = d.id_dependencia
		and d.id_sede = se.id_sede
		and t.id_tipo_personal = tp.id_tipo_personal 
		and d.id_region = re.id_region
		and c.id_manual_cargo = mc.id_manual_cargo
		and d.id_grupo_organismo = go.id_grupo_organismo
		and rc.id_registro_cargos = cIdRegistroCargos1;
		

	recRegistro2 record;
	curRegistro2  cursor (cIdRegistroCargos2 int4) for
		select p.id_personal, p.cedula, p.primer_nombre, p.primer_apellido, p.segundo_nombre, p.segundo_apellido,
			t.id_trabajador, t.estatus, t.paso,
			rc.codigo_nomina,rc.situacion,rc.id_registro,
			d.id_dependencia, d.cod_dependencia,d.nombre as nombre_dependencia,
			c.id_cargo, c.cod_cargo, c.descripcion_cargo, c.grado, c.sub_grado, c.tipo_cargo, c.caucion,
			se.id_lugar_pago,se.nombre as nombre_Sede, se.cod_sede, se.id_turno, re.cod_region, re.nombre as nombre_region,
			tp.id_tipo_personal, tp.nombre as nombre_tipo_personal,tp.id_clasificacion_personal,
			mc.cod_manual_cargo,
			cu.cod_ciudad, cu.nombre as nombre_ciudad, edo.nombre as nombre_estado, edo.cod_estado, 
			go.nombre as nombre_grupo_organismo, go.nombre_corto, go.cod_grupo_organismo 
		from trabajador t, registrocargos rc, cargo c, dependencia d, sede se, personal p, tipopersonal tp,
			region re, manualcargo mc,ciudad cu, estado edo, grupoorganismo go
		where t.id_registro_cargos = rc.id_registro_cargos
		and t.id_personal = p.id_personal
		and rc.id_cargo = c.id_cargo
		and se.id_ciudad = cu.id_ciudad
		and cu.id_estado = edo.id_estado
		and rc.id_dependencia = d.id_dependencia
		and d.id_sede = se.id_sede
		and t.id_tipo_personal = tp.id_tipo_personal 
		and d.id_region = re.id_region
		and c.id_manual_cargo = mc.id_manual_cargo
		and d.id_grupo_organismo = go.id_grupo_organismo	
		and rc.id_registro_cargos = cIdRegistroCargos2;
   
 begin 	

 /*
	101 - Ambos puestos deben encontrarse ocupados.
	102 - Ambos trabajadores deben estar activos.
	103 - Ambos trabajadores deben pertenecer al mismo tipo de personal.
	104 - Ambos puestos deben pertenecer al mismo registro.
	105 - Ambos cargos deben tener el mismo grado y/o sub grado.
	
 */
 
	raise notice 'Se inicia la ejecucion de la funcion procesar_traslado_mutuo()';



	--- se buscan los valores a emplear 


	--- causamovimiento
	select descripcion || ' - ' || cod_causa_movimiento, cod_causa_movimiento into vCausaMovimiento,vCodCausaMovimiento from causamovimiento where id_causa_movimiento = vIdCausaMovimiento;

	--- numero de movimiento 
	select coalesce(max(numero_movimiento)+1,1) into vNumeroMovimiento from registrositp where id_organismo = pIdOrganismo and anio = extract(year from pFechaVigencia);

	---  el usuario 
	select usuario into vUsuario from usuario where id_usuario = pIdUsuario; 

	--- Abro los cursores y registros 
	open curRegistro1(pIdRegistroCargos1);
	fetch curRegistro1 into recRegistro1;
		if not found then 
			return 101;
		end if;
	close curRegistro1;

	open curRegistro2(pIdRegistroCargos2);
	fetch curRegistro2 into recRegistro2;
		if not found then 
			return 101;
		end if;	
	close curRegistro2;

	select * into recOrganismo from organismo;
	select * into recClasificacionPersonal from clasificacionpersonal where id_clasificacion_personal = recRegistro1.id_clasificacion_personal;
	select * into recRelacionPersonal from relacionpersonal where id_relacion_personal = recClasificacionPersonal.id_relacion_personal;
	select * into recCategoriaPersonal from categoriapersonal where id_categoria_personal = recClasificacionPersonal.id_categoria_personal;

	
	--- Inicio el proceso de validación -------------------------------------------------------------------------------

	-- Trabajadores ---------------------

	-- Estatus 
	If recRegistro1.estatus <> 'A' or recRegistro2.estatus <> 'A' then 
		return 102;
	end if;

	-- Tipo de personal  
	If recRegistro1.id_tipo_personal <> recRegistro2.id_tipo_personal then 
		return 103;
	end if;	
	
	-- Puestos ---------------------

	-- Situacion 
	If recRegistro1.situacion <> 'O' or recRegistro2.situacion <> 'O' then 
		return 101;
	end if;

	-- Registro   
	If recRegistro1.id_registro <> recRegistro2.id_registro then 
		return 104;
	end if;		

	-- Cargos ---------------------

	-- Grado 
	If recRegistro1.grado <> recRegistro2.grado or recRegistro1.sub_grado <> recRegistro2.sub_grado then 
		return 105;
	end if;	

	--- Cambio de registros -------------------------------------------------------------------------------

	-- para la tabla trabajador 
			
	UPDATE trabajador
	   SET 	id_registro_cargos=pIdRegistroCargos2, 
		id_cargo=recRegistro2.id_cargo, 
		id_dependencia=recRegistro2.id_dependencia, 
		id_lugar_pago=recRegistro2.id_lugar_pago, 
		codigo_nomina=recRegistro2.codigo_nomina, 
		cod_cargo=recRegistro2.cod_cargo, 
		id_causa_movimiento=vIdCausaMovimiento, 
		id_dependencia_real=recRegistro2.id_dependencia, 
		id_cargo_real=recRegistro2.id_cargo, 
		codigo_nomina_real=recRegistro2.codigo_nomina, 
		fecha_ultimo_movimiento=pFechaVigencia
	 WHERE id_trabajador=recRegistro1.id_trabajador;

	UPDATE trabajador
	   SET 	id_registro_cargos=pIdRegistroCargos1, 
		id_cargo=recRegistro1.id_cargo, 
		id_dependencia=recRegistro1.id_dependencia, 
		id_lugar_pago=recRegistro1.id_lugar_pago, 
		codigo_nomina=recRegistro1.codigo_nomina, 
		cod_cargo=recRegistro1.cod_cargo, 
		id_causa_movimiento=vIdCausaMovimiento, 
		id_dependencia_real=recRegistro1.id_dependencia, 
		id_cargo_real=recRegistro1.id_cargo, 
		codigo_nomina_real=recRegistro1.codigo_nomina, 
		fecha_ultimo_movimiento=pFechaVigencia
	 WHERE id_trabajador=recRegistro2.id_trabajador;	 

	-- para registrocargos 


	UPDATE registrocargos
	   SET id_trabajador=recRegistro2.id_trabajador
	 WHERE id_registro_cargos=pIdRegistroCargos1;

	UPDATE registrocargos
	   SET id_trabajador=recRegistro1.id_trabajador
	 WHERE id_registro_cargos=pIdRegistroCargos2;

	--- Escritura en historicos -------------------------------------------------------------------------------


	--registrositp

		select coalesce(max(id_registro_sitp),0)+1 into idRegistroSitp from registrositp;
			
		insert into registrositp
			(
			id_registro_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region, 
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion)
			values
			(
			idRegistroSitp,fechaRegistro,pFechaVigencia ,recRegistro1.codigo_nomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recRegistro1.grado,recRegistro1.paso,recRegistro1.cod_dependencia,
			recRegistro1.cod_sede,recRegistro1.tipo_cargo,recRegistro1.nombre_tipo_personal,recRegistro1.id_clasificacion_personal,vIdCausaMovimiento,
			vCodCausaMovimiento, recRegistro1.cod_manual_cargo, recRegistro1.cod_cargo,recRegistro1.descripcion_cargo,vCodTabulador,
			afectaSueldo,documentoSoporte,vLocalidad,vNumeroMovimiento,recRegistro2.cedula,  
			recRegistro2.primer_apellido || ' ' || recRegistro2.primer_nombre, recRegistro2.id_personal,idRemesa,vEstatusRsitp,recRegistro1.nombre_dependencia,
			recRegistro1.nombre_sede,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			pObservaciones,pIdUsuario ,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegistro1.cod_region,
			recRegistro1.nombre_region,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,recRegistro2.Cod_Manual_Cargo,recRegistro2.Cod_Cargo,recRegistro2.Descripcion_Cargo,
			recRegistro2.Codigo_Nomina,recRegistro2.Cod_Sede,recRegistro2.Nombre_Sede,recRegistro2.Cod_Dependencia,
			recRegistro2.Nombre_Dependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,recRegistro2.Grado,recRegistro2.Paso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pFechaVigencia,recRegistro2.id_turno,fechaCulminacion);	
				
			
		insert into registrositp
			(
			id_registro_sitp,fecha_registro,fecha_movimiento,codigo_nomina,sueldo,
			compensacion,primas_cargo,primas_trabajador,grado,paso,cod_dependencia,
			cod_sede,tipo_personal,nombre_tipo_personal,id_clasificacion_personal,id_causa_movimiento,
			cod_causa_movimiento,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_tabulador,
			afecta_sueldo,documento_soporte,localidad,numero_movimiento,cedula,
			apellidos_nombres,id_personal,id_remesa,estatus,nombre_dependencia,
			nombre_sede,id_organismo,cod_organismo,cod_organismo_mpd,nombre_organismo,
			observaciones,id_usuario,estatus_mpd,codigo_devolucion,analista_mpd,
			id_analista_mpd,fecha_inicio_mpd,fecha_fin_mpd,observaciones_mpd,cod_region,
			nombre_region,id_sitp,tiempo_sitp,fecha_punto_cuenta,punto_cuenta,
			anio,anterior_cod_manual_cargo,anterior_cod_cargo,anterior_descripcion_cargo,
			anterior_codigo_nomina,anterior_cod_sede,anterior_nombre_sede,anterior_cod_dependencia,
			anterior_nombre_dependencia,anterior_sueldo,anterior_compensacion,anterior_primas_cargo,
			anterior_primas_trabajador,anterior_grado,anterior_paso,anterior_cod_region,
			anterior_nombre_region,cod_concurso,fecha_ingreso,id_turno,fecha_culminacion)
			values
			(
			idRegistroSitp+1,fechaRegistro,pFechaVigencia ,recRegistro2.codigo_nomina,SueldoBasico,
			vCompensacion,primasCargo,primasTrabajador,recRegistro2.grado,recRegistro2.paso,recRegistro2.cod_dependencia,
			recRegistro2.cod_sede,recRegistro2.tipo_cargo,recRegistro2.nombre_tipo_personal,recRegistro2.id_clasificacion_personal,vIdCausaMovimiento,
			vCodCausaMovimiento, recRegistro2.cod_manual_cargo, recRegistro2.cod_cargo,recRegistro2.descripcion_cargo,vCodTabulador,
			afectaSueldo,documentoSoporte,vLocalidad,vNumeroMovimiento+1,recRegistro1.cedula,  
			recRegistro1.primer_apellido || ' ' || recRegistro1.primer_nombre, recRegistro1.id_personal,idRemesa,vEstatusRsitp,recRegistro2.nombre_dependencia,
			recRegistro2.nombre_sede,recOrganismo.id_organismo,recOrganismo.cod_organismo,recOrganismo.cod_organismo,recOrganismo.nombre_organismo,
			pObservaciones,pIdUsuario ,estatusMpd,codigoDevolucion,analistaMpd,
			idAnalistaMpd,fechaInicioMpd,fechaFinMpd,observacionesMpd,recRegistro2.cod_region,
			recRegistro2.nombre_region,idSitp,tiempoSitp,fechaPuntoCuenta,puntoCuenta,
			vAnio,recRegistro1.Cod_Manual_Cargo,recRegistro1.Cod_Cargo,recRegistro1.Descripcion_Cargo,
			recRegistro1.Codigo_Nomina,recRegistro1.Cod_Sede,recRegistro1.Nombre_Sede,recRegistro1.Cod_Dependencia,
			recRegistro1.Nombre_Dependencia,anteriorSueldo,anteriorCompensacion,anteriorPrimasCargo,
			anteriorPrimasTrabajador,recRegistro1.Grado,recRegistro1.Paso,anteriorCodRegion,
			anteriorNombreRegion,codConcurso,pFechaVigencia,recRegistro1.id_turno,fechaCulminacion);


	--trayectoria

		select coalesce(max(id_trayectoria),0)+1 into idTrayectoria from trayectoria;


		insert into trayectoria (
			id_trayectoria,cedula,primer_apellido,segundo_apellido,primer_nombre,
			segundo_nombre,anio_preparacion,fecha_preparacion,codigo_anterior_mpd,
			numero_remesa,numero_movimiento,correlativo_mpd,nombre_corto,nombre_organismo,
			estatus,fecha_estatus,fecha_vigencia,cod_ubi_geografico,estado,ciudad,
			municipio,cod_region,nombre_region,cod_dependencia,nombre_dependencia,
			cod_causa_movimiento,descripcion_movimiento,nombre_corto_grupo,nombre_largo_grupo,
			caucion,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_relacion,
			desc_relacion,cod_categoria,desc_categoria,nombramiento,grado,
			paso,codigo_nomina,monto_jubilacion,porc_jubilacion,sueldo_promedio,
			monto_jubilacion_sobrev,porc_pension_sobrev,monto_pension_sobrev,monto_pension_invalid,
			porc_pension_invalid,invalidez_sact,sueldo_basico,compensacion,prima_jerarquia,
			prima_servicio,ajuste_sueldo,otros_pagos,otros_no_vicepladin,primas_cargo,primas_trabajador,
			id_personal,horas,cod_concurso,fecha_punto_cuenta,observaciones,origen,punto_cuenta,
			usuario,cod_grupo_organismo,cod_organismo,fecha_culminacion
			)
			values
			(
			idTrayectoria,recRegistro2.Cedula,recRegistro2.primer_apellido,recRegistro2.segundo_apellido,recRegistro2.primer_nombre,
			recRegistro2.segundo_nombre, anioPreparacion,fechaPreparacion,recOrganismo.codigo_anterior_mpd,
			numeroRemesa,vNumeroMovimiento, correlativoMpd, recOrganismo.nombre_corto, recOrganismo.nombre_organismo,
			vEstatusTray,fechaEstatus,pFechaVigencia, recRegistro1.cod_ciudad || recRegistro1.cod_estado,recRegistro1.nombre_estado,recRegistro1.nombre_ciudad,
			nombreMunicipio, recRegistro1.cod_region, recRegistro1.nombre_region, recRegistro1.cod_dependencia,recRegistro1.nombre_dependencia,
			vCodCausaMovimiento,vCausaMovimiento, recRegistro1.nombre_corto, recRegistro1.nombre_grupo_organismo,
			recRegistro1.caucion,recRegistro1.cod_manual_cargo, recRegistro1.cod_cargo, recRegistro1.descripcion_cargo, recRelacionPersonal.cod_relacion,
			recRelacionPersonal.desc_relacion, recCategoriaPersonal.cod_categoria,recCategoriaPersonal.desc_categoria,vNombramiento,recRegistro1.grado,
			recRegistro1.Paso,recRegistro1.Codigo_Nomina,montoJubilacion,porcJubilacion,vSueldoPromedio,
			montoJubilacionSobrev,porcPensionSobrev,montoPensionSobrev,montoPensionInvalid,
			porcPensionInvalid,invalidezSact,sueldoBasico,vCompensacion,primaJerarquia,
			primaServicio,ajusteSueldo,otrosPagos,otrosNoVicepladin,primasCargo,primasTrabajador,
			recRegistro2.id_personal,vHoras,codConcurso,fechaPuntoCuenta,pObservaciones,vOrigen, puntoCuenta,
			vUsuario, recRegistro2.cod_grupo_organismo, recOrganismo.cod_organismo, fechaCulminacion
			);


		insert into trayectoria (
			id_trayectoria,cedula,primer_apellido,segundo_apellido,primer_nombre,
			segundo_nombre,anio_preparacion,fecha_preparacion,codigo_anterior_mpd,
			numero_remesa,numero_movimiento,correlativo_mpd,nombre_corto,nombre_organismo,
			estatus,fecha_estatus,fecha_vigencia,cod_ubi_geografico,estado,ciudad,
			municipio,cod_region,nombre_region,cod_dependencia,nombre_dependencia,
			cod_causa_movimiento,descripcion_movimiento,nombre_corto_grupo,nombre_largo_grupo,
			caucion,cod_manual_cargo,cod_cargo,descripcion_cargo,cod_relacion,
			desc_relacion,cod_categoria,desc_categoria,nombramiento,grado,
			paso,codigo_nomina,monto_jubilacion,porc_jubilacion,sueldo_promedio,
			monto_jubilacion_sobrev,porc_pension_sobrev,monto_pension_sobrev,monto_pension_invalid,
			porc_pension_invalid,invalidez_sact,sueldo_basico,compensacion,prima_jerarquia,
			prima_servicio,ajuste_sueldo,otros_pagos,otros_no_vicepladin,primas_cargo,primas_trabajador,
			id_personal,horas,cod_concurso,fecha_punto_cuenta,observaciones,origen,punto_cuenta,
			usuario,cod_grupo_organismo,cod_organismo,fecha_culminacion
			)
			values
			(
			idTrayectoria+1,recRegistro1.Cedula,recRegistro1.primer_apellido,recRegistro1.segundo_apellido,recRegistro1.primer_nombre,
			recRegistro1.segundo_nombre, anioPreparacion,fechaPreparacion,recOrganismo.codigo_anterior_mpd,
			numeroRemesa,vNumeroMovimiento+1, correlativoMpd, recOrganismo.nombre_corto, recOrganismo.nombre_organismo,
			vEstatusTray,fechaEstatus,pFechaVigencia, recRegistro2.cod_ciudad || recRegistro2.cod_estado,recRegistro2.nombre_estado,recRegistro2.nombre_ciudad,
			nombreMunicipio, recRegistro2.cod_region, recRegistro2.nombre_region, recRegistro2.cod_dependencia,recRegistro2.nombre_dependencia,
			vCodCausaMovimiento,vCausaMovimiento, recRegistro2.nombre_corto, recRegistro2.nombre_grupo_organismo,
			recRegistro2.caucion,recRegistro2.cod_manual_cargo, recRegistro2.cod_cargo, recRegistro2.descripcion_cargo, recRelacionPersonal.cod_relacion,
			recRelacionPersonal.desc_relacion, recCategoriaPersonal.cod_categoria,recCategoriaPersonal.desc_categoria,vNombramiento,recRegistro2.grado,
			recRegistro2.Paso,recRegistro2.Codigo_Nomina,montoJubilacion,porcJubilacion,vSueldoPromedio,
			montoJubilacionSobrev,porcPensionSobrev,montoPensionSobrev,montoPensionInvalid,
			porcPensionInvalid,invalidezSact,sueldoBasico,vCompensacion,primaJerarquia,
			primaServicio,ajusteSueldo,otrosPagos,otrosNoVicepladin,primasCargo,primasTrabajador,
			recRegistro1.id_personal,vHoras,codConcurso,fechaPuntoCuenta,pObservaciones,vOrigen, puntoCuenta,
			vUsuario, recRegistro1.cod_grupo_organismo, recOrganismo.cod_organismo, fechaCulminacion
			);	
		
	raise notice 'Fin procesar_traslado_mutuo()';	
	return 0;

end;



$_$;


--
-- TOC entry 784 (class 1255 OID 3240820)
-- Name: registrar_anticipos(integer, integer, integer, date, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION registrar_anticipos(integer, integer, integer, date, double precision, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pAnio alias for $2;
	pMes alias for $3;
	pFechaAnticipo alias for $4;
	pMontoAnticipo alias for $5;
	pTipoAnticipo alias for $6;
	pFormaAnticipo alias for $7;		
	
	recTrabajadores record;
	curTrabajadores cursor (piTipoPersonal int4) 
		for select t.id_personal 		
		from trabajador t
		where t.id_tipo_personal = pIdTipoPersonal
		and t.estatus = 'A';

	id int4 := 0;

begin
	id := (select max(id_anticipo) from anticipo);
	if id is null THEN
		id := 0;	
	end if;

	open curTrabajadores (pIdTipoPersonal);

	loop
		fetch curTrabajadores into recTrabajadores;			
		exit when not found;		
		id := id + 1;
		insert into anticipo (id_anticipo, id_personal, id_tipo_personal, anio, mes, fecha_anticipo, 
			monto_anticipo, tipo_anticipo, forma_anticipo) values (id, recTrabajadores.id_personal, 
			pIdTipoPersonal, pAnio, pMes, pFechaAnticipo, pMontoAnticipo, pTipoAnticipo, pFormaAnticipo);
		
		
	end loop;
	close curTrabajadores;
		
	delete from identity;

	return 0;

end;

$_$;


--
-- TOC entry 785 (class 1255 OID 3240821)
-- Name: restituir_conceptofijo(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION restituir_conceptofijo(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update conceptofijo set unidades=unidades_restituir, monto=monto_restituir, restituir= 'N', 
	unidades_restituir=0, monto_restituir=0 where restituir= 'S' and 
	id_concepto_fijo in (select id_concepto from ultimanomina where id_grupo_nomina= $1 and numero_nomina=0)
		  
$_$;


--
-- TOC entry 786 (class 1255 OID 3240822)
-- Name: reversar_ausencias(integer, integer, integer, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION reversar_ausencias(integer, integer, integer, integer, integer, boolean) RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pIdGrupoNomina alias for $1;
	pNumeroNomina alias for $2;
        pAnio  alias for $3;
        pMes   alias for $4;
        pSemanaquincena alias for $5;
        pNominaEspecial alias for $6;

	---- variables de cálculo
	vIdNominaEspecial int;
	        
 begin 	
	raise notice 'Se inicia la ejecucion de la funcion reversar_ausencias()';

	if pNominaEspecial then --- el trozo de las especiales 

		--- busco el id_nomina_especial que le corresponde
		select id_nomina_especial into vIdNominaEspecial from nominaespecial where id_grupo_nomina = pIdGrupoNomina and anio = pAnio and numero_nomina = pNumeroNomina and mes = pMes;

		--- actualizo el estatus de las ausencias 
		Update ausencia set descuento_estatus = 'P' where id_ausencia in (select id_ausencia
											from ausencianomina 
											where id_nomina_especial = vIdNominaEspecial);

		--- Limpio la tabla de ausencias 
		Delete from ausencianomina where id_nomina_especial = vIdNominaEspecial;

	else --- voy con las ordinarias 

		--- actualizo el estatus de las ausencias 
		Update ausencia set descuento_estatus = 'P' where id_ausencia in (select id_ausencia
											from ausencianomina 
											where id_grupo_nomina = pIdGrupoNomina
											and id_nomina_especial is null);
											

		--- Limpio la tabla de ausencias 
		Delete from ausencianomina where id_grupo_nomina = pIdGrupoNomina and id_nomina_especial is null;
	
	end if;
			
	raise notice 'Fin reversar_ausencias()';	

-- return 0;
return;

end;



$_$;


--
-- TOC entry 787 (class 1255 OID 3240823)
-- Name: reversar_nomina(integer, integer, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION reversar_nomina(integer, integer, date, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare 

	pIdGrupoNomina alias for $1;
	pNumeroNomina alias for $2;
	pFechaInicio alias for $3;
	pPeriodicidad alias for $4;
	
	diaInicio int4:= 0;
	id int4 := 0;


	curConceptoVariable cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto_tipo_personal, un.id_frecuencia_tipo_personal,
		un.unidades, un.monto_asigna, un.monto_deduce, un.documento_soporte, fp.cod_frecuencia_pago 
		from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and numero_nomina = key1 and id_grupo_nomina = key2 and origen = 'V';
	recConceptoVariable record;
	
	curConceptoFijoDeduce cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.unidades, un.monto_deduce
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_deduce
		and un.monto_deduce <> 0
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'F';
	recConceptoFijoDeduce record;

	curConceptoFijoAsigna cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.unidades, un.monto_asigna 
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_asigna
		and un.monto_asigna <> 0
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'F';
	recConceptoFijoAsigna record;

	curPrestamo cursor (key1 int4, key2 int4) for select distinct un.id_ultima_nomina,
		un.id_trabajador, un.id_concepto, un.monto_deduce, p.estatus 
		from ultimanomina un, prestamo p		
		where un.id_concepto = p.id_prestamo		
		and un.numero_nomina = key1 and un.id_grupo_nomina = key2 and un.origen = 'P';
	recPrestamo record;
begin
	diaInicio :=extract(DAY from pFechaInicio);
	open curConceptoVariable(pNumeroNomina, pIdGrupoNomina);				
		loop
			fetch curConceptoVariable into recConceptoVariable;			
			exit when not found;
			id := 0;
			if pPeriodicidad = 'Q' and not(diaInicio = 1 and recConceptoVariable.cod_frecuencia_pago = 3) then
				id := last_id_conceptovariable()+1;
				if recConceptoVariable.monto_asigna <> 0 then									
					perform add_conceptovariable(
						id,
						recConceptoVariable.id_trabajador,
						recConceptoVariable.id_concepto_tipo_personal,
						recConceptoVariable.id_frecuencia_tipo_personal,
						recConceptoVariable.unidades,
						recConceptoVariable.monto_asigna,
						pFechaInicio,
						recConceptoVariable.documento_soporte,
						'A');						
				else					
					perform add_conceptovariable(
						id,
						recConceptoVariable.id_trabajador,
						recConceptoVariable.id_concepto_tipo_personal,
						recConceptoVariable.id_frecuencia_tipo_personal,
						recConceptoVariable.unidades,
						recConceptoVariable.monto_deduce,
						pFechaInicio,
						recConceptoVariable.documento_soporte,
						'A');

				end if;
			end if;
			
		end loop;
	close curConceptoVariable;
	open curConceptoFijoDeduce(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoDeduce into recConceptoFijoDeduce;			
			exit when not found;			
			perform update_conceptofijo(
				recConceptoFijoDeduce.id_concepto,
				recConceptoFijoDeduce.monto_deduce,
				recConceptoFijoDeduce.unidades);
		end loop;
	close curConceptoFijoDeduce;
	open curConceptoFijoAsigna(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoAsigna into recConceptoFijoAsigna;			
			exit when not found;			
			perform update_conceptofijo(
				recConceptoFijoAsigna.id_concepto,
				recConceptoFijoAsigna.monto_asigna,
				recConceptoFijoAsigna.unidades);
		end loop;
	close curConceptoFijoAsigna;
	if pNumeroNomina = 0 then
		open curPrestamo(pNumeroNomina, pIdGrupoNomina);
			loop
				fetch curPrestamo into recPrestamo;			
				exit when not found;			
				if recPrestamo.estatus = 'P' then
					perform update_prestamo(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce,
						'A');
				else
					perform update_prestamo(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce);
				end if;
			end loop;
		close curPrestamo;
		id:= 0;
		id:= last_id_seguridad_ordinaria_by_gruponomina(pIdGrupoNomina);
		perform delete_seguridadordinaria(id);
		
	end if;
	
	return diaInicio;


end ;
$_$;


--
-- TOC entry 788 (class 1255 OID 3240824)
-- Name: reversar_nomina(integer, integer, date, character varying, integer, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION reversar_nomina(integer, integer, date, character varying, integer, integer, integer, boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
---
---Proceso utilizado para el reversar la ultima nomina procesada de cualquier
---grupo de nomina.
---
declare 

	pIdGrupoNomina alias for $1;
	pNumeroNomina alias for $2;
	pFechaInicio alias for $3;
	pPeriodicidad alias for $4;
        panio  alias for $5;
        pmes   alias for $6;
        psemanaquincena alias for $7;
        pproceso alias for $8;
	
	diaInicio int4:= 0;
	id int4 := 0;
        reversar boolean := false;


	curTrabajador cursor (pNumeroNomina int4, pIdGrupoNomina int4) 
		for select distinct  t.id_trabajador, hn.lunes_retroactivo, 
		hn.lunes_primera, hn.lunes_segunda, hn.hay_retroactivo
		from ultimanomina un, historiconomina hn, trabajador t
		where t.id_trabajador = hn.id_trabajador
		and un.id_trabajador = hn.id_trabajador
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina
                and hn.anio = pAnio
                and hn.mes  = pMes
                and hn.semana_quincena = pSemanaQuincena;
                
	recTrabajador record;

	curConceptoVariable cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
             select un.id_trabajador, un.id_concepto_tipo_personal, un.id_frecuencia_tipo_personal,
		un.unidades, un.monto_asigna, un.monto_deduce, un.documento_soporte,
               fp.cod_frecuencia_pago,
		un.anio_sobretiempo, un.mes_sobretiempo
		from ultimanomina un, frecuenciatipopersonal ftp, frecuenciapago fp
		where un.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and numero_nomina = pNumeroNomina 
                and id_grupo_nomina = pIdGrupoNomina 
                and origen = 'V';
	recConceptoVariable record;
	
	curConceptoFijoBorrados cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
           select un.id_trabajador, un.id_concepto_tipo_personal, 
                un.id_frecuencia_tipo_personal,
                un.unidades, un.monto_asigna ,un.monto_deduce,un.documento_soporte
		from ultimanomina un
               where un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F'
                and un.id_concepto NOT IN
              (select distinct cf.id_concepto_fijo from conceptofijo cf
                   where cf.id_trabajador in 
                        (select distinct un2.id_trabajador from ultimanomina un2
                             where un2.numero_nomina = pNumeroNomina 
                               and un2.id_grupo_nomina = pIdGrupoNomina));
	recConceptoFijoBorrados record;

        curConceptoFijoDeduce cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
          select un.id_trabajador, un.id_concepto, un.unidades, un.monto_deduce,
                cf.monto as monto_restituir,cf.unidades as unidades_restituir
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_deduce
		and un.monto_deduce <> 0
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F';
	recConceptoFijoDeduce record;

	curConceptoFijoAsigna cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
           select un.id_trabajador, un.id_concepto, un.unidades, un.monto_asigna,
                cf.monto as monto_restituir,cf.unidades as unidades_restituir
		from ultimanomina un, conceptofijo cf		
		where un.id_concepto = cf.id_concepto_fijo
		and cf.monto <> un.monto_asigna
		and un.monto_asigna <> 0
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'F';
	recConceptoFijoAsigna record;


	curPrestamo cursor (pNumeroNomina int4, pIdGrupoNomina int4) for 
            select un.id_trabajador, un.id_concepto, un.monto_deduce 
		from ultimanomina un, prestamo p		
		where un.id_concepto = p.id_prestamo		
		and un.numero_nomina = pNumeroNomina 
                and un.id_grupo_nomina = pIdGrupoNomina 
                and un.origen = 'P';
	recPrestamo record;


begin
	diaInicio :=extract(DAY from pFechaInicio);


        ---
        ---Actualiza los indicadores de retroactivo del trabajador.
        ---
        open curTrabajador(pNumeroNomina, pIdGrupoNomina);				
	loop
	   fetch curTrabajador into recTrabajador;			
	   exit when not found;
           reversar=true;  ---hay datos en ultima nomina
	   perform update_lunes_reverso_nomina(
                  recTrabajador.id_trabajador,
                  recTrabajador.lunes_retroactivo,
                  recTrabajador.hay_retroactivo,
                  recTrabajador.lunes_primera,
                  recTrabajador.lunes_segunda);
	end loop;
	close curTrabajador;
        
     

        ---
        ---Recupera los conceptos variables eliminados.
        ---
	open curConceptoVariable(pNumeroNomina, pIdGrupoNomina);				
	loop
	   fetch curConceptoVariable into recConceptoVariable;			
	   exit when not found;
	   id := 0;
	   if pPeriodicidad = 'Q' and not(diaInicio = 1 and
              recConceptoVariable.cod_frecuencia_pago = 3) then
	      id := last_id_conceptovariable()+1;
	      perform add_conceptovariable_reverso_nomina(id,
		      recConceptoVariable.id_trabajador,
		      recConceptoVariable.id_concepto_tipo_personal,
		      recConceptoVariable.id_frecuencia_tipo_personal,
		      recConceptoVariable.unidades,
		      recConceptoVariable.monto_asigna+recConceptoVariable.monto_deduce,
		      pFechaInicio,
		      recConceptoVariable.documento_soporte,
		      'A', 
		      recConceptoVariable.anio_sobretiempo,
                      recConceptoVariable.mes_sobretiempo);  
            else  
              id := last_id_conceptovariable()+1;
	      perform add_conceptovariable_reverso_nomina(id,
		      recConceptoVariable.id_trabajador,
		      recConceptoVariable.id_concepto_tipo_personal,
		      recConceptoVariable.id_frecuencia_tipo_personal,
		      recConceptoVariable.unidades,
		      recConceptoVariable.monto_asigna+recConceptoVariable.monto_deduce,
		      pFechaInicio,
		      recConceptoVariable.documento_soporte,
		      'A', 
		      recConceptoVariable.anio_sobretiempo,
                      recConceptoVariable.mes_sobretiempo);  
       	    end if;
	end loop;
	close curConceptoVariable;
 
       

        ---
        ---Recupera los conceptos fijos eliminados por tener fecha eliminar
        ---en la nomina cerrada.
        ---
        open curConceptoFijoBorrados(pNumeroNomina, pIdGrupoNomina);				
        loop
           fetch curConceptoFijoBorrados into recConceptoFijoBorrados;			
           exit when not found;
           id := 0;
           id := last_id_ConceptoFijo()+1;
            perform add_conceptofijo_reverso_nomina(
                id,
                recConceptoFijoBorrados.id_trabajador,
                recConceptoFijoBorrados.id_concepto_tipo_personal,
                recConceptoFijoBorrados.id_frecuencia_tipo_personal,
                recConceptoFijoBorrados.unidades,
                recConceptoFijoBorrados.monto_asigna+recConceptoFijoBorrados.monto_deduce,
                pFechaInicio,
                recConceptoFijoBorrados.documento_soporte,'A'); 				
        end loop;
        close curConceptoFijoBorrados;

        ---
        ---   Recupera el valor de las deducciones en
        ---   conceptos fijos modificados posterior al cierre de nomina
        ---
	open curConceptoFijoDeduce(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoDeduce into recConceptoFijoDeduce;			
			exit when not found;			
			perform update_conceptofijo_reverso_nomina(
				recConceptoFijoDeduce.id_concepto,
				recConceptoFijoDeduce.monto_deduce,
				recConceptoFijoDeduce.unidades,
                                recConceptoFijoDeduce.monto_restituir,
                                recConceptoFijoDeduce.unidades_restituir,'S');
		end loop;
	close curConceptoFijoDeduce;

        ---
        ---   Recupera el valor de las asignaciones en
        ---   conceptos fijos modificados posterior al cierre de nomina
        ---
	open curConceptoFijoAsigna(pNumeroNomina, pIdGrupoNomina);
		loop
			fetch curConceptoFijoAsigna into recConceptoFijoAsigna;			
			exit when not found;			
			perform update_conceptofijo_reverso_nomina(
				recConceptoFijoAsigna.id_concepto,
				recConceptoFijoAsigna.monto_asigna,
				recConceptoFijoAsigna.unidades,
                                recConceptoFijoAsigna.monto_restituir,
                                recConceptoFijoAsigna.unidades_restituir,'S');
		end loop;
	close curConceptoFijoAsigna;

      

        ---
        ---  Reverso de los prestamos.  Activa los pagados en el periodo cerrado,
        ---  rebaja un monto de cuota al monto pagado y rebaja 1 el numero
        ---  de cuotas pagadas
        ---
	if pNumeroNomina = 0 then   ---Nomina ordinaria
		open curPrestamo(pNumeroNomina, pIdGrupoNomina);
			loop
				fetch curPrestamo into recPrestamo;			
				exit when not found;			
				perform update_prestamo_reverso_nomina(
						recPrestamo.id_concepto,
						recPrestamo.monto_deduce);
			end loop;
		close curPrestamo;

	end if;
	
        ---
        ---Si existe nomina por reversar(hay datos en ultimanomina)
        ---
        if (reversar)  then
           if pNumeroNomina = 0 then
              ----
              ----Borrar el ultimo registro de seguridad ordinaria
              ----
              id:= 0;
	      id:= last_id_seguridadordinaria_reverso(pIdGrupoNomina);
	      perform delete_seguridadordinaria(id);
           else
              ---
              ---Colocar el estatus como por procesar
              ---
              perform update_ultimanominaordinaria_reverso(pIdGrupoNomina,pNumeroNomina,'A');
           end if;
           perform delete_ultimanomina_reverso(pIdGrupoNomina,pNumeroNomina);
           ---
           ---Si es semanal borra de historicosemana
           ---
           if pperiodicidad ='S' THEN
              perform delete_historico_semana
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
           else
               ---
               ---Si es quincenal borra de historicoquincena
               ---
               perform delete_historico_quincena
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
           end if;
           ---
           ---Elimina el historico nomina.
           ---
           perform delete_historico_nomina
                  (pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
          
        end if;

	--- se elimina el historico de base de cálculo del islr
	--- no esta condicionado a la periodicidad

		perform delete_historicobaseislr(pIdGrupoNomina,pNumeroNomina,panio,pmes,psemanaquincena);
		raise notice 'se elimino historicobaseislr';
			
	--- se elimina el historico de las ausencias aplicadas
	--- no esta condicionado a la periodicidad

		perform reversar_ausencias(pIdGrupoNomina, pNumeroNomina, panio,pmes,psemanaquincena, pproceso);
		raise notice 'se eliminaron las ausencias aplicadas ';
        
        if reversar then
           return 1;  --reversada exitosamente
        end if;
        return 2;  ---Ya reversada anteriormente porque no hay data en ultimanomina


end ;
$_$;


--
-- TOC entry 789 (class 1255 OID 3240826)
-- Name: sumar_rendicionmensual(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sumar_rendicionmensual(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
update rendicionmensual set monto = monto + $2 where id_rendicion_mensual = $1
$_$;


--
-- TOC entry 790 (class 1255 OID 3240827)
-- Name: sumar_resumenmensual(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sumar_resumenmensual(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
update resumenmensual set monto = monto + $2 where id_resumen_mensual = $1
$_$;


--
-- TOC entry 791 (class 1255 OID 3240828)
-- Name: sundde_calcular_prima_por_hijo(integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sundde_calcular_prima_por_hijo(integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Calculo de Prima por Hijos a Grupo de Nomina
	Revision : 1.6
	Fecha : Diciembre 2015
	Version Base de Aplicación : 3.11.46
	Realizado por  : Henry Vazquez

	Entidades Afectadas:

	conceptofijo 

	NOTAS: - Va sin acentos
		- Debe existir un unico registro para el concepto 4000 para cada tipo de personal (condicion no validada)
		- Debe existir el registro de parametrizacion del beneficio prima por hijos (PARAMETRIZACION - PARAMETROS Y FORMULAS)
		- Se elimina la validacion de estatus activo para permitir la fracción de egresados.
		- Se agrega el fraccionamiento al ingreso del trabajador 
*/


   pIdGrupoNomina alias for $1;
   pFechaInicioNomina alias for $2;

   v_restituir character varying := 'N';
   v_montoRestituir float := 0.0;	
   v_unidadesRestituir integer := 0;
   v_monto float := 0.0;	
   v_unidades integer := 0;
   v_dia integer :=0;

         
   v_cod_concepto_prima	 character varying := '4000';

  
   /*-----------------------------------------------------------------------------------------------
	CURSOR DE LOS TRABAJADORES CUYOS HIJOS ESTAN DENTRO DE LOS PARAMETROS DE LA PRIMA POR HIJO
   */-----------------------------------------------------------------------------------------------

   recTrabajador record;

   curTrabajador cursor (idGrupoNomina int4, conceptoPrima text, inicioNomina date) for 
	select t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		t.fecha_ingreso,
		t.dia_ingreso,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos else count(*) end as unidades,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos*ph.monto else count(*)*ph.monto end as monto
	from primahijo ph, tipopersonal tp, trabajador t, conceptotipopersonal ctp, concepto c, frecuenciatipopersonal ftp, frecuenciapago fp, familiar f
	where t.id_personal = f.id_personal 
	and t.id_tipo_personal = tp.id_tipo_personal 
	and tp.id_tipo_personal = ctp.id_tipo_personal 
	and ctp.id_concepto = c.id_concepto 
	and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
	and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
	and tp.id_tipo_personal = ph.id_tipo_personal 
--	and t.estatus = 'A'
	and f.parentesco in ('H','U')
	and c.cod_concepto = conceptoPrima 
	and tp.id_grupo_nomina = idGrupoNomina 
	and extract (years from age(inicioNomina,f.fecha_nacimiento)) >= ph.edad_minima
	and 	(
			extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_maxima
			or 
			(  (f.nino_excepcional='S') and (extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_excepcional)  )
		)
	group by t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		ph.numero_maximo_hijos,
		ph.monto,
		t.fecha_ingreso,
		t.dia_ingreso;

 begin 	
	v_dia:=extract(day from pFechaInicioNomina);

	--- inicializo los valores
	
	
	/*
	**********************************************************
	   elimino el concepto 4000 prima por hijo 
	    que se encuentren en conceptofijo 	
	**********************************************************
	*/

	delete 
	from conceptofijo 
	where id_concepto_fijo in (
		select distinct cf.id_concepto_fijo
		from trabajador t, conceptofijo cf, tipopersonal tp, conceptotipopersonal ctp, concepto c, primahijo ph
		where t.id_tipo_personal = tp.id_tipo_personal 
		and t.id_trabajador = cf.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto 
		and t.id_tipo_personal = ph.id_tipo_personal 
		and tp.id_grupo_nomina = pIdGrupoNomina
		and c.cod_concepto = v_cod_concepto_prima
	);

	open curTrabajador(pIdGrupoNomina, v_cod_concepto_prima, pFechaInicioNomina);
	loop
		fetch curTrabajador into recTrabajador;
		exit when not found;

			   v_restituir := 'N';
			   v_montoRestituir := 0.0;	
			   v_unidadesRestituir := 0;

			   v_monto:= recTrabajador.monto/2;
			   v_unidades := recTrabajador.unidades;

			-------------------------------------------------------------------------------			 
			 -- evaluamos si le corresponde fraccionar
			------------------------------------------------------------------------------- 

				if pFechaInicioNomina<recTrabajador.fecha_ingreso then 

					   v_restituir := 'S';
					   v_montoRestituir := v_monto;	
					   v_unidadesRestituir := recTrabajador.unidades;

					if recTrabajador.dia_ingreso = 31 then -- pago un solo dia
					   v_monto:= round((recTrabajador.monto/30)::numeric,2); 
					else 
						v_monto:= round((recTrabajador.monto*(15-(recTrabajador.dia_ingreso-v_dia))/30)::numeric,2);
					end if;
				end if;

			-------------------------------------------------------------------------------			 
			 -- inserta el monto del concepto prima por hijo para cada trabajador
			------------------------------------------------------------------------------- 

				INSERT INTO conceptofijo(
				id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, 
				unidades, monto, fecha_registro,restituir,monto_restituir,unidades_restituir)
				VALUES (last_id_conceptofijo()+1,recTrabajador.id_trabajador,recTrabajador.id_concepto_tipo_personal, 
				recTrabajador.id_frecuencia_tipo_personal, v_unidades, v_monto, now()::date,v_restituir,v_montoRestituir,
				v_unidadesRestituir);
				

			
	end loop;
	close curTrabajador;
    return 0;
end;  $_$;


--
-- TOC entry 792 (class 1255 OID 3240830)
-- Name: sundde_calcular_prima_por_hijo_02_02_2015(integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sundde_calcular_prima_por_hijo_02_02_2015(integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Calculo de Prima por Hijos a Grupo de Nomina
	Revision : 1.5
	Fecha : Octubre 2015
	Version Base de Aplicación : 3.11.46
	Realizado por  : Henry Vazquez

	Entidades Afectadas:

	conceptofijo 

	NOTAS: - Va sin acentos
		- Debe existir un unico registro para el concepto 4000 para cada tipo de personal (condicion no validada)
		- Debe existir el registro de parametrizacion del beneficio prima por hijos (PARAMETRIZACION - PARAMETROS Y FORMULAS)
		- Se elimina la validacion de estatus activo para permitir la fracción de egresados.
		- Se agrega el fraccionamiento al ingreso del trabajador 
*/


   pIdGrupoNomina alias for $1;
   pFechaInicioNomina alias for $2;

   v_restituir character varying := 'N';
   v_montoRestituir float := 0.0;	
   v_unidadesRestituir integer := 0;
   v_monto float := 0.0;	
   v_unidades integer := 0;
   v_dia integer :=0;

         
   v_cod_concepto_prima	 character varying := '4000';

  
   /*-----------------------------------------------------------------------------------------------
	CURSOR DE LOS TRABAJADORES CUYOS HIJOS ESTAN DENTRO DE LOS PARAMETROS DE LA PRIMA POR HIJO
   */-----------------------------------------------------------------------------------------------

   recTrabajador record;

   curTrabajador cursor (idGrupoNomina int4, conceptoPrima text, inicioNomina date) for 
	select t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		t.fecha_ingreso,
		t.dia_ingreso,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos else count(*) end as unidades,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos*ph.monto else count(*)*ph.monto end as monto
	from primahijo ph, tipopersonal tp, trabajador t, conceptotipopersonal ctp, concepto c, frecuenciatipopersonal ftp, frecuenciapago fp, familiar f
	where t.id_personal = f.id_personal 
	and t.id_tipo_personal = tp.id_tipo_personal 
	and tp.id_tipo_personal = ctp.id_tipo_personal 
	and ctp.id_concepto = c.id_concepto 
	and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
	and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
	and tp.id_tipo_personal = ph.id_tipo_personal 
--	and t.estatus = 'A'
	and f.parentesco in ('H','U')
	and c.cod_concepto = conceptoPrima 
	and tp.id_grupo_nomina = idGrupoNomina 
	and extract (years from age(inicioNomina,f.fecha_nacimiento)) >= ph.edad_minima
	and 	(
			extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_maxima
			or 
			(  (f.nino_excepcional='S') and (extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_excepcional)  )
		)
	group by t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		ph.numero_maximo_hijos,
		ph.monto,
		t.fecha_ingreso,
		t.dia_ingreso;

 begin 	
	v_dia:=extract(day from pFechaInicioNomina);

	--- inicializo los valores
	
	
	/*
	**********************************************************
	   elimino el concepto 4000 prima por hijo 
	    que se encuentren en conceptofijo 	
	**********************************************************
	*/

	delete 
	from conceptofijo 
	where id_concepto_fijo in (
		select cf.id_concepto_fijo
		from trabajador t, conceptofijo cf, tipopersonal tp, conceptotipopersonal ctp, concepto c
		where t.id_tipo_personal = tp.id_tipo_personal 
		and t.id_trabajador = cf.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto 
		and tp.id_grupo_nomina = pIdGrupoNomina
		and c.cod_concepto = v_cod_concepto_prima
	);

	open curTrabajador(pIdGrupoNomina, v_cod_concepto_prima, pFechaInicioNomina);
	loop
		fetch curTrabajador into recTrabajador;
		exit when not found;

			   v_restituir := 'N';
			   v_montoRestituir := 0.0;	
			   v_unidadesRestituir := 0;

			   v_monto:= recTrabajador.monto/2;
			   v_unidades := recTrabajador.unidades;

			-------------------------------------------------------------------------------			 
			 -- evaluamos si le corresponde fraccionar
			------------------------------------------------------------------------------- 

				if pFechaInicioNomina<recTrabajador.fecha_ingreso then 

					   v_restituir := 'S';
					   v_montoRestituir := v_monto;	
					   v_unidadesRestituir := recTrabajador.unidades;

					if recTrabajador.dia_ingreso = 31 then -- pago un solo dia
					   v_monto:= round((recTrabajador.monto/30)::numeric,2); 
					else 
						v_monto:= round((recTrabajador.monto*(15-(recTrabajador.dia_ingreso-v_dia))/30)::numeric,2);
					end if;
				end if;

			-------------------------------------------------------------------------------			 
			 -- inserta el monto del concepto prima por hijo para cada trabajador
			------------------------------------------------------------------------------- 

				INSERT INTO conceptofijo(
				id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, 
				unidades, monto, fecha_registro,restituir,monto_restituir,unidades_restituir)
				VALUES (last_id_conceptofijo()+1,recTrabajador.id_trabajador,recTrabajador.id_concepto_tipo_personal, 
				recTrabajador.id_frecuencia_tipo_personal, v_unidades, v_monto, now()::date,v_restituir,v_montoRestituir,
				v_unidadesRestituir);
				

			
	end loop;
	close curTrabajador;
    return 0;
end;  $_$;


--
-- TOC entry 793 (class 1255 OID 3240832)
-- Name: sundde_calcular_prima_por_hijo_2015_10_22(integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sundde_calcular_prima_por_hijo_2015_10_22(integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Calculo de Prima por Hijos a Grupo de Nomina
	Revision : 1.4	
	Fecha : Julio 2015
	Version Base de Aplicación : 3.11.46
	Realizado por  : Henry Vazquez

	Entidades Afectadas:

	conceptofijo 

	NOTAS: - Va sin acentos
		- Debe existir un unico registro para el concepto 4000 para cada tipo de personal (condicion no validada)
		- Debe existir el registro de parametrizacion del beneficio prima por hijos (PARAMETRIZACION - PARAMETROS Y FORMULAS)
		- Se elimina la validacion de estatus activo para permitir la fracción de egresados.
*/


   pIdGrupoNomina alias for $1;
   pFechaInicioNomina alias for $2;

         
   v_cod_concepto_prima	 character varying := '4000';

  
   /*-----------------------------------------------------------------------------------------------
	CURSOR DE LOS TRABAJADORES CUYOS HIJOS ESTAN DENTRO DE LOS PARAMETROS DE LA PRIMA POR HIJO
   */-----------------------------------------------------------------------------------------------

   recTrabajador record;

   curTrabajador cursor (idGrupoNomina int4, conceptoPrima text, inicioNomina date) for 
	select t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos else count(*) end as unidades,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos*ph.monto else count(*)*ph.monto end as monto
	from primahijo ph, tipopersonal tp, trabajador t, conceptotipopersonal ctp, concepto c, frecuenciatipopersonal ftp, frecuenciapago fp, familiar f
	where t.id_personal = f.id_personal 
	and t.id_tipo_personal = tp.id_tipo_personal 
	and tp.id_tipo_personal = ctp.id_tipo_personal 
	and ctp.id_concepto = c.id_concepto 
	and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
	and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
	and tp.id_tipo_personal = ph.id_tipo_personal 
--	and t.estatus = 'A'
	and f.parentesco in ('H','U')
	and c.cod_concepto = conceptoPrima 
	and tp.id_grupo_nomina = idGrupoNomina 
	and extract (years from age(inicioNomina,f.fecha_nacimiento)) >= ph.edad_minima
	and 	(
			extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_maxima
			or 
			(  (f.nino_excepcional='S') and (extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_excepcional)  )
		)
	group by t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		ph.numero_maximo_hijos,
		ph.monto;

 begin 	
	/*
	**********************************************************
	   elimino el concepto 4000 prima por hijo 
	    que se encuentren en conceptofijo 	
	**********************************************************
	*/

	delete 
	from conceptofijo 
	where id_concepto_fijo in (
		select cf.id_concepto_fijo
		from trabajador t, conceptofijo cf, tipopersonal tp, conceptotipopersonal ctp, concepto c
		where t.id_tipo_personal = tp.id_tipo_personal 
		and t.id_trabajador = cf.id_trabajador 
		and cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto 
		and tp.id_grupo_nomina = pIdGrupoNomina
		and c.cod_concepto = v_cod_concepto_prima
	);

	open curTrabajador(pIdGrupoNomina, v_cod_concepto_prima, pFechaInicioNomina);
	loop
		fetch curTrabajador into recTrabajador;
		exit when not found;


			-------------------------------------------------------------------------------			 
			 -- inserta el monto del concepto prima por hijo para cada trabajador
			------------------------------------------------------------------------------- 

				INSERT INTO conceptofijo(
				id_concepto_fijo, id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal, 
				unidades, monto, fecha_registro)
				VALUES (last_id_conceptofijo()+1,recTrabajador.id_trabajador,recTrabajador.id_concepto_tipo_personal, 
				recTrabajador.id_frecuencia_tipo_personal, recTrabajador.unidades, recTrabajador.monto/2, now()::date);
				

			
	end loop;
	close curTrabajador;
    return 0;
end;  $_$;


--
-- TOC entry 794 (class 1255 OID 3240833)
-- Name: sundde_calcular_prima_por_hijo_cv(integer, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION sundde_calcular_prima_por_hijo_cv(integer, date) RETURNS integer
    LANGUAGE plpgsql
    AS $_$  declare  	

/*
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Calculo de Prima por Hijos a Grupo de Nomina
	Revision : 1.4 (Variables)	
	Fecha : Agosto 2015
	Version Base de Aplicación : 3.11.56
	Realizado por  : Henry Vazquez

	Entidades Afectadas:

	conceptovariable

	NOTAS: - Va sin acentos
		- Debe existir un unico registro para el concepto 4000 para cada tipo de personal (condicion no validada)
		- Debe existir el registro de parametrizacion del beneficio prima por hijos (PARAMETRIZACION - PARAMETROS Y FORMULAS)
*/


   pIdGrupoNomina alias for $1;
   pFechaInicioNomina alias for $2;

         
   v_cod_concepto_prima	 character varying := '4000';

  
   /*-----------------------------------------------------------------------------------------------
	CURSOR DE LOS TRABAJADORES CUYOS HIJOS ESTAN DENTRO DE LOS PARAMETROS DE LA PRIMA POR HIJO
   */-----------------------------------------------------------------------------------------------

   recTrabajador record;

   curTrabajador cursor (idGrupoNomina int4, conceptoPrima text, inicioNomina date) for 
	select t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos else count(*) end as unidades,
		case when (count(*) > ph.numero_maximo_hijos) then ph.numero_maximo_hijos*ph.monto else count(*)*ph.monto end as monto
	from primahijo ph, tipopersonal tp, trabajador t, conceptotipopersonal ctp, concepto c, frecuenciatipopersonal ftp, frecuenciapago fp, familiar f
	where t.id_personal = f.id_personal 
	and t.id_tipo_personal = tp.id_tipo_personal 
	and tp.id_tipo_personal = ctp.id_tipo_personal 
	and ctp.id_concepto = c.id_concepto 
	and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal 
	and ftp.id_frecuencia_pago = fp.id_frecuencia_pago 
	and tp.id_tipo_personal = ph.id_tipo_personal 
	and t.estatus = 'A'
	and f.parentesco in ('H','U')
	and c.cod_concepto = conceptoPrima 
	and tp.id_grupo_nomina = idGrupoNomina 
	and extract (years from age(inicioNomina,f.fecha_nacimiento)) >= ph.edad_minima
	and 	(
			extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_maxima
			or 
			(  (f.nino_excepcional='S') and (extract (years from age(inicioNomina,f.fecha_nacimiento)) <= ph.edad_excepcional)  )
		)
	group by t.id_trabajador, 
		ctp.id_concepto_tipo_personal, 
		ftp.id_frecuencia_tipo_personal,
		ph.numero_maximo_hijos,
		ph.monto;

 begin 	
	/*
	**********************************************************
	   elimino el concepto 4000 prima por hijo 
	    que se encuentren en conceptovariable 	
	**********************************************************
	*/

	delete 
	from conceptovariable 
	where id_concepto_variable in (
		select cv.id_concepto_variable
		from trabajador t, conceptovariable cv, tipopersonal tp, conceptotipopersonal ctp, concepto c
		where t.id_tipo_personal = tp.id_tipo_personal 
		and t.id_trabajador = cv.id_trabajador 
		and cv.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
		and ctp.id_concepto = c.id_concepto 
		and tp.id_grupo_nomina = pIdGrupoNomina
		and c.cod_concepto = v_cod_concepto_prima
	);

	open curTrabajador(pIdGrupoNomina, v_cod_concepto_prima, pFechaInicioNomina);
	loop
		fetch curTrabajador into recTrabajador;
		exit when not found;


			-------------------------------------------------------------------------------			 
			 -- inserta el monto del concepto prima por hijo para cada trabajador
			------------------------------------------------------------------------------- 

				INSERT INTO conceptovariable(
					id_concepto_variable, id_trabajador, id_concepto_tipo_personal, 
					id_frecuencia_tipo_personal, unidades, monto, fecha_registro)
				VALUES (
					last_id_conceptovariable()+1, recTrabajador.id_trabajador,recTrabajador.id_concepto_tipo_personal, 
					recTrabajador.id_frecuencia_tipo_personal, recTrabajador.unidades, recTrabajador.monto/2, now()::date);
				


			
	end loop;
	close curTrabajador;
    return 0;
end;  $_$;


--
-- TOC entry 799 (class 1255 OID 3240834)
-- Name: suspender_primas(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION suspender_primas(integer, integer, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 
	pIdTipoPersonal alias for $1;
	pIdPlanPoliza alias for $2;	
	pTipo alias for $3;
	
	recPrimasTitular record;
	curPrimasTitular cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and pr.parentesco = 'T';	

	recPrimasBeneficiario record;
	curPrimasBeneficiario cursor (pIdPlanPoliza int4)
		for select  pr.id_primas_plan,
		pr.edad_minima, pr.edad_maxima
		from primasplan pr
		where pr.id_plan_poliza = pIdPlanPoliza 
		and pr.parentesco <> 'T';	

	fechaDesde date;
	fechaHasta date;
	
begin
	if pTipo = 'T' or pTipo = 'A' then
		open curPrimasTitular(pIdPlanPoliza);			
		loop
			fetch curPrimasTitular into recPrimasTitular;			
			exit when not found;
			fechaDesde = add_years(current_date, -recPrimasTitular.edad_maxima);
			fechaHasta = add_years(current_date, -recPrimasTitular.edad_minima);

			update titular set estatus = 'S', fecha_exclusion = current_date
				where id_primas_plan = recPrimasTitular.id_primas_plan
				and id_personal in 
				(select id_personal from personal
				where fecha_nacimiento not 
				between fechaDesde and fechaHasta);
		end loop;
	end if;

	if pTipo = 'B' or pTipo = 'A' then
		open curPrimasBeneficiario(pIdPlanPoliza);			
		loop
			fetch curPrimasBeneficiario into recPrimasBeneficiario;			
			exit when not found;
			fechaDesde = add_years(current_date, -recPrimasBeneficiario.edad_maxima);
			fechaHasta = add_years(current_date, -recPrimasBeneficiario.edad_minima);

			update beneficiario set estatus = 'S', fecha_exclusion = current_date
				where id_primas_plan = recPrimasBeneficiario.id_primas_plan
				and id_familiar in 
				(select id_familiar from familiar
				where fecha_nacimiento not 
				between fechaDesde and fechaHasta);
		end loop;
	end if;

	return 0;

end;

$_$;


--
-- TOC entry 800 (class 1255 OID 3240835)
-- Name: suspender_trabajadores(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION suspender_trabajadores(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$

declare 

	pIdTipoPersonal alias for $1;
	
	recTrabajadores record;
	curTrabajadores cursor(pIdTipoPersonal int4) 
	for select count(*) as cantidad from trabajador 
	where id_tipo_personal = pIdTipoPersonal
	and fe_vida = 'N';

	cantidad int4 := 0;
begin

	open curTrabajadores(pIdTipoPersonal);
	fetch curTrabajadores into recTrabajadores;

	if recTrabajadores.cantidad is not null then
		cantidad := recTrabajadores.cantidad;
	end if;

	update trabajador set  estatus = 'S' 
		where id_tipo_personal = pIdTipoPersonal and fe_vida = 'N' and estatus = 'A';

	return cantidad;
end;

$_$;


--
-- TOC entry 801 (class 1255 OID 3240836)
-- Name: update_conceptofijo_reverso_nomina(integer, double precision, double precision, double precision, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_conceptofijo_reverso_nomina(integer, double precision, double precision, double precision, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer los valores anteriores
    ---
    UPDATE  conceptofijo set monto_restituir = $4,
                             unidades_restituir = $5,
                             restituir =$6,
                             monto= $2,
                             unidades = $3
                           
      WHERE id_concepto_fijo = $1;


$_$;


--
-- TOC entry 802 (class 1255 OID 3240837)
-- Name: update_descuentoticket(integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_descuentoticket(integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update descuentoticket set
	referencia_ticket = $4,
	referencia_embargo = $5,
	referencia_ausencia = $6
	where 
	id_trabajador = $1 and 
	anio = $2 and 
	mes = $3
	
	
$_$;


--
-- TOC entry 803 (class 1255 OID 3240838)
-- Name: update_dotacion_entregada(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_dotacion_entregada(integer, character varying, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---llamado desde el proceso de entregar dotacion
    ---para actualizar la cantidad y talla de la
    ---dotacion por trabajador procesda
    ---
    UPDATE  dotacionentregada set talla = $2,
                             cantidad =$3
                           
      WHERE id_dotacion_entregada = $1;


$_$;


--
-- TOC entry 804 (class 1255 OID 3240839)
-- Name: update_dotacion_trabajador(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_dotacion_trabajador(integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---llamado desde el proceso de dotacion trabajador
    ---para actualizar la cantidad que coresponde a la dotacion
    ---a entregar
    ---
    UPDATE  dotaciontrabajador set cantidad =$2
      WHERE id_dotacion_trabajador = $1;


$_$;


--
-- TOC entry 805 (class 1255 OID 3240840)
-- Name: update_historiconomina(integer, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_historiconomina(integer, integer, integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$


 update historiconomina set  lunes_primera=$2,  lunes_segunda=$3,
                                             lunes_retroactivo=$4,  hay_retroactivo=$5
    where id_historico_nomina = $1

$_$;


--
-- TOC entry 806 (class 1255 OID 3240841)
-- Name: update_liquidacion_resumen_nuevo_regimen(integer, double precision, double precision, double precision, double precision, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_liquidacion_resumen_nuevo_regimen(integer, double precision, double precision, double precision, double precision, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update liquidacionresumennuevoregimen set 
	   monto_prestaciones_acumuladas=$2,
           monto_interes_acumulado=$3,
           monto_anticipo_acumulado=$4,
           monto_fideicomiso_acumulado=$5,
           dias_mensuales=$6,
           dias_adicionales=$7
	where id_trabajador = $1;
$_$;


--
-- TOC entry 807 (class 1255 OID 3240842)
-- Name: update_liquidacion_resumen_viejo_regimen(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_liquidacion_resumen_viejo_regimen(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update liquidacionresumenviejoregimen set 
	monto_interes_adicional = $2
	where id_trabajador = $1;
$_$;


--
-- TOC entry 808 (class 1255 OID 3240843)
-- Name: update_lunes_reverso_nomina(integer, integer, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_lunes_reverso_nomina(integer, integer, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer los campos para los retroactivos actualizados
    ---cuando se cerro la nomina que se esta reversando
    ---
    UPDATE  trabajador set lunes_retroactivo = $2,
                           hay_retroactivo   = $3,
                           lunes_primera     = $4,
                           lunes_segunda     = $5
      WHERE id_trabajador =$1;
$_$;


--
-- TOC entry 809 (class 1255 OID 3240844)
-- Name: update_monto_concepto_fijo(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_monto_concepto_fijo(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$	
	update conceptofijo set monto_anterior = monto where monto <> $2 and id_concepto_fijo = $1;
	update conceptofijo set monto = $2 where id_concepto_fijo = $1;
	
$_$;


--
-- TOC entry 810 (class 1255 OID 3240845)
-- Name: update_nominaespecial(integer, date, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_nominaespecial(integer, date, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update nominaespecial
	set fecha_proceso = $2, estatus = $3
	where id_nomina_especial = $1
	
$_$;


--
-- TOC entry 811 (class 1255 OID 3240846)
-- Name: update_nominaespecial(integer, date, character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_nominaespecial(integer, date, character varying, integer, integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update nominaespecial
	set fecha_proceso = $2, estatus = $3, mes = $4, anio = $5
	
	where id_nomina_especial = $1
	
$_$;


--
-- TOC entry 812 (class 1255 OID 3240847)
-- Name: update_planillaarc_devengado_enero(integer, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_planillaarc_devengado_enero(integer, integer, integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
 update planillaarc set id_planilla_arc = $1, 
	id_trabajador = $2,
	anio = $3, devengado_enero = $4


$_$;


--
-- TOC entry 813 (class 1255 OID 3240848)
-- Name: update_prestamo(integer, double precision, integer, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_prestamo(integer, double precision, integer, double precision, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
	update prestamo 
		set monto_pagado = $2, cuotas_pagadas = $3, 
			monto_cuota = $4, estatus = $5
		where id_prestamo = $1;
$_$;


--
-- TOC entry 795 (class 1255 OID 3240849)
-- Name: update_prestamo_reverso_nomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_prestamo_reverso_nomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---actualizar el prestamo con la cuota descontada
    ---cuando se cerro la nomina
    ---
	update prestamo 
		set monto_pagado = monto_pagado - $2,
                    cuotas_pagadas = cuotas_pagadas -1,
                    estatus ='A'
 		where id_prestamo = $1;
$_$;


--
-- TOC entry 796 (class 1255 OID 3240850)
-- Name: update_sueldo_promedio(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_sueldo_promedio(integer) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	retencion_sso = 0, 
	retencion_spf = 0,
	retencion_lph = 0, 
	retencion_fju = 0, 
	promedio_sso =0,
	promedio_lph = 0,
	promedio_fju = 0, 
	aporte_sso = 0, 
	aporte_spf = 0, 
	aporte_lph=0, 
	aporte_fju = 0 
	where  id_grupo_nomina  = $1
$_$;


--
-- TOC entry 797 (class 1255 OID 3240851)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	monto_variable_sso = $2,
	monto_variable_lph = $3,
	monto_variable_fju = $4
	where id_trabajador = $1;
$_$;


--
-- TOC entry 798 (class 1255 OID 3240852)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	promedio_integral = $2,
	promedio_sueldo = $3,
	promedio_compensacion = $4,
	promedio_primast = $5,
	promedio_primasc = $6,
	promedio_ajustes = $7
	where id_trabajador = $1;
$_$;


--
-- TOC entry 814 (class 1255 OID 3240853)
-- Name: update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_sueldo_promedio(integer, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update sueldopromedio set 
	promedio_sso = $2,
	retencion_sso = $3,
	retencion_spf = $4,
	promedio_lph = $5,
	retencion_lph = $6,
	promedio_fju = $7,
	retencion_fju = $8,
	aporte_sso = $9,
	aporte_lph = $10,
	aporte_spf = $11,
	aporte_fju = $12
	where id_trabajador = $1;
$_$;


--
-- TOC entry 815 (class 1255 OID 3240854)
-- Name: update_trabajador_sueldo_basico(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_trabajador_sueldo_basico(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update trabajador set 
	sueldo_basico = $2
	where id_trabajador = $1;
$_$;


--
-- TOC entry 816 (class 1255 OID 3240855)
-- Name: update_ultimanomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_ultimanomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update ultimanomina
	set monto_deduce = monto_deduce + $2 
	where id_ultima_nomina = $1
	
$_$;


--
-- TOC entry 817 (class 1255 OID 3240856)
-- Name: update_ultimanominaformapago(integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_ultimanominaformapago(integer, integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
		update ultimanomina
		set forma_pago = $4 
		where id_trabajador = $1
		and  id_grupo_nomina = $2
		and numero_nomina = $3;
$_$;


--
-- TOC entry 818 (class 1255 OID 3240857)
-- Name: update_ultimanominaformapago(integer, integer, integer, character varying, integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_ultimanominaformapago(integer, integer, integer, character varying, integer, character varying, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
		update ultimanomina
		set forma_pago = $4 , id_banco_nomina = $5 ,  tipo_cta_nomina = $6  , cuenta_nomina = $7 
		where id_trabajador = $1
		and  id_grupo_nomina = $2
		and numero_nomina = $3;
$_$;


--
-- TOC entry 819 (class 1255 OID 3240858)
-- Name: update_ultimanominaordinaria_reverso(integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_ultimanominaordinaria_reverso(integer, integer, character varying) RETURNS void
    LANGUAGE sql
    AS $_$
    ---
    ---se llama desde el proceso de reversar nomina para
    ---restablecer el estatus de no pagada de la nomina especial reversada
    ---
    UPDATE  nominaespecial set  estatus = $3
      WHERE id_grupo_nomina =$1
        AND numero_nomina = $2;
$_$;


--
-- TOC entry 820 (class 1255 OID 3240859)
-- Name: update_ultimaprenomina(integer, double precision); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION update_ultimaprenomina(integer, double precision) RETURNS void
    LANGUAGE sql
    AS $_$
	update ultimaprenomina
	set monto_deduce = monto_deduce + $2 
	where id_ultima_prenomina = $1
	
$_$;


--
-- TOC entry 821 (class 1255 OID 3240860)
-- Name: valida_estructura_trabajador(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION valida_estructura_trabajador() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare  	

/*
	Programa de Modernizacion de la Administracion Financiera del Estado
	Sistema de Gestion Financiera de Recursos Humanos
	Procedimiento de Carga Masiva del ingreso del trabajador - Validación de estructura 
	Revision : 1.3
	Fecha : Abril 2010
	Versión Base de Aplicación : 3.10

	Entidades Afectadas:
		NINGUNA

	carga_masiva_trabajador()

	NOTAS: - Solo emplear durante el proceso de implantación del SIGEFIRRHH bajo las condiciones controladas 
	      contenidas en el documento anexo.
	       - Va sin acentos.
	       - Se entiende que existe la tabla cargamasivatrabajador y que la misma contiene la informacion a 
	       ser migrada.
*/


-- Creacion de los alias de los parametros


-- Definicion de las constantes
	contadorCarga int4;
	contador int4;

	-- para Trabajador 

	-- para Registrocargos

	-- para registrositp

	-- para movimientoSitp

	-- para historicocargos

	-- para trayectoria

-- Definicion de las variables de trabajo
	
-- Definición de los registros y cursores

	recTipoPersonal record;
	
	recDatosDependencia record;
/*	curDatosDependencia cursor
		for select distinct id_dependencia 
		from dependencia;
*/
	curDatosDependencia cursor
		for select distinct id_dependencia 
		from cargamasivatrabajador;
	
	recDatosTipoPersonalRegistro record;
	curDatosTipoPersonalRegistro cursor 
		for select distinct id_tipo_personal,id_registro 
		from cargamasivatrabajador;

	recDatosTipoPersonalCargo record;
	curDatosTipoPersonalCargo cursor 
		for select distinct id_cargo,id_tipo_personal 
		from cargamasivatrabajador;
	

	recDatosRegistroCodigo record;
	curDatosRegistroCodigo cursor 
		for select id_registro,codigo_nomina,count(*) as son 
		from cargamasivatrabajador 
		group by id_registro,codigo_nomina;
	

 begin 	
	raise notice 'Se inicia la ejecucion de la funcion valida_estructura_trabajador()';

	 
	-----------------------------------------------------------------------------------------------
	
	raise notice '--- Se inicia la validacion de las cedulas';

		contadorCarga:=(select count(*) from cargamasivatrabajador); -- cantidad de personas a trabajar

		contador := ( select count(*)
				from personal p,personalorganismo po,cargamasivatrabajador cm
				where p.id_personal = po.id_personal and
				p.cedula = cm.cedula);

		IF contador<>contadorCarga THEN
			RAISE EXCEPTION 'Existen cedulas con error, verifique la existencia en la tabla personal y su correspondencia en personalorganismo';
		END IF;

	-- se valida la existencia de las cedulas dentro de los trabajadores ya activos

		contador := (select count(*)
				from trabajador t, cargamasivatrabajador cm
				where t.cedula = cm.cedula and t.estatus = 'A');

		IF contador>0 THEN
			RAISE EXCEPTION 'Existen cedulas que ya se encuentran asociadas a trabajadores activos, el metodo no soporta multiples trabajadores con la misma cedula';
		END IF;


	-- se validan las repeticiones de las cedulas en los datos cargados en la tabla temporal
		

		contador := ( select count(*) from (select cedula
							from cargamasivatrabajador cm
							group by cedula having count(*) > 1
						    ) as dobles );

		IF contador>0 THEN
			RAISE EXCEPTION 'Existen cedulas duplicadas dentro de la tabla cargamasivatrabajador, el metodo no soporta multiples trabajadores con la misma cedula';
		END IF;



	raise notice '--- culminada la validacion de las cedulas';

	-----------------------------------------------------------------------------------------------
	raise notice '--- Se inicia la validacion de las dependencias';
	open curDatosDependencia;
	loop
		fetch curDatosDependencia into recDatosDependencia;
		exit when not found;
		contador:=(select count(*) 
				from 
					dependencia d, grupoorganismo go, organismo o, region r, sede s,
					lugarpago lp, ciudad c, estado e, turno t
				where 
					d.id_grupo_organismo = go.id_grupo_organismo and
					go.id_organismo = o.id_organismo and
					d.id_region = r.id_region and
					d.id_sede = s.id_sede and
					s.id_turno = t.id_turno and
					s.id_lugar_pago = lp.id_lugar_pago and
					lp.id_ciudad =  c.id_ciudad and
					c.id_estado = e. id_estado and 
					d.id_dependencia = recDatosDependencia.id_dependencia);
		IF contador=0 THEN
			RAISE EXCEPTION 'Verifique la estructura de la dependencia con id_dependencia = %',recDatosDependencia.id_dependencia;
		END IF;

	end loop;
	close curDatosDependencia;
	raise notice '--- culminada la validacion de las dependencias';
			
	-----------------------------------------------------------------------------------------------

	raise notice '--- Se inicia la validacion de los tipos de de personal y su registro';
	open curDatosTipoPersonalRegistro;
	loop
		fetch curDatosTipoPersonalRegistro into recDatosTipoPersonalRegistro;
		exit when not found;

		-- necesito los atributos del tipopersonal 
		select * into recTipoPersonal from tipopersonal where id_tipo_personal = recDatosTipoPersonalRegistro.id_tipo_personal;

		-- no maneja registro 
		if recTipoPersonal.maneja_rac = 'N' then -- deberia ser nulo el id_registro en la tabla 
			if recDatosTipoPersonalRegistro.id_registro is not null then
				RAISE EXCEPTION 'El tipo de personal % no debe tener registro asociado ya que no maneja RAC en su definicion', recDatosTipoPersonalRegistro.id_tipo_personal;
			end if;
		else -- maneja Registro 
			contador:=(select count(*) 
					from registropersonal 
					where id_tipo_personal = recDatosTipoPersonalRegistro.id_tipo_personal and
					id_registro = recDatosTipoPersonalRegistro.id_registro);
			IF contador=0 THEN
				RAISE EXCEPTION 'Verifique la estructura de registropersonal del tipo de personal = %',recDatosTipoPersonalRegistro.id_tipo_personal;
			END IF;
		end if;

	end loop;
	close curDatosTipoPersonalRegistro;
	raise notice '--- culminada la validacion de los tipos de personal y su registro';
			
	-----------------------------------------------------------------------------------------------

	raise notice '--- Se inicia la validacion de los cargos';


	-- que existan todos
		contadorCarga:=(select count(*) from cargamasivatrabajador); -- cantidad de personas a trabajar

		contador := ( select count(*)
				from cargo c,cargamasivatrabajador cm
				where c.id_cargo = cm.id_cargo);

		IF contador<>contadorCarga THEN
			RAISE EXCEPTION 'Existen cargos con error en su id, verifique la existencia en la tabla cargo';
		END IF;

	-- que se enmarquen en la estructura	
	open curDatosTipoPersonalCargo;
	loop
		fetch curDatosTipoPersonalCargo into recDatosTipoPersonalCargo;
		exit when not found;

		-- se valida si la estructura esta completa 
		contador:=(select count(*) 
				from 
					cargo c, manualcargo mc, manualpersonal mp
				where 
					c.id_manual_cargo = mc.id_manual_cargo and
					mp.id_manual_cargo = mc.id_manual_cargo and
					c.id_cargo = recDatosTipoPersonalCargo.id_cargo and
					mp.id_tipo_personal  = recDatosTipoPersonalCargo.id_tipo_personal);
		IF contador=0 THEN
			RAISE EXCEPTION 'Verifique el manualpersonal correspondientes al tipo de personal = %',recDatosTipoPersonalCargo.id_tipo_personal;
		END IF;

		--- vemos si el cargo tiene remuneración asociada en su manualcargo
		contador:=(select count(*) 
				from 
					cargo c, manualcargo mc, tabulador t, detalletabulador dt
				where 
					c.id_manual_cargo = mc.id_manual_cargo and
					mc.id_tabulador = t.id_tabulador and
					t.id_tabulador = dt.id_tabulador and
					c.grado = dt.grado and
					c.sub_grado = dt.sub_grado and
					c.id_cargo = recDatosTipoPersonalCargo.id_cargo);
		IF contador=0 THEN
			RAISE NOTICE 'El id_cargo % no tiene remuneracion asociada',recDatosTipoPersonalCargo.id_cargo;
		END IF;
		

	end loop;
	close curDatosTipoPersonalCargo;
	raise notice '--- culminada la validacion de los cargos';


	-----------------------------------------------------------------------------------------------


	raise notice '--- Se inicia la validacion de los codigos de nomina';
	open curDatosRegistroCodigo;
	loop
		fetch curDatosRegistroCodigo into recDatosRegistroCodigo;
		exit when not found;

		-- se valida si la estructura esta completa 
		contador:=(select count(*) 
				from 
					registrocargos rc
				where 
					rc.id_registro = recDatosRegistroCodigo.id_registro and
					rc.codigo_nomina = recDatosRegistroCodigo.codigo_nomina and
					rc.situacion <> 'V');
					
		IF contador > 0 or recDatosRegistroCodigo.son > 1 THEN
			RAISE EXCEPTION 'Verifique codigo de nomina = %, se encuentra repetido en el lote o no esta vacante en registrocargos',recDatosRegistroCodigo.codigo_nomina;
		END IF;

	end loop;
	close curDatosRegistroCodigo;
	
	

	-- se valida si existen diferencias entre el id de dependencia especificado y el existente el el rc creado previamente

	contador:= (select count(*) 
			from registrocargos rc, cargamasivatrabajador cm
			where rc.id_registro    =  cm.id_registro
			and   rc.codigo_nomina  =  cm.codigo_nomina
			and   (rc.id_dependencia <> cm.id_dependencia 
				or rc.id_cargo <> cm.id_cargo)
			);

	IF contador > 0 THEN
		RAISE EXCEPTION 'Verifique la informacion de los cargos, existen codigos de nomina con diferencias en la dependencia y/o cargo';
	END IF;

	
	raise notice '--- culminada la validacion de los codigos de nómina';


-----------------------------------------------------------------------------------------------


	raise notice '--- Se inicia la validacion de las causas de movimiento';


	-- que existan todos

		contadorCarga:=(select count(*) from cargamasivatrabajador); -- cantidad de registros a trabajar

		contador := ( select count(*)
				from tipopersonal tp,cargamasivatrabajador cm, 
				     causapersonal cp
				where cm.id_tipo_personal = tp.id_tipo_personal
					and tp.id_clasificacion_personal = cp.id_clasificacion_personal 
					and cp.id_causa_movimiento = cm.id_causa_movimiento);

		IF contador<>contadorCarga THEN
			RAISE EXCEPTION 'Existen causas de movimiento que no estan asociadas a las clasificaciones de personal';
		END IF;

	raise notice '--- culminada la validacion de las causas de movimiento';


	-----------------------------------------------------------------------------------------------




	raise notice 'Se culmina la ejecucion de la funcion valida_estructura_trabajador()';

	
end;  $$;


--
-- TOC entry 822 (class 1255 OID 3240862)
-- Name: validar_conyuge(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION validar_conyuge(integer) RETURNS bigint
    LANGUAGE sql
    AS $_$
	select count(*) from familiar where parentesco = 'C' 
		and id_personal = $1 and familiar.cedula_familiar in 
			(select personal.cedula from personal, trabajador 
			where personal.id_personal = trabajador.id_personal
			and trabajador.estatus = 'A')
$_$;


--
-- TOC entry 823 (class 1255 OID 3240863)
-- Name: validar_prestamos_activos(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION validar_prestamos_activos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
-- Por JACKSON PEREZ (PROMAFE)
-- Sistema de Gestión Financiera de Recursos Humanos SIGEFIRRHH (Versión 3.10)
-- 02/01/2010
-- trigger que impide que un trabajador posea dos prestamos activos
-- Actualizado el 07-09-2012 por Luis Mora (DIGEMAFE)

DECLARE
    my_record record;
    _codigo text;
    _orga text;
    _unad text;
    _anho int4;
    i int4 :=0;
    aux int4 :=0;
    contador int4 ;
    ceros text;
    codigo text;
BEGIN


    contador:=(select count(*)
            from prestamo where id_trabajador=NEW.id_trabajador and
                id_concepto_tipo_personal=NEW.id_concepto_tipo_personal
                and estatus='A');

    /*RAISE NOTICE 'datos que bienen: NEW.id_trabajador = %', NEW.id_trabajador;
    RAISE NOTICE 'datos que bienen: NEW.id_concepto_tipo_personal = %', NEW.id_concepto_tipo_personal;
    RAISE NOTICE 'datos que bienen: TG_OP = %', TG_OP;
    RAISE NOTICE 'datos que bienen: contador = %', contador;*/


    IF (TG_OP='INSERT' and contador=1) and NEW.estatus
='A' THEN
    RAISE EXCEPTION 'No se puede registrar otro prestamo activo para el trabajador';

    END IF;

    IF (TG_OP='UPDATE' and contador>1) and NEW.estatus
='A' THEN
    RAISE EXCEPTION 'No se puede modificar porque el trabajador tiene otro prestamo activo';

    END IF;

   
RETURN NEW;
END;
$$;


--
-- TOC entry 824 (class 1255 OID 3240864)
-- Name: validar_tope_horas_extra(boolean, integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION validar_tope_horas_extra(boolean, integer, integer, integer, integer, integer, integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare 

	---- parametros de entrada
	pOrdinaria alias for $1;
	pIdNominaEspecial alias for $2;	
	pIdGrupoNomina alias for $3;	
	pAnio alias for $4;
	pF1 alias for $5;
	pF2 alias for $6;
	pF3 alias for $7;	


	---- variables de cálculo
	vHoraUnitaria float8 :=1.0;
	vMontoHorasHistorico float8 :=0.0;
	vCantidadHorasHistorico float8 :=0.0;
	vCantidadHorasNomina float8 :=0.0;
	vIdNominaEspecial int;
	

        ---- Cursor de busqueda de los trabajadores que devengas horas extras en conceptofijo y/o variable
	recTrabajadorConHoras record;
	curTrabajadorConHoras cursor (cIdGrupoNomina int4, cf1 int4, cf2 int4, cf3 int4) 
		for 
		select id_trabajador,cedula, sum(unidades) as unidades, sum(monto) as  monto ,tope_horas_extra as tope_anual, tope_horas_extra_mensual as tope_mensual from ( 
				select distinct t.id_trabajador,t.cedula, cf.unidades, cf.monto, pv.tope_horas_extra, pv.tope_horas_extra_mensual 
				from trabajador t, conceptofijo cf, frecuenciatipopersonal ftp, 			
				conceptotipopersonal ctp, concepto c, frecuenciapago fp, tipopersonal tp, parametrovarios pv
				where cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
				and t.id_tipo_personal = tp.id_tipo_personal 
				and ctp.id_concepto = c.id_concepto
				and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
				and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
				and t.id_trabajador = cf.id_trabajador
				and t.id_tipo_personal = pv.id_tipo_personal
				and cf.monto > 0
				and cf.estatus = 'A'
				and t.estatus = 'A'
				and c.cod_concepto in ('2027','2030')
				and (pv.tope_horas_extra > 0 or tope_horas_extra_mensual > 0)
				and ftp.cod_frecuencia_pago in  (cf1,cf2,cf3)---(1,2,3)
				and tp.id_grupo_nomina = cIdGrupoNomina
				union
				select t.id_trabajador,t.cedula, cf.unidades, cf.monto, pv.tope_horas_extra, pv.tope_horas_extra_mensual
				from trabajador t, conceptovariable cf, frecuenciatipopersonal ftp, 			
				conceptotipopersonal ctp, concepto c, frecuenciapago fp, tipopersonal tp, parametrovarios pv
				where cf.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
				and t.id_tipo_personal = tp.id_tipo_personal 
				and ctp.id_concepto = c.id_concepto
				and ftp.id_frecuencia_tipo_personal = cf.id_frecuencia_tipo_personal
				and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
				and t.id_trabajador = cf.id_trabajador
				and t.id_tipo_personal = pv.id_tipo_personal
				and cf.monto > 0
				and cf.estatus = 'A'
				and t.estatus = 'A'
				and c.cod_concepto in ('2027','2030')
				and (pv.tope_horas_extra > 0 or tope_horas_extra_mensual > 0)
				and ftp.cod_frecuencia_pago in (cf1,cf2,cf3) --- (1,2,3) 
				and tp.id_grupo_nomina =  cIdGrupoNomina
			) as unidas group by id_trabajador,cedula, tope_horas_extra, tope_horas_extra_mensual;		

        ---- Cursor de busqueda de los parametros necesarios de los trabajadores para el calculo de la hora unitaria

        recParametrosTrabajador record;
	curParametrosTrabajador cursor (cIdTrabajador int4) 
		for 
		select ctp.id_concepto_tipo_personal,
		t.id_trabajador,
		1::int4 as unidades,
		ctp.tipo,
		fp.cod_frecuencia_pago,
		tu.jornada_diaria,
		tu.jornada_semanal,
		tp.formula_Integral,
		tp.formula_Semanal,
		t.id_cargo,
		ctp.valor,
		ctp.tope_minimo,
		ctp.tope_maximo
		from trabajador t, conceptotipopersonal ctp, frecuenciatipopersonal ftp, frecuenciapago fp, concepto c, turno tu, tipopersonal tp
		where  t.id_tipo_personal = ctp.id_tipo_personal
		and ctp.id_concepto = c.id_concepto 
		and ctp.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal
		and ftp.id_frecuencia_pago = fp.id_frecuencia_pago
		and t.id_turno = tu.id_turno
		and t.id_tipo_personal = tp.id_tipo_personal
		and c.cod_concepto = '2027'
		and t.id_trabajador = cIdTrabajador;
		



        
 begin 	

	if pIdNominaEspecial <> 0 then 
		vIdNominaEspecial:= pIdNominaEspecial;
	end if; 
	
	raise notice 'Se inicia la ejecucion de la funcion validar_tope_horas_extra()';

	open curTrabajadorConHoras(pIdGrupoNomina, pF1, pF2, pF3);
	loop
		fetch curTrabajadorConHoras into recTrabajadorConHoras;
		exit when not found;
		raise notice 'Inicia el Trabajador = %',recTrabajadorConHoras.cedula;

		--- para el trabajador traigo completo lo que necesito para el calulo unitario de las horas

		open curParametrosTrabajador(recTrabajadorConHoras.id_trabajador);
			fetch curParametrosTrabajador into recParametrosTrabajador;
			if not found then
				--- algo fallo en la parametrización
				raise notice 'Fallo la consulta de los parametros de calculo del valor unitario de la hora extra para el id_trabajador %',recTrabajadorConHoras.id_trabajador;
				-- return 0;
			else
				vHoraUnitaria :=  calcular_concepto( 
								recParametrosTrabajador.id_concepto_tipo_personal,
								recParametrosTrabajador.id_trabajador,
								recParametrosTrabajador.unidades,
								recParametrosTrabajador.tipo,
								recParametrosTrabajador.cod_frecuencia_pago,
								recParametrosTrabajador.jornada_diaria,
								recParametrosTrabajador.jornada_semanal,
								recParametrosTrabajador.formula_Integral,
								recParametrosTrabajador.formula_Semanal,
								recParametrosTrabajador.id_cargo,
								recParametrosTrabajador.valor,
								recParametrosTrabajador.tope_minimo,
								recParametrosTrabajador.tope_maximo);
			end if;
			
			if recParametrosTrabajador.cod_frecuencia_pago = '3' then 
				-- esta parametrizada como ambas quincenas y por ende debemos duplicar el monto
				vHoraUnitaria := vHoraUnitaria*2;
			end if;


		close curParametrosTrabajador;


			if vHoraUnitaria = 0 then --- no se puede establecer el monto de la hora unitaria, no se puede continuar
				raise notice 'Resulta imposible establecer el valor unitario de la hora extra, verifique la parametrización';
				Insert into mensajesprenomina(id_grupo_nomina, id_nomina_especial, mensaje) 
					values (pIdGrupoNomina, 
						vIdNominaEspecial, 
						'Resulta imposible establecer el valor unitario de la hora extra, verifique la parametrización para el trabajador con la cédula N° ' || recTrabajadorConHoras.cedula);

			else -- sigo con la validacion 
				raise notice 'vHoraUnitaria = %',vHoraUnitaria;		

				--- busco el historico devengado por ese trabajador por horas extras
				select coalesce(sum(monto_asigna),0) as totalHistorico into vMontoHorasHistorico
					from historicoquincena hq, conceptotipopersonal ctp, concepto c
					where hq.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal
						and ctp.id_concepto = c.id_concepto 
						and c.cod_concepto in ('2027','2030')
						and hq.id_trabajador = recTrabajadorConHoras.id_trabajador
						and hq.anio = pAnio 
						group by hq.id_trabajador;

				if not found then ----- no ha ni devengado un bolivar
					vMontoHorasHistorico:=0.0;
				end if;
					raise notice 'vMontoHorasHistorico = %',vMontoHorasHistorico;

				--- Calculo el aproximado de horas extras que ha devengado

					vCantidadHorasHistorico:=vMontoHorasHistorico/vHoraUnitaria;
					raise notice 'vCantidadHorasHistorico = %',vCantidadHorasHistorico;	
				
				--- Calculo el aproximado de horas extras que se cancela en el período
				
					vCantidadHorasNomina:=recTrabajadorConHoras.monto/vHoraUnitaria; 
					raise notice 'vCantidadHorasNomina = %',vCantidadHorasNomina;				
				--- Evaluo las horas en el año
				if recTrabajadorConHoras.tope_anual>0 then 
					if vCantidadHorasHistorico+vCantidadHorasNomina > recTrabajadorConHoras.tope_anual then
						Insert into mensajesprenomina(id_grupo_nomina, id_nomina_especial, mensaje) 
							values (pIdGrupoNomina, 
								vIdNominaEspecial, 
								'El trabajador con la cédula N° ' || recTrabajadorConHoras.cedula || ' excede la tope de horas extras anuales establecido para su tipo de personal');
					end if; 
					
				end if;
				
				--- Evaluo las horas en el mes
				
				if recTrabajadorConHoras.tope_mensual>0 then 
					if vCantidadHorasNomina > recTrabajadorConHoras.tope_mensual then
						Insert into mensajesprenomina(id_grupo_nomina, id_nomina_especial, mensaje) 
							values (pIdGrupoNomina, 
								vIdNominaEspecial, 
								'El trabajador con la cédula N° ' || recTrabajadorConHoras.cedula || ' excede la tope de horas extras del período establecido para su tipo de personal');
					end if; 
					
				end if;				
		

			end if;


	end loop;



		
	close curTrabajadorConHoras;
		
	raise notice 'Fin validar_tope_horas_extra()';	

return;

end;



$_$;


--
-- TOC entry 825 (class 1255 OID 3240866)
-- Name: valor_defecto_descuento(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION valor_defecto_descuento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
-- Por HENRY VAZQUEZ
-- Sistema de Gestión Financiera de Recursos Humanos SIGEFIRRHH (Versión 3.20 Beta)
-- 01/11/2010
-- trigger que valida el valor 
DECLARE
	my_record record;
	_codigo text;
	_orga text;
	_unad text;
	_anho int4;
	i int4 :=0;
	aux int4 :=0;
	contador int4 ;
	ceros text;
	codigo text;
BEGIN


	contador:=(select count(*) 
		from personal p, trabajador t, parametrovarios pv
		where p.id_personal = t.id_personal 
		and t.id_tipo_personal = pv.id_tipo_personal 
		and pv.ausencia_injustificada = 'S'
		and p.id_personal = NEW.id_personal);
		
	IF ( ( TG_OP='INSERT' or (TG_OP='UPDATE' and NEW.estatus = 'A'  and NEW.descuento_estatus ='D') ) and contador > 0  and NEW.id_tipo_ausencia = 12)  THEN
		NEW.descuento_estatus :='P';
	END IF;
RETURN NEW;
END;
$$;


--
-- TOC entry 826 (class 1255 OID 3240867)
-- Name: verificar_sobregirado_trabajadorcargoespecifica(integer, integer, double precision, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION verificar_sobregirado_trabajadorcargoespecifica(integer, integer, double precision, character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$

declare 

	pId alias for $1;
	pAnio alias for $2;
	pPorcentaje alias for $3;
	pTipo alias for $4;
	
	recTrabajadores1 record;
	curTrabajadores1 cursor (pId int4, pAnio int4) 
		for select sum(te.porcentaje) as total
		from trabajadorespecifica te
		where te.id_trabajador = pId
		and te.anio = pAnio;
	
	recRegistroCargos1 record;
	curRegistroCargos1 cursor (pId int4, pAnio int4) 
		for select sum(ce.porcentaje) as total
		from cargoespecifica ce
		where ce.id_registro_cargos = pId
		and ce.anio = pAnio;
	porcentaje float8 := 0;
	
begin
	if pTipo = 'T' then
		open curTrabajadores1(pId, pAnio);				
		
		fetch curTrabajadores1 into recTrabajadores1;			
		
		if recTrabajadores1.total <> null then
		porcentaje := recTrabajadores1.total + pPorcentaje;
			if porcentaje > 100 then
				return true;
			end if;		
		end if;
		close curTrabajadores1;
	else
		open curRegistroCargos1(pId, pAnio);				
		
		fetch curRegistroCargos1 into recRegistroCargos1;			
		
		if recRegistroCargos1.total <> null then
		porcentaje := recRegistroCargos1.total + pPorcentaje;
			if porcentaje > 100 then
				return true;
			end if;		
		end if;
		close curRegistroCargos1;
	end if;
	
	return false;
end;

$_$;


--
-- TOC entry 172 (class 1259 OID 3240868)
-- Name: accioncentralizada; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE accioncentralizada (
    id_accion_centralizada integer NOT NULL,
    cod_accion_centralizada character varying(4) NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    denominacion character varying(90),
    id_organismo integer NOT NULL
);


--
-- TOC entry 173 (class 1259 OID 3240872)
-- Name: accionespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE accionespecifica (
    id_accion_especifica integer NOT NULL,
    cod_accion_especifica character varying(4) NOT NULL,
    tipo character varying(1) NOT NULL,
    denominacion character varying(90) NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    id_proyecto integer,
    id_accion_centralizada integer
);


--
-- TOC entry 174 (class 1259 OID 3240876)
-- Name: accionevaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE accionevaluacion (
    id_accion_evaluacion integer NOT NULL,
    cod_accion_evaluacion character varying(2) NOT NULL,
    descripcion character varying(80) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 175 (class 1259 OID 3240880)
-- Name: acreencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE acreencia (
    id_acreencia integer NOT NULL,
    id_tipo_acreencia integer NOT NULL,
    monto_acreencia double precision DEFAULT 0,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_registro date,
    observaciones text,
    id_personal integer NOT NULL
);


--
-- TOC entry 176 (class 1259 OID 3240888)
-- Name: actividaddocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE actividaddocente (
    id_actividad_docente integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    anio_inicio integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_personal integer NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    relacion_laboral character varying(30),
    nombre_entidad character varying(90),
    asignatura character varying(60),
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT actividaddocente_estatus CHECK ((((estatus)::text = 'S'::text) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT actividaddocente_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT actividaddocente_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


--
-- TOC entry 177 (class 1259 OID 3240902)
-- Name: adiestramientocargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE adiestramientocargo (
    id_adiestramiento_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT adiestramientocargo_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


--
-- TOC entry 178 (class 1259 OID 3240909)
-- Name: administradorauel; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE administradorauel (
    id_administradora_uel integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_unidad_administradora integer NOT NULL
);


--
-- TOC entry 179 (class 1259 OID 3240912)
-- Name: afiliacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE afiliacion (
    id_afiliacion integer NOT NULL,
    fecha date,
    id_gremio integer NOT NULL,
    numero_afiliacion character varying(10),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 180 (class 1259 OID 3240916)
-- Name: ajustetabuladoronu; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ajustetabuladoronu (
    id_ajuste_tabulador_onu integer NOT NULL,
    id_tabulador integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying,
    anios_servicio integer DEFAULT 0 NOT NULL,
    ajuste_anual double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 181 (class 1259 OID 3240923)
-- Name: antecedente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE antecedente (
    id_antecedente integer NOT NULL,
    fecha_ingreso date NOT NULL,
    personal_ingreso character varying(60),
    cargo_ingreso character varying(6),
    descargo_ingreso character varying(60),
    codrac_ingreso integer DEFAULT 1 NOT NULL,
    sueldo_ingreso double precision DEFAULT 0 NOT NULL,
    compensacion_ingreso double precision DEFAULT 0 NOT NULL,
    primas_ingreso double precision DEFAULT 0 NOT NULL,
    fecha_egreso date,
    personal_egreso character varying(60),
    cargo_egreso character varying(6),
    descargo_egreso character varying(60),
    causa_egreso character varying(60),
    codrac_egreso integer DEFAULT 1 NOT NULL,
    sueldo_egreso double precision DEFAULT 0 NOT NULL,
    compensacion_egreso double precision DEFAULT 0 NOT NULL,
    primas_egreso double precision DEFAULT 0 NOT NULL,
    prestaciones_pendientes character varying(1) DEFAULT 'S'::character varying NOT NULL,
    vacaciones_pendientes character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_vacaciones integer DEFAULT 0 NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT antecedente_prestaciones_pendie CHECK ((((prestaciones_pendientes)::text = 'S'::text) OR ((prestaciones_pendientes)::text = 'N'::text))),
    CONSTRAINT antecedente_vacaciones_pendient CHECK ((((vacaciones_pendientes)::text = 'S'::text) OR ((vacaciones_pendientes)::text = 'N'::text)))
);


--
-- TOC entry 182 (class 1259 OID 3240943)
-- Name: anticipo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE anticipo (
    id_anticipo integer DEFAULT 0 NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    fecha_anticipo date NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    tipo_anticipo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    forma_anticipo character varying(1) DEFAULT 'P'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 561 (class 1259 OID 6691686)
-- Name: antiguedad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE antiguedad (
    anio integer,
    porcentual double precision
);


--
-- TOC entry 183 (class 1259 OID 3240955)
-- Name: apelacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE apelacion (
    id_apelacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha date NOT NULL,
    resultado character varying(1) NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50) DEFAULT 'H'::character varying NOT NULL,
    observaciones text,
    id_personal integer NOT NULL
);


--
-- TOC entry 184 (class 1259 OID 3240965)
-- Name: aperturaescolar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE aperturaescolar (
    id_apertura_escolar integer NOT NULL,
    id_dependencia integer NOT NULL,
    cod_cargo character varying(8),
    cargos_apertura integer DEFAULT 0,
    cargos_restante integer DEFAULT 0,
    horas_apertura double precision DEFAULT 0,
    horas_restante double precision DEFAULT 0
);


--
-- TOC entry 185 (class 1259 OID 3240972)
-- Name: aplicartabulador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE aplicartabulador (
    id_aplicar_tabulador integer NOT NULL,
    fecha_proceso date,
    grado_actual integer DEFAULT 0 NOT NULL,
    paso_actual integer DEFAULT 0 NOT NULL,
    sueldo_actual double precision DEFAULT 0 NOT NULL,
    ajuste_actual double precision DEFAULT 0 NOT NULL,
    compensacion_actual double precision DEFAULT 0 NOT NULL,
    paso_nuevo integer DEFAULT 0 NOT NULL,
    sueldo_nuevo double precision DEFAULT 0 NOT NULL,
    ajuste_nuevo double precision DEFAULT 0 NOT NULL,
    compensacion_nueva double precision DEFAULT 0 NOT NULL,
    id_trabajador integer NOT NULL,
    monto_retroactivo double precision DEFAULT 0,
    dias_retroactivo integer DEFAULT 0,
    base_aumento double precision DEFAULT 0
);


--
-- TOC entry 186 (class 1259 OID 3240987)
-- Name: areacarrera; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE areacarrera (
    id_area_carrera integer NOT NULL,
    cod_area_carrera character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 187 (class 1259 OID 3240990)
-- Name: areaconocimiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE areaconocimiento (
    id_area_conocimiento integer NOT NULL,
    cod_area_conocimiento character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 188 (class 1259 OID 3240993)
-- Name: asignatura; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE asignatura (
    id_asignatura integer NOT NULL,
    cod_asignatura character varying(3) NOT NULL,
    nombre character varying(50),
    tope_horas double precision DEFAULT 0
);


--
-- TOC entry 189 (class 1259 OID 3240997)
-- Name: asuencianomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE asuencianomina (
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_ausencia integer NOT NULL
);


--
-- TOC entry 190 (class 1259 OID 3241000)
-- Name: auditoria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE auditoria (
    id_usuario integer DEFAULT 0,
    id_organismo integer DEFAULT 0,
    hora time without time zone NOT NULL,
    fecha date NOT NULL,
    usuario character varying(90) NOT NULL,
    ruta character varying(150) NOT NULL,
    accion character varying(1) NOT NULL,
    registro character varying(400) NOT NULL,
    cedula_trabajador integer DEFAULT 0 NOT NULL,
    concepto character varying(55),
    monto double precision DEFAULT 0 NOT NULL,
    frecuencia_pago integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 191 (class 1259 OID 3241011)
-- Name: auditoriacargamasiva; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE auditoriacargamasiva (
    id_usuario integer DEFAULT 0,
    id_organismo integer DEFAULT 0,
    hora time without time zone NOT NULL,
    fecha date NOT NULL,
    usuario character varying(90) NOT NULL,
    accion character varying(2) NOT NULL,
    cedula_trabajador integer DEFAULT 0 NOT NULL,
    id_trabajador integer,
    registro character varying(400) NOT NULL,
    concepto character varying(55),
    monto double precision DEFAULT 0 NOT NULL,
    frecuencia_pago integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 192 (class 1259 OID 3241022)
-- Name: aumentoevaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE aumentoevaluacion (
    id_aumento_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    resultado double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso_anterior integer DEFAULT 0 NOT NULL,
    sueldo_anterior double precision DEFAULT 0 NOT NULL,
    ajuste_anterior double precision DEFAULT 0 NOT NULL,
    compensacion_anterior double precision DEFAULT 0 NOT NULL,
    otros_anterior double precision DEFAULT 0 NOT NULL,
    base_aumento double precision DEFAULT 0 NOT NULL,
    sueldo_nuevo double precision DEFAULT 0 NOT NULL,
    compensacion_nueva double precision DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    aumento_definitivo double precision DEFAULT 0 NOT NULL,
    paso_nuevo integer DEFAULT 0 NOT NULL,
    porcentaje_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    ajuste_escala double precision DEFAULT 0 NOT NULL,
    dias_retroactivo integer DEFAULT 0 NOT NULL,
    monto_retroactivo double precision DEFAULT 0 NOT NULL,
    id_trabajador integer NOT NULL,
    id_resultado_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    estatus character varying(2)
);


--
-- TOC entry 193 (class 1259 OID 3241045)
-- Name: ausencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ausencia (
    id_ausencia integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    cesta_ticket character varying(1) DEFAULT 'S'::character varying NOT NULL,
    dias_continuos integer DEFAULT 0 NOT NULL,
    dias_habiles integer DEFAULT 0 NOT NULL,
    cedula_director integer,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    clase character varying(1) DEFAULT 'A'::character varying NOT NULL,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    horas_dias character varying(1) DEFAULT 'D'::character varying NOT NULL,
    cedula_jefe integer,
    mes integer DEFAULT 0 NOT NULL,
    nombre_director character varying(50),
    nombre_jefe character varying(50),
    nombre_supervisor character varying(50),
    observaciones character varying(250),
    id_personal integer NOT NULL,
    cedula_supervisor integer,
    id_tipo_ausencia integer NOT NULL,
    remunerado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    descuento_estatus character varying(1) DEFAULT 'D'::character varying NOT NULL,
    CONSTRAINT ausencia_cesta_ticket CHECK ((((cesta_ticket)::text = 'S'::text) OR ((cesta_ticket)::text = 'N'::text))),
    CONSTRAINT ausencia_clase CHECK (((((clase)::text = 'A'::text) OR ((clase)::text = 'P'::text)) OR ((clase)::text = 'R'::text))),
    CONSTRAINT ausencia_estatus CHECK (((((((estatus)::text = 'P'::text) OR ((estatus)::text = 'A'::text)) OR ((estatus)::text = 'R'::text)) OR ((estatus)::text = 'G'::text)) OR ((estatus)::text = 'O'::text))),
    CONSTRAINT ausencia_horas_dias CHECK ((((((horas_dias)::text = 'H'::text) OR ((horas_dias)::text = 'D'::text)) OR ((horas_dias)::text = 'M'::text)) OR ((horas_dias)::text = 'A'::text))),
    CONSTRAINT ausencia_remunerado CHECK ((((remunerado)::text = 'S'::text) OR ((remunerado)::text = 'N'::text)))
);


--
-- TOC entry 194 (class 1259 OID 3241063)
-- Name: ausencianomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ausencianomina (
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_ausencia integer NOT NULL
);


--
-- TOC entry 195 (class 1259 OID 3241066)
-- Name: averiguacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE averiguacion (
    id_averiguacion integer NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_proceso date NOT NULL,
    fecha_fin_proceso date,
    fecha_fin date,
    fecha_inicio date,
    inhabilitado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    origen character varying(1) DEFAULT 'C'::character varying NOT NULL,
    id_personal integer NOT NULL,
    resolucion character varying(20),
    suspension_sueldo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT averiguacion_estatus CHECK (((((estatus)::text = 'P'::text) OR ((estatus)::text = 'C'::text)) OR ((estatus)::text = 'R'::text))),
    CONSTRAINT averiguacion_inhabilitado CHECK ((((inhabilitado)::text = 'S'::text) OR ((inhabilitado)::text = 'N'::text))),
    CONSTRAINT averiguacion_origen CHECK (((((origen)::text = 'C'::text) OR ((origen)::text = 'I'::text)) OR ((origen)::text = 'O'::text))),
    CONSTRAINT averiguacion_suspension_sueldo CHECK ((((suspension_sueldo)::text = 'S'::text) OR ((suspension_sueldo)::text = 'N'::text)))
);


--
-- TOC entry 196 (class 1259 OID 3241081)
-- Name: banco; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE banco (
    id_banco integer NOT NULL,
    cod_banco character varying(3),
    identificador_ahorro character varying(6),
    identificador_corriente character varying(6),
    nombre character varying(90),
    correlativo integer DEFAULT 0
);


--
-- TOC entry 197 (class 1259 OID 3241085)
-- Name: baremopreseleccionado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE baremopreseleccionado (
    id_baremo_preseleccionado integer NOT NULL,
    id_postulado_concurso integer NOT NULL,
    id_varemos integer NOT NULL,
    resultado double precision DEFAULT 0 NOT NULL,
    entrevistador character varying(60),
    fecha date,
    observaciones text
);


--
-- TOC entry 198 (class 1259 OID 3241092)
-- Name: becafamiliar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE becafamiliar (
    id_beca_familiar integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_concepto_tipo_personal integer,
    fecha date,
    tramite_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'O'::character varying NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    promedio_notas integer DEFAULT 0 NOT NULL,
    estatus_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    instituto character varying(90),
    instituto_otra_beca character varying(90),
    carrera_especialidad character varying(90),
    otra_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pagada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_otra_beca double precision DEFAULT 0 NOT NULL,
    trajo_recaudos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_ultimo_pago date
);


--
-- TOC entry 199 (class 1259 OID 3241105)
-- Name: becatrabajador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE becatrabajador (
    id_beca_trabajador integer NOT NULL,
    id_personal integer NOT NULL,
    tramite_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'O'::character varying NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    unidad character varying(1) DEFAULT 'S'::character varying NOT NULL,
    periodo_cursando character varying(2),
    promedio_notas character varying(2),
    estatus_beca character varying(1) DEFAULT 'S'::character varying NOT NULL,
    instituto character varying(90),
    instituto_otra_beca character varying(90),
    carrera_especialidad character varying(90),
    id_pais integer,
    otra_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pagada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_otra_beca double precision DEFAULT 0 NOT NULL,
    trajo_recaudos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_ultimo_pago date
);


--
-- TOC entry 200 (class 1259 OID 3241117)
-- Name: beneficiario; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE beneficiario (
    id_beneficiario integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_primas_plan integer NOT NULL,
    id_familiar integer NOT NULL,
    monto_prima double precision DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    monto_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura double precision DEFAULT 0 NOT NULL,
    cobertura_extra double precision DEFAULT 0 NOT NULL,
    prima_extra double precision DEFAULT 0 NOT NULL,
    fecha_inclusion date,
    fecha_exclusion date,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


--
-- TOC entry 201 (class 1259 OID 3241127)
-- Name: cajaahorro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cajaahorro (
    id_caja_ahorro integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    aporte_trabajador double precision DEFAULT 0 NOT NULL,
    aporte_patron double precision DEFAULT 0 NOT NULL,
    acumulado_trabajador double precision DEFAULT 0 NOT NULL,
    acumulado_patron double precision DEFAULT 0 NOT NULL,
    acumulado_retiros double precision DEFAULT 0 NOT NULL,
    acumulado_haberes double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 202 (class 1259 OID 3241138)
-- Name: calculoantiguedad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE calculoantiguedad (
    id_calculo_antiguedad integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0,
    mes integer DEFAULT 0,
    monto double precision DEFAULT 0 NOT NULL,
    monto_anterior double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 203 (class 1259 OID 3241145)
-- Name: calculobonofinanio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE calculobonofinanio (
    id_calculo_bono_fin_anio integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    total_bono double precision DEFAULT 0 NOT NULL,
    monto_alicuota double precision DEFAULT 0 NOT NULL,
    bono_sin_alicuota double precision DEFAULT 0 NOT NULL,
    dias double precision DEFAULT 0,
    base_fijo double precision DEFAULT 0 NOT NULL,
    base_promedio double precision DEFAULT 0 NOT NULL,
    base_devengado double precision DEFAULT 0 NOT NULL,
    base_mensual double precision DEFAULT 0 NOT NULL,
    base_variable double precision DEFAULT 0 NOT NULL,
    base_proyectado double precision DEFAULT 0 NOT NULL,
    bono_vacacional double precision DEFAULT 0 NOT NULL,
    anios_servicio double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 204 (class 1259 OID 3241160)
-- Name: calculoticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE calculoticket (
    id_calculo_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cantidad_ticket integer DEFAULT 0 NOT NULL,
    denominacion_ticket double precision DEFAULT 0 NOT NULL,
    monto_cobrar double precision DEFAULT 0 NOT NULL,
    total_descuentos_ticket integer DEFAULT 0 NOT NULL,
    neto_cantidad_ticket integer DEFAULT 0 NOT NULL,
    neto_monto_cobrar double precision DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(10),
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer,
    id_proveedor_ticket integer,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    cod_dependencia character varying(12),
    nombre_dependencia character varying(90)
);


--
-- TOC entry 205 (class 1259 OID 3241176)
-- Name: calculovacacional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE calculovacacional (
    id_calculo_vacacional integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0,
    mes integer DEFAULT 0,
    bono_sin_alicuota double precision DEFAULT 0 NOT NULL,
    monto_alicuota double precision DEFAULT 0 NOT NULL,
    monto_petrolero double precision DEFAULT 0 NOT NULL,
    bono_extra double precision DEFAULT 0 NOT NULL,
    total_bono double precision DEFAULT 0 NOT NULL,
    dias double precision DEFAULT 0 NOT NULL,
    base_fijo double precision DEFAULT 0 NOT NULL,
    base_promedio double precision DEFAULT 0 NOT NULL,
    base_devengado double precision DEFAULT 0 NOT NULL,
    base_proyectado double precision DEFAULT 0 NOT NULL,
    momento_pago character varying(1) DEFAULT 'A'::character varying NOT NULL,
    base_alicuota double precision DEFAULT 0 NOT NULL,
    CONSTRAINT cal_momento_pago CHECK ((((momento_pago)::text = 'A'::text) OR ((momento_pago)::text = 'D'::text)))
);


--
-- TOC entry 206 (class 1259 OID 3241194)
-- Name: caracteristicadependencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE caracteristicadependencia (
    id_caracteristica_dependencia integer NOT NULL,
    nombre character varying(60) NOT NULL,
    codigo character varying(2) NOT NULL,
    id_tipo_caracteristica integer NOT NULL
);


--
-- TOC entry 207 (class 1259 OID 3241197)
-- Name: cargamasivatrabajador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cargamasivatrabajador (
    id_tipo_personal integer NOT NULL,
    cedula integer NOT NULL,
    id_cargo integer NOT NULL,
    codigo_nomina integer NOT NULL,
    id_dependencia integer NOT NULL,
    fecha_ingreso date NOT NULL,
    fecha_ingreso_apn date NOT NULL,
    fecha_vacaciones date NOT NULL,
    fecha_prestaciones date NOT NULL,
    fecha_antiguedad date NOT NULL,
    id_banco_nomina integer NOT NULL,
    tipo_cta_nomina character varying(1) NOT NULL,
    cuenta_nomina character varying(20) NOT NULL,
    id_banco_lph integer,
    cuenta_lph character varying(20),
    id_banco_fid integer,
    cuenta_fid character varying(20),
    porcentaje_islr double precision DEFAULT 0 NOT NULL,
    cotiza_sso character varying(1) NOT NULL,
    cotiza_spf character varying(1) NOT NULL,
    cotiza_lph character varying(1) NOT NULL,
    cotiza_fju character varying(1) NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_registro integer
);


--
-- TOC entry 208 (class 1259 OID 3241201)
-- Name: cargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cargo (
    id_cargo integer NOT NULL,
    cod_cargo character varying(10) NOT NULL,
    id_manual_cargo integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying NOT NULL,
    grado integer DEFAULT 1 NOT NULL,
    sub_grado integer DEFAULT 1 NOT NULL,
    caucion character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_serie_cargo integer,
    descripcion_cargo character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT cargo_caucion CHECK ((((((caucion)::text = '0'::text) OR ((caucion)::text = '1'::text)) OR ((caucion)::text = '2'::text)) OR ((caucion)::text = '3'::text))),
    CONSTRAINT cargo_tipo_cargo CHECK ((((((((tipo_cargo)::text = '0'::text) OR ((tipo_cargo)::text = '1'::text)) OR ((tipo_cargo)::text = '2'::text)) OR ((tipo_cargo)::text = '3'::text)) OR ((tipo_cargo)::text = '4'::text)) OR ((tipo_cargo)::text = '5'::text)))
);


--
-- TOC entry 209 (class 1259 OID 3241211)
-- Name: cargoespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cargoespecifica (
    id_cargo_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_registro_cargos integer,
    anio integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 100 NOT NULL
);


--
-- TOC entry 210 (class 1259 OID 3241216)
-- Name: cargosplan; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cargosplan (
    id_cargos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_movimiento_cargo integer NOT NULL,
    cantidad_planificados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_devueltos integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 211 (class 1259 OID 3241223)
-- Name: carrera; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE carrera (
    id_carrera integer NOT NULL,
    cod_carrera character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL
);


--
-- TOC entry 212 (class 1259 OID 3241226)
-- Name: carreraarea; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE carreraarea (
    id_carrera_area integer NOT NULL,
    id_carrera integer NOT NULL,
    id_area_carrera integer NOT NULL
);


--
-- TOC entry 213 (class 1259 OID 3241229)
-- Name: categoriadocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE categoriadocente (
    id_categoria_docente integer NOT NULL,
    digito_categoria character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 214 (class 1259 OID 3241232)
-- Name: categoriapersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE categoriapersonal (
    id_categoria_personal integer NOT NULL,
    cod_categoria character varying(1) NOT NULL,
    desc_categoria character varying(20) NOT NULL
);


--
-- TOC entry 215 (class 1259 OID 3241235)
-- Name: categoriapresupuesto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE categoriapresupuesto (
    id_categoria_presupuesto integer NOT NULL,
    cod_categoria character varying(1) NOT NULL,
    desc_categoria character varying(20) NOT NULL
);


--
-- TOC entry 216 (class 1259 OID 3241238)
-- Name: causadocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE causadocente (
    id_causa_docente integer NOT NULL,
    cod_causa_docente character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT '1'::character varying
);


--
-- TOC entry 217 (class 1259 OID 3241242)
-- Name: causamovimiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE causamovimiento (
    id_causa_movimiento integer NOT NULL,
    cod_causa_movimiento character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_movimiento_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    sujeto_lefp character varying(1),
    grado99 character varying(1),
    tipo_validacion integer,
    formato character varying(8)
);


--
-- TOC entry 218 (class 1259 OID 3241246)
-- Name: causapersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE causapersonal (
    id_causa_personal integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_clasificacion_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 219 (class 1259 OID 3241250)
-- Name: certificacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE certificacion (
    id_certificacion integer NOT NULL,
    id_area_conocimiento integer,
    fecha_certificacion date,
    vigencia character varying(20),
    id_personal integer NOT NULL,
    nombre_certificacion character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 220 (class 1259 OID 3241254)
-- Name: certificado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE certificado (
    id_certificado integer NOT NULL,
    id_personal integer NOT NULL,
    fecha_emision date,
    numero character varying(10) DEFAULT 0 NOT NULL,
    libro character varying(10),
    folio character varying(10),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 221 (class 1259 OID 3241259)
-- Name: cierreunidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cierreunidad (
    id_cierre_unidad integer NOT NULL,
    id_unidad_funcional integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_usuario integer NOT NULL,
    mes_cierre integer DEFAULT 0 NOT NULL,
    anio_cierre integer DEFAULT 0 NOT NULL,
    fecha_proceso date
);


--
-- TOC entry 222 (class 1259 OID 3241264)
-- Name: ciudad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ciudad (
    id_ciudad integer NOT NULL,
    abreviatura character varying(3),
    cod_ciudad character varying(3) NOT NULL,
    id_estado integer NOT NULL,
    nombre character varying(40) NOT NULL,
    multiplicador double precision DEFAULT 0 NOT NULL,
    fluctuacion double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 223 (class 1259 OID 3241269)
-- Name: clasificacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE clasificacion (
    id_clasificacion integer NOT NULL,
    cod_clasificacion character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 224 (class 1259 OID 3241273)
-- Name: clasificaciondependencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE clasificaciondependencia (
    id_clasificacion_dependencia integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_caracteristica_dependencia integer NOT NULL
);


--
-- TOC entry 225 (class 1259 OID 3241276)
-- Name: clasificacionpersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE clasificacionpersonal (
    id_clasificacion_personal integer NOT NULL,
    id_categoria_personal integer NOT NULL,
    id_relacion_personal integer NOT NULL,
    id_categoria_presupuesto integer
);


--
-- TOC entry 226 (class 1259 OID 3241279)
-- Name: comisionservicio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE comisionservicio (
    id_comision_servicio integer NOT NULL,
    id_sede_diplomatica integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    observaciones text,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 227 (class 1259 OID 3241286)
-- Name: comisionservicioext; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE comisionservicioext (
    id_comision_servicio_ext integer NOT NULL,
    id_sede_diplomatica integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    observaciones text,
    nombre_institucion character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 228 (class 1259 OID 3241293)
-- Name: concepto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE concepto (
    id_concepto integer NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    descripcion character varying(50) NOT NULL,
    tipo_prestamo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    unidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    reservado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sueldo_basico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    compensacion character varying(1) DEFAULT 'S'::character varying NOT NULL,
    primas_cargo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    primas_trabajador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    gravable character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_sindicato character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_gremio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sobretiempo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    beneficio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    jubilacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    anticipo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deduccion_caja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aporte_patronal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    embargo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    prestaciones_nr character varying(1) DEFAULT 'N'::character varying NOT NULL,
    prestaciones_vr character varying(1) DEFAULT 'N'::character varying NOT NULL,
    onapre character varying(1) DEFAULT 'N'::character varying NOT NULL,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    anual character varying(1) DEFAULT 'N'::character varying NOT NULL,
    ocurrencia double precision DEFAULT 1 NOT NULL,
    movimiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    proyeccion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    base_legal text,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_concepto_aporte integer,
    ajuste_sueldo character varying(1) DEFAULT 'N'::character varying,
    sueldo_integral character varying(1),
    retroactivo character varying(1),
    id_concepto_retroactivo integer,
    id_concepto_caja integer,
    retroactivo_anterior character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_concepto_retroactivo_anterior integer,
    ausencia character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_concepto_ausencia integer,
    CONSTRAINT conajuste_sueldo CHECK ((((ajuste_sueldo)::text = 'S'::text) OR ((ajuste_sueldo)::text = 'N'::text))),
    CONSTRAINT concepto_anticipo CHECK ((((anticipo)::text = 'S'::text) OR ((anticipo)::text = 'N'::text))),
    CONSTRAINT concepto_anual CHECK ((((anual)::text = 'S'::text) OR ((anual)::text = 'N'::text))),
    CONSTRAINT concepto_aporte_patronal CHECK ((((aporte_patronal)::text = 'S'::text) OR ((aporte_patronal)::text = 'N'::text))),
    CONSTRAINT concepto_beneficio CHECK ((((beneficio)::text = 'S'::text) OR ((beneficio)::text = 'N'::text))),
    CONSTRAINT concepto_compensacion CHECK ((((compensacion)::text = 'S'::text) OR ((compensacion)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_caja CHECK ((((deduccion_caja)::text = 'S'::text) OR ((deduccion_caja)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_gremio CHECK ((((deduccion_gremio)::text = 'S'::text) OR ((deduccion_gremio)::text = 'N'::text))),
    CONSTRAINT concepto_deduccion_sindicato CHECK ((((deduccion_sindicato)::text = 'S'::text) OR ((deduccion_sindicato)::text = 'N'::text))),
    CONSTRAINT concepto_embargo CHECK ((((embargo)::text = 'S'::text) OR ((embargo)::text = 'N'::text))),
    CONSTRAINT concepto_gravable CHECK ((((gravable)::text = 'S'::text) OR ((gravable)::text = 'N'::text))),
    CONSTRAINT concepto_jubilacion CHECK ((((jubilacion)::text = 'S'::text) OR ((jubilacion)::text = 'N'::text))),
    CONSTRAINT concepto_onapre CHECK ((((onapre)::text = 'S'::text) OR ((onapre)::text = 'N'::text))),
    CONSTRAINT concepto_prestaciones_nr CHECK ((((prestaciones_nr)::text = 'S'::text) OR ((prestaciones_nr)::text = 'N'::text))),
    CONSTRAINT concepto_prestaciones_vr CHECK ((((prestaciones_vr)::text = 'S'::text) OR ((prestaciones_vr)::text = 'N'::text))),
    CONSTRAINT concepto_primas_cargo CHECK ((((primas_cargo)::text = 'S'::text) OR ((primas_cargo)::text = 'N'::text))),
    CONSTRAINT concepto_primas_trabajador CHECK ((((primas_trabajador)::text = 'S'::text) OR ((primas_trabajador)::text = 'N'::text))),
    CONSTRAINT concepto_recalculo CHECK ((((recalculo)::text = 'S'::text) OR ((recalculo)::text = 'N'::text))),
    CONSTRAINT concepto_reservado CHECK ((((reservado)::text = 'S'::text) OR ((reservado)::text = 'N'::text))),
    CONSTRAINT concepto_sobretiempo CHECK ((((sobretiempo)::text = 'S'::text) OR ((sobretiempo)::text = 'N'::text))),
    CONSTRAINT concepto_sueldo_basico CHECK ((((sueldo_basico)::text = 'S'::text) OR ((sueldo_basico)::text = 'N'::text))),
    CONSTRAINT concepto_unidad CHECK (((((unidad)::text = 'H'::text) OR ((unidad)::text = 'D'::text)) OR ((unidad)::text = 'M'::text))),
    CONSTRAINT consueldointegral CHECK ((((sueldo_integral)::text = 'S'::text) OR ((sueldo_integral)::text = 'N'::text))),
    CONSTRAINT movimiento CHECK ((((movimiento)::text = 'S'::text) OR ((movimiento)::text = 'N'::text))),
    CONSTRAINT proyeccion CHECK ((((proyeccion)::text = 'S'::text) OR ((proyeccion)::text = 'N'::text)))
);


--
-- TOC entry 229 (class 1259 OID 3241354)
-- Name: conceptoasociado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoasociado (
    id_concepto_asociado integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto_asociar integer NOT NULL,
    base character varying(1) DEFAULT 'M'::character varying NOT NULL,
    factor double precision DEFAULT 1 NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    CONSTRAINT concepto_asociado_base CHECK (((((((base)::text = 'N'::text) OR ((base)::text = 'H'::text)) OR ((base)::text = 'D'::text)) OR ((base)::text = 'M'::text)) OR ((base)::text = 'S'::text)))
);


--
-- TOC entry 230 (class 1259 OID 3241361)
-- Name: conceptocargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptocargo (
    id_concepto_cargo integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_cargo integer NOT NULL,
    excluir character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer,
    tiempo_sitp date,
    CONSTRAINT conceptoc_excluir CHECK ((((excluir)::text = 'S'::text) OR ((excluir)::text = 'N'::text)))
);


--
-- TOC entry 231 (class 1259 OID 3241370)
-- Name: conceptocargoanio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptocargoanio (
    id_concepto_cargo_anio integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_cargo integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    anios integer NOT NULL,
    id_sitp integer,
    tiempo_sitp date
);


--
-- TOC entry 232 (class 1259 OID 3241376)
-- Name: conceptoconstancia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoconstancia (
    id_concepto_constancia integer NOT NULL,
    id_constancia integer,
    id_concepto_tipo_personal integer,
    origen character varying(1) DEFAULT 'F'::character varying
);


--
-- TOC entry 233 (class 1259 OID 3241380)
-- Name: conceptocuenta; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptocuenta (
    id_concepto_cuenta integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_presupuesto integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 234 (class 1259 OID 3241385)
-- Name: conceptocuentacontable; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptocuentacontable (
    id_concepto_cuenta_contable integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_contable integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 235 (class 1259 OID 3241390)
-- Name: conceptodependencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptodependencia (
    id_concepto_dependencia integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_dependencia integer NOT NULL,
    excluir character varying(1) DEFAULT 'N'::character varying NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer,
    tiempo_sitp date,
    CONSTRAINT conceptodepen_excluir CHECK ((((excluir)::text = 'S'::text) OR ((excluir)::text = 'N'::text))),
    CONSTRAINT conceptodepen_ingreso CHECK ((((automatico_ingreso)::text = 'S'::text) OR ((automatico_ingreso)::text = 'N'::text)))
);


--
-- TOC entry 236 (class 1259 OID 3241400)
-- Name: conceptodiplomatico; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptodiplomatico (
    id_concepto_diplomatico integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 237 (class 1259 OID 3241404)
-- Name: conceptodocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptodocente (
    id_concepto_docente integer NOT NULL,
    id_movimiento integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    variable character varying(1) DEFAULT 'S'::character varying
);


--
-- TOC entry 238 (class 1259 OID 3241410)
-- Name: conceptoespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoespecifica (
    id_concepto_especifica integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 239 (class 1259 OID 3241414)
-- Name: conceptoevaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoevaluacion (
    id_concepto_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    eliminar_despues_aumento character varying(1) DEFAULT 'N'::character varying
);


--
-- TOC entry 240 (class 1259 OID 3241418)
-- Name: conceptofijo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptofijo (
    id_concepto_fijo integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    fecha_comienzo date,
    fecha_eliminar date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    restituir character varying(1) DEFAULT 'N'::character varying,
    monto_restituir double precision DEFAULT 0,
    unidades_restituir double precision DEFAULT 0,
    monto_anterior double precision DEFAULT 0,
    monto_proyectado double precision,
    CONSTRAINT conceptofijo_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


--
-- TOC entry 241 (class 1259 OID 3241430)
-- Name: conceptofijo_auditoria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptofijo_auditoria (
    id_concepto_fijo integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal_old integer,
    id_frecuencia_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal_old integer,
    unidades double precision DEFAULT 0 NOT NULL,
    unidades_old double precision DEFAULT 0,
    monto double precision DEFAULT 0 NOT NULL,
    monto_old double precision DEFAULT 0,
    fecha_registro date,
    fecha_registro_old date,
    fecha_comienzo date,
    fecha_comienzo_old date,
    fecha_eliminar date,
    fecha_eliminar_old date,
    documento_soporte character varying(10),
    documento_soporte_old character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    estatus_old character varying(1) DEFAULT 'A'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    id_sitp_old integer DEFAULT 0,
    tiempo_sitp date,
    tiempo_sitp_old date,
    restituir character varying(1) DEFAULT 'N'::character varying,
    restituir_old character varying(1) DEFAULT 'N'::character varying,
    monto_restituir double precision DEFAULT 0,
    monto_restituir_old double precision DEFAULT 0,
    unidades_restituir double precision DEFAULT 0,
    unidades_restituir_old double precision DEFAULT 0,
    monto_anterior double precision DEFAULT 0,
    monto_anterior_old double precision DEFAULT 0,
    monto_proyectado double precision,
    monto_proyectado_old double precision,
    fecha_movimiento timestamp without time zone DEFAULT now(),
    tipo_movimiento "char"
);


--
-- TOC entry 242 (class 1259 OID 3241450)
-- Name: conceptofijo_cambio_unidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptofijo_cambio_unidad (
    cedula integer,
    unidad double precision,
    id_trabajador1 integer
);


--
-- TOC entry 243 (class 1259 OID 3241453)
-- Name: conceptoliquidacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoliquidacion (
    id_concepto_variable integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    mes_sobretiempo integer DEFAULT 0,
    anio_sobretiempo integer DEFAULT 0,
    monto_proyectado integer DEFAULT 0,
    CONSTRAINT conceptoliquidacion_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


--
-- TOC entry 244 (class 1259 OID 3241463)
-- Name: conceptomovimiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptomovimiento (
    id_concepto_movimiento integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    anio integer NOT NULL,
    numero_movimiento integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    monto_anterior double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 245 (class 1259 OID 3241468)
-- Name: conceptoprestaciones; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoprestaciones (
    id_concepto_prestaciones integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    posicion_onapre character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT conceptoprestaciones_tipo CHECK ((((tipo)::text = 'B'::text) OR ((tipo)::text = 'D'::text)))
);


--
-- TOC entry 246 (class 1259 OID 3241475)
-- Name: conceptopresupuesto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptopresupuesto (
    id_concepto_presupuesto integer NOT NULL,
    id_concepto_tipo_personal integer DEFAULT 0 NOT NULL,
    id_cuenta_presupuesto integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 247 (class 1259 OID 3241480)
-- Name: conceptoproyectado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoproyectado (
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 248 (class 1259 OID 3241484)
-- Name: conceptoresumen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoresumen (
    id_concepto_resumen integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    cerrado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT conceptoresumen_tipo CHECK ((((tipo)::text = 'F'::text) OR ((tipo)::text = 'V'::text)))
);


--
-- TOC entry 249 (class 1259 OID 3241495)
-- Name: conceptotipopersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptotipopersonal (
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tope_minimo double precision DEFAULT 0 NOT NULL,
    tope_maximo double precision DEFAULT 0 NOT NULL,
    tope_anual double precision DEFAULT 0 NOT NULL,
    monto_escenario double precision DEFAULT 0 NOT NULL,
    formula_concepto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador_formula double precision DEFAULT 0 NOT NULL,
    otra_moneda character varying(1) DEFAULT 'N'::character varying NOT NULL,
    homologacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cod_concepto character varying(4),
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer,
    base_legal text,
    anual character varying(1) DEFAULT 'N'::character varying,
    ocurrencia double precision DEFAULT 1,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_contrato_colectivo integer,
    refleja_movimiento character varying(1) DEFAULT 'N'::character varying,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'S'::character varying,
    base_jubilacion character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT concepto_tipo_personal_automati CHECK ((((automatico_ingreso)::text = 'S'::text) OR ((automatico_ingreso)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_formula_ CHECK ((((formula_concepto)::text = 'S'::text) OR ((formula_concepto)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_homologa CHECK ((((homologacion)::text = 'S'::text) OR ((homologacion)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_otra_mon CHECK ((((otra_moneda)::text = 'S'::text) OR ((otra_moneda)::text = 'N'::text))),
    CONSTRAINT concepto_tipo_personal_tipo CHECK ((((((tipo)::text = 'F'::text) OR ((tipo)::text = 'P'::text)) OR ((tipo)::text = 'I'::text)) OR ((tipo)::text = 'D'::text))),
    CONSTRAINT ctp_anual CHECK ((((anual)::text = 'S'::text) OR ((anual)::text = 'N'::text)))
);


--
-- TOC entry 250 (class 1259 OID 3241527)
-- Name: conceptotipopersonalhist; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptotipopersonalhist (
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    automatico_ingreso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tope_minimo double precision DEFAULT 0 NOT NULL,
    tope_maximo double precision DEFAULT 0 NOT NULL,
    tope_anual double precision DEFAULT 0 NOT NULL,
    monto_escenario double precision DEFAULT 0 NOT NULL,
    formula_concepto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador_formula double precision DEFAULT 0 NOT NULL,
    otra_moneda character varying(1) DEFAULT 'N'::character varying NOT NULL,
    homologacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cod_concepto character varying(4),
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer,
    base_legal text,
    anual character varying(1) DEFAULT 'N'::character varying,
    ocurrencia double precision DEFAULT 1,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    id_contrato_colectivo integer,
    refleja_movimiento character varying(1) DEFAULT 'N'::character varying,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying,
    recalculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'S'::character varying,
    base_jubilacion character varying(1) DEFAULT 'N'::character varying
);


--
-- TOC entry 251 (class 1259 OID 3241553)
-- Name: conceptoutilidades; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptoutilidades (
    id_concepto_utilidades integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    mes_inicio integer DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0 NOT NULL,
    tope_monto double precision DEFAULT 0 NOT NULL,
    tope_unidades double precision DEFAULT 0 NOT NULL,
    mes_buscar integer DEFAULT 0,
    semana_buscar integer DEFAULT 0,
    mes_final integer DEFAULT 0 NOT NULL,
    numero_dias integer DEFAULT 0 NOT NULL,
    numero_meses double precision DEFAULT 0
);


--
-- TOC entry 252 (class 1259 OID 3241566)
-- Name: conceptovacaciones; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptovacaciones (
    id_concepto_vacaciones integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    tipo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    mes_cerrado character varying(1) DEFAULT 'S'::character varying NOT NULL,
    mes30 character varying(1) DEFAULT 'S'::character varying NOT NULL,
    numero_meses integer DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0 NOT NULL,
    tope_monto double precision DEFAULT 0 NOT NULL,
    tope_unidades double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    alicuota_vacacional character varying(1) DEFAULT 'N'::character varying,
    id_concepto_alicuota integer,
    CONSTRAINT conceptovacaciones_alicuota_vacacional CHECK ((((alicuota_vacacional)::text = 'S'::text) OR ((alicuota_vacacional)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_mes30 CHECK ((((mes30)::text = 'S'::text) OR ((mes30)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_mes_cerrado CHECK ((((mes_cerrado)::text = 'S'::text) OR ((mes_cerrado)::text = 'N'::text))),
    CONSTRAINT conceptovacaciones_tipo CHECK ((((((tipo)::text = 'B'::text) OR ((tipo)::text = 'P'::text)) OR ((tipo)::text = 'D'::text)) OR ((tipo)::text = 'Y'::text)))
);


--
-- TOC entry 253 (class 1259 OID 3241582)
-- Name: conceptovariable; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptovariable (
    id_concepto_variable integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    mes_sobretiempo integer DEFAULT 0,
    anio_sobretiempo integer DEFAULT 0,
    monto_proyectado double precision DEFAULT 0,
    CONSTRAINT conceptovariable_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'S'::text)))
);


--
-- TOC entry 254 (class 1259 OID 3241592)
-- Name: conceptovariable_auditoria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE conceptovariable_auditoria (
    id_concepto_variable integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal_old integer,
    id_frecuencia_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal_old integer,
    unidades double precision DEFAULT 0 NOT NULL,
    unidades_old double precision DEFAULT 0,
    monto double precision DEFAULT 0 NOT NULL,
    monto_old double precision DEFAULT 0,
    fecha_registro date,
    fecha_registro_old date,
    documento_soporte character varying(10),
    documento_soporte_old character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    estatus_old character varying(1) DEFAULT 'A'::character varying,
    mes_sobretiempo integer DEFAULT 0,
    mes_sobretiempo_old integer DEFAULT 0,
    anio_sobretiempo integer DEFAULT 0,
    anio_sobretiempo_old integer DEFAULT 0,
    monto_proyectado double precision DEFAULT 0,
    monto_proyectado_old double precision DEFAULT 0,
    fecha_movimiento timestamp without time zone DEFAULT now(),
    tipo_movimiento "char"
);


--
-- TOC entry 255 (class 1259 OID 3241608)
-- Name: concurso; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE concurso (
    id_concurso integer NOT NULL,
    cod_concurso character varying(15) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion text,
    estatus character varying(1) DEFAULT '1'::character varying,
    fecha_apertura date,
    inicio_convocatoria date,
    fin_convocatoria date,
    inicio_retiro date,
    fin_retiro date,
    inicio_inscripcion date,
    fin_inscripcion date,
    ini_publicacion_insc date,
    fin_publicacion_insc date,
    ini_examenes date,
    fin_examenes date,
    ini_publicacion_exam date,
    fin_publicacion_exam date,
    ini_entrevistas date,
    fin_entrevistas date,
    ini_publicacion_entr date,
    fin_publicacion_entr date,
    entrega_informe date,
    id_organismo integer NOT NULL,
    aprobado_mpd character varying(1) DEFAULT 'S'::character varying,
    id_plan_personal integer
);


--
-- TOC entry 256 (class 1259 OID 3241616)
-- Name: concursocargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE concursocargo (
    id_concurso_cargo integer NOT NULL,
    id_concurso integer NOT NULL,
    id_registro_cargos integer NOT NULL,
    id_postulado_concurso integer,
    cedula integer,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL
);


--
-- TOC entry 257 (class 1259 OID 3241620)
-- Name: constancia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE constancia (
    id_constancia integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    tipo character varying(15),
    oficina character varying(90) NOT NULL,
    firmante character varying(90) NOT NULL,
    cargo character varying(90) NOT NULL,
    nombramiento text,
    observacion text,
    pie_pagina_uno character varying(90),
    pie_pagina_dos character varying(90),
    pie_pagina_tres character varying(90),
    direccion character varying(10),
    telefono integer,
    pie_pagina_cuatro character varying(90),
    iniciales character varying(10)
);


--
-- TOC entry 258 (class 1259 OID 3241626)
-- Name: continente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE continente (
    id_continente integer NOT NULL,
    abreviatura character varying(3),
    cod_continente character varying(1) NOT NULL,
    nombre character varying(40) NOT NULL
);


--
-- TOC entry 259 (class 1259 OID 3241629)
-- Name: contrato; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE contrato (
    id_contrato integer NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    fecha_registro date,
    fecha_rescision date,
    estatus character varying(1) DEFAULT 'V'::character varying NOT NULL,
    modalidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    prorroga character varying(1) DEFAULT 'S'::character varying NOT NULL,
    institucion character varying(90),
    monto_unico double precision DEFAULT 0 NOT NULL,
    monto_mensual double precision DEFAULT 0 NOT NULL,
    objeto_contrato text,
    tareas_contrato text,
    observaciones text,
    id_tipo_contrato integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    apartado character varying(20)
);


--
-- TOC entry 260 (class 1259 OID 3241641)
-- Name: contratocolectivo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE contratocolectivo (
    id_contrato_colectivo integer NOT NULL,
    cod_contrato_colectivo character varying(10) NOT NULL,
    denominacion character varying(90) NOT NULL,
    descripcion text,
    sector character varying(90),
    fecha_vigencia date,
    fecha_vencimiento date,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 261 (class 1259 OID 3241648)
-- Name: contratosplan; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE contratosplan (
    id_contratos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_region integer NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 262 (class 1259 OID 3241653)
-- Name: credencial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE credencial (
    id_credencial integer NOT NULL,
    id_subtipo_credencial integer NOT NULL,
    numero character varying(15) NOT NULL,
    color character varying(20) NOT NULL,
    fecha_entrega date,
    fecha_retiro date,
    observaciones text,
    id_personal integer NOT NULL,
    motivo character varying(1) NOT NULL
);


--
-- TOC entry 562 (class 1259 OID 8652108)
-- Name: ctesoro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ctesoro (
    cedula integer,
    ncuenta character varying(20)
);


--
-- TOC entry 263 (class 1259 OID 3241659)
-- Name: cuadroonapre; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cuadroonapre (
    id_cuadro_onapre integer NOT NULL,
    id_organismo integer NOT NULL,
    id_proyecto integer,
    id_accion_centralizada integer,
    id_clasificacion_personal integer NOT NULL,
    anio integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying NOT NULL,
    jornada character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo_vacante character varying(1) DEFAULT 'M'::character varying NOT NULL,
    cantidad integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas double precision DEFAULT 0 NOT NULL,
    tipo character varying(20) DEFAULT 'PROYECTO'::character varying NOT NULL
);


--
-- TOC entry 264 (class 1259 OID 3241670)
-- Name: cuenta; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cuenta (
    cedula character varying(20),
    cuentano text
);


--
-- TOC entry 265 (class 1259 OID 3241676)
-- Name: cuentabanco; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cuentabanco (
    id_cuenta_banco integer NOT NULL,
    id_banco integer NOT NULL,
    cod_cuenta_banco character varying(20) NOT NULL,
    agencia character varying(80),
    id_ciudad integer NOT NULL,
    id_organismo integer NOT NULL
);


--
-- TOC entry 266 (class 1259 OID 3241679)
-- Name: cuentacontable; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cuentacontable (
    id_cuenta_contable integer NOT NULL,
    cod_contable character varying(20) NOT NULL,
    descripcion character varying(90) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    indicador integer DEFAULT 0,
    CONSTRAINT cuentacontable_tipo CHECK ((((tipo)::text = 'D'::text) OR ((tipo)::text = 'T'::text)))
);


--
-- TOC entry 267 (class 1259 OID 3241685)
-- Name: cuentapresupuesto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cuentapresupuesto (
    id_cuenta_presupuesto integer NOT NULL,
    cod_presupuesto character varying(20) NOT NULL,
    descripcion character varying(98) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    indicador integer DEFAULT 0 NOT NULL,
    CONSTRAINT cuentapresupuesto_tipo CHECK ((((tipo)::text = 'D'::text) OR ((tipo)::text = 'T'::text)))
);


--
-- TOC entry 268 (class 1259 OID 3241691)
-- Name: curso; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE curso (
    id_curso integer NOT NULL,
    cod_curso character varying(6) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_area_conocimiento integer NOT NULL,
    id_tipo_curso integer NOT NULL
);


--
-- TOC entry 269 (class 1259 OID 3241694)
-- Name: cursoentidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE cursoentidad (
    id_curso_entidad integer NOT NULL,
    costo_participante double precision DEFAULT 0 NOT NULL,
    id_curso integer NOT NULL,
    id_entidad_educativa integer NOT NULL
);


--
-- TOC entry 270 (class 1259 OID 3241698)
-- Name: declaracion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE declaracion (
    id_declaracion integer NOT NULL,
    fecha_registro date,
    descargo character varying(60),
    observaciones text,
    id_personal integer NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 271 (class 1259 OID 3241705)
-- Name: dedicaciondocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dedicaciondocente (
    id_dedicacion_docente integer NOT NULL,
    digito_dedicacion character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 272 (class 1259 OID 3241708)
-- Name: denominacionticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE denominacionticket (
    id_denominacion_ticket integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_proveedor_ticket integer NOT NULL,
    valor double precision DEFAULT 0 NOT NULL,
    tickets_por_dia integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'S'::character varying NOT NULL,
    costo double precision DEFAULT 0
);


--
-- TOC entry 273 (class 1259 OID 3241715)
-- Name: dependencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dependencia (
    id_dependencia integer NOT NULL,
    cod_dependencia character varying(12) NOT NULL,
    dependencia_staff character varying(1) DEFAULT 'N'::character varying NOT NULL,
    vigente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_fin date,
    fecha_vigencia date,
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    nivel_estructura integer DEFAULT 1 NOT NULL,
    sede_diplomatica character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_tipo_dependencia integer,
    id_administradora_uel integer NOT NULL,
    id_unidad_funcional integer,
    id_grupo_organismo integer,
    id_organismo integer NOT NULL,
    id_dependencia_anterior integer,
    nombre character varying(90) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_sede integer,
    cod_cesta character varying(10),
    id_region integer NOT NULL,
    id_estructura integer,
    CONSTRAINT dependencia_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT dependencia_dependencia_staff CHECK ((((dependencia_staff)::text = 'S'::text) OR ((dependencia_staff)::text = 'N'::text))),
    CONSTRAINT dependencia_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text))),
    CONSTRAINT dependencia_sede_diplomatica CHECK ((((sede_diplomatica)::text = 'S'::text) OR ((sede_diplomatica)::text = 'N'::text))),
    CONSTRAINT dependencia_vigente CHECK ((((vigente)::text = 'S'::text) OR ((vigente)::text = 'N'::text)))
);


--
-- TOC entry 274 (class 1259 OID 3241729)
-- Name: dependenciajudicial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dependenciajudicial (
    id_dependencia_judicial integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_operacion integer NOT NULL,
    id_materia integer NOT NULL,
    id_instancia integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 275 (class 1259 OID 3241733)
-- Name: descuentoticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE descuentoticket (
    id_descuento_ticket integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    referencia_ticket integer DEFAULT 0 NOT NULL,
    referencia_embargo integer DEFAULT 0 NOT NULL,
    referencia_ausencia integer DEFAULT 0 NOT NULL,
    descuento_ausencia integer DEFAULT 0 NOT NULL,
    descuento_reposo integer DEFAULT 0 NOT NULL,
    descuento_permiso integer DEFAULT 0 NOT NULL,
    descuento_vacaciones integer DEFAULT 0 NOT NULL,
    descuento_otros integer DEFAULT 0 NOT NULL,
    pagado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text
);


--
-- TOC entry 276 (class 1259 OID 3241750)
-- Name: detalledisquete; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE detalledisquete (
    id_detalle_disquete integer NOT NULL,
    id_disquete integer NOT NULL,
    tipo_registro character varying(1) DEFAULT 'D'::character varying NOT NULL,
    numero_campo integer DEFAULT 1 NOT NULL,
    tipo_campo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    longitud_campo integer DEFAULT 1 NOT NULL,
    campo_base_datos character varying(3) DEFAULT '0'::character varying NOT NULL,
    campo_entrada character varying(3) DEFAULT '0'::character varying,
    campo_usuario character varying(100),
    separador_decimal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alineacion_campo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    rellenar_cero character varying(1) DEFAULT 'N'::character varying NOT NULL,
    multiplicador double precision DEFAULT 1 NOT NULL,
    id_concepto integer,
    campo_totales character varying(3) DEFAULT '0'::character varying,
    separador_miles character varying DEFAULT 'N'::character varying
);


--
-- TOC entry 277 (class 1259 OID 3241768)
-- Name: detalletabulador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE detalletabulador (
    id_detalle_tabulador integer NOT NULL,
    id_tabulador integer NOT NULL,
    grado integer DEFAULT 1 NOT NULL,
    sub_grado integer DEFAULT 1 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    sueldo_hora double precision DEFAULT 0 NOT NULL,
    carga_horaria double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 278 (class 1259 OID 3241777)
-- Name: detalletabuladormed; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE detalletabuladormed (
    id_detalle_tabulador_med integer NOT NULL,
    id_tabulador integer NOT NULL,
    cod_cargo character varying(8) NOT NULL,
    sueldo_mensual double precision DEFAULT 0 NOT NULL,
    sueldo_hora double precision DEFAULT 0 NOT NULL,
    carga_horaria double precision DEFAULT 1 NOT NULL
);


--
-- TOC entry 279 (class 1259 OID 3241783)
-- Name: detalletabuladormre; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE detalletabuladormre (
    id_detalle_tabulador_mre integer NOT NULL,
    id_tabulador integer NOT NULL,
    id_ciudad integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    asignacion_mensual double precision DEFAULT 0 NOT NULL,
    fluctuacion_mensual double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 280 (class 1259 OID 3241789)
-- Name: detalletabuladoronu; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE detalletabuladoronu (
    id_detalle_tabulador_onu integer NOT NULL,
    id_tabulador integer NOT NULL,
    nivel integer DEFAULT 1 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying,
    anios_servicio integer DEFAULT 0 NOT NULL,
    asignacion_anual double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 281 (class 1259 OID 3241796)
-- Name: disquete; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE disquete (
    id_disquete integer NOT NULL,
    cod_disquete character varying(3) NOT NULL,
    descripcion character varying(90),
    tipo_disquete character varying(1) NOT NULL,
    id_banco integer,
    id_organismo integer NOT NULL,
    ingresos character varying(1) DEFAULT 'N'::character varying,
    egresos character varying(1) DEFAULT 'N'::character varying,
    id_concepto integer
);


--
-- TOC entry 282 (class 1259 OID 3241801)
-- Name: dotacioncargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dotacioncargo (
    id_dotacion_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    unidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    cantidad double precision DEFAULT 0 NOT NULL,
    CONSTRAINT subtipodotacion_unidad CHECK ((((((unidad)::text = 'M'::text) OR ((unidad)::text = 'T'::text)) OR ((unidad)::text = 'S'::text)) OR ((unidad)::text = 'A'::text)))
);


--
-- TOC entry 283 (class 1259 OID 3241807)
-- Name: dotacionentregada; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dotacionentregada (
    id_dotacion_entregada integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    talla character varying(3),
    cantidad integer DEFAULT 0 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha date NOT NULL
);


--
-- TOC entry 284 (class 1259 OID 3241813)
-- Name: dotaciontrabajador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE dotaciontrabajador (
    id_dotacion_trabajador integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_subtipo_dotacion integer NOT NULL,
    talla character varying(3),
    cantidad integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 285 (class 1259 OID 3241817)
-- Name: educacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE educacion (
    id_educacion integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    anio_inicio integer DEFAULT 0 NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_titulo integer,
    estatus character varying(1) DEFAULT 'F'::character varying NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    id_nivel_educativo integer,
    id_ciudad integer,
    organizacion_becaria character varying(100),
    id_personal integer NOT NULL,
    registro_titulo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_registro date,
    reembolso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    nombre_entidad character varying(90),
    nombre_postgrado character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    mencion character varying(25),
    CONSTRAINT educacion_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT educacion_estatus CHECK (((((estatus)::text = 'E'::text) OR ((estatus)::text = 'F'::text)) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT educacion_reembolso CHECK ((((reembolso)::text = 'S'::text) OR ((reembolso)::text = 'N'::text))),
    CONSTRAINT educacion_registro_titulo CHECK ((((registro_titulo)::text = 'S'::text) OR ((registro_titulo)::text = 'N'::text))),
    CONSTRAINT educacion_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


--
-- TOC entry 286 (class 1259 OID 3241838)
-- Name: elegible; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegible (
    id_elegible integer NOT NULL,
    anios_servicio_apn integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    cedula_conyugue integer DEFAULT 0 NOT NULL,
    id_ciudad_nacimiento integer,
    id_ciudad_residencia integer,
    diestralidad character varying(1) DEFAULT 'D'::character varying NOT NULL,
    direccion_residencia character varying(100),
    doble_nacionalidad character varying(1) DEFAULT 'N'::character varying NOT NULL,
    email character varying(60),
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    estatura double precision DEFAULT 0 NOT NULL,
    fecha_nacimiento date NOT NULL,
    fecha_nacionalizacion date,
    gaceta_nacionalizacion character varying(10),
    grado_licencia integer DEFAULT 0 NOT NULL,
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    maneja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    marca_vehiculo character varying(20),
    mismo_organismo_conyugue character varying(1) DEFAULT 'N'::character varying NOT NULL,
    modelo_vehiculo character varying(20),
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    nacionalizado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    nombre_conyugue character varying(50),
    numero_libreta_militar character varying(15),
    numero_rif character varying(15),
    numero_sso character varying(15),
    otra_normativa_nac character varying(40),
    id_pais_nacionalidad integer,
    id_parroquia integer,
    peso double precision DEFAULT 0 NOT NULL,
    placa_vehiculo character varying(10),
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    sector_trabajo_conyugue character varying(1) DEFAULT 'P'::character varying NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    telefono_celular character varying(15),
    telefono_oficina character varying(15),
    telefono_residencia character varying(15),
    tenencia_vivienda character varying(1) DEFAULT 'P'::character varying NOT NULL,
    tiene_hijos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tiene_vehiculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tipo_vivienda character varying(1) DEFAULT 'A'::character varying NOT NULL,
    zona_postal_residencia character varying(6),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_registro date,
    cargo_aspira character varying(50),
    sueldo_aspira double precision DEFAULT 0 NOT NULL,
    disponibilidad character varying(20),
    trabajando_actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    trabajo_actual character varying(80),
    cargo_actual character varying(50),
    sueldo_actual double precision DEFAULT 0 NOT NULL,
    motivo_retiro character varying(30),
    CONSTRAINT elegible_diestralidad CHECK (((((diestralidad)::text = 'D'::text) OR ((diestralidad)::text = 'Z'::text)) OR ((diestralidad)::text = 'A'::text))),
    CONSTRAINT elegible_doble_nacionalidad CHECK ((((doble_nacionalidad)::text = 'S'::text) OR ((doble_nacionalidad)::text = 'N'::text))),
    CONSTRAINT elegible_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'U'::text)) OR ((estado_civil)::text = 'O'::text))),
    CONSTRAINT elegible_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT elegible_maneja CHECK ((((maneja)::text = 'S'::text) OR ((maneja)::text = 'N'::text))),
    CONSTRAINT elegible_mismo_organismo_conyug CHECK ((((mismo_organismo_conyugue)::text = 'S'::text) OR ((mismo_organismo_conyugue)::text = 'N'::text))),
    CONSTRAINT elegible_nacionalidad CHECK ((((nacionalidad)::text = 'V'::text) OR ((nacionalidad)::text = 'E'::text))),
    CONSTRAINT elegible_nacionalizado CHECK ((((nacionalizado)::text = 'S'::text) OR ((nacionalizado)::text = 'N'::text))),
    CONSTRAINT elegible_nivel_educativo CHECK ((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegible_sector_trabajo_conyugu CHECK (((((sector_trabajo_conyugue)::text = 'P'::text) OR ((sector_trabajo_conyugue)::text = 'U'::text)) OR ((sector_trabajo_conyugue)::text = 'N'::text))),
    CONSTRAINT elegible_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text))),
    CONSTRAINT elegible_tenencia_vivienda CHECK ((((((tenencia_vivienda)::text = 'P'::text) OR ((tenencia_vivienda)::text = 'H'::text)) OR ((tenencia_vivienda)::text = 'A'::text)) OR ((tenencia_vivienda)::text = 'F'::text))),
    CONSTRAINT elegible_tiene_hijos CHECK ((((tiene_hijos)::text = 'S'::text) OR ((tiene_hijos)::text = 'N'::text))),
    CONSTRAINT elegible_tiene_vehiculo CHECK ((((tiene_vehiculo)::text = 'S'::text) OR ((tiene_vehiculo)::text = 'N'::text))),
    CONSTRAINT elegible_tipo_vivienda CHECK ((((((tipo_vivienda)::text = 'C'::text) OR ((tipo_vivienda)::text = 'A'::text)) OR ((tipo_vivienda)::text = 'H'::text)) OR ((tipo_vivienda)::text = 'B'::text)))
);


--
-- TOC entry 287 (class 1259 OID 3241883)
-- Name: elegibleactividaddocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleactividaddocente (
    id_elegible_actividad_docente integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    anio_inicio integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_elegible integer NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    relacion_laboral character varying(30),
    nombre_entidad character varying(90),
    asignatura character varying(60),
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleactividaddocente_estatus CHECK ((((estatus)::text = 'S'::text) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT elegibleactividaddocente_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegibleactividaddocente_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


--
-- TOC entry 288 (class 1259 OID 3241897)
-- Name: elegibleafiliacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleafiliacion (
    id_elegible_afiliacion integer NOT NULL,
    fecha date,
    id_gremio integer NOT NULL,
    numero_afiliacion character varying(10),
    id_elegible integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 289 (class 1259 OID 3241901)
-- Name: elegiblecertificacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegiblecertificacion (
    id_elegible_certificacion integer NOT NULL,
    id_area_conocimiento integer,
    fecha_certificacion date,
    vigencia character varying(20),
    id_elegible integer NOT NULL,
    nombre_certificacion character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 290 (class 1259 OID 3241905)
-- Name: elegibleeducacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleeducacion (
    id_elegible_educacion integer NOT NULL,
    anio_fin integer DEFAULT 0 NOT NULL,
    anio_inicio integer DEFAULT 0 NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_carrera integer,
    id_titulo integer,
    estatus character varying(1) DEFAULT 'F'::character varying NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    id_nivel_educativo integer,
    id_ciudad integer,
    organizacion_becaria character varying(100),
    id_elegible integer NOT NULL,
    registro_titulo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_registro date,
    reembolso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text,
    nombre_entidad character varying(90),
    nombre_postgrado character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    mencion character varying(25),
    CONSTRAINT elegibleeducacion_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_estatus CHECK (((((estatus)::text = 'E'::text) OR ((estatus)::text = 'F'::text)) OR ((estatus)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_reembolso CHECK ((((reembolso)::text = 'S'::text) OR ((reembolso)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_registro_titulo CHECK ((((registro_titulo)::text = 'S'::text) OR ((registro_titulo)::text = 'N'::text))),
    CONSTRAINT elegibleeducacion_sector CHECK (((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)) OR ((sector)::text = 'E'::text)))
);


--
-- TOC entry 291 (class 1259 OID 3241926)
-- Name: elegibleestudio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleestudio (
    id_elegible_estudio integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    certifico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    duracion integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    origen_curso character varying(1) DEFAULT 'I'::character varying NOT NULL,
    participacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    id_elegible integer NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    financiamiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_pais integer,
    id_tipo_curso integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    observaciones character varying(100),
    nombre_curso character varying(90),
    nombre_entidad character varying(90) NOT NULL,
    anio integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleestudio_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_certifico CHECK ((((certifico)::text = 'S'::text) OR ((certifico)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_financiamiento CHECK ((((((financiamiento)::text = 'O'::text) OR ((financiamiento)::text = 'E'::text)) OR ((financiamiento)::text = 'P'::text)) OR ((financiamiento)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_origen_curso CHECK ((((origen_curso)::text = 'I'::text) OR ((origen_curso)::text = 'O'::text))),
    CONSTRAINT elegibleestudio_participacion CHECK (((((((participacion)::text = 'P'::text) OR ((participacion)::text = 'I'::text)) OR ((participacion)::text = 'O'::text)) OR ((participacion)::text = 'C'::text)) OR ((participacion)::text = 'N'::text))),
    CONSTRAINT elegibleestudio_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


--
-- TOC entry 292 (class 1259 OID 3241946)
-- Name: elegibleexperiencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleexperiencia (
    id_elegible_experiencia integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_elegible integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 293 (class 1259 OID 3241954)
-- Name: elegiblefamiliar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegiblefamiliar (
    id_elegible_familiar integer NOT NULL,
    alergias character varying(100),
    alergico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cedula_familiar integer DEFAULT 0 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    goza_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_prima_por_hijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_seguro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_utiles character varying(1) DEFAULT 'N'::character varying NOT NULL,
    grado character varying(2),
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    mismo_organismo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nino_excepcional character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    parentesco character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    talla_franela character varying(2),
    talla_gorra character varying(2),
    talla_pantalon character varying(2),
    id_elegible integer NOT NULL,
    primer_nombre character varying(30),
    segundo_nombre character varying(30),
    primer_apellido character varying(30),
    segundo_apellido character varying(30),
    promedio_nota character varying(2),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegiblefamiliar_alergico CHECK ((((alergico)::text = 'S'::text) OR ((alergico)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'O'::text)) OR ((estado_civil)::text = 'U'::text))),
    CONSTRAINT elegiblefamiliar_goza_beca CHECK ((((goza_beca)::text = 'S'::text) OR ((goza_beca)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_prima_por_hijo CHECK ((((goza_prima_por_hijo)::text = 'S'::text) OR ((goza_prima_por_hijo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_seguro CHECK ((((goza_seguro)::text = 'S'::text) OR ((goza_seguro)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_goza_utiles CHECK ((((goza_utiles)::text = 'S'::text) OR ((goza_utiles)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT elegiblefamiliar_mismo_organismo CHECK ((((mismo_organismo)::text = 'S'::text) OR ((mismo_organismo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_nino_excepcional CHECK ((((nino_excepcional)::text = 'S'::text) OR ((nino_excepcional)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT elegiblefamiliar_parentesco CHECK (((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text))),
    CONSTRAINT elegiblefamiliar_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


--
-- TOC entry 294 (class 1259 OID 3241983)
-- Name: elegiblehabilidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegiblehabilidad (
    id_elegible_habilidad integer NOT NULL,
    id_elegible integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegiblehabilidad_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


--
-- TOC entry 295 (class 1259 OID 3241989)
-- Name: elegibleidioma; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleidioma (
    id_elegible_idioma integer NOT NULL,
    escribe character varying(1) DEFAULT 'N'::character varying NOT NULL,
    habla character varying(1) DEFAULT 'N'::character varying NOT NULL,
    lee character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_elegible integer NOT NULL,
    id_tipo_idioma integer NOT NULL,
    examen_suficiencia character varying(1) DEFAULT 'N'::character varying,
    entidad_suficiencia character varying(100),
    fecha_suficiencia date,
    examen_academico character varying(1) DEFAULT 'N'::character varying,
    entidad_academica character varying(100),
    fecha_academica date,
    nombre_entidad character varying(100),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleidioma_escribe CHECK ((((((escribe)::text = 'N'::text) OR ((escribe)::text = 'B'::text)) OR ((escribe)::text = 'I'::text)) OR ((escribe)::text = 'A'::text))),
    CONSTRAINT elegibleidioma_examenacademico CHECK ((((examen_academico)::text = 'S'::text) OR ((examen_academico)::text = 'N'::text))),
    CONSTRAINT elegibleidioma_examensuficiencia CHECK ((((examen_suficiencia)::text = 'S'::text) OR ((examen_suficiencia)::text = 'N'::text))),
    CONSTRAINT elegibleidioma_habla CHECK ((((((habla)::text = 'N'::text) OR ((habla)::text = 'B'::text)) OR ((habla)::text = 'I'::text)) OR ((habla)::text = 'A'::text))),
    CONSTRAINT elegibleidioma_lee CHECK ((((((lee)::text = 'N'::text) OR ((lee)::text = 'B'::text)) OR ((lee)::text = 'I'::text)) OR ((lee)::text = 'A'::text)))
);


--
-- TOC entry 296 (class 1259 OID 3242003)
-- Name: elegibleorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleorganismo (
    id_elegible_organismo integer NOT NULL,
    id_elegible integer NOT NULL,
    id_organismo integer NOT NULL
);


--
-- TOC entry 297 (class 1259 OID 3242006)
-- Name: elegibleotraactividad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleotraactividad (
    id_elegible_otra_actividad integer NOT NULL,
    observaciones character varying(100),
    id_tipo_otra_actividad integer NOT NULL,
    id_elegible integer NOT NULL
);


--
-- TOC entry 298 (class 1259 OID 3242009)
-- Name: elegibleprofesion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegibleprofesion (
    id_elegible_profesion integer NOT NULL,
    id_profesion integer NOT NULL,
    id_elegible integer NOT NULL,
    actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT elegibleprofesion_actualmente CHECK ((((actualmente)::text = 'S'::text) OR ((actualmente)::text = 'N'::text)))
);


--
-- TOC entry 299 (class 1259 OID 3242015)
-- Name: elegiblepublicacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE elegiblepublicacion (
    id_elegible_publicacion integer DEFAULT 0 NOT NULL,
    anio_publicacion integer NOT NULL,
    editorial character varying(60),
    propiedad_intelectual character varying(25),
    titulo text,
    id_elegible integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 300 (class 1259 OID 3242023)
-- Name: embargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE embargo (
    id_embargo integer NOT NULL,
    oficio character varying(20),
    expediente character varying(20),
    fecha_vigencia date,
    numero_menores integer DEFAULT 0 NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    id_personal integer NOT NULL
);


--
-- TOC entry 301 (class 1259 OID 3242028)
-- Name: embargoconcepto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE embargoconcepto (
    id_embargo_concepto integer NOT NULL,
    id_embargo integer NOT NULL,
    id_concepto integer NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    banco character varying(30),
    cedula_beneficiario integer,
    cuenta character varying(30),
    nombre character varying(30),
    id_personal integer NOT NULL,
    rif_beneficiario character varying(12)
);


--
-- TOC entry 302 (class 1259 OID 3242034)
-- Name: encabezadorendicionmensual; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE encabezadorendicionmensual (
    id_encabezado_rendicion_mensual integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    id_unidad_administradora integer NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    cerrado character varying(1) NOT NULL,
    usuario character varying(20) NOT NULL,
    fecha_cierre date,
    numero_expediente integer DEFAULT 0 NOT NULL,
    titulo character varying(50),
    aportes character varying(1) DEFAULT 'N'::character varying,
    id_aporte integer DEFAULT 0
);


--
-- TOC entry 303 (class 1259 OID 3242043)
-- Name: encabezadoresumenmensual; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE encabezadoresumenmensual (
    id_encabezado_resumen_mensual integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    id_unidad_administradora integer NOT NULL,
    numero_nomina integer DEFAULT 0 NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    cerrado character varying(1) NOT NULL,
    usuario character varying(20) NOT NULL,
    fecha_cierre date,
    numero_expediente integer DEFAULT 0 NOT NULL,
    titulo character varying(50),
    aportes character varying(1) DEFAULT 'N'::character varying,
    id_aporte integer DEFAULT 0
);


--
-- TOC entry 304 (class 1259 OID 3242052)
-- Name: encargaduria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE encargaduria (
    id_encargaduria integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    cargo character varying(60) NOT NULL,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_organismo integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 305 (class 1259 OID 3242061)
-- Name: entidadeducativa; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE entidadeducativa (
    id_entidad_educativa integer NOT NULL,
    cod_entidad_educativa character varying(6) NOT NULL,
    cod_ince character varying(10),
    direccion character varying(200),
    nombre character varying(60) NOT NULL,
    numero_rif character varying(10),
    persona_contacto character varying(50),
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    telefono1 character varying(15),
    telefono2 character varying(15),
    numero_med character varying(15),
    id_tipo_entidad integer NOT NULL,
    id_estado integer,
    CONSTRAINT entidadeducativa_sector CHECK ((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text)))
);


--
-- TOC entry 306 (class 1259 OID 3242066)
-- Name: escalacuadroonapre; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE escalacuadroonapre (
    id_escalacuadroonapre integer NOT NULL,
    cod_escala character varying(10) NOT NULL,
    desde double precision DEFAULT 0 NOT NULL,
    hasta double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 307 (class 1259 OID 3242071)
-- Name: establecimientosalud; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE establecimientosalud (
    id_establecimiento_salud integer NOT NULL,
    id_ciudad integer,
    cod_establecimiento_salud character varying(6) NOT NULL,
    direccion character varying(100),
    nombre character varying(60) NOT NULL,
    sector character varying(1) DEFAULT 'P'::character varying NOT NULL,
    sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    telefono character varying(15),
    CONSTRAINT establecimientosalud_sector CHECK ((((sector)::text = 'P'::text) OR ((sector)::text = 'U'::text))),
    CONSTRAINT establecimientosalud_sso CHECK ((((sso)::text = 'S'::text) OR ((sso)::text = 'N'::text)))
);


--
-- TOC entry 308 (class 1259 OID 3242078)
-- Name: estado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE estado (
    id_estado integer NOT NULL,
    abreviatura character varying(3),
    cod_estado character varying(2) NOT NULL,
    nombre character varying(40) NOT NULL,
    id_pais integer NOT NULL
);


--
-- TOC entry 309 (class 1259 OID 3242081)
-- Name: estructura; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE estructura (
    id_estructura integer NOT NULL,
    nombre character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    anio integer DEFAULT 0,
    fecha_vigencia date,
    vigente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT estructura_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


--
-- TOC entry 310 (class 1259 OID 3242088)
-- Name: estudio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE estudio (
    id_estudio integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    certifico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    duracion integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    origen_curso character varying(1) DEFAULT 'I'::character varying NOT NULL,
    participacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    id_personal integer NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    becado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    financiamiento character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_pais integer,
    id_tipo_curso integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    observaciones character varying(100),
    nombre_curso character varying(90),
    nombre_entidad character varying(90),
    anio integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    escala character varying(3),
    calificacion character varying(3),
    CONSTRAINT estudio_becado CHECK ((((becado)::text = 'S'::text) OR ((becado)::text = 'N'::text))),
    CONSTRAINT estudio_certifico CHECK ((((certifico)::text = 'S'::text) OR ((certifico)::text = 'N'::text))),
    CONSTRAINT estudio_financiamiento CHECK ((((((financiamiento)::text = 'O'::text) OR ((financiamiento)::text = 'E'::text)) OR ((financiamiento)::text = 'P'::text)) OR ((financiamiento)::text = 'N'::text))),
    CONSTRAINT estudio_origen_curso CHECK ((((origen_curso)::text = 'I'::text) OR ((origen_curso)::text = 'O'::text))),
    CONSTRAINT estudio_participacion CHECK (((((((participacion)::text = 'P'::text) OR ((participacion)::text = 'I'::text)) OR ((participacion)::text = 'O'::text)) OR ((participacion)::text = 'C'::text)) OR ((participacion)::text = 'N'::text))),
    CONSTRAINT estudio_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


--
-- TOC entry 311 (class 1259 OID 3242108)
-- Name: evaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE evaluacion (
    id_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50),
    cedula_jefe integer DEFAULT 0,
    nombre_jefe character varying(50),
    porcentaje_aumento double precision DEFAULT 0 NOT NULL,
    numero_pasos integer DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    observaciones text,
    id_accion_evaluacion integer,
    id_resultado_evaluacion integer,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_cargo integer,
    id_dependencia integer,
    nombre_cargo character varying(60),
    nombre_dependencia character varying(90),
    resultado_competencias double precision DEFAULT 0,
    resultado_objetivos double precision DEFAULT 0,
    manejo_bienes double precision DEFAULT 0,
    habito_seguridad double precision DEFAULT 0,
    calidad_trabajo double precision DEFAULT 0,
    cumplimiento_normas double precision DEFAULT 0,
    atencion_publico double precision DEFAULT 0,
    interes_trabajo double precision DEFAULT 0,
    cooperacion double precision DEFAULT 0,
    cantidad_trabajo double precision DEFAULT 0,
    toma_decisiones double precision DEFAULT 0,
    comunicacion double precision DEFAULT 0,
    capacidad_mando double precision DEFAULT 0,
    coordinacion double precision DEFAULT 0,
    nivel character varying(1)
);


--
-- TOC entry 312 (class 1259 OID 3242136)
-- Name: excepcionbeneficiario; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE excepcionbeneficiario (
    id_excepcion_beneficiario integer NOT NULL,
    id_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_familiar integer NOT NULL
);


--
-- TOC entry 313 (class 1259 OID 3242139)
-- Name: excepcionticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE excepcionticket (
    id_excepcion_ticket integer NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    observaciones character varying(80) NOT NULL,
    id_trabajador integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 314 (class 1259 OID 3242144)
-- Name: excepciontitular; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE excepciontitular (
    id_excepcion_titular integer NOT NULL,
    id_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL
);


--
-- TOC entry 315 (class 1259 OID 3242147)
-- Name: experiencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE experiencia (
    id_experiencia integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 316 (class 1259 OID 3242155)
-- Name: experienciacargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE experienciacargo (
    id_experiencia_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_cargo_requerido integer NOT NULL,
    anios_experiencia integer DEFAULT 0 NOT NULL,
    meses_experiencia integer DEFAULT 0 NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 317 (class 1259 OID 3242162)
-- Name: experiencianoest; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE experiencianoest (
    id_experiencia_no_est integer NOT NULL,
    nombre_institucion character varying(90),
    fecha_ingreso date NOT NULL,
    fecha_egreso date,
    cargo_ingreso character varying(50),
    cargo_egreso character varying(50),
    jefe character varying(50),
    telefono character varying(15),
    causa_retiro character varying(20),
    ultimo_sueldo double precision DEFAULT 0 NOT NULL,
    observaciones character varying(300),
    id_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 318 (class 1259 OID 3242170)
-- Name: familiar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE familiar (
    id_familiar integer NOT NULL,
    alergias character varying(100),
    alergico character varying(1) DEFAULT 'N'::character varying NOT NULL,
    cedula_familiar integer DEFAULT 0 NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    goza_beca character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_prima_por_hijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_seguro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    goza_utiles character varying(1) DEFAULT 'N'::character varying NOT NULL,
    grado character varying(2),
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    mismo_organismo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nino_excepcional character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'B'::character varying NOT NULL,
    parentesco character varying(1) DEFAULT 'C'::character varying NOT NULL,
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    talla_franela character varying(2),
    talla_gorra character varying(2),
    talla_pantalon character varying(2),
    id_personal integer NOT NULL,
    primer_nombre character varying(30),
    segundo_nombre character varying(30),
    primer_apellido character varying(30),
    segundo_apellido character varying(30),
    promedio_nota character varying(2),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT familiar_alergico CHECK ((((alergico)::text = 'S'::text) OR ((alergico)::text = 'N'::text))),
    CONSTRAINT familiar_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'O'::text)) OR ((estado_civil)::text = 'U'::text))),
    CONSTRAINT familiar_goza_beca CHECK ((((goza_beca)::text = 'S'::text) OR ((goza_beca)::text = 'N'::text))),
    CONSTRAINT familiar_goza_prima_por_hijo CHECK ((((goza_prima_por_hijo)::text = 'S'::text) OR ((goza_prima_por_hijo)::text = 'N'::text))),
    CONSTRAINT familiar_goza_seguro CHECK ((((goza_seguro)::text = 'S'::text) OR ((goza_seguro)::text = 'N'::text))),
    CONSTRAINT familiar_goza_utiles CHECK ((((goza_utiles)::text = 'S'::text) OR ((goza_utiles)::text = 'N'::text))),
    CONSTRAINT familiar_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT familiar_mismo_organismo CHECK ((((mismo_organismo)::text = 'S'::text) OR ((mismo_organismo)::text = 'N'::text))),
    CONSTRAINT familiar_nino_excepcional CHECK ((((nino_excepcional)::text = 'S'::text) OR ((nino_excepcional)::text = 'N'::text))),
    CONSTRAINT familiar_nivel_educativo CHECK ((((((((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'I'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'H'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'E'::text)) OR ((nivel_educativo)::text = 'M'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'R'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'L'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT familiar_parentesco CHECK ((((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text)) OR ((parentesco)::text = 'U'::text))),
    CONSTRAINT familiar_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


--
-- TOC entry 319 (class 1259 OID 3242199)
-- Name: fideicomiso; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE fideicomiso (
    id_trabajador integer,
    id_tipo_personal integer,
    anio integer,
    mes integer,
    monto_fideicomiso double precision,
    fecha date,
    id_banco integer,
    id_fideicomiso integer NOT NULL,
    anio_abono integer DEFAULT 0,
    mes_abono integer DEFAULT 0
);


--
-- TOC entry 320 (class 1259 OID 3242204)
-- Name: firmasreportes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE firmasreportes (
    id_firmas_reportes integer NOT NULL,
    nombre character varying(80),
    cargo character varying(90),
    nombramiento text,
    id_organismo integer
);


--
-- TOC entry 321 (class 1259 OID 3242210)
-- Name: frecuenciapago; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE frecuenciapago (
    id_frecuencia_pago integer NOT NULL,
    cod_frecuencia_pago integer NOT NULL,
    nombre character varying(60) NOT NULL,
    id_organismo integer NOT NULL,
    reservado character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT frecuenciapago_reservado CHECK ((((reservado)::text = 'S'::text) OR ((reservado)::text = 'N'::text)))
);


--
-- TOC entry 322 (class 1259 OID 3242215)
-- Name: frecuenciatipopersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE frecuenciatipopersonal (
    id_frecuencia_tipo_personal integer NOT NULL,
    id_frecuencia_pago integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    cod_tipo_personal character varying(2),
    cod_frecuencia_pago integer
);


--
-- TOC entry 323 (class 1259 OID 3242218)
-- Name: fuentefinanciamiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE fuentefinanciamiento (
    id_fuente_financiamiento integer NOT NULL,
    cod_fuente_financiamiento character varying(2) NOT NULL,
    nombre character varying(50) NOT NULL
);


--
-- TOC entry 324 (class 1259 OID 3242221)
-- Name: gradodocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gradodocente (
    id_grado_docente integer NOT NULL,
    digito_grado character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 325 (class 1259 OID 3242224)
-- Name: gradoniveldocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gradoniveldocente (
    id_grado_nivel_docente integer NOT NULL,
    id_grado_docente integer NOT NULL,
    id_nivel_docente integer NOT NULL
);


--
-- TOC entry 326 (class 1259 OID 3242227)
-- Name: gremio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gremio (
    id_gremio integer NOT NULL,
    cod_gremio character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL
);


--
-- TOC entry 327 (class 1259 OID 3242230)
-- Name: gruponomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE gruponomina (
    id_grupo_nomina integer NOT NULL,
    id_organismo integer NOT NULL,
    anticipo_quincenal double precision DEFAULT 0,
    cod_grupo_nomina integer NOT NULL,
    nombre character varying(60) NOT NULL,
    periodicidad character varying(1) DEFAULT 'S'::character varying,
    pagos_nomina_egresados character varying(1) DEFAULT 'N'::character varying,
    CONSTRAINT gruponomina_periodicidad CHECK (((((periodicidad)::text = 'Q'::text) OR ((periodicidad)::text = 'S'::text)) OR ((periodicidad)::text = 'M'::text)))
);


--
-- TOC entry 328 (class 1259 OID 3242237)
-- Name: grupoocupacional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE grupoocupacional (
    id_grupo_ocupacional integer NOT NULL,
    id_ramo_ocupacional integer NOT NULL,
    cod_grupo_ocupacional character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 329 (class 1259 OID 3242241)
-- Name: grupoorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE grupoorganismo (
    id_grupo_organismo integer NOT NULL,
    cod_grupo_organismo character varying(4) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_organismo integer NOT NULL,
    nombre_corto character varying(15)
);


--
-- TOC entry 330 (class 1259 OID 3242244)
-- Name: grupoprofesion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE grupoprofesion (
    id_grupo_profesion integer NOT NULL,
    cod_grupo_profesion character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion character varying(400) NOT NULL
);


--
-- TOC entry 331 (class 1259 OID 3242247)
-- Name: grupoticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE grupoticket (
    id_grupo_ticket integer NOT NULL,
    id_organismo integer NOT NULL,
    cod_grupo_ticket integer NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 332 (class 1259 OID 3242250)
-- Name: guarderia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE guarderia (
    id_guarderia integer NOT NULL,
    cod_guarderia character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL,
    direccion text,
    id_ciudad integer,
    telefono1 character varying(15),
    telefono2 character varying(15),
    persona_contacto character varying(50),
    numero_rif character varying(15),
    permiso_inam character varying(10),
    beneficiario_cheque character varying(40),
    seguro_medico character varying(1) DEFAULT 'S'::character varying NOT NULL,
    monto_inscripcion double precision DEFAULT 0 NOT NULL,
    monto_mensualidad double precision DEFAULT 0 NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    CONSTRAINT guarderia_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text))),
    CONSTRAINT guarderia_seguro_medico CHECK ((((seguro_medico)::text = 'S'::text) OR ((seguro_medico)::text = 'N'::text)))
);


--
-- TOC entry 333 (class 1259 OID 3242262)
-- Name: guarderiafamiliar; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE guarderiafamiliar (
    id_guarderia_familiar integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_guarderia integer NOT NULL,
    fecha_registro date NOT NULL,
    monto_mensualidad double precision DEFAULT 0 NOT NULL,
    monto_inscripcion double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 334 (class 1259 OID 3242267)
-- Name: habilidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE habilidad (
    id_habilidad integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT habilidad_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


--
-- TOC entry 335 (class 1259 OID 3242273)
-- Name: habilidadcargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE habilidadcargo (
    id_habilidad_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_tipo_habilidad integer NOT NULL,
    nivel character varying(1) DEFAULT 'A'::character varying NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT habilidadcargo_nivel CHECK (((((nivel)::text = 'A'::text) OR ((nivel)::text = 'M'::text)) OR ((nivel)::text = 'B'::text)))
);


--
-- TOC entry 336 (class 1259 OID 3242280)
-- Name: historialapn; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historialapn (
    id_historial_apn integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(4),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(12),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_region character varying(2),
    nombre_region character varying(60),
    origen_movimiento character varying(1),
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    cod_concurso character varying(15),
    CONSTRAINT historialan_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text))),
    CONSTRAINT historialapn_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT historialapn_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


--
-- TOC entry 337 (class 1259 OID 3242303)
-- Name: historialorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historialorganismo (
    id_historial_organismo integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(4),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(12),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_region character varying(2),
    nombre_region character varying(60),
    origen_movimiento character varying(1),
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    cod_concurso character varying(15),
    CONSTRAINT historialorganismo_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT historialorganismo_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT historialorganismo_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


--
-- TOC entry 338 (class 1259 OID 3242326)
-- Name: historialremun; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historialremun (
    id_historial_remun integer NOT NULL,
    fecha_movimiento date NOT NULL,
    codrac integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    codigo_dependencia character varying(12),
    id_clasificacion_personal integer,
    id_mov_remuneracion integer,
    codigo_manual integer,
    codigo_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    numero_movimiento integer DEFAULT 0 NOT NULL,
    id_personal integer NOT NULL,
    nombre_dependencia character varying(90),
    nombre_institucion character varying(90),
    id_organismo integer NOT NULL,
    id_cargo integer,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT historialremun_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


--
-- TOC entry 339 (class 1259 OID 3242340)
-- Name: historicobaseislr; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicobaseislr (
    id_historico_base_islr integer NOT NULL,
    id_grupo_nomina integer,
    id_tipo_personal integer,
    numero_nomina integer,
    id_nomina_especial integer,
    anio integer,
    mes integer,
    semana_quincena integer,
    id_trabajador integer,
    porcentaje double precision,
    asignaciones double precision,
    deducciones double precision
);


--
-- TOC entry 340 (class 1259 OID 3242343)
-- Name: historicobaseislr_id_historico_base_islr_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE historicobaseislr_id_historico_base_islr_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 8028 (class 0 OID 0)
-- Dependencies: 340
-- Name: historicobaseislr_id_historico_base_islr_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE historicobaseislr_id_historico_base_islr_seq OWNED BY historicobaseislr.id_historico_base_islr;


--
-- TOC entry 341 (class 1259 OID 3242345)
-- Name: historicocargos; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicocargos (
    id_historico_cargos integer NOT NULL,
    id_registro integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    codigo_nomina integer NOT NULL,
    situacion character varying(1) DEFAULT 'O'::character varying NOT NULL,
    movimiento character varying(1) DEFAULT '4'::character varying NOT NULL,
    fecha_movimiento date,
    horas double precision DEFAULT 8 NOT NULL,
    cedula integer,
    primer_apellido character varying(20),
    segundo_apellido character varying(20),
    primer_nombre character varying(20),
    segundo_nombre character varying(20)
);


--
-- TOC entry 342 (class 1259 OID 3242351)
-- Name: historicodevengadointegral; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicodevengadointegral (
    id_historico_devengado_integral integer NOT NULL,
    id_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 343 (class 1259 OID 3242357)
-- Name: historiconomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historiconomina (
    id_historico_nomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    id_dependencia integer NOT NULL,
    id_cargo integer NOT NULL,
    numero_registro integer DEFAULT 1 NOT NULL,
    codigo_nomina integer DEFAULT 1 NOT NULL,
    forma_pago character varying(1) DEFAULT '1'::character varying,
    id_banco integer,
    tipo_cta_nomina character varying(1),
    cuenta_nomina character varying(20),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    situacion character varying(2) DEFAULT '1'::character varying NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_lugar_pago integer,
    id_unidad_ejecutora integer,
    id_unidad_administradora integer,
    cod_dependencia character varying(12),
    cod_cargo character varying(8),
    cod_unidad_ejecutora character varying(6),
    cod_unidad_administ character varying(6),
    id_sede integer,
    id_region integer,
    cod_sede character varying(6),
    cod_region character varying(2),
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    lunes_retroactivo integer DEFAULT 0 NOT NULL,
    lunes_primera integer DEFAULT 0 NOT NULL,
    lunes_segunda integer DEFAULT 0 NOT NULL,
    hay_retroactivo character varying(1),
    codigo_patronal character varying(10),
    categoria_presupuesto character varying(15),
    CONSTRAINT histnom_estatus CHECK (((((estatus)::text = 'A'::text) OR ((estatus)::text = 'E'::text)) OR ((estatus)::text = 'S'::text))),
    CONSTRAINT histnom_forma_pago CHECK (((((forma_pago)::text = '1'::text) OR ((forma_pago)::text = '2'::text)) OR ((forma_pago)::text = '3'::text))),
    CONSTRAINT histnom_situacion CHECK (((((((((((((((situacion)::text = '1'::text) OR ((situacion)::text = '2'::text)) OR ((situacion)::text = '3'::text)) OR ((situacion)::text = '4'::text)) OR ((situacion)::text = '5'::text)) OR ((situacion)::text = '6'::text)) OR ((situacion)::text = '7'::text)) OR ((situacion)::text = '8'::text)) OR ((situacion)::text = '9'::text)) OR ((situacion)::text = '10'::text)) OR ((situacion)::text = '11'::text)) OR ((situacion)::text = '12'::text)) OR ((situacion)::text = '13'::text))),
    CONSTRAINT histnom_tipo_cta_nomina CHECK ((((((tipo_cta_nomina)::text = 'A'::text) OR ((tipo_cta_nomina)::text = 'C'::text)) OR ((tipo_cta_nomina)::text = 'O'::text)) OR ((tipo_cta_nomina)::text = 'N'::text)))
);


--
-- TOC entry 344 (class 1259 OID 3242378)
-- Name: historicoquincena; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicoquincena (
    id_historico_quincena integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_historico_nomina integer,
    id_concepto integer NOT NULL,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    CONSTRAINT historicoquincena_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


--
-- TOC entry 345 (class 1259 OID 3242393)
-- Name: historicosemana; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicosemana (
    id_historico_semana integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha date,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_historico_nomina integer,
    id_concepto integer,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    CONSTRAINT historicosemana_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


--
-- TOC entry 346 (class 1259 OID 3242408)
-- Name: historicoticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE historicoticket (
    id_historico_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    cantidad_ticket integer DEFAULT 0 NOT NULL,
    denominacion_ticket double precision DEFAULT 0 NOT NULL,
    monto_cobrar double precision DEFAULT 0 NOT NULL,
    total_descuentos_ticket integer DEFAULT 0 NOT NULL,
    neto_cantidad_ticket integer DEFAULT 0 NOT NULL,
    neto_monto_cobrar double precision DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(10),
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer,
    id_proveedor_ticket integer,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    id_dependencia integer DEFAULT 0 NOT NULL,
    cod_dependencia character varying(12),
    nombre_dependencia character varying(90)
);


--
-- TOC entry 347 (class 1259 OID 3242425)
-- Name: identity; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE identity (
    name character varying(150) NOT NULL,
    last bigint NOT NULL
);


--
-- TOC entry 348 (class 1259 OID 3242428)
-- Name: idioma; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE idioma (
    id_idioma integer NOT NULL,
    escribe character varying(1) DEFAULT 'N'::character varying NOT NULL,
    habla character varying(1) DEFAULT 'N'::character varying NOT NULL,
    lee character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_idioma integer NOT NULL,
    examen_suficiencia character varying(1) DEFAULT 'N'::character varying,
    entidad_suficiencia character varying(100),
    fecha_suficiencia date,
    examen_academico character varying(1) DEFAULT 'N'::character varying,
    entidad_academica character varying(100),
    fecha_academica date,
    nombre_entidad character varying(100),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT idioma_escribe CHECK ((((((escribe)::text = 'N'::text) OR ((escribe)::text = 'B'::text)) OR ((escribe)::text = 'I'::text)) OR ((escribe)::text = 'A'::text))),
    CONSTRAINT idioma_examenacademico CHECK ((((examen_academico)::text = 'S'::text) OR ((examen_academico)::text = 'N'::text))),
    CONSTRAINT idioma_examensuficiencia CHECK ((((examen_suficiencia)::text = 'S'::text) OR ((examen_suficiencia)::text = 'N'::text))),
    CONSTRAINT idioma_habla CHECK ((((((habla)::text = 'N'::text) OR ((habla)::text = 'B'::text)) OR ((habla)::text = 'I'::text)) OR ((habla)::text = 'A'::text))),
    CONSTRAINT idioma_lee CHECK ((((((lee)::text = 'N'::text) OR ((lee)::text = 'B'::text)) OR ((lee)::text = 'I'::text)) OR ((lee)::text = 'A'::text)))
);


--
-- TOC entry 349 (class 1259 OID 3242442)
-- Name: informacionmpd; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE informacionmpd (
    codigo_nomina character varying(7),
    cedula integer DEFAULT 0,
    nombre_apellido character varying(80),
    sueldo1 double precision DEFAULT 0,
    compensacion1 double precision DEFAULT 0,
    sueldo2 double precision DEFAULT 0,
    compensacion2 double precision DEFAULT 0
);


--
-- TOC entry 350 (class 1259 OID 3242450)
-- Name: inhabilitado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE inhabilitado (
    id_inhabilitado integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20)
);


--
-- TOC entry 351 (class 1259 OID 3242453)
-- Name: instancia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE instancia (
    id_instancia integer NOT NULL,
    id_clasificacion integer NOT NULL,
    cod_instancia character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 352 (class 1259 OID 3242457)
-- Name: institucion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE institucion (
    id_institucion integer NOT NULL,
    cod_institucion character varying(10) NOT NULL,
    nombre character varying(90) NOT NULL,
    nombre_corto character varying(15) NOT NULL,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    ley_estatuto character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT institucion_estatus CHECK ((((estatus)::text = 'A'::text) OR ((estatus)::text = 'I'::text))),
    CONSTRAINT institucion_estatuto CHECK ((((ley_estatuto)::text = 'S'::text) OR ((ley_estatuto)::text = 'N'::text)))
);


--
-- TOC entry 353 (class 1259 OID 3242464)
-- Name: interesadicional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE interesadicional (
    id_interes_adicional integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_capital double precision DEFAULT 0 NOT NULL,
    monto_interes_mensual double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 354 (class 1259 OID 3242477)
-- Name: intereses; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE intereses (
    concepto character varying(6),
    cedula character varying(12),
    monto double precision DEFAULT 0
);


--
-- TOC entry 355 (class 1259 OID 3242481)
-- Name: interesnuevoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE interesnuevoregimen (
    id_interes_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_prestaciones_acumuladas double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0,
    monto_fideicomiso double precision DEFAULT 0,
    monto_fideicomiso_acumulado double precision DEFAULT 0,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 356 (class 1259 OID 3242500)
-- Name: interesviejoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE interesviejoregimen (
    id_interes_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0
);


--
-- TOC entry 357 (class 1259 OID 3242515)
-- Name: jerarquiacategoriadocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE jerarquiacategoriadocente (
    id_jerarquia_categoria_docente integer NOT NULL,
    id_jerarquia_docente integer NOT NULL,
    id_categoria_docente integer NOT NULL
);


--
-- TOC entry 358 (class 1259 OID 3242518)
-- Name: jerarquiadocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE jerarquiadocente (
    id_jerarquia_docente integer NOT NULL,
    digito_jerarquia character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 359 (class 1259 OID 3242521)
-- Name: jubilado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE jubilado (
    id_jubilado integer NOT NULL,
    id_trabajador integer NOT NULL,
    fecha_jubilacion date,
    tipo_jubilacion character varying(1) DEFAULT '0'::character varying NOT NULL,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60),
    grado integer DEFAULT 1,
    base_jubilacion double precision DEFAULT 0,
    porcentaje_jubilacion double precision DEFAULT 0,
    monto_jubilacion double precision DEFAULT 0,
    id_institucion integer
);


--
-- TOC entry 360 (class 1259 OID 3242529)
-- Name: juguete; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE juguete (
    id_juguete integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    fecha_nacimiento date NOT NULL,
    sexo character varying(1) NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    CONSTRAINT sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)))
);


--
-- TOC entry 361 (class 1259 OID 3242534)
-- Name: liquidacioninteresadicional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacioninteresadicional (
    id_liquidacion_interes_adicional integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_capital double precision DEFAULT 0 NOT NULL,
    monto_interes_mensual double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 362 (class 1259 OID 3242547)
-- Name: liquidacioninteresnuevoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacioninteresnuevoregimen (
    id_liquidacion_interes_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0,
    monto_fideicomiso double precision DEFAULT 0,
    monto_fideicomiso_acumulado double precision DEFAULT 0,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 363 (class 1259 OID 3242566)
-- Name: liquidacioninteresviejoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacioninteresviejoregimen (
    id_liquidacion_interes_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    dias integer DEFAULT 0 NOT NULL,
    sueldo_integral double precision DEFAULT 0 NOT NULL,
    tasa_interes double precision DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0,
    monto_capital double precision DEFAULT 0,
    monto_interes_mensual double precision DEFAULT 0,
    monto_interes_acumulado double precision DEFAULT 0,
    monto_anticipo double precision DEFAULT 0,
    monto_anticipo_acumulado double precision DEFAULT 0
);


--
-- TOC entry 364 (class 1259 OID 3242581)
-- Name: liquidacionprestacionesmensuales; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacionprestacionesmensuales (
    id_liquidacion_prestaciones_mensuales integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    dias_mensuales integer DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    base_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    fideicomiso character varying(1) DEFAULT 'N'::character varying,
    dias_cancelados character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 365 (class 1259 OID 3242592)
-- Name: liquidacionresumennuevoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacionresumennuevoregimen (
    id_liquidacion_resumen_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_fideicomiso_acumulado double precision DEFAULT 0 NOT NULL,
    dias_mensuales integer DEFAULT 0,
    dias_adicionales integer DEFAULT 0,
    monto_fraccion_adicional double precision DEFAULT 0,
    monto_fraccion_mensual double precision DEFAULT 0
);


--
-- TOC entry 366 (class 1259 OID 3242603)
-- Name: liquidacionresumenviejoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE liquidacionresumenviejoregimen (
    id_liquidacion_resumen_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    sueldo_transferencia double precision DEFAULT 0 NOT NULL,
    aniosservicios integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_transferencia double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL,
    monto_interes_adicional double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 367 (class 1259 OID 3242614)
-- Name: lugarpago; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE lugarpago (
    id_lugar_pago integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_lugar_pago character varying(6) NOT NULL,
    direccion character varying(100) NOT NULL,
    id_sede integer NOT NULL,
    nombre character varying(90),
    cod_cesta character varying(10)
);


--
-- TOC entry 564 (class 1259 OID 13550586)
-- Name: m_fiscales; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE m_fiscales (
    id_fiscales bigint NOT NULL,
    estado character varying,
    municipio character varying,
    parroquia character varying,
    nombre_apellido character varying,
    cedula bigint,
    telefono character varying,
    n_carnet character varying,
    cargo character varying,
    funciones character varying,
    correo character varying,
    direccion character varying,
    observacion character varying
);


--
-- TOC entry 368 (class 1259 OID 3242617)
-- Name: manualcargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE manualcargo (
    id_manual_cargo integer NOT NULL,
    cod_manual_cargo integer NOT NULL,
    nombre character varying(60) NOT NULL,
    fecha_vigencia date NOT NULL,
    id_tabulador integer,
    id_organismo integer NOT NULL,
    tipo_manual character varying(1) DEFAULT '1'::character varying NOT NULL,
    multiple_descripcion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    cod_mpd character varying(1),
    proceso_seleccion character varying(1) DEFAULT 'N'::character varying,
    tipo_cargo character varying(2) DEFAULT 'TA'::character varying,
    CONSTRAINT manualcargo_multiple_descripcio CHECK ((((multiple_descripcion)::text = 'S'::text) OR ((multiple_descripcion)::text = 'N'::text))),
    CONSTRAINT manualcargo_tipo_manual CHECK ((((((tipo_manual)::text = '1'::text) OR ((tipo_manual)::text = '2'::text)) OR ((tipo_manual)::text = '3'::text)) OR ((tipo_manual)::text = '4'::text)))
);


--
-- TOC entry 369 (class 1259 OID 3242627)
-- Name: manualpersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE manualpersonal (
    id_manual_personal integer NOT NULL,
    id_manual_cargo integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 370 (class 1259 OID 3242631)
-- Name: materia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE materia (
    id_materia integer NOT NULL,
    id_clasificacion integer NOT NULL,
    cod_materia character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 371 (class 1259 OID 3242635)
-- Name: mensajesprenomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mensajesprenomina (
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    mensaje character varying(255) NOT NULL,
    id_mensajes_prenomina integer NOT NULL
);


--
-- TOC entry 372 (class 1259 OID 3242638)
-- Name: mensajesprenomina_id_mensajes_prenomina_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE mensajesprenomina_id_mensajes_prenomina_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- TOC entry 8029 (class 0 OID 0)
-- Dependencies: 372
-- Name: mensajesprenomina_id_mensajes_prenomina_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE mensajesprenomina_id_mensajes_prenomina_seq OWNED BY mensajesprenomina.id_mensajes_prenomina;


--
-- TOC entry 373 (class 1259 OID 3242640)
-- Name: mes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mes (
    id_mes integer NOT NULL,
    anio integer NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    lunes_pr_quincena integer DEFAULT 0 NOT NULL,
    lunes_se_quincena integer DEFAULT 0 NOT NULL,
    dias_habiles integer DEFAULT 0 NOT NULL,
    con_sabados integer DEFAULT 0 NOT NULL,
    CONSTRAINT mes_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text)))
);


--
-- TOC entry 374 (class 1259 OID 3242649)
-- Name: mesesjubilacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mesesjubilacion (
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    base_mensual double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 375 (class 1259 OID 3242655)
-- Name: movimientocargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientocargo (
    id_movimiento_cargo integer NOT NULL,
    cod_movimiento_cargo character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT '1'::character varying NOT NULL
);


--
-- TOC entry 376 (class 1259 OID 3242659)
-- Name: movimientopersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientopersonal (
    id_movimiento_personal integer NOT NULL,
    cod_movimiento_personal character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 377 (class 1259 OID 3242663)
-- Name: movimientoregistro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientoregistro (
    id_movimiento_registro integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    id_movimiento_cargo integer,
    id_causa_movimiento integer,
    cod_movimiento_cargo character varying(2),
    cod_movimiento_personal character varying(2),
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    remesa character varying(5),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT movimregistro_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT movimregistro_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


--
-- TOC entry 378 (class 1259 OID 3242684)
-- Name: movimientoscio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientoscio (
    id_movimiento_scio integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    cod_movimiento_personal character varying(2),
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_manual_mpd character varying(1),
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    nombramiento character varying(1),
    caucion character varying(1),
    horario character varying(1) DEFAULT 'R'::character varying NOT NULL,
    cod_tabulador character varying(6),
    documento_soporte character varying(25),
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    sexo character varying(1),
    estado_civil character varying(1),
    nivel_educativo character varying(1),
    fecha_nacimiento date,
    id_personal integer NOT NULL,
    remesa character varying(5),
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    grupo_organismo character varying(1),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    usuario character varying(25),
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    cod_analista_mpd integer,
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    cod_manual_mpd_anterior character varying(1),
    cod_cargo_anterior character varying(6),
    codigo_nomina_anterior integer DEFAULT 0 NOT NULL,
    nombramiento_anterior character varying(1),
    sueldo_anterior double precision DEFAULT 0 NOT NULL,
    compensacion_anterior double precision DEFAULT 0 NOT NULL,
    primas_cargo_anterior double precision DEFAULT 0 NOT NULL,
    primas_trabajador_anterior double precision DEFAULT 0 NOT NULL,
    grado_anterior integer DEFAULT 0 NOT NULL,
    cod_organismo_mpd_anterior character varying(10),
    nombre_organismo_anterior character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT movimientoscio_estatus CHECK (((((estatus)::text = '0'::text) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text)))
);


--
-- TOC entry 379 (class 1259 OID 3242709)
-- Name: movimientositp; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientositp (
    id_movimiento_sitp integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    id_remesa integer,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    id_usuario integer NOT NULL,
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    anio integer DEFAULT 0 NOT NULL,
    anterior_cod_manual_cargo integer,
    anterior_cod_cargo character varying(6),
    anterior_descripcion_cargo character varying(60),
    anterior_codigo_nomina integer DEFAULT 0,
    anterior_cod_sede character varying(6),
    anterior_nombre_sede character varying(90),
    anterior_cod_dependencia character varying(12),
    anterior_nombre_dependencia character varying(90),
    anterior_sueldo double precision DEFAULT 0,
    anterior_compensacion double precision DEFAULT 0,
    anterior_primas_cargo double precision DEFAULT 0,
    anterior_primas_trabajador double precision DEFAULT 0,
    anterior_grado integer DEFAULT 0,
    anterior_paso integer DEFAULT 1,
    anterior_cod_region character varying(2),
    anterior_nombre_region character varying(90),
    cod_concurso character varying(15),
    fecha_ingreso date,
    id_turno integer,
    fecha_culminacion date,
    monto_jubilacion double precision DEFAULT 0 NOT NULL,
    sueldo_promedio double precision DEFAULT 0 NOT NULL,
    porc_jubilacion double precision DEFAULT 0 NOT NULL,
    CONSTRAINT movimientositp_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT movimientositp_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


--
-- TOC entry 380 (class 1259 OID 3242741)
-- Name: movimientosplan; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movimientosplan (
    id_movimientos_plan integer NOT NULL,
    id_plan_personal integer NOT NULL,
    id_causa_movimiento integer NOT NULL,
    cantidad_planificados integer DEFAULT 0 NOT NULL,
    cantidad_realizados integer DEFAULT 0 NOT NULL,
    cantidad_aprobados integer DEFAULT 0 NOT NULL,
    cantidad_devueltos integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 381 (class 1259 OID 3242748)
-- Name: movremuneracion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE movremuneracion (
    id_mov_remuneracion integer NOT NULL,
    cod_mov_remuneracion character varying(2),
    descripcion character varying(60),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    CONSTRAINT movremuneracion_aprobacion_m CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


--
-- TOC entry 382 (class 1259 OID 3242753)
-- Name: mpdcontratado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mpdcontratado (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


--
-- TOC entry 383 (class 1259 OID 3242765)
-- Name: mpdempleado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mpdempleado (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


--
-- TOC entry 384 (class 1259 OID 3242777)
-- Name: mpdfinanciero; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mpdfinanciero (
    fecha_vigencia date NOT NULL,
    codigo_organismo character varying(7),
    codigo_grupo character varying(2),
    numero_nomina character varying(7),
    codigo_adm character varying(12),
    codigo_clase character varying(5),
    grado character varying(2),
    tipo_cargo character varying(1),
    deno_cargo character varying(30),
    jornada character varying(6),
    cedula integer DEFAULT 0,
    apellido1 character varying(40),
    nombre1 character varying(40),
    codigo_ubi_geo character varying(6),
    codigo_decreto_serie character varying(5),
    codigo_decreto_escala character varying(5),
    accion_administrativa character varying(7),
    situacion_cargo character varying(1),
    cod_asig_aprobada1 character varying(3),
    monto_asig_aprobada1 double precision DEFAULT 0,
    cod_asig_aprobada2 character varying(3),
    monto_asig_aprobada2 double precision DEFAULT 0,
    cod_asig_aprobada3 character varying(3),
    monto_asig_aprobada3 double precision DEFAULT 0,
    cod_asig_aprobada4 character varying(3),
    monto_asig_aprobada4 double precision DEFAULT 0,
    cod_asig_aprobada5 character varying(3),
    monto_asig_aprobada5 double precision DEFAULT 0,
    cod_asig_aprobada6 character varying(3),
    monto_asig_aprobada6 double precision DEFAULT 0,
    cod_asig_aprobada7 character varying(3),
    monto_asig_aprobada7 double precision DEFAULT 0,
    cod_asig_aprobada8 character varying(3),
    monto_asig_aprobada8 double precision DEFAULT 0,
    cod_asig_aprobada9 character varying(3),
    monto_asig_aprobada9 double precision DEFAULT 0,
    cod_asig_aprobada10 character varying(3),
    monto_asig_aprobada10 double precision DEFAULT 0,
    cod_asig_noaprobada1 character varying(3),
    denominacion_asig_noaprobada1 character varying(40),
    partida_concepto_noaprobada1 character varying(12),
    monto_asig_noaprobada1 double precision DEFAULT 0,
    cod_asig_noaprobada2 character varying(3),
    denominacion_asig_noaprobada2 character varying(40),
    partida_concepto_noaprobada2 character varying(12),
    monto_asig_noaprobada2 double precision DEFAULT 0,
    cod_asig_noaprobada3 character varying(3),
    denominacion_asig_noaprobada3 character varying(40),
    partida_concepto_noaprobada3 character varying(12),
    monto_asig_noaprobada3 double precision DEFAULT 0,
    cod_asig_noaprobada4 character varying(3),
    denominacion_asig_noaprobada4 character varying(40),
    partida_concepto_noaprobada4 character varying(12),
    monto_asig_noaprobada4 double precision DEFAULT 0,
    cod_asig_noaprobada5 character varying(3),
    denominacion_asig_noaprobada5 character varying(40),
    partida_concepto_noaprobada5 character varying(12),
    monto_asig_noaprobada5 double precision DEFAULT 0,
    cod_asig_noaprobada6 character varying(3),
    denominacion_asig_noaprobada6 character varying(40),
    partida_concepto_noaprobada6 character varying(12),
    monto_asig_noaprobada6 double precision DEFAULT 0,
    cod_asig_noaprobada7 character varying(3),
    denominacion_asig_noaprobada7 character varying(40),
    partida_concepto_noaprobada7 character varying(12),
    monto_asig_noaprobada7 double precision DEFAULT 0,
    cod_asig_noaprobada8 character varying(3),
    denominacion_asig_noaprobada8 character varying(40),
    partida_concepto_noaprobada8 character varying(12),
    monto_asig_noaprobada8 double precision DEFAULT 0,
    cod_asig_noaprobada9 character varying(3),
    denominacion_asig_noaprobada9 character varying(40),
    partida_concepto_noaprobada9 character varying(12),
    monto_asig_noaprobada9 double precision DEFAULT 0,
    cod_asig_noaprobada10 character varying(3),
    denominacion_asig_noaprobada10 character varying(40),
    partida_concepto_noaprobada10 character varying(12),
    monto_asig_noaprobada10 double precision DEFAULT 0,
    fecha_vigencia_tran character varying(10),
    codigo_org_tran character varying(7),
    grupo_tran character varying(2),
    nomina_tran character varying(7),
    espacios character(24)
);


--
-- TOC entry 385 (class 1259 OID 3242804)
-- Name: mpdobrero; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE mpdobrero (
    cedula integer DEFAULT 0,
    apellido1 character varying(20),
    apellido2 character varying(20),
    nombre1 character varying(20),
    nombre2 character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_nacimiento date NOT NULL,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    denom_cargo character varying(60),
    grado integer DEFAULT 1 NOT NULL,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_profesional double precision DEFAULT 0,
    prima_antiguedad double precision DEFAULT 0,
    otro_serv double precision DEFAULT 0
);


--
-- TOC entry 386 (class 1259 OID 3242816)
-- Name: municipio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE municipio (
    id_municipio integer NOT NULL,
    abreviatura character varying(3),
    cod_municipio character varying(2) NOT NULL,
    id_estado integer NOT NULL,
    nombre character varying(40) NOT NULL
);


--
-- TOC entry 387 (class 1259 OID 3242819)
-- Name: nivelbeca; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE nivelbeca (
    id_nivel_beca integer NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    inicio_nivel integer DEFAULT 1 NOT NULL,
    fin_nivel integer DEFAULT 1 NOT NULL,
    proximo_nivel character varying(1)
);


--
-- TOC entry 388 (class 1259 OID 3242825)
-- Name: niveldocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE niveldocente (
    id_nivel_docente integer NOT NULL,
    digito_nivel character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 389 (class 1259 OID 3242828)
-- Name: niveleducativo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE niveleducativo (
    id_nivel_educativo integer NOT NULL,
    cod_nivel_educativo character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL,
    orden integer DEFAULT 0
);


--
-- TOC entry 390 (class 1259 OID 3242832)
-- Name: noevaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE noevaluacion (
    id_no_evaluacion integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    motivo character varying(1) NOT NULL,
    cedula_supervisor integer DEFAULT 0,
    nombre_supervisor character varying(50) DEFAULT 'H'::character varying NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL
);


--
-- TOC entry 391 (class 1259 OID 3242842)
-- Name: nombreorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE nombreorganismo (
    id_nombre_organismo integer NOT NULL,
    fecha_vigencia date NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90) NOT NULL,
    nombre_corto character varying(10)
);


--
-- TOC entry 392 (class 1259 OID 3242845)
-- Name: nominaconversion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE nominaconversion (
    id_nomina_conversion integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    asignacion_bs double precision DEFAULT 0 NOT NULL,
    asignacion_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_ley_bs double precision DEFAULT 0 NOT NULL,
    deduccion_ley_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_personal_bs double precision DEFAULT 0 NOT NULL,
    deduccion_personal_otra_moneda double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer
);


--
-- TOC entry 393 (class 1259 OID 3242855)
-- Name: nominadiplomatico; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE nominadiplomatico (
    id_nomina_diplomatico integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    asignacion_bs double precision DEFAULT 0 NOT NULL,
    asignacion_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_ley_bs double precision DEFAULT 0 NOT NULL,
    deduccion_ley_otra_moneda double precision DEFAULT 0 NOT NULL,
    deduccion_personal_bs double precision DEFAULT 0 NOT NULL,
    deduccion_personal_otra_moneda double precision DEFAULT 0 NOT NULL,
    asignacion_mre double precision DEFAULT 0 NOT NULL,
    fluctuacion_mre double precision DEFAULT 0 NOT NULL,
    asignacion_anual_onu double precision DEFAULT 0 NOT NULL,
    ajuste_anual_onu double precision DEFAULT 0 NOT NULL,
    asignacion_mensual_onu double precision DEFAULT 0 NOT NULL,
    prima_destino_onu double precision DEFAULT 0 NOT NULL,
    prima_destino_mre double precision DEFAULT 0 NOT NULL,
    otras_asignaciones double precision DEFAULT 0 NOT NULL,
    multiplicador double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer
);


--
-- TOC entry 394 (class 1259 OID 3242874)
-- Name: nominaespecial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE nominaespecial (
    id_nomina_especial integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    fecha_registro date,
    id_grupo_nomina integer,
    descripcion character varying(60) NOT NULL,
    estatus character varying(1) NOT NULL,
    fecha_proceso date,
    mes smallint DEFAULT 0 NOT NULL,
    usuario character varying(20),
    id_frecuencia_pago bigint NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    personal character varying(1) DEFAULT 'A'::character varying,
    pagada character varying(1) DEFAULT 'N'::character varying,
    fecha_pago date
);


--
-- TOC entry 395 (class 1259 OID 3242882)
-- Name: opcion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE opcion (
    id_opcion integer NOT NULL,
    codigo_opcion character varying(15) NOT NULL,
    descripcion character varying(75) NOT NULL,
    ruta character varying(200) NOT NULL,
    tipo character varying(1) NOT NULL
);


--
-- TOC entry 396 (class 1259 OID 3242885)
-- Name: operacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE operacion (
    id_operacion integer NOT NULL,
    cod_operacion character varying(1),
    nombre character varying(40),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 397 (class 1259 OID 3242889)
-- Name: organismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE organismo (
    id_organismo integer NOT NULL,
    cedula_agente_retencion character varying(10),
    cedula_director integer DEFAULT 0 NOT NULL,
    id_ciudad integer DEFAULT 0,
    cod_organismo character varying(4) NOT NULL,
    cod_sigecof character varying(4),
    cod_uel character varying(6),
    direccion character varying(100),
    nit character varying(12),
    nombre_agente_retencion character varying(50),
    organo_rector character varying(1) DEFAULT 'N'::character varying NOT NULL,
    rif character varying(12),
    rif_agente_retencion character varying(12),
    telefono character varying(15),
    zona_postal character varying(10),
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    organismo_adscrito character varying(4),
    nombre_organismo character varying(90),
    actualiza_expediente character varying(1) DEFAULT 'S'::character varying NOT NULL,
    nombre_rrhh character varying(50),
    cedula_rrhh integer DEFAULT 0,
    nombre_informatica character varying(50),
    cedula_informatica integer DEFAULT 0,
    nombre_maxima_autoridad character varying(50),
    cedula_maxima_autoridad integer DEFAULT 0,
    codigo_anterior_mpd character varying(10),
    telefono_rrhh character varying(15),
    telefono_informatica character varying(15),
    telefono_maxima_autoridad character varying(15),
    gaceta_rrhh character varying(80),
    gaceta_informatica character varying(80),
    gaceta_maxima_autoridad character varying(80),
    nombre_corto character varying(15),
    CONSTRAINT organismo_actualiza_expediente CHECK ((((actualiza_expediente)::text = 'S'::text) OR ((actualiza_expediente)::text = 'N'::text))),
    CONSTRAINT organismo_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT organismo_organo_rector CHECK ((((organo_rector)::text = 'S'::text) OR ((organo_rector)::text = 'N'::text)))
);


--
-- TOC entry 398 (class 1259 OID 3242906)
-- Name: otraactividad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE otraactividad (
    id_otra_actividad integer NOT NULL,
    observaciones character varying(100),
    id_tipo_otra_actividad integer NOT NULL,
    id_personal integer NOT NULL
);


--
-- TOC entry 399 (class 1259 OID 3242909)
-- Name: otrasalicuotas; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE otrasalicuotas (
    id_otras_alicuotas integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_alicuota integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 400 (class 1259 OID 3242913)
-- Name: pagoguarderia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pagoguarderia (
    id_pago_guarderia integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    id_guarderia integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    inscripcion character varying(1) DEFAULT 'N'::character varying
);


--
-- TOC entry 401 (class 1259 OID 3242918)
-- Name: pais; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pais (
    id_pais integer NOT NULL,
    abreviatura character varying(3),
    cod_pais character varying(3) NOT NULL,
    nombre character varying(40) NOT NULL,
    moneda character varying(30),
    moneda_sing character varying(30),
    moneda_plur character varying(30),
    simbolo character varying(6),
    fraccion character varying(20),
    id_region_continente integer
);


--
-- TOC entry 402 (class 1259 OID 3242921)
-- Name: parametroari; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametroari (
    id_parametro_ari integer NOT NULL,
    unidad_tributaria double precision DEFAULT 0 NOT NULL,
    fecha_vigencia date,
    un_desgravamenes double precision DEFAULT 0 NOT NULL,
    un_persona_natural double precision DEFAULT 0 NOT NULL,
    un_carga double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 403 (class 1259 OID 3242928)
-- Name: parametrobeca; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrobeca (
    id_parametro_beca integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_nivel_beca integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    meses_servicio integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    promedio_notas integer DEFAULT 0 NOT NULL,
    numero_becas integer DEFAULT 0 NOT NULL,
    maximo_trabajador integer DEFAULT 0 NOT NULL,
    monto_beca double precision DEFAULT 0 NOT NULL,
    monto_excepcional double precision DEFAULT 0 NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    sueldo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrobeca_sueldo CHECK ((((sueldo)::text = 'I'::text) OR ((sueldo)::text = 'B'::text)))
);


--
-- TOC entry 404 (class 1259 OID 3242943)
-- Name: parametrobecageneral; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrobecageneral (
    id_parametro_beca_general integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    maximo_tipo_personal integer NOT NULL,
    maximo_trabajador integer DEFAULT 0 NOT NULL,
    incluye_trabajador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobacion_solicitud character varying(1) DEFAULT 'N'::character varying NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL
);


--
-- TOC entry 405 (class 1259 OID 3242950)
-- Name: parametrocaja; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrocaja (
    id_parametro_caja integer NOT NULL,
    aporte_fijo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aporte_trabajador double precision DEFAULT 0 NOT NULL,
    aporte_patron double precision DEFAULT 0 NOT NULL,
    maximo_trabajador double precision DEFAULT 0 NOT NULL,
    maximo_patron double precision DEFAULT 0 NOT NULL,
    ingreso_automatico integer DEFAULT 0 NOT NULL,
    recalculo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrocaja_aporte_fijo CHECK ((((aporte_fijo)::text = 'S'::text) OR ((aporte_fijo)::text = 'N'::text))),
    CONSTRAINT parametrocaja_recalculo CHECK ((((recalculo)::text = 'S'::text) OR ((recalculo)::text = 'N'::text)))
);


--
-- TOC entry 406 (class 1259 OID 3242963)
-- Name: parametrodotacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrodotacion (
    id_parametro_dotacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_tipo_dotacion integer NOT NULL,
    modalidad character varying(1) DEFAULT 'M'::character varying NOT NULL,
    monto_dotacion double precision DEFAULT 0 NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT parametrodotacion_modalidad CHECK ((((modalidad)::text = 'M'::text) OR ((modalidad)::text = 'A'::text)))
);


--
-- TOC entry 407 (class 1259 OID 3242970)
-- Name: parametrogobierno; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrogobierno (
    id_parametro_gobierno integer NOT NULL,
    limsem_sso double precision DEFAULT 0 NOT NULL,
    limmen_sso double precision DEFAULT 0 NOT NULL,
    limsem_lph double precision DEFAULT 0 NOT NULL,
    limmen_lph double precision DEFAULT 0 NOT NULL,
    limsem_fju double precision DEFAULT 0 NOT NULL,
    limmen_fju double precision DEFAULT 0 NOT NULL,
    edadmasc_sso integer DEFAULT 0 NOT NULL,
    edadfem_sso integer DEFAULT 0 NOT NULL,
    edadmasc_lph integer DEFAULT 0 NOT NULL,
    edadfem_lph integer DEFAULT 0 NOT NULL,
    edadmasc_fju integer DEFAULT 0 NOT NULL,
    edadfem_fju integer DEFAULT 0 NOT NULL,
    porcentaje_integral double precision DEFAULT 0 NOT NULL,
    porcentaje_parcial double precision DEFAULT 0 NOT NULL,
    porcbpat_sso double precision DEFAULT 0 NOT NULL,
    porcmpat_sso double precision DEFAULT 0 NOT NULL,
    porcapat_sso double precision DEFAULT 0 NOT NULL,
    porctrab_spf double precision DEFAULT 0 NOT NULL,
    porcpat_spf double precision DEFAULT 0 NOT NULL,
    porctrab_lph double precision DEFAULT 0 NOT NULL,
    porcpat_lph double precision DEFAULT 0 NOT NULL,
    porctrab_fju double precision DEFAULT 0 NOT NULL,
    porcpat_fju double precision DEFAULT 0 NOT NULL,
    id_grupo_organismo integer DEFAULT 0 NOT NULL,
    limsem_spf double precision DEFAULT 0,
    limmen_spf double precision DEFAULT 0
);


--
-- TOC entry 408 (class 1259 OID 3242999)
-- Name: parametroguarderia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametroguarderia (
    id_parametro_guarderia integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    pago_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT pago_nomina CHECK ((((pago_nomina)::text = 'S'::text) OR ((pago_nomina)::text = 'N'::text))),
    CONSTRAINT parametroguarderia_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


--
-- TOC entry 409 (class 1259 OID 3243009)
-- Name: parametrojubilacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrojubilacion (
    id_parametro_jubilacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad integer DEFAULT 0 NOT NULL,
    edadm integer DEFAULT 0 NOT NULL,
    anios_servicio integer DEFAULT 0 NOT NULL,
    anios_serviciom integer DEFAULT 0 NOT NULL,
    anios_servicio_sin_edad integer DEFAULT 0 NOT NULL,
    anios_servicio_especial integer DEFAULT 0 NOT NULL,
    meses_promediar integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    factor double precision DEFAULT 0
);


--
-- TOC entry 410 (class 1259 OID 3243021)
-- Name: parametrojuguete; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrojuguete (
    id_parametro_juguete integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad_minima integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    cantidad_beneficiarios integer DEFAULT 0 NOT NULL,
    monto_juguetes double precision DEFAULT 0 NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT parametroguarderia_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


--
-- TOC entry 411 (class 1259 OID 3243030)
-- Name: parametrosistema; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrosistema (
    nombre_parametro character varying(20) NOT NULL,
    valor_parametro character varying(30),
    tipo_parametro character varying(10),
    descripcion_parametro character varying(255)
);


--
-- TOC entry 8030 (class 0 OID 0)
-- Dependencies: 411
-- Name: TABLE parametrosistema; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE parametrosistema IS 'Parámetros propios del sistema, no debe ser editable directamente por usuarios normales, unicamente por el administrador del sistema o soporte técnico';


--
-- TOC entry 412 (class 1259 OID 3243033)
-- Name: parametroticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametroticket (
    id_parametro_ticket integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_concepto_tipo_personal integer,
    dias_habiles character varying(1) DEFAULT 'S'::character varying NOT NULL,
    incluye_sabados character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deducir_ausencias character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cierre_ausencias character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_fijos integer DEFAULT 0 NOT NULL,
    monto_fijo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL,
    pago_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    pago_tarjeta character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tickets_por_dia integer DEFAULT 0 NOT NULL,
    maximo_tickets integer DEFAULT 0 NOT NULL,
    sueldo_basico_integral character varying(1) DEFAULT 'B'::character varying NOT NULL,
    sueldo_maximo double precision DEFAULT 0 NOT NULL,
    varias_denominaciones character varying(1) DEFAULT 'N'::character varying NOT NULL,
    distribucion character varying(1) DEFAULT 'D'::character varying,
    CONSTRAINT parametroticket_deducir_ausencias CHECK ((((deducir_ausencias)::text = 'S'::text) OR ((deducir_ausencias)::text = 'N'::text))),
    CONSTRAINT parametroticket_dias_habiles CHECK ((((dias_habiles)::text = 'S'::text) OR ((dias_habiles)::text = 'N'::text))),
    CONSTRAINT parametroticket_pago_nomina CHECK ((((pago_nomina)::text = 'S'::text) OR ((pago_nomina)::text = 'N'::text)))
);


--
-- TOC entry 413 (class 1259 OID 3243054)
-- Name: parametroutiles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametroutiles (
    id_parametro_utiles integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    nivel_educativo character varying(1) NOT NULL,
    cantidad_beneficiarios integer DEFAULT 0 NOT NULL,
    monto_utiles double precision DEFAULT 0 NOT NULL,
    quien_cobra character varying(1) DEFAULT 'M'::character varying NOT NULL,
    CONSTRAINT parametroutiles_quien_cobra CHECK (((((quien_cobra)::text = 'M'::text) OR ((quien_cobra)::text = 'P'::text)) OR ((quien_cobra)::text = 'A'::text)))
);


--
-- TOC entry 414 (class 1259 OID 3243061)
-- Name: parametrovarios; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parametrovarios (
    id_parametro_varios integer NOT NULL,
    nuevo_regimen character varying(1) DEFAULT 'S'::character varying NOT NULL,
    alicuota_bfa_prestac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bfa_bvac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bvac_prestac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    alicuota_bvac_bfa character varying(1) DEFAULT 'N'::character varying NOT NULL,
    dias_anio integer DEFAULT 360 NOT NULL,
    aniversario_disfrute character varying(1) DEFAULT 'A'::character varying NOT NULL,
    dias_bfa1997 integer DEFAULT 30 NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_grupo_organismo integer NOT NULL,
    calculo_utilidades integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0,
    tiempo_sitp date,
    alicuota_bono_petrolero character varying(1) DEFAULT 'N'::character varying NOT NULL,
    constante_petrolero_a integer DEFAULT 0,
    constante_petrolero_b integer DEFAULT 0,
    constante_petrolero_c integer DEFAULT 0,
    bono_extra character varying(1) DEFAULT 'N'::character varying NOT NULL,
    sumo_apn character varying(1) DEFAULT 'N'::character varying,
    calculo_alicuota_bfa character varying(1) DEFAULT 'F'::character varying NOT NULL,
    fecha_tope_utilidades date,
    fecha_apertura_fideicomiso date,
    regimen_derogado_procesado character varying(1) DEFAULT 'S'::character varying,
    intereses_adicionales character varying(1) DEFAULT 'N'::character varying,
    cambio_moneda double precision DEFAULT 0 NOT NULL,
    tipo_calculo_bfa character varying(1) DEFAULT 'D'::character varying NOT NULL,
    tope_horas_extra integer DEFAULT 0 NOT NULL,
    tope_horas_extra_mensual integer DEFAULT 0 NOT NULL,
    ausencia_injustificada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT parametrosvarios_tipocalculobfa CHECK ((((tipo_calculo_bfa)::text = 'D'::text) OR ((tipo_calculo_bfa)::text = 'P'::text))),
    CONSTRAINT pv_alicuota_bfa_bvac CHECK ((((alicuota_bfa_bvac)::text = 'S'::text) OR ((alicuota_bfa_bvac)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bfa_prestac CHECK ((((alicuota_bfa_prestac)::text = 'S'::text) OR ((alicuota_bfa_prestac)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bvac_bfa CHECK ((((alicuota_bvac_bfa)::text = 'S'::text) OR ((alicuota_bvac_bfa)::text = 'N'::text))),
    CONSTRAINT pv_alicuota_bvac_prestac CHECK ((((alicuota_bvac_prestac)::text = 'S'::text) OR ((alicuota_bvac_prestac)::text = 'N'::text))),
    CONSTRAINT pv_aniversario_disfrute CHECK ((((aniversario_disfrute)::text = 'A'::text) OR ((aniversario_disfrute)::text = 'D'::text))),
    CONSTRAINT pv_nuevo_regimen CHECK ((((nuevo_regimen)::text = 'S'::text) OR ((nuevo_regimen)::text = 'N'::text)))
);


--
-- TOC entry 415 (class 1259 OID 3243095)
-- Name: parroquia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE parroquia (
    id_parroquia integer NOT NULL,
    abreviatura character varying(3),
    cod_parroquia character varying(2) NOT NULL,
    id_municipio integer NOT NULL,
    nombre character varying(40) NOT NULL
);


--
-- TOC entry 416 (class 1259 OID 3243098)
-- Name: participante; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE participante (
    id_participante integer NOT NULL,
    id_plan_adiestramiento integer NOT NULL,
    asistencia character varying(1) DEFAULT 'P'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    desempenio character varying(1) DEFAULT 'N'::character varying NOT NULL,
    evaluacion_instructor character varying(1) DEFAULT 'N'::character varying NOT NULL,
    evaluacion_contenido character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_personal integer NOT NULL
);


--
-- TOC entry 417 (class 1259 OID 3243106)
-- Name: partidauelespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE partidauelespecifica (
    id_partida_uel_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_fuente_financiamiento integer NOT NULL,
    anio integer NOT NULL
);


--
-- TOC entry 418 (class 1259 OID 3243109)
-- Name: pasantia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pasantia (
    id_pasantia integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    instituto character varying(60),
    proyecto text,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    institucion character varying(90)
);


--
-- TOC entry 419 (class 1259 OID 3243117)
-- Name: pensioninvalidez; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pensioninvalidez (
    id_pension_invalidez integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    porcentaje_maximo_pension double precision DEFAULT 0 NOT NULL,
    base character varying(1) DEFAULT 'P'::character varying,
    numero_meses double precision DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 420 (class 1259 OID 3243125)
-- Name: pensionsobreviviviente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pensionsobreviviviente (
    id_pension_sobreviviente integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    porcentaje_maximo_pension double precision DEFAULT 0 NOT NULL,
    base character varying(1) DEFAULT 'P'::character varying,
    numero_meses double precision DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 421 (class 1259 OID 3243133)
-- Name: perfil; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE perfil (
    id_perfil integer NOT NULL,
    id_cargo integer NOT NULL,
    tipo_cargo character varying(1) DEFAULT '1'::character varying,
    naturaleza text,
    responsabilidades text,
    propositos text,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 422 (class 1259 OID 3243142)
-- Name: personal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE personal (
    id_personal integer NOT NULL,
    anios_servicio_apn integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    cedula_conyugue integer DEFAULT 0 NOT NULL,
    id_ciudad_nacimiento integer,
    id_ciudad_residencia integer,
    diestralidad character varying(1) DEFAULT 'D'::character varying NOT NULL,
    direccion_residencia character varying(100),
    doble_nacionalidad character varying(1) DEFAULT 'N'::character varying NOT NULL,
    email character varying(60),
    id_establecimiento_salud integer,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    estatura double precision DEFAULT 0 NOT NULL,
    fecha_nacimiento date NOT NULL,
    fecha_nacionalizacion date,
    gaceta_nacionalizacion character varying(10),
    grado_licencia integer DEFAULT 0 NOT NULL,
    grupo_sanguineo character varying(3) DEFAULT 'NO'::character varying NOT NULL,
    maneja character varying(1) DEFAULT 'N'::character varying NOT NULL,
    marca_vehiculo character varying(20),
    mismo_organismo_conyugue character varying(1) DEFAULT 'N'::character varying NOT NULL,
    modelo_vehiculo character varying(20),
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    nacionalizado character varying(1) DEFAULT 'N'::character varying NOT NULL,
    nivel_educativo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    nombre_conyugue character varying(50),
    numero_libreta_militar character varying(15),
    numero_rif character varying(15),
    numero_sso character varying(15),
    otra_normativa_nac character varying(40),
    id_pais_nacionalidad integer,
    id_parroquia integer,
    peso double precision DEFAULT 0 NOT NULL,
    placa_vehiculo character varying(10),
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    reingresable character varying(1) DEFAULT 'S'::character varying NOT NULL,
    sector_trabajo_conyugue character varying(1) DEFAULT 'P'::character varying NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    telefono_celular character varying(15),
    telefono_oficina character varying(15),
    telefono_residencia character varying(15),
    tenencia_vivienda character varying(1) DEFAULT 'P'::character varying NOT NULL,
    tiene_hijos character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tiene_vehiculo character varying(1) DEFAULT 'N'::character varying NOT NULL,
    tipo_vivienda character varying(1) DEFAULT 'A'::character varying NOT NULL,
    zona_postal_residencia character varying(6),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    password character varying(20),
    madre_padre character varying(1) DEFAULT 'N'::character varying,
    fecha_fallecimiento date,
    dias_servicio_apn integer DEFAULT 0,
    meses_servicio_apn integer DEFAULT 0,
    deuda_regimen_derogado character varying(1) DEFAULT 'N'::character varying,
    credencial character varying(15),
    puebloindigena character varying(6),
    discapacidad character varying(1) DEFAULT 'N'::character varying,
    tipodiscapacidad character varying(1) DEFAULT 'O'::character varying,
    foto_trabajador character varying,
    CONSTRAINT personal_diestralidad CHECK (((((diestralidad)::text = 'D'::text) OR ((diestralidad)::text = 'Z'::text)) OR ((diestralidad)::text = 'A'::text))),
    CONSTRAINT personal_doble_nacionalidad CHECK ((((doble_nacionalidad)::text = 'S'::text) OR ((doble_nacionalidad)::text = 'N'::text))),
    CONSTRAINT personal_estado_civil CHECK ((((((((estado_civil)::text = 'S'::text) OR ((estado_civil)::text = 'C'::text)) OR ((estado_civil)::text = 'D'::text)) OR ((estado_civil)::text = 'V'::text)) OR ((estado_civil)::text = 'U'::text)) OR ((estado_civil)::text = 'O'::text))),
    CONSTRAINT personal_grupo_sanguineo CHECK (((((((((((grupo_sanguineo)::text = 'A+'::text) OR ((grupo_sanguineo)::text = 'A-'::text)) OR ((grupo_sanguineo)::text = 'B+'::text)) OR ((grupo_sanguineo)::text = 'B-'::text)) OR ((grupo_sanguineo)::text = 'O+'::text)) OR ((grupo_sanguineo)::text = 'O-'::text)) OR ((grupo_sanguineo)::text = 'AB+'::text)) OR ((grupo_sanguineo)::text = 'AB-'::text)) OR ((grupo_sanguineo)::text = 'NO'::text))),
    CONSTRAINT personal_maneja CHECK ((((maneja)::text = 'S'::text) OR ((maneja)::text = 'N'::text))),
    CONSTRAINT personal_mismo_organismo_conyug CHECK ((((mismo_organismo_conyugue)::text = 'S'::text) OR ((mismo_organismo_conyugue)::text = 'N'::text))),
    CONSTRAINT personal_nacionalidad CHECK ((((nacionalidad)::text = 'V'::text) OR ((nacionalidad)::text = 'E'::text))),
    CONSTRAINT personal_nacionalizado CHECK ((((nacionalizado)::text = 'S'::text) OR ((nacionalizado)::text = 'N'::text))),
    CONSTRAINT personal_nivel_educativo CHECK ((((((((((((nivel_educativo)::text = 'P'::text) OR ((nivel_educativo)::text = 'B'::text)) OR ((nivel_educativo)::text = 'D'::text)) OR ((nivel_educativo)::text = 'T'::text)) OR ((nivel_educativo)::text = 'S'::text)) OR ((nivel_educativo)::text = 'U'::text)) OR ((nivel_educativo)::text = 'G'::text)) OR ((nivel_educativo)::text = 'C'::text)) OR ((nivel_educativo)::text = 'O'::text)) OR ((nivel_educativo)::text = 'N'::text))),
    CONSTRAINT personal_reingresable CHECK ((((reingresable)::text = 'S'::text) OR ((reingresable)::text = 'N'::text))),
    CONSTRAINT personal_sector_trabajo_conyugu CHECK (((((sector_trabajo_conyugue)::text = 'P'::text) OR ((sector_trabajo_conyugue)::text = 'U'::text)) OR ((sector_trabajo_conyugue)::text = 'N'::text))),
    CONSTRAINT personal_sexo CHECK ((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text))),
    CONSTRAINT personal_tenencia_vivienda CHECK ((((((tenencia_vivienda)::text = 'P'::text) OR ((tenencia_vivienda)::text = 'H'::text)) OR ((tenencia_vivienda)::text = 'A'::text)) OR ((tenencia_vivienda)::text = 'F'::text))),
    CONSTRAINT personal_tiene_hijos CHECK ((((tiene_hijos)::text = 'S'::text) OR ((tiene_hijos)::text = 'N'::text))),
    CONSTRAINT personal_tiene_vehiculo CHECK ((((tiene_vehiculo)::text = 'S'::text) OR ((tiene_vehiculo)::text = 'N'::text))),
    CONSTRAINT personal_tipo_vivienda CHECK ((((((tipo_vivienda)::text = 'C'::text) OR ((tipo_vivienda)::text = 'A'::text)) OR ((tipo_vivienda)::text = 'H'::text)) OR ((tipo_vivienda)::text = 'B'::text)))
);


--
-- TOC entry 423 (class 1259 OID 3243192)
-- Name: personalorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE personalorganismo (
    id_personal_organismo integer NOT NULL,
    id_personal integer NOT NULL,
    id_organismo integer NOT NULL
);


--
-- TOC entry 424 (class 1259 OID 3243195)
-- Name: planadiestramiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planadiestramiento (
    id_plan_adiestramiento integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    numero_plan integer DEFAULT 1 NOT NULL,
    numero_participantes integer DEFAULT 1 NOT NULL,
    duracion integer DEFAULT 1 NOT NULL,
    costo_estimado double precision DEFAULT 0 NOT NULL,
    costo_aprobado double precision DEFAULT 0 NOT NULL,
    costo_real double precision DEFAULT 0 NOT NULL,
    trimestre integer DEFAULT 1 NOT NULL,
    id_unidad_funcional integer NOT NULL,
    id_area_conocimiento integer NOT NULL,
    nombre_curso character varying(90) NOT NULL,
    unidad_tiempo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    tipo_cargo character varying(1) DEFAULT '9'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    fecha_inicio date,
    interno_externo character varying(1) DEFAULT 'I'::character varying NOT NULL,
    nombre_entidad character varying(90),
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_tipo_curso integer NOT NULL,
    id_plan_personal integer,
    nivel character varying(1),
    CONSTRAINT plan_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT plan_estatus CHECK (((((estatus)::text = 'P'::text) OR ((estatus)::text = 'A'::text)) OR ((estatus)::text = 'E'::text))),
    CONSTRAINT plan_interno_externo CHECK ((((interno_externo)::text = 'I'::text) OR ((interno_externo)::text = 'E'::text))),
    CONSTRAINT plan_tipo_cargo CHECK ((((((((tipo_cargo)::text = '1'::text) OR ((tipo_cargo)::text = '2'::text)) OR ((tipo_cargo)::text = '3'::text)) OR ((tipo_cargo)::text = '4'::text)) OR ((tipo_cargo)::text = '5'::text)) OR ((tipo_cargo)::text = '9'::text))),
    CONSTRAINT plan_unidad_tiempo CHECK (((((((unidad_tiempo)::text = 'H'::text) OR ((unidad_tiempo)::text = 'D'::text)) OR ((unidad_tiempo)::text = 'S'::text)) OR ((unidad_tiempo)::text = 'M'::text)) OR ((unidad_tiempo)::text = 'A'::text)))
);


--
-- TOC entry 425 (class 1259 OID 3243216)
-- Name: planillaarc; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planillaarc (
    id_planilla_arc integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    devengado_enero double precision DEFAULT 0 NOT NULL,
    retencion_enero double precision DEFAULT 0 NOT NULL,
    porcentaje_enero double precision DEFAULT 0 NOT NULL,
    devengado_febrero double precision DEFAULT 0 NOT NULL,
    retencion_febrero double precision DEFAULT 0 NOT NULL,
    porcentaje_febrero double precision DEFAULT 0 NOT NULL,
    devengado_marzo double precision DEFAULT 0 NOT NULL,
    retencion_marzo double precision DEFAULT 0 NOT NULL,
    porcentaje_marzo double precision DEFAULT 0 NOT NULL,
    devengado_abril double precision DEFAULT 0 NOT NULL,
    retencion_abril double precision DEFAULT 0 NOT NULL,
    porcentaje_abril double precision DEFAULT 0 NOT NULL,
    devengado_mayo double precision DEFAULT 0 NOT NULL,
    retencion_mayo double precision DEFAULT 0 NOT NULL,
    porcentaje_mayo double precision DEFAULT 0 NOT NULL,
    devengado_junio double precision DEFAULT 0 NOT NULL,
    retencion_junio double precision DEFAULT 0 NOT NULL,
    porcentaje_junio double precision DEFAULT 0 NOT NULL,
    devengado_julio double precision DEFAULT 0 NOT NULL,
    retencion_julio double precision DEFAULT 0 NOT NULL,
    porcentaje_julio double precision DEFAULT 0 NOT NULL,
    devengado_agosto double precision DEFAULT 0 NOT NULL,
    retencion_agosto double precision DEFAULT 0 NOT NULL,
    porcentaje_agosto double precision DEFAULT 0 NOT NULL,
    devengado_septiembre double precision DEFAULT 0 NOT NULL,
    retencion_septiembre double precision DEFAULT 0 NOT NULL,
    porcentaje_septiembre double precision DEFAULT 0 NOT NULL,
    devengado_octubre double precision DEFAULT 0 NOT NULL,
    retencion_octubre double precision DEFAULT 0 NOT NULL,
    porcentaje_octubre double precision DEFAULT 0 NOT NULL,
    devengado_noviembre double precision DEFAULT 0 NOT NULL,
    retencion_noviembre double precision DEFAULT 0 NOT NULL,
    porcentaje_noviembre double precision DEFAULT 0 NOT NULL,
    devengado_diciembre double precision DEFAULT 0 NOT NULL,
    retencion_diciembre double precision DEFAULT 0 NOT NULL,
    porcentaje_diciembre double precision DEFAULT 0 NOT NULL,
    acumulado_sso double precision DEFAULT 0 NOT NULL,
    acumulado_spf double precision DEFAULT 0 NOT NULL,
    acumulado_lph double precision DEFAULT 0 NOT NULL,
    acumulado_hcm double precision DEFAULT 0 NOT NULL,
    acumulado_caja double precision DEFAULT 0 NOT NULL,
    acumulado_otros double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 426 (class 1259 OID 3243262)
-- Name: planillaari; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planillaari (
    id_planilla_ari integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    remuneraciones double precision DEFAULT 0 NOT NULL,
    desgravamenes double precision DEFAULT 0 NOT NULL,
    total_cargas integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion1 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion1 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion1 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion1 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion2 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion2 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion2 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion2 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion3 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion3 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion3 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion3 double precision DEFAULT 0 NOT NULL,
    remuneraciones_variacion4 double precision DEFAULT 0 NOT NULL,
    desgravamenes_variacion4 double precision DEFAULT 0 NOT NULL,
    total_cargas_variacion4 integer DEFAULT 0 NOT NULL,
    porcentaje_variacion4 double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 427 (class 1259 OID 3243285)
-- Name: planillames; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planillames (
    id_trabajador integer,
    devengado_enero double precision,
    devengado_febrero double precision,
    devengado_marzo double precision,
    devengado_abril double precision,
    devengado_mayo double precision,
    devengado_junio double precision,
    devengado_julio double precision,
    devengado_agosto double precision
);


--
-- TOC entry 428 (class 1259 OID 3243288)
-- Name: planpersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planpersonal (
    id_plan_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    version integer DEFAULT 1 NOT NULL,
    fecha_preparacion date NOT NULL,
    fecha_vigencia date NOT NULL,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    aprobo_rrhh character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobo_planificacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobo_presupuesto character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_finalizacion date NOT NULL,
    id_organismo integer NOT NULL,
    CONSTRAINT planpersonal_aprobo_planificacion CHECK ((((aprobo_planificacion)::text = 'S'::text) OR ((aprobo_planificacion)::text = 'N'::text))),
    CONSTRAINT planpersonal_aprobo_presupuesto CHECK ((((aprobo_presupuesto)::text = 'S'::text) OR ((aprobo_presupuesto)::text = 'N'::text))),
    CONSTRAINT planpersonal_aprobo_rrhh CHECK ((((aprobo_rrhh)::text = 'S'::text) OR ((aprobo_rrhh)::text = 'N'::text))),
    CONSTRAINT planpersonal_estatus CHECK (((((((estatus)::text = '0'::text) OR ((estatus)::text = '0'::text)) OR ((estatus)::text = '2'::text)) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text)))
);


--
-- TOC entry 429 (class 1259 OID 3243301)
-- Name: planpoliza; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE planpoliza (
    id_plan_poliza integer NOT NULL,
    cod_plan_poliza character varying(6) NOT NULL,
    nombre character varying(60) NOT NULL,
    beneficiarios character varying(1) DEFAULT 'S'::character varying NOT NULL,
    prima_unica character varying(1) DEFAULT 'N'::character varying NOT NULL,
    monto_prima_unica double precision DEFAULT 0 NOT NULL,
    cobertura_unica double precision DEFAULT 0 NOT NULL,
    exceso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_poliza integer NOT NULL,
    CONSTRAINT planpoliza_beneficiarios CHECK ((((beneficiarios)::text = 'S'::text) OR ((beneficiarios)::text = 'N'::text))),
    CONSTRAINT planpoliza_exceso CHECK ((((exceso)::text = 'S'::text) OR ((exceso)::text = 'N'::text))),
    CONSTRAINT planpoliza_prima_unica CHECK ((((prima_unica)::text = 'S'::text) OR ((prima_unica)::text = 'N'::text)))
);


--
-- TOC entry 430 (class 1259 OID 3243312)
-- Name: poliza; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE poliza (
    id_poliza integer NOT NULL,
    cod_poliza character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT 'H'::character varying NOT NULL,
    numero_poliza character varying(30) NOT NULL,
    aseguradora character varying(60) NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    permite_exceso character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT poliza_permite_exceso CHECK ((((permite_exceso)::text = 'S'::text) OR ((permite_exceso)::text = 'N'::text))),
    CONSTRAINT poliza_tipo CHECK ((((((((tipo)::text = 'H'::text) OR ((tipo)::text = 'V'::text)) OR ((tipo)::text = 'A'::text)) OR ((tipo)::text = 'C'::text)) OR ((tipo)::text = 'F'::text)) OR ((tipo)::text = 'O'::text)))
);


--
-- TOC entry 431 (class 1259 OID 3243321)
-- Name: postuladoconcurso; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE postuladoconcurso (
    id_postulado_concurso integer NOT NULL,
    id_concurso_cargo integer NOT NULL,
    id_personal integer,
    id_elegible integer,
    id_postulado_externo integer,
    cedula integer NOT NULL,
    estatus character varying(1) DEFAULT 'P'::character varying NOT NULL,
    origen character varying(1) DEFAULT 'I'::character varying NOT NULL,
    resultado integer NOT NULL,
    observacion text
);


--
-- TOC entry 432 (class 1259 OID 3243329)
-- Name: postuladoexterno; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE postuladoexterno (
    id_postulado_externo integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20) NOT NULL,
    primer_nombre character varying(20) NOT NULL,
    segundo_apellido character varying(20),
    segundo_nombre character varying(20),
    sexo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    nacionalidad character varying(1) DEFAULT 'V'::character varying NOT NULL,
    estado_civil character varying(1) DEFAULT 'S'::character varying NOT NULL,
    fecha_nacimiento date
);


--
-- TOC entry 433 (class 1259 OID 3243335)
-- Name: prestacionesmensuales; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE prestacionesmensuales (
    id_prestaciones_mensuales integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    dias_mensuales double precision DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    base_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    monto_prestaciones double precision DEFAULT 0,
    monto_adicional double precision DEFAULT 0,
    fideicomiso character varying(1) DEFAULT 'N'::character varying,
    dias_cancelados character varying(1) DEFAULT 'N'::character varying,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_personal integer
);


--
-- TOC entry 434 (class 1259 OID 3243346)
-- Name: prestacionesonapre; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE prestacionesonapre (
    id_prestaciones_onapre integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer NOT NULL,
    mes integer NOT NULL,
    fecha_prestaciones date,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    primas double precision DEFAULT 0,
    bono_fin_anio double precision DEFAULT 0,
    bono_vacacional double precision DEFAULT 0,
    otros double precision DEFAULT 0,
    sueldo_integral double precision DEFAULT 0,
    dias_mensuales double precision DEFAULT 5 NOT NULL,
    dias_adicionales integer NOT NULL,
    abono_mensual double precision DEFAULT 0,
    base_adicional double precision DEFAULT 0,
    abono_adicional double precision DEFAULT 0
);


--
-- TOC entry 435 (class 1259 OID 3243360)
-- Name: prestamo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE prestamo (
    id_prestamo integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    monto_prestamo double precision DEFAULT 0 NOT NULL,
    monto_cuota double precision DEFAULT 0 NOT NULL,
    monto_pagado double precision DEFAULT 0 NOT NULL,
    numero_cuotas integer DEFAULT 0 NOT NULL,
    cuotas_pagadas integer DEFAULT 0 NOT NULL,
    fecha_otorgo date,
    fecha_comienzo_pago date,
    fecha_registro date,
    documento_soporte character varying(10),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


--
-- TOC entry 436 (class 1259 OID 3243369)
-- Name: presupuestoespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE presupuestoespecifica (
    id_presupuesto_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    monto_presupuestado double precision DEFAULT 0,
    monto_ejecutado double precision DEFAULT 0
);


--
-- TOC entry 437 (class 1259 OID 3243375)
-- Name: primaantiguedad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE primaantiguedad (
    id_prima_antiguedad integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    tipo character varying(1) DEFAULT 'F'::character varying NOT NULL,
    operacion character varying(1) DEFAULT 'M'::character varying NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT primaantiguedad_operacion CHECK (((((operacion)::text = 'I'::text) OR ((operacion)::text = 'M'::text)) OR ((operacion)::text = 'F'::text))),
    CONSTRAINT primaantiguedad_tipo CHECK ((((tipo)::text = 'P'::text) OR ((tipo)::text = 'F'::text)))
);


--
-- TOC entry 438 (class 1259 OID 3243386)
-- Name: primahijo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE primahijo (
    id_prima_hijo integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    edad_minima integer DEFAULT 0,
    edad_maxima integer DEFAULT 18,
    edad_excepcional integer DEFAULT 99,
    monto double precision DEFAULT 0 NOT NULL,
    edad_estudiante integer DEFAULT 25,
    numero_maximo_hijos integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 439 (class 1259 OID 3243396)
-- Name: primascargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE primascargo (
    id_primas_cargo integer NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    id_cargo integer NOT NULL,
    id_primas_plan integer NOT NULL
);


--
-- TOC entry 440 (class 1259 OID 3243401)
-- Name: primasplan; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE primasplan (
    id_primas_plan integer NOT NULL,
    parentesco character varying(1) DEFAULT 'T'::character varying NOT NULL,
    edad_minima integer DEFAULT 0 NOT NULL,
    edad_maxima integer DEFAULT 0 NOT NULL,
    prima_femenino double precision DEFAULT 0 NOT NULL,
    prima_masculino double precision DEFAULT 0 NOT NULL,
    porcentaje_patron double precision DEFAULT 0 NOT NULL,
    porcentaje_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura_parentesco double precision DEFAULT 0 NOT NULL,
    maximo_beneficiarios integer DEFAULT 0 NOT NULL,
    id_plan_poliza integer NOT NULL,
    CONSTRAINT primasplan_parentesco CHECK (((((((((((((parentesco)::text = 'C'::text) OR ((parentesco)::text = 'M'::text)) OR ((parentesco)::text = 'P'::text)) OR ((parentesco)::text = 'H'::text)) OR ((parentesco)::text = 'S'::text)) OR ((parentesco)::text = 'E'::text)) OR ((parentesco)::text = 'A'::text)) OR ((parentesco)::text = 'B'::text)) OR ((parentesco)::text = 'I'::text)) OR ((parentesco)::text = 'T'::text)) OR ((parentesco)::text = 'O'::text)))
);


--
-- TOC entry 441 (class 1259 OID 3243414)
-- Name: profesion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE profesion (
    id_profesion integer NOT NULL,
    cod_profesion character varying(6) NOT NULL,
    nombre character varying(90) NOT NULL,
    id_subgrupo_profesion integer NOT NULL
);


--
-- TOC entry 442 (class 1259 OID 3243417)
-- Name: profesioncargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE profesioncargo (
    id_profesion_cargo integer NOT NULL,
    id_cargo integer NOT NULL,
    id_profesion integer NOT NULL,
    anios_graduado integer DEFAULT 0 NOT NULL,
    peso double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 443 (class 1259 OID 3243423)
-- Name: profesiontrabajador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE profesiontrabajador (
    id_profesion_trabajador integer NOT NULL,
    id_profesion integer NOT NULL,
    id_personal integer NOT NULL,
    actualmente character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    CONSTRAINT profesiontrabajador_actualmente CHECK ((((actualmente)::text = 'S'::text) OR ((actualmente)::text = 'N'::text)))
);


--
-- TOC entry 444 (class 1259 OID 3243429)
-- Name: programa; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE programa (
    id_programa integer NOT NULL,
    id_organismo integer NOT NULL,
    cod_programa character varying(2) NOT NULL,
    nombre character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    id_unidad_administradora integer
);


--
-- TOC entry 445 (class 1259 OID 3243433)
-- Name: proveedorregion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE proveedorregion (
    id_proveedor_region integer NOT NULL,
    id_proveedor_ticket integer DEFAULT 0 NOT NULL,
    id_region integer DEFAULT 0 NOT NULL,
    cod_ticket character varying(6) NOT NULL
);


--
-- TOC entry 446 (class 1259 OID 3243438)
-- Name: proveedorticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE proveedorticket (
    id_proveedor_ticket integer NOT NULL,
    cod_proveedor_ticket character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    direccion text
);


--
-- TOC entry 447 (class 1259 OID 3243444)
-- Name: proveedorubicacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE proveedorubicacion (
    id_proveedor_ubicacion integer NOT NULL,
    id_proveedor_ticket integer NOT NULL,
    codigo_ubicacion character varying(15) NOT NULL,
    observaciones text
);


--
-- TOC entry 448 (class 1259 OID 3243450)
-- Name: proyeccion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE proyeccion (
    id_aplicar_tabulador integer,
    fecha_proceso date,
    grado_actual integer,
    paso_actual integer,
    sueldo_actual double precision,
    ajuste_actual double precision,
    compensacion_actual double precision,
    paso_nuevo integer,
    sueldo_nuevo double precision,
    ajuste_nuevo double precision,
    compensacion_nueva double precision,
    id_trabajador integer,
    monto_retroactivo double precision,
    dias_retroactivo integer,
    base_aumento double precision,
    prima_profesional_actual double precision DEFAULT 0,
    prima_profesional_nueva double precision DEFAULT 0,
    prima_razones_servicio_actual double precision DEFAULT 0,
    prima_razones_servicio_nueva double precision DEFAULT 0,
    bono_comp_jext1_actual double precision DEFAULT 0,
    bono_comp_jext1_nueva double precision DEFAULT 0,
    bono_comp_jext2_actual double precision DEFAULT 0,
    bono_comp_jext2_nueva double precision DEFAULT 0,
    bono_comp_jext3_actual double precision DEFAULT 0,
    bono_comp_jext3_nueva double precision DEFAULT 0,
    retroactivo_sueldo double precision DEFAULT 0,
    retroactivo_compensacion double precision DEFAULT 0,
    cedula integer,
    primer_apellido character varying(25),
    primer_nombre character varying(50),
    coduel character varying(6)
);


--
-- TOC entry 449 (class 1259 OID 3243465)
-- Name: proyecto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE proyecto (
    id_proyecto integer NOT NULL,
    anio integer NOT NULL,
    cod_proyecto character varying(4) NOT NULL,
    enunciado character varying(80),
    descripcion text,
    objetivo_estrategico text,
    objetivos_especificos text,
    resultado text,
    meta double precision DEFAULT 0 NOT NULL,
    estatus character varying(1) DEFAULT 'I'::character varying NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    fecha_suspension date,
    id_ciudad integer,
    id_municipio integer,
    id_organismo integer NOT NULL,
    CONSTRAINT proyecto_estatus CHECK (((((estatus)::text = 'I'::text) OR ((estatus)::text = 'R'::text)) OR ((estatus)::text = 'E'::text)))
);


--
-- TOC entry 450 (class 1259 OID 3243474)
-- Name: pruebapreseleccionado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pruebapreseleccionado (
    id_prueba_preseleccionado integer NOT NULL,
    id_postulado_concurso integer NOT NULL,
    id_prueba_seleccion integer NOT NULL,
    resultado double precision DEFAULT 0 NOT NULL,
    entrevistador character varying(60),
    fecha date,
    observaciones text
);


--
-- TOC entry 451 (class 1259 OID 3243481)
-- Name: pruebaseleccion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE pruebaseleccion (
    id_prueba_seleccion integer NOT NULL,
    cod_prueba character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 452 (class 1259 OID 3243484)
-- Name: publicacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE publicacion (
    id_publicacion integer DEFAULT 0 NOT NULL,
    anio_publicacion integer NOT NULL,
    editorial character varying(60),
    propiedad_intelectual character varying(25),
    titulo text,
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 453 (class 1259 OID 3243492)
-- Name: puebloindigena; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE puebloindigena (
    id_pueblo_indigena integer NOT NULL,
    cod_pueblo_indigena character varying(6) NOT NULL,
    descripcion character varying(100) NOT NULL
);


--
-- TOC entry 454 (class 1259 OID 3243495)
-- Name: ramoocupacional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ramoocupacional (
    id_ramo_ocupacional integer NOT NULL,
    cod_ramo_ocupacional character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 455 (class 1259 OID 3243499)
-- Name: reconocimiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE reconocimiento (
    id_reconocimiento integer NOT NULL,
    observaciones character varying(254),
    fecha date NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_reconocimiento integer NOT NULL,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 456 (class 1259 OID 3243503)
-- Name: region; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE region (
    id_region integer NOT NULL,
    cod_region character varying(2) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 457 (class 1259 OID 3243506)
-- Name: regioncontinente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE regioncontinente (
    id_region_continente integer NOT NULL,
    abreviatura character varying(3),
    cod_region_continente character varying(2) NOT NULL,
    nombre character varying(40) NOT NULL,
    id_continente integer NOT NULL
);


--
-- TOC entry 458 (class 1259 OID 3243509)
-- Name: registro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registro (
    id_registro integer NOT NULL,
    numero_registro integer NOT NULL,
    nombre character varying(60) NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_grupo_organismo integer,
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    anio integer DEFAULT 0,
    fecha_vigencia date NOT NULL,
    CONSTRAINT registro_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text)))
);


--
-- TOC entry 459 (class 1259 OID 3243516)
-- Name: registrocargos; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registrocargos (
    id_registro_cargos integer NOT NULL,
    id_registro integer NOT NULL,
    codigo_nomina integer NOT NULL,
    situacion character varying(1) DEFAULT 'O'::character varying NOT NULL,
    estatus character varying(1) DEFAULT '4'::character varying NOT NULL,
    condicion character varying(1) DEFAULT '1'::character varying NOT NULL,
    fecha_creacion date,
    horas double precision DEFAULT 8 NOT NULL,
    reporta_rac integer DEFAULT 1 NOT NULL,
    id_trabajador integer,
    convenio_gremial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_gremio integer,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_sede integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    primas_cargo double precision DEFAULT 0,
    primas_trabajador double precision DEFAULT 0,
    aprobado_mpd character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT registrocargos_condicion CHECK ((((((((condicion)::text = '1'::text) OR ((condicion)::text = '2'::text)) OR ((condicion)::text = '3'::text)) OR ((condicion)::text = '4'::text)) OR ((condicion)::text = '5'::text)) OR ((condicion)::text = '6'::text))),
    CONSTRAINT registrocargos_convenio_gremial CHECK ((((convenio_gremial)::text = 'S'::text) OR ((convenio_gremial)::text = 'N'::text))),
    CONSTRAINT registrocargos_estatus CHECK (((((((estatus)::text = '0'::text) OR ((estatus)::text = '1'::text)) OR ((estatus)::text = '2'::text)) OR ((estatus)::text = '3'::text)) OR ((estatus)::text = '4'::text))),
    CONSTRAINT registrocargos_situacion CHECK ((((situacion)::text = 'O'::text) OR ((situacion)::text = 'V'::text)))
);


--
-- TOC entry 460 (class 1259 OID 3243535)
-- Name: registrocargosaprobado; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registrocargosaprobado (
    id_registro_cargos_aprobado integer NOT NULL,
    id_registro integer NOT NULL,
    id_plan_personal integer NOT NULL,
    codigo_nomina integer NOT NULL,
    accion character varying(1) DEFAULT '1'::character varying NOT NULL,
    estatus character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_accion date,
    horas double precision DEFAULT 8 NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_region integer NOT NULL
);


--
-- TOC entry 461 (class 1259 OID 3243541)
-- Name: registrodocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registrodocente (
    id_registro_docente integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_cargo integer NOT NULL,
    id_dependencia integer NOT NULL,
    id_apertura_escolar integer,
    situacion character varying(1) NOT NULL,
    origen character varying(1) NOT NULL,
    horas_administrativas double precision DEFAULT 0,
    horas_docente double precision DEFAULT 0,
    total_horas double precision DEFAULT 0,
    horas_restante double precision DEFAULT 0
);


--
-- TOC entry 462 (class 1259 OID 3243548)
-- Name: registropersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registropersonal (
    id_registro_personal integer NOT NULL,
    id_registro integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 463 (class 1259 OID 3243552)
-- Name: registrositp; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE registrositp (
    id_registro_sitp integer NOT NULL,
    fecha_registro date,
    fecha_movimiento date NOT NULL,
    codigo_nomina integer DEFAULT 0 NOT NULL,
    sueldo double precision DEFAULT 0 NOT NULL,
    compensacion double precision DEFAULT 0 NOT NULL,
    primas_cargo double precision DEFAULT 0 NOT NULL,
    primas_trabajador double precision DEFAULT 0 NOT NULL,
    grado integer DEFAULT 0 NOT NULL,
    paso integer DEFAULT 1 NOT NULL,
    cod_dependencia character varying(12),
    cod_sede character varying(6),
    tipo_personal character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_tipo_personal character varying(60),
    id_clasificacion_personal integer,
    id_causa_movimiento integer,
    cod_causa_movimiento character varying(3),
    cod_manual_cargo integer,
    cod_cargo character varying(8),
    descripcion_cargo character varying(60) NOT NULL,
    cod_tabulador character varying(6),
    afecta_sueldo character varying(1) DEFAULT 'S'::character varying NOT NULL,
    documento_soporte character varying(25),
    localidad character varying(1) DEFAULT 'C'::character varying NOT NULL,
    numero_movimiento integer DEFAULT 0 NOT NULL,
    cedula integer NOT NULL,
    apellidos_nombres character varying(60),
    id_personal integer NOT NULL,
    id_remesa integer,
    estatus character varying(1) DEFAULT '0'::character varying NOT NULL,
    nombre_dependencia character varying(90),
    nombre_sede character varying(90),
    id_organismo integer NOT NULL,
    cod_organismo character varying(4),
    cod_organismo_mpd character varying(10),
    nombre_organismo character varying(90),
    observaciones text,
    id_usuario integer NOT NULL,
    estatus_mpd character varying(1),
    codigo_devolucion character varying(3),
    analista_mpd character varying(25),
    id_analista_mpd integer,
    fecha_inicio_mpd date,
    fecha_fin_mpd date,
    observaciones_mpd text,
    cod_region character varying(2),
    nombre_region character varying(90),
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    fecha_punto_cuenta date,
    punto_cuenta character varying(15),
    anio integer DEFAULT 0 NOT NULL,
    anterior_cod_manual_cargo integer,
    anterior_cod_cargo character varying(6),
    anterior_descripcion_cargo character varying(60),
    anterior_codigo_nomina integer DEFAULT 0,
    anterior_cod_sede character varying(6),
    anterior_nombre_sede character varying(90),
    anterior_cod_dependencia character varying(12),
    anterior_nombre_dependencia character varying(90),
    anterior_sueldo double precision DEFAULT 0,
    anterior_compensacion double precision DEFAULT 0,
    anterior_primas_cargo double precision DEFAULT 0,
    anterior_primas_trabajador double precision DEFAULT 0,
    anterior_grado integer DEFAULT 0,
    anterior_paso integer DEFAULT 1,
    anterior_cod_region character varying(2),
    anterior_nombre_region character varying(90),
    cod_concurso character varying(15),
    fecha_ingreso date,
    id_turno integer,
    fecha_culminacion date,
    CONSTRAINT registrositp_afecta_sueld CHECK ((((afecta_sueldo)::text = 'S'::text) OR ((afecta_sueldo)::text = 'N'::text))),
    CONSTRAINT registrositp_localidad CHECK ((((localidad)::text = 'C'::text) OR ((localidad)::text = 'R'::text)))
);


--
-- TOC entry 464 (class 1259 OID 3243581)
-- Name: relacionpersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE relacionpersonal (
    id_relacion_personal integer NOT NULL,
    cod_relacion character varying(1) NOT NULL,
    desc_relacion character varying(20) NOT NULL
);


--
-- TOC entry 465 (class 1259 OID 3243584)
-- Name: remesa; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE remesa (
    id_remesa integer NOT NULL,
    anio integer NOT NULL,
    numero integer NOT NULL,
    fecha_creacion date,
    fecha_cierre date,
    fecha_envio date,
    estatus character varying(1),
    observaciones text,
    id_organismo integer NOT NULL,
    id_usuario integer NOT NULL,
    id_sitp integer,
    tiempo_sitp date
);


--
-- TOC entry 466 (class 1259 OID 3243590)
-- Name: rendicionmensual; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rendicionmensual (
    id_rendicion_mensual integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    id_encabezado_rendicion_mensual integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    quincena integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    cod_unidad_ejecutora character varying(6) NOT NULL,
    cod_presupuesto character varying(20) NOT NULL
);


--
-- TOC entry 467 (class 1259 OID 3243596)
-- Name: restringido; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE restringido (
    id_restringido integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_personal_restringido integer NOT NULL
);


--
-- TOC entry 468 (class 1259 OID 3243599)
-- Name: resultadoevaluacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE resultadoevaluacion (
    id_resultado_evaluacion integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    cod_resultado_evaluacion character varying(2) NOT NULL,
    descripcion character varying(80) NOT NULL,
    rango_minimo double precision DEFAULT 0 NOT NULL,
    rango_maximo double precision DEFAULT 0 NOT NULL,
    porcentaje_aumento double precision DEFAULT 0 NOT NULL,
    numero_pasos integer DEFAULT 0 NOT NULL,
    monto_aumentar double precision DEFAULT 0 NOT NULL,
    monto_unico double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 469 (class 1259 OID 3243609)
-- Name: resumenmensual; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE resumenmensual (
    id_resumen_mensual integer NOT NULL,
    id_unidad_administradora integer NOT NULL,
    id_encabezado_resumen_mensual integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_cuenta_presupuesto integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    monto double precision DEFAULT 0 NOT NULL,
    quincena integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    cod_concepto character varying(4) NOT NULL,
    cod_unidad_ejecutora character varying(6) NOT NULL,
    cod_presupuesto character varying(20) NOT NULL
);


--
-- TOC entry 470 (class 1259 OID 3243615)
-- Name: resumennuevoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE resumennuevoregimen (
    id_resumen_nuevo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    monto_prestaciones_acumuladas double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_fideicomiso_acumulado double precision DEFAULT 0 NOT NULL,
    dias_mensuales integer DEFAULT 0 NOT NULL,
    dias_adicionales integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 471 (class 1259 OID 3243624)
-- Name: resumenviejoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE resumenviejoregimen (
    id_resumen_viejo_regimen integer NOT NULL,
    id_trabajador integer NOT NULL,
    sueldo_transferencia double precision DEFAULT 0 NOT NULL,
    aniosservicios integer DEFAULT 0 NOT NULL,
    monto_prestaciones double precision DEFAULT 0 NOT NULL,
    monto_interes_acumulado double precision DEFAULT 0 NOT NULL,
    monto_anticipo_acumulado double precision DEFAULT 0 NOT NULL,
    monto_transferencia double precision DEFAULT 0 NOT NULL,
    saldo_al_18061997 double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 472 (class 1259 OID 3243634)
-- Name: retroactivoticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE retroactivoticket (
    id_retroactivo_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    anio_proceso integer DEFAULT 0 NOT NULL,
    mes_proceso integer DEFAULT 0 NOT NULL,
    numero_tickets integer DEFAULT 0 NOT NULL,
    observaciones character varying(80) NOT NULL,
    id_trabajador integer DEFAULT 0 NOT NULL,
    id_denominacion_ticket integer DEFAULT 0 NOT NULL,
    pagado character varying(1) DEFAULT 'N'::character varying
);


--
-- TOC entry 473 (class 1259 OID 3243645)
-- Name: rol; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rol (
    id_rol integer NOT NULL,
    codigo_rol character varying(4) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 474 (class 1259 OID 3243648)
-- Name: rolopcion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE rolopcion (
    id_rol_opcion integer NOT NULL,
    id_rol integer NOT NULL,
    id_opcion integer NOT NULL,
    consultar character varying(1),
    agregar character varying(1),
    modificar character varying(1),
    eliminar character varying(1),
    ejecutar character varying(1),
    CONSTRAINT rolopcion_agregar CHECK ((((agregar)::text = 'S'::text) OR ((agregar)::text = 'N'::text))),
    CONSTRAINT rolopcion_consultar CHECK ((((consultar)::text = 'S'::text) OR ((consultar)::text = 'N'::text))),
    CONSTRAINT rolopcion_ejecutar CHECK ((((ejecutar)::text = 'S'::text) OR ((ejecutar)::text = 'N'::text))),
    CONSTRAINT rolopcion_eliminar CHECK ((((eliminar)::text = 'S'::text) OR ((eliminar)::text = 'N'::text))),
    CONSTRAINT rolopcion_modificar CHECK ((((modificar)::text = 'S'::text) OR ((modificar)::text = 'N'::text)))
);


--
-- TOC entry 475 (class 1259 OID 3243656)
-- Name: sancion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sancion (
    id_sancion integer NOT NULL,
    acta character varying(20),
    fecha date NOT NULL,
    observaciones text,
    id_personal integer NOT NULL,
    id_tipo_amonestacion integer NOT NULL,
    nombre_supervisor character varying(50),
    cargo_supervisor character varying(60),
    cargo_trabajador character varying(60),
    nombre_dependencia character varying(100),
    id_organismo integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 476 (class 1259 OID 3243663)
-- Name: sede; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sede (
    id_sede integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_cesta character varying(10),
    cod_sede character varying(6) NOT NULL,
    direccion character varying(100) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90),
    id_region integer,
    id_lugar_pago integer,
    id_turno integer,
    riesgo character varying(1) DEFAULT '1'::character varying,
    regimen character varying(1) DEFAULT 'I'::character varying,
    codigo_patronal character varying(10)
);


--
-- TOC entry 477 (class 1259 OID 3243668)
-- Name: sedediplomatica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sedediplomatica (
    id_sede_diplomatica integer NOT NULL,
    id_ciudad integer NOT NULL,
    cod_sede character varying(3) NOT NULL,
    nombre character varying(90) NOT NULL,
    id_tipo_sede integer NOT NULL,
    cod_viejo character varying(10),
    cod_biblio character varying(15),
    direccion text,
    telefono1 character varying(15),
    telefono2 character varying(15),
    fax character varying(15),
    email character varying(60),
    observacion text
);


--
-- TOC entry 478 (class 1259 OID 3243674)
-- Name: seguridadaniversario; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadaniversario (
    id_seguridad_aniversario integer NOT NULL,
    fecha_ultimo date,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL,
    id_concepto integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 479 (class 1259 OID 3243679)
-- Name: seguridadausencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadausencia (
    id_seguridad_ausencia integer NOT NULL,
    id_grupo_ticket integer,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 480 (class 1259 OID 3243684)
-- Name: seguridaddocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridaddocente (
    id_seguridad_docente integer NOT NULL,
    mes integer NOT NULL,
    anio integer NOT NULL,
    cerrado character varying(1) DEFAULT 'N'::character varying,
    fecha_cierre date
);


--
-- TOC entry 481 (class 1259 OID 3243688)
-- Name: seguridadespecial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadespecial (
    id_seguridad_especial integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_nomina_especial integer DEFAULT 0 NOT NULL,
    id_grupo_nomina integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 482 (class 1259 OID 3243696)
-- Name: seguridadguarderia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadguarderia (
    id_seguridad_guarderia integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 483 (class 1259 OID 3243702)
-- Name: seguridadinteresadicional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadinteresadicional (
    id_seguridad_interes_adicional integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_aplicada double precision,
    fecha_proceso date,
    usuario character varying(25) NOT NULL
);


--
-- TOC entry 484 (class 1259 OID 3243707)
-- Name: seguridadnuevoregimen; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadnuevoregimen (
    id_seguridad_nuevo_regimen integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_aplicada double precision,
    fecha_proceso date,
    usuario character varying(25) NOT NULL
);


--
-- TOC entry 485 (class 1259 OID 3243712)
-- Name: seguridadordinaria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadordinaria (
    id_seguridad_ordinaria integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_inicio date,
    fecha_fin date,
    semana_quincena integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_grupo_nomina integer DEFAULT 0 NOT NULL,
    cierre_diplomatico character varying(1) DEFAULT 'N'::character varying NOT NULL
);


--
-- TOC entry 486 (class 1259 OID 3243720)
-- Name: seguridadprestaciones; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadprestaciones (
    id_seguridad_prestaciones integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 487 (class 1259 OID 3243726)
-- Name: seguridadpresupuesto; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadpresupuesto (
    id_seguridad_presupuesto integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    fecha_cierre date,
    usuario character varying(25) NOT NULL,
    id_categoria_presupuesto integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 488 (class 1259 OID 3243732)
-- Name: seguridadticket; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadticket (
    id_seguridad_ticket integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    especial character varying(1) DEFAULT 'N'::character varying NOT NULL,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_grupo_ticket integer,
    CONSTRAINT seguridadticket_especial CHECK ((((especial)::text = 'S'::text) OR ((especial)::text = 'N'::text)))
);


--
-- TOC entry 489 (class 1259 OID 3243739)
-- Name: seguridadvacacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seguridadvacacion (
    id_seguridad_vacacion integer NOT NULL,
    fecha_ultimo date,
    fecha_proceso date,
    usuario character varying(25) NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 490 (class 1259 OID 3243743)
-- Name: semana; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE semana (
    id_semana integer NOT NULL,
    anio integer NOT NULL,
    semana_anio integer NOT NULL,
    semana_mes integer NOT NULL,
    mes character varying(2) DEFAULT '1'::character varying NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date NOT NULL,
    id_grupo_nomina integer NOT NULL,
    CONSTRAINT semana_mes CHECK ((((((((((((((mes)::text = '1'::text) OR ((mes)::text = '2'::text)) OR ((mes)::text = '3'::text)) OR ((mes)::text = '4'::text)) OR ((mes)::text = '5'::text)) OR ((mes)::text = '6'::text)) OR ((mes)::text = '7'::text)) OR ((mes)::text = '8'::text)) OR ((mes)::text = '9'::text)) OR ((mes)::text = '10'::text)) OR ((mes)::text = '11'::text)) OR ((mes)::text = '12'::text)))
);


--
-- TOC entry 491 (class 1259 OID 3243748)
-- Name: seriecargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE seriecargo (
    id_serie_cargo integer NOT NULL,
    cod_serie_cargo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    id_grupo_ocupacional integer DEFAULT 0,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 492 (class 1259 OID 3243753)
-- Name: servicioexterior; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE servicioexterior (
    id_servicio_exterior integer NOT NULL,
    id_cargo integer,
    fecha_fin date,
    fecha_inicio date NOT NULL,
    id_personal integer NOT NULL,
    id_sede_diplomatica integer NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date
);


--
-- TOC entry 493 (class 1259 OID 3243757)
-- Name: sindicato; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sindicato (
    id_sindicato integer NOT NULL,
    cod_sindicato character varying(10) NOT NULL,
    nombre character varying(80) NOT NULL,
    id_concepto integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 494 (class 1259 OID 3243761)
-- Name: siniestro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE siniestro (
    id_siniestro integer NOT NULL,
    fecha_siniestro date NOT NULL,
    fecha_reporte date,
    fecha_recepcion date,
    fecha_cierre date,
    estatus character varying(1) NOT NULL,
    monto_reclamo double precision DEFAULT 0,
    monto_pagado double precision DEFAULT 0,
    observaciones text,
    id_plan_poliza integer NOT NULL,
    id_beneficiario integer,
    id_titular integer,
    id_personal integer NOT NULL,
    id_establecimiento_salud integer
);


--
-- TOC entry 495 (class 1259 OID 3243769)
-- Name: sobreviviente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sobreviviente (
    id_sobreviviente integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    fecha_pension date NOT NULL,
    porcentaje_pension_original double precision DEFAULT 0,
    monto_pension_original double precision DEFAULT 0,
    monto_pension_actual double precision DEFAULT 0,
    situacion character varying(1),
    observacion character varying(400)
);


--
-- TOC entry 496 (class 1259 OID 3243775)
-- Name: subgrupoprofesion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE subgrupoprofesion (
    id_subgrupo_profesion integer NOT NULL,
    id_grupo_profesion integer NOT NULL,
    cod_subgrupo_profesion character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    descripcion character varying(400) NOT NULL
);


--
-- TOC entry 497 (class 1259 OID 3243778)
-- Name: subsistema; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE subsistema (
    id_subsistema integer NOT NULL,
    cod_subsistema character varying(3) NOT NULL,
    descripcion character varying(80) NOT NULL
);


--
-- TOC entry 498 (class 1259 OID 3243781)
-- Name: subtipocredencial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE subtipocredencial (
    id_subtipo_credencial integer NOT NULL,
    id_tipo_credencial integer NOT NULL,
    cod_subtipo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 499 (class 1259 OID 3243784)
-- Name: subtipodotacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE subtipodotacion (
    id_subtipo_dotacion integer NOT NULL,
    id_tipo_dotacion integer NOT NULL,
    cod_subtipo character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    sexo character varying(1) DEFAULT 'M'::character varying NOT NULL,
    costo double precision DEFAULT 0 NOT NULL,
    color character varying(20),
    CONSTRAINT subtipodotacion_sexo CHECK (((((sexo)::text = 'F'::text) OR ((sexo)::text = 'M'::text)) OR ((sexo)::text = 'A'::text)))
);


--
-- TOC entry 500 (class 1259 OID 3243790)
-- Name: sueldopromedio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE sueldopromedio (
    id_sueldo_promedio integer NOT NULL,
    id_trabajador integer NOT NULL,
    promedio_integral double precision DEFAULT 0 NOT NULL,
    promedio_sueldo double precision DEFAULT 0 NOT NULL,
    sueldo_anual double precision DEFAULT 0 NOT NULL,
    promedio_sso double precision DEFAULT 0 NOT NULL,
    retencion_sso double precision DEFAULT 0 NOT NULL,
    retencion_spf double precision DEFAULT 0 NOT NULL,
    promedio_lph double precision DEFAULT 0 NOT NULL,
    retencion_lph double precision DEFAULT 0 NOT NULL,
    retencion_fju double precision DEFAULT 0 NOT NULL,
    promedio_fju double precision DEFAULT 0 NOT NULL,
    promedio_vacaciones double precision DEFAULT 0 NOT NULL,
    promedio_utilidad double precision DEFAULT 0 NOT NULL,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    aporte_sso double precision DEFAULT 0,
    aporte_spf double precision DEFAULT 0,
    aporte_lph double precision DEFAULT 0,
    aporte_fju double precision DEFAULT 0,
    promedio_ajustes double precision DEFAULT 0,
    promedio_compensacion double precision DEFAULT 0,
    promedio_primasc double precision DEFAULT 0,
    promedio_primast double precision DEFAULT 0,
    promedio_spf double precision,
    monto_variable_sso double precision DEFAULT 0 NOT NULL,
    monto_variable_lph double precision DEFAULT 0 NOT NULL,
    monto_variable_fju double precision DEFAULT 0 NOT NULL,
    id_tipo_personal integer DEFAULT 0,
    id_grupo_nomina integer DEFAULT 0
);


--
-- TOC entry 501 (class 1259 OID 3243819)
-- Name: suplencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE suplencia (
    id_suplencia integer DEFAULT 0 NOT NULL,
    fecha_inicio date NOT NULL,
    fecha_fin date,
    persona_suplencia character varying(40),
    motivo_suplencia character varying(40),
    cargo character varying(60) NOT NULL,
    dependencia character varying(90),
    id_personal integer NOT NULL,
    observaciones text,
    id_sitp integer DEFAULT 0 NOT NULL,
    tiempo_sitp date,
    organismo character varying(90)
);


--
-- TOC entry 502 (class 1259 OID 3243827)
-- Name: tabulador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tabulador (
    id_tabulador integer NOT NULL,
    cod_tabulador character varying(6) NOT NULL,
    descripcion character varying(60) NOT NULL,
    fecha_vigencia date,
    indicador_paso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL,
    tipo_tabulador character varying(1) DEFAULT '1'::character varying,
    nombre_moneda character varying(30),
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT tabulador_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT tabulador_indicador_paso CHECK ((((indicador_paso)::text = 'S'::text) OR ((indicador_paso)::text = 'N'::text)))
);


--
-- TOC entry 503 (class 1259 OID 3243837)
-- Name: tarifaari; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tarifaari (
    id_tarifa_ari integer NOT NULL,
    tarifa double precision DEFAULT 0 NOT NULL,
    sustraendo double precision DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 504 (class 1259 OID 3243843)
-- Name: tasabcv; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tasabcv (
    id_tasa_bcv integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    mes integer DEFAULT 0 NOT NULL,
    tasa_promedio double precision DEFAULT 0 NOT NULL,
    tasa_activa double precision DEFAULT 0 NOT NULL,
    tasa_fideicomiso double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 505 (class 1259 OID 3243851)
-- Name: tesomercantil; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tesomercantil (
    cuenta character varying(20),
    cedula integer
);


--
-- TOC entry 506 (class 1259 OID 3243854)
-- Name: tipoacreencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipoacreencia (
    id_tipo_acreencia integer NOT NULL,
    cod_tipo_acreencia character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 507 (class 1259 OID 3243857)
-- Name: tipoamonestacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipoamonestacion (
    id_tipo_amonestacion integer NOT NULL,
    cod_tipo_amonestacion character varying(3) NOT NULL,
    descripcion character varying(90)
);


--
-- TOC entry 508 (class 1259 OID 3243860)
-- Name: tipoausencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipoausencia (
    id_tipo_ausencia integer NOT NULL,
    cod_tipo_ausencia character varying(2) NOT NULL,
    clase character varying(1) DEFAULT 'I'::character varying NOT NULL,
    descripcion character varying(60) NOT NULL,
    CONSTRAINT tipoausencia_clase CHECK ((((((clase)::text = 'J'::text) OR ((clase)::text = 'I'::text)) OR ((clase)::text = 'P'::text)) OR ((clase)::text = 'R'::text)))
);


--
-- TOC entry 509 (class 1259 OID 3243865)
-- Name: tipocaracteristica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipocaracteristica (
    id_tipo_caracteristica integer NOT NULL,
    cod_tipo_caracteristica character varying(2) NOT NULL,
    nombre character varying(60)
);


--
-- TOC entry 510 (class 1259 OID 3243868)
-- Name: tipocargo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipocargo (
    tipo_cargo character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 511 (class 1259 OID 3243871)
-- Name: tipocontrato; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipocontrato (
    id_tipo_contrato integer NOT NULL,
    cod_tipo_contrato character varying(6) NOT NULL,
    descripcion character varying(90) NOT NULL
);


--
-- TOC entry 512 (class 1259 OID 3243874)
-- Name: tipocredencial; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipocredencial (
    id_tipo_credencial integer NOT NULL,
    cod_tipo_credencial character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 513 (class 1259 OID 3243877)
-- Name: tipocurso; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipocurso (
    id_tipo_curso integer NOT NULL,
    cod_tipo_curso character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 514 (class 1259 OID 3243880)
-- Name: tipodependencia; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipodependencia (
    id_tipo_dependencia integer NOT NULL,
    cod_tipo_dependencia character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 515 (class 1259 OID 3243883)
-- Name: tipodotacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipodotacion (
    id_tipo_dotacion integer NOT NULL,
    cod_tipo_dotacion character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 516 (class 1259 OID 3243886)
-- Name: tipoentidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipoentidad (
    id_tipo_entidad integer NOT NULL,
    cod_tipo_entidad character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 517 (class 1259 OID 3243889)
-- Name: tipohabilidad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipohabilidad (
    id_tipo_habilidad integer NOT NULL,
    cod_tipo_habilidad character varying(3) NOT NULL,
    detalle text,
    descripcion character varying(90)
);


--
-- TOC entry 518 (class 1259 OID 3243895)
-- Name: tipoidioma; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipoidioma (
    id_tipo_idioma integer NOT NULL,
    cod_tipo_idioma character varying(3) NOT NULL,
    descripcion character varying(40) NOT NULL
);


--
-- TOC entry 519 (class 1259 OID 3243898)
-- Name: tipomanual; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipomanual (
    id_tipo_manual integer NOT NULL,
    cod_tipo_manual character varying(1) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 520 (class 1259 OID 3243901)
-- Name: tipootraactividad; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipootraactividad (
    id_tipo_otra_actividad integer NOT NULL,
    cod_otra_actividad character varying(3) NOT NULL,
    descripcion character varying(60) NOT NULL,
    tipo character varying(1) DEFAULT 'D'::character varying NOT NULL,
    CONSTRAINT tipo CHECK (((((((tipo)::text = 'D'::text) OR ((tipo)::text = 'C'::text)) OR ((tipo)::text = 'H'::text)) OR ((tipo)::text = 'S'::text)) OR ((tipo)::text = 'O'::text)))
);


--
-- TOC entry 521 (class 1259 OID 3243906)
-- Name: tipopersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tipopersonal (
    id_tipo_personal integer NOT NULL,
    cod_tipo_personal character varying(2) NOT NULL,
    nombre character varying(60) NOT NULL,
    multiple_registro character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aprobacion_mpd character varying(1) DEFAULT 'N'::character varying NOT NULL,
    maneja_rac character varying(1) DEFAULT 'N'::character varying NOT NULL,
    calcula_prestaciones character varying(1) DEFAULT 'S'::character varying NOT NULL,
    formula_integral character varying(1) DEFAULT 'N'::character varying NOT NULL,
    formula_semanal character varying(1) DEFAULT 'N'::character varying NOT NULL,
    id_organismo integer NOT NULL,
    id_grupo_organismo integer,
    id_grupo_nomina integer NOT NULL,
    id_clasificacion_personal integer NOT NULL,
    id_turno integer NOT NULL,
    cotiza_sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_spf character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_lph character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_fju character varying(1) DEFAULT 'S'::character varying NOT NULL,
    disfruta_vacaciones character varying(1) DEFAULT 'S'::character varying NOT NULL,
    asignan_dotaciones character varying(1) DEFAULT 'N'::character varying NOT NULL,
    aumento_evaluacion character varying(1) DEFAULT 'N'::character varying NOT NULL,
    deuda_regimen_derogado character varying(1) DEFAULT 'S'::character varying,
    id_banco_nomina integer,
    forma_pago_nomina character varying(1) DEFAULT '1'::character varying,
    id_banco_lph integer,
    id_banco_fid integer,
    beneficio_cesta_ticket character varying(1) DEFAULT 'N'::character varying,
    id_grupo_ticket integer,
    CONSTRAINT tipopersonal_aprobacion_mpd CHECK ((((aprobacion_mpd)::text = 'S'::text) OR ((aprobacion_mpd)::text = 'N'::text))),
    CONSTRAINT tipopersonal_calcula_prestacion CHECK ((((calcula_prestaciones)::text = 'S'::text) OR ((calcula_prestaciones)::text = 'N'::text))),
    CONSTRAINT tipopersonal_formula_integral CHECK (((((((formula_integral)::text = '0'::text) OR ((formula_integral)::text = '1'::text)) OR ((formula_integral)::text = '2'::text)) OR ((formula_integral)::text = '3'::text)) OR ((formula_integral)::text = '4'::text))),
    CONSTRAINT tipopersonal_formula_semanal CHECK ((((((formula_semanal)::text = '0'::text) OR ((formula_semanal)::text = '1'::text)) OR ((formula_semanal)::text = '2'::text)) OR ((formula_semanal)::text = '3'::text))),
    CONSTRAINT tipopersonal_maneja_rac CHECK ((((maneja_rac)::text = 'S'::text) OR ((maneja_rac)::text = 'N'::text))),
    CONSTRAINT tipopersonal_multiple_registro CHECK ((((multiple_registro)::text = 'S'::text) OR ((multiple_registro)::text = 'N'::text)))
);


--
-- TOC entry 522 (class 1259 OID 3243931)
-- Name: tiporeconocimiento; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tiporeconocimiento (
    id_tipo_reconocimiento integer NOT NULL,
    cod_tipo_reconocimiento character varying(3) NOT NULL,
    descripcion character varying(90)
);


--
-- TOC entry 523 (class 1259 OID 3243934)
-- Name: tiposede; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tiposede (
    id_tipo_sede integer NOT NULL,
    cod_tipo_sede character varying(2) NOT NULL,
    descripcion character varying(60) NOT NULL
);


--
-- TOC entry 524 (class 1259 OID 3243937)
-- Name: tiposiniestro; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE tiposiniestro (
    id_tipo_siniestro integer NOT NULL,
    cod_tipo_siniestro character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 525 (class 1259 OID 3243940)
-- Name: titular; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE titular (
    id_titular integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_plan_poliza integer NOT NULL,
    id_primas_plan integer NOT NULL,
    monto_prima double precision DEFAULT 0 NOT NULL,
    monto_patron double precision DEFAULT 0 NOT NULL,
    monto_trabajador double precision DEFAULT 0 NOT NULL,
    cobertura double precision DEFAULT 0 NOT NULL,
    cobertura_extra double precision DEFAULT 0 NOT NULL,
    prima_extra double precision DEFAULT 0 NOT NULL,
    fecha_inclusion date,
    fecha_exclusion date,
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL
);


--
-- TOC entry 526 (class 1259 OID 3243950)
-- Name: titulo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE titulo (
    id_titulo integer NOT NULL,
    cod_titulo character varying(6),
    id_nivel_educativo integer NOT NULL,
    id_grupo_profesion integer NOT NULL,
    descripcion character varying(90)
);


--
-- TOC entry 527 (class 1259 OID 3243953)
-- Name: trabajador; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trabajador (
    id_trabajador integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    cedula integer DEFAULT 0,
    cod_tipo_personal character varying(2),
    estatus character varying(1) DEFAULT 'A'::character varying NOT NULL,
    movimiento character varying(1) DEFAULT 'A'::character varying NOT NULL,
    situacion character varying(2) DEFAULT '1'::character varying NOT NULL,
    id_registro_cargos integer,
    id_cargo integer NOT NULL,
    id_detalle_tabulador_med integer,
    id_dependencia integer NOT NULL,
    id_lugar_pago integer,
    codigo_nomina integer DEFAULT 1,
    cod_cargo character varying(8),
    sueldo_basico double precision DEFAULT 0,
    paso integer DEFAULT 1,
    id_turno integer,
    riesgo character varying(1) DEFAULT '1'::character varying,
    regimen character varying(1) DEFAULT 'I'::character varying,
    fecha_ingreso date,
    fecha_ingreso_apn date,
    fecha_vacaciones date,
    fecha_prestaciones date,
    fecha_antiguedad date,
    fecha_egreso date,
    fecha_jubilacion date,
    forma_pago character varying(1) DEFAULT '1'::character varying,
    id_banco_nomina integer,
    tipo_cta_nomina character varying(1),
    cuenta_nomina character varying(20),
    id_banco_lph integer,
    cuenta_lph character varying(20),
    id_banco_fid integer,
    cuenta_fid character varying(20),
    porcentaje_islr double precision DEFAULT 0 NOT NULL,
    cotiza_sso character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_spf character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_lph character varying(1) DEFAULT 'S'::character varying NOT NULL,
    cotiza_fju character varying(1) DEFAULT 'S'::character varying NOT NULL,
    ded_prox_nomina character varying(1) DEFAULT 'S'::character varying NOT NULL,
    par_prox_nomina character varying(1) DEFAULT 'N'::character varying NOT NULL,
    porcentaje_jubilacion double precision DEFAULT 0,
    base_jubilacion double precision DEFAULT 0,
    fe_vida character varying(1) DEFAULT 'S'::character varying NOT NULL,
    id_causa_movimiento integer,
    id_dependencia_real integer,
    id_cargo_real integer,
    id_organismo integer NOT NULL,
    mes_ingreso integer,
    dia_ingreso integer,
    anio_ingreso integer,
    mes_ingreso_apn integer,
    dia_ingreso_apn integer,
    anio_ingreso_apn integer,
    mes_vacaciones integer,
    dia_vacaciones integer,
    anio_vacaciones integer,
    mes_prestaciones integer,
    dia_prestaciones integer,
    anio_prestaciones integer,
    mes_antiguedad integer,
    dia_antiguedad integer,
    anio_antiguedad integer,
    mes_jubilacion integer,
    dia_jubilacion integer,
    anio_jubilacion integer,
    mes_egreso integer,
    dia_egreso integer,
    anio_egreso integer,
    fecha_entrada_sig date,
    fecha_salida_sig date,
    codigo_nomina_real integer DEFAULT 0,
    cod_organismo_adscrito character varying(10),
    lunes_primera integer DEFAULT 0,
    lunes_segunda integer DEFAULT 0,
    lunes_retroactivo integer DEFAULT 0,
    hay_retroactivo character varying(1) DEFAULT 'N'::character varying,
    dias_trabajados integer DEFAULT 0,
    mes_entrada integer DEFAULT 0,
    dia_entrada integer DEFAULT 0,
    anio_entrada integer DEFAULT 0,
    mes_salida integer DEFAULT 0,
    dia_salida integer DEFAULT 0,
    anio_salida integer DEFAULT 0,
    horas_semanales double precision DEFAULT 0,
    fecha_ingreso_cargo date,
    mes_ingreso_cargo integer DEFAULT 0,
    dia_ingreso_cargo integer DEFAULT 0,
    anio_ingreso_cargo integer DEFAULT 0,
    fecha_fe_vida date,
    fecha_encargaduria date,
    fecha_comision_servicio date,
    organismo_comision_servicio character varying(60),
    fecha_tipo_personal date,
    fecha_ultimo_movimiento date,
    codigo_patronal character varying(10),
    jubilacion_planificada character varying(1) DEFAULT 'N'::character varying NOT NULL,
    CONSTRAINT trabajador_cotiza_fju CHECK ((((cotiza_fju)::text = 'S'::text) OR ((cotiza_fju)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_lph CHECK ((((cotiza_lph)::text = 'S'::text) OR ((cotiza_lph)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_spf CHECK ((((cotiza_spf)::text = 'S'::text) OR ((cotiza_spf)::text = 'N'::text))),
    CONSTRAINT trabajador_cotiza_sso CHECK ((((cotiza_sso)::text = 'S'::text) OR ((cotiza_sso)::text = 'N'::text))),
    CONSTRAINT trabajador_ded_prox_nomina CHECK ((((ded_prox_nomina)::text = 'S'::text) OR ((ded_prox_nomina)::text = 'N'::text))),
    CONSTRAINT trabajador_fe_vida CHECK ((((fe_vida)::text = 'S'::text) OR ((fe_vida)::text = 'N'::text))),
    CONSTRAINT trabajador_forma_pago CHECK (((((forma_pago)::text = '1'::text) OR ((forma_pago)::text = '2'::text)) OR ((forma_pago)::text = '3'::text))),
    CONSTRAINT trabajador_movimiento CHECK ((((movimiento)::text = 'A'::text) OR ((movimiento)::text = 'T'::text))),
    CONSTRAINT trabajador_par_prox_nomina CHECK ((((par_prox_nomina)::text = 'S'::text) OR ((par_prox_nomina)::text = 'N'::text))),
    CONSTRAINT trabajador_regimen CHECK ((((regimen)::text = 'I'::text) OR ((regimen)::text = 'P'::text))),
    CONSTRAINT trabajador_riesgo CHECK ((((((riesgo)::text = '1'::text) OR ((riesgo)::text = '2'::text)) OR ((riesgo)::text = '3'::text)) OR ((riesgo)::text = '0'::text))),
    CONSTRAINT trabajador_tipo_cta_nomina CHECK ((((((tipo_cta_nomina)::text = 'A'::text) OR ((tipo_cta_nomina)::text = 'C'::text)) OR ((tipo_cta_nomina)::text = 'O'::text)) OR ((tipo_cta_nomina)::text = 'N'::text)))
);


--
-- TOC entry 528 (class 1259 OID 3244005)
-- Name: trabajadorasignatura; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trabajadorasignatura (
    id_trabajador_asignatura integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_asignatura integer NOT NULL,
    horas double precision DEFAULT 0 NOT NULL
);


--
-- TOC entry 563 (class 1259 OID 13352157)
-- Name: trabajadores; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trabajadores (
    cedula integer,
    primer_apellido text,
    primer_nombre text,
    cod_dep character varying(12),
    dependencia character varying(90)
);


--
-- TOC entry 529 (class 1259 OID 3244009)
-- Name: trabajadorespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trabajadorespecifica (
    id_trabajador_especifica integer NOT NULL,
    id_uel_especifica integer NOT NULL,
    id_trabajador integer NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    porcentaje double precision DEFAULT 100 NOT NULL
);


--
-- TOC entry 530 (class 1259 OID 3244014)
-- Name: trabajadortemporal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trabajadortemporal (
    id_trabajador integer NOT NULL,
    lunes_primera boolean DEFAULT false,
    lunes_segunda boolean DEFAULT false,
    lunes_retroactivo boolean DEFAULT false,
    hay_retroactivo boolean DEFAULT false,
    id_grupo_nomina integer NOT NULL
);


--
-- TOC entry 531 (class 1259 OID 3244021)
-- Name: trayectoria; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE trayectoria (
    id_trayectoria integer NOT NULL,
    cedula integer NOT NULL,
    primer_apellido character varying(20),
    segundo_apellido character varying(20),
    primer_nombre character varying(20),
    segundo_nombre character varying(20),
    anio_preparacion integer DEFAULT 0,
    fecha_preparacion date,
    codigo_anterior_mpd character varying(10),
    numero_remesa character varying(6),
    numero_movimiento integer DEFAULT 0,
    correlativo_mpd integer DEFAULT 0,
    nombre_corto character varying(20),
    nombre_organismo character varying(90),
    estatus character varying(1),
    fecha_estatus date,
    fecha_vigencia date,
    cod_ubi_geografico character varying(6),
    estado character varying(40),
    ciudad character varying(40),
    municipio character varying(40),
    cod_region character varying(2),
    nombre_region character varying(60),
    cod_dependencia character varying(12),
    nombre_dependencia character varying(100),
    cod_causa_movimiento character varying(3),
    descripcion_movimiento character varying(60),
    nombre_corto_grupo character varying(20),
    nombre_largo_grupo character varying(90),
    caucion character varying(1),
    cod_manual_cargo character varying(8),
    cod_cargo character varying(8),
    descripcion_cargo character varying(60),
    cod_relacion character varying(1),
    desc_relacion character varying(20),
    cod_categoria character varying(1),
    desc_categoria character varying(20),
    nombramiento character varying(1),
    grado integer DEFAULT 0,
    paso integer DEFAULT 1,
    codigo_nomina integer DEFAULT 0,
    monto_jubilacion double precision DEFAULT 0,
    porc_jubilacion double precision DEFAULT 0,
    sueldo_promedio double precision DEFAULT 0,
    monto_jubilacion_sobrev double precision DEFAULT 0,
    porc_pension_sobrev double precision DEFAULT 0,
    monto_pension_sobrev double precision DEFAULT 0,
    monto_pension_invalid double precision DEFAULT 0,
    porc_pension_invalid double precision DEFAULT 0,
    invalidez_sact double precision DEFAULT 0,
    sueldo_basico double precision DEFAULT 0,
    compensacion double precision DEFAULT 0,
    prima_jerarquia double precision DEFAULT 0,
    prima_servicio double precision DEFAULT 0,
    ajuste_sueldo double precision DEFAULT 0,
    otros_pagos double precision DEFAULT 0,
    otros_no_vicepladin double precision DEFAULT 0,
    primas_cargo double precision DEFAULT 0,
    primas_trabajador double precision DEFAULT 0,
    id_personal integer DEFAULT 0,
    horas double precision DEFAULT 0,
    cod_concurso character varying(6),
    fecha_punto_cuenta date,
    observaciones text,
    origen character varying(1) DEFAULT 'S'::character varying,
    punto_cuenta character varying(15),
    usuario character varying(25),
    cod_grupo_organismo character varying(4) DEFAULT 1,
    cod_organismo character varying(4),
    fecha_culminacion date
);


--
-- TOC entry 532 (class 1259 OID 3244055)
-- Name: turno; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE turno (
    id_turno integer NOT NULL,
    cod_turno character varying(1) NOT NULL,
    nombre character varying(25) NOT NULL,
    jornada_semanal double precision DEFAULT 0 NOT NULL,
    jornada_diaria double precision DEFAULT 0 NOT NULL,
    entrada_am double precision DEFAULT 0 NOT NULL,
    salida_am double precision DEFAULT 0 NOT NULL,
    entrada_pm double precision DEFAULT 0 NOT NULL,
    salida_pm double precision DEFAULT 0 NOT NULL,
    id_organismo integer NOT NULL,
    tipo_turno character varying(1) DEFAULT 'D'::character varying NOT NULL,
    jornada character varying(1),
    CONSTRAINT turno_tipo_turno CHECK (((((tipo_turno)::text = 'D'::text) OR ((tipo_turno)::text = 'N'::text)) OR ((tipo_turno)::text = 'M'::text)))
);


--
-- TOC entry 533 (class 1259 OID 3244066)
-- Name: turnodocente; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE turnodocente (
    id_turno_docente integer NOT NULL,
    digito_turno character varying(1) NOT NULL,
    nombre character varying(60) NOT NULL
);


--
-- TOC entry 534 (class 1259 OID 3244069)
-- Name: uelespecifica; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE uelespecifica (
    id_uel_especifica integer NOT NULL,
    id_accion_especifica integer NOT NULL,
    id_unidad_ejecutora integer NOT NULL,
    categoria_presupuesto character varying(15) NOT NULL,
    anio integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 535 (class 1259 OID 3244073)
-- Name: ultimanomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ultimanomina (
    id_ultima_nomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    id_concepto integer,
    monto_aporte double precision DEFAULT 0,
    id_concepto_aporte integer,
    mes_sobretiempo integer DEFAULT 0 NOT NULL,
    anio_sobretiempo integer DEFAULT 0 NOT NULL,
    restituir character varying(1),
    unidades_restituir double precision DEFAULT 0 NOT NULL,
    monto_restituir double precision DEFAULT 0 NOT NULL,
    forma_pago character varying(1) DEFAULT '1'::character varying,
    id_banco_nomina integer,
    tipo_cta_nomina character varying(1),
    cuenta_nomina character varying(20),
    CONSTRAINT ultimanomina_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


--
-- TOC entry 536 (class 1259 OID 3244088)
-- Name: ultimaprenomina; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE ultimaprenomina (
    id_ultima_prenomina integer NOT NULL,
    id_trabajador integer NOT NULL,
    id_concepto_tipo_personal integer NOT NULL,
    id_frecuencia_tipo_personal integer NOT NULL,
    numero_nomina integer DEFAULT 1 NOT NULL,
    unidades double precision DEFAULT 0 NOT NULL,
    monto_asigna double precision DEFAULT 0 NOT NULL,
    monto_deduce double precision DEFAULT 0 NOT NULL,
    origen character varying(1) DEFAULT 'F'::character varying NOT NULL,
    documento_soporte character varying(10),
    id_tipo_personal integer NOT NULL,
    id_grupo_nomina integer NOT NULL,
    id_nomina_especial integer,
    CONSTRAINT ultimaprenomina_origen CHECK ((((((origen)::text = 'F'::text) OR ((origen)::text = 'V'::text)) OR ((origen)::text = 'P'::text)) OR ((origen)::text = 'C'::text)))
);


--
-- TOC entry 537 (class 1259 OID 3244097)
-- Name: unidadadministradora; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE unidadadministradora (
    id_unidad_administradora integer NOT NULL,
    cod_unidad_administ character varying(6) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90) NOT NULL,
    tipo_unidad character varying(1) DEFAULT 'O'::character varying,
    vigente character varying(1) DEFAULT 'S'::character varying,
    CONSTRAINT unidadadministradora_tipo CHECK (((((tipo_unidad)::text = 'O'::text) OR ((tipo_unidad)::text = 'S'::text)) OR ((tipo_unidad)::text = 'A'::text)))
);


--
-- TOC entry 538 (class 1259 OID 3244103)
-- Name: unidadejecutora; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE unidadejecutora (
    id_unidad_ejecutora integer NOT NULL,
    cod_unidad_ejecutora character varying(10) NOT NULL,
    id_programa integer NOT NULL,
    nombre character varying(90) NOT NULL,
    vigente character varying(1) DEFAULT 'S'::character varying
);


--
-- TOC entry 539 (class 1259 OID 3244107)
-- Name: unidadfuncional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE unidadfuncional (
    id_unidad_funcional integer NOT NULL,
    cod_unidad_funcional character varying(6) NOT NULL,
    id_organismo integer NOT NULL,
    nombre character varying(90)
);


--
-- TOC entry 540 (class 1259 OID 3244110)
-- Name: usuario; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE usuario (
    id_usuario integer NOT NULL,
    usuario character varying(25) NOT NULL,
    password character varying(250) NOT NULL,
    administrador character varying(1) DEFAULT 'N'::character varying NOT NULL,
    apellidos character varying(25) NOT NULL,
    nombres character varying(25) NOT NULL,
    cedula integer NOT NULL,
    activo character varying(1),
    id_region integer,
    telefono character varying(25),
    id_organismo integer DEFAULT 0 NOT NULL,
    cambio_password date DEFAULT now(),
    fecha_vence date,
    intentos integer DEFAULT 0 NOT NULL,
    CONSTRAINT usuario_administrador CHECK ((((administrador)::text = 'S'::text) OR ((administrador)::text = 'N'::text)))
);


--
-- TOC entry 541 (class 1259 OID 3244118)
-- Name: usuarioorganismo; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE usuarioorganismo (
    id_usuario_organismo integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_organismo integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 542 (class 1259 OID 3244123)
-- Name: usuariorol; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE usuariorol (
    id_usuario_rol integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_rol integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 543 (class 1259 OID 3244128)
-- Name: usuariotipopersonal; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE usuariotipopersonal (
    id_usuario_tipo_personal integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_tipo_personal integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 544 (class 1259 OID 3244133)
-- Name: usuariounidadfuncional; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE usuariounidadfuncional (
    id_usuario_unidad_funcional integer NOT NULL,
    id_usuario integer DEFAULT 0 NOT NULL,
    id_unidad_funcional integer DEFAULT 0 NOT NULL
);


--
-- TOC entry 545 (class 1259 OID 3244138)
-- Name: utiles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE utiles (
    id_utiles integer NOT NULL,
    id_personal integer NOT NULL,
    id_familiar integer NOT NULL,
    nivel_educativo character varying(1) NOT NULL,
    fecha_nacimiento date NOT NULL,
    grado character varying(2),
    monto double precision DEFAULT 0 NOT NULL,
    sexo character varying(1) NOT NULL,
    id_tipo_personal integer NOT NULL,
    id_trabajador integer NOT NULL
);


--
-- TOC entry 546 (class 1259 OID 3244142)
-- Name: utilidadesporanio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE utilidadesporanio (
    id_utilidades_por_anio integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    meses_servicios integer DEFAULT 99,
    dias_bono integer DEFAULT 40,
    dias_extra integer DEFAULT 0
);


--
-- TOC entry 547 (class 1259 OID 3244149)
-- Name: v_datos_personales; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_datos_personales AS
 SELECT p.cedula,
    p.primer_nombre,
    p.segundo_nombre,
    p.primer_apellido,
    p.segundo_apellido,
    c.descripcion_cargo,
    t.estatus,
    p.telefono_oficina,
    p.telefono_celular,
    p.telefono_residencia,
    p.email,
    t.codigo_nomina,
    d.nombre AS dependencia,
    t.fecha_ingreso,
    tp.nombre,
    gn.periodicidad,
    uad.nombre AS unidad_administradora
   FROM trabajador t,
    personal p,
    cargo c,
    tipopersonal tp,
    gruponomina gn,
    dependencia d,
    administradorauel aue,
    unidadadministradora uad
  WHERE ((((((((t.id_personal = p.id_personal) AND ((t.id_cargo)::text = (c.id_cargo)::text)) AND (t.id_tipo_personal = tp.id_tipo_personal)) AND (tp.id_grupo_nomina = gn.id_grupo_nomina)) AND (t.id_dependencia = d.id_dependencia)) AND (aue.id_administradora_uel = d.id_administradora_uel)) AND (uad.id_unidad_administradora = aue.id_unidad_administradora)) AND ((t.estatus)::text = 'A'::text));


--
-- TOC entry 548 (class 1259 OID 3244154)
-- Name: v_historico; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_historico AS
         SELECT historicoquincena.id_historico_quincena,
            historicoquincena.id_trabajador,
            historicoquincena.id_concepto_tipo_personal,
            historicoquincena.id_frecuencia_tipo_personal,
            historicoquincena.numero_nomina,
            historicoquincena.anio,
            historicoquincena.mes,
            historicoquincena.semana_quincena,
            historicoquincena.fecha,
            historicoquincena.unidades,
            historicoquincena.monto_asigna,
            historicoquincena.monto_deduce,
            historicoquincena.origen,
            historicoquincena.documento_soporte,
            historicoquincena.id_tipo_personal,
            historicoquincena.id_grupo_nomina,
            historicoquincena.id_nomina_especial,
            historicoquincena.id_historico_nomina,
            historicoquincena.id_concepto,
            historicoquincena.monto_aporte,
            historicoquincena.id_concepto_aporte,
            historicoquincena.mes_sobretiempo,
            historicoquincena.anio_sobretiempo
           FROM historicoquincena
UNION
         SELECT historicosemana.id_historico_semana AS id_historico_quincena,
            historicosemana.id_trabajador,
            historicosemana.id_concepto_tipo_personal,
            historicosemana.id_frecuencia_tipo_personal,
            historicosemana.numero_nomina,
            historicosemana.anio,
            historicosemana.mes,
            historicosemana.semana_quincena,
            historicosemana.fecha,
            historicosemana.unidades,
            historicosemana.monto_asigna,
            historicosemana.monto_deduce,
            historicosemana.origen,
            historicosemana.documento_soporte,
            historicosemana.id_tipo_personal,
            historicosemana.id_grupo_nomina,
            historicosemana.id_nomina_especial,
            historicosemana.id_historico_nomina,
            historicosemana.id_concepto,
            historicosemana.monto_aporte,
            historicosemana.id_concepto_aporte,
            historicosemana.mes_sobretiempo,
            historicosemana.anio_sobretiempo
           FROM historicosemana;


--
-- TOC entry 549 (class 1259 OID 3244159)
-- Name: v_recibos; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_recibos AS
 SELECT so.anio,
    so.mes,
    so.semana_quincena,
    so.fecha_inicio,
    so.fecha_fin,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    b.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    b.sueldo_basico AS suebas,
    e.cedula AS codtra,
    b.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    au.id_unidad_administradora AS uniadm,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce
   FROM ultimanomina a,
    trabajador b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    administradorauel au,
    concepto c,
    conceptotipopersonal f,
    frecuenciatipopersonal ftp,
    seguridadordinaria so
  WHERE ((((((((((((((g.id_grupo_nomina = a.id_grupo_nomina) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (b.id_trabajador = a.id_trabajador)) AND (e.id_personal = b.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (j.id_administradora_uel = au.id_administradora_uel)) AND (a.id_concepto_tipo_personal = f.id_concepto_tipo_personal)) AND (a.numero_nomina = 0)) AND (c.id_concepto = f.id_concepto)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (so.fecha_proceso = ( SELECT max(seguridadordinaria.fecha_proceso) AS max
           FROM seguridadordinaria
          WHERE (seguridadordinaria.id_grupo_nomina = a.id_grupo_nomina)))) AND (so.id_grupo_nomina = a.id_grupo_nomina));


--
-- TOC entry 550 (class 1259 OID 3244164)
-- Name: v_recibos_quincena; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_recibos_quincena AS
 SELECT a.numero_nomina,
    a.anio,
    a.mes,
    a.semana_quincena,
    g.cod_grupo_nomina AS codgno,
    g.nombre AS gruponomina,
    g.periodicidad,
    d.nombre AS tipopersonal,
    d.cod_tipo_personal AS codtno,
    tr.fecha_ingreso AS ingresoorganismo,
    b.codigo_nomina AS codrac,
    b.estatus,
    b.forma_pago AS formapago,
    b.cuenta_nomina,
    e.cedula AS codtra,
    tr.cedula,
    e.primer_nombre,
    e.segundo_nombre,
    e.primer_apellido,
    e.segundo_apellido,
    k.cod_cargo AS codigocargo,
    k.descripcion_cargo AS cargo,
    k.grado AS gradocargo,
    j.cod_dependencia AS codcen,
    j.nombre AS nombreunidad,
    b.id_trabajador,
    c.cod_concepto AS codcon,
    c.descripcion AS descon,
    fp.cod_frecuencia_pago AS id_contador,
    a.unidades,
    a.monto_asigna AS asigna,
    a.monto_deduce AS deduce,
    a.documento_soporte AS documento,
    fp.cod_frecuencia_pago AS frecon,
    tr.sueldo_basico AS suebas,
    so.fecha_inicio,
    so.fecha_fin
   FROM historicoquincena a,
    historiconomina b,
    tipopersonal d,
    personal e,
    gruponomina g,
    dependencia j,
    cargo k,
    trabajador tr,
    conceptotipopersonal ctp,
    concepto c,
    frecuenciatipopersonal ftp,
    frecuenciapago fp,
    seguridadordinaria so
  WHERE ((((((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (b.anio = so.anio)) AND (b.mes = so.mes)) AND (b.semana_quincena = so.semana_quincena)) AND (b.id_grupo_nomina = so.id_grupo_nomina)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago));


--
-- TOC entry 551 (class 1259 OID 3244169)
-- Name: v_recibos_semana; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_recibos_semana AS
         SELECT a.numero_nomina,
            a.anio,
            a.mes,
            a.semana_quincena,
            g.cod_grupo_nomina AS codgno,
            g.nombre AS gruponomina,
            g.periodicidad,
            d.nombre AS tipopersonal,
            d.cod_tipo_personal AS codtno,
            tr.fecha_ingreso AS ingresoorganismo,
            b.codigo_nomina AS codrac,
            b.estatus,
            b.forma_pago AS formapago,
            b.cuenta_nomina,
            e.cedula AS codtra,
            tr.cedula,
            e.primer_nombre,
            e.segundo_nombre,
            e.primer_apellido,
            e.segundo_apellido,
            k.cod_cargo AS codigocargo,
            k.descripcion_cargo AS cargo,
            k.grado AS gradocargo,
            j.cod_dependencia AS codcen,
            j.nombre AS nombreunidad,
            b.id_trabajador,
            c.cod_concepto AS codcon,
            c.descripcion AS descon,
            fp.cod_frecuencia_pago AS id_contador,
            a.unidades,
            a.monto_asigna AS asigna,
            a.monto_deduce AS deduce,
            a.documento_soporte AS documento,
            fp.cod_frecuencia_pago AS frecon,
            tr.sueldo_basico AS suebas,
            so.fecha_inicio,
            so.fecha_fin
           FROM historicosemana a,
            historiconomina b,
            tipopersonal d,
            personal e,
            gruponomina g,
            dependencia j,
            cargo k,
            trabajador tr,
            conceptotipopersonal ctp,
            concepto c,
            frecuenciatipopersonal ftp,
            frecuenciapago fp,
            seguridadordinaria so
          WHERE (((((((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (a.numero_nomina = 0)) AND (b.anio = so.anio)) AND (b.mes = so.mes)) AND (b.semana_quincena = so.semana_quincena)) AND (b.id_grupo_nomina = so.id_grupo_nomina)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago))
UNION
         SELECT a.numero_nomina,
            a.anio,
            a.mes,
            a.semana_quincena,
            g.cod_grupo_nomina AS codgno,
            g.nombre AS gruponomina,
            g.periodicidad,
            d.nombre AS tipopersonal,
            d.cod_tipo_personal AS codtno,
            tr.fecha_ingreso AS ingresoorganismo,
            b.codigo_nomina AS codrac,
            b.estatus,
            b.forma_pago AS formapago,
            b.cuenta_nomina,
            e.cedula AS codtra,
            tr.cedula,
            e.primer_nombre,
            e.segundo_nombre,
            e.primer_apellido,
            e.segundo_apellido,
            k.cod_cargo AS codigocargo,
            k.descripcion_cargo AS cargo,
            k.grado AS gradocargo,
            j.cod_dependencia AS codcen,
            j.nombre AS nombreunidad,
            b.id_trabajador,
            c.cod_concepto AS codcon,
            c.descripcion AS descon,
            fp.cod_frecuencia_pago AS id_contador,
            a.unidades,
            a.monto_asigna AS asigna,
            a.monto_deduce AS deduce,
            a.documento_soporte AS documento,
            fp.cod_frecuencia_pago AS frecon,
            tr.sueldo_basico AS suebas,
            a.fecha AS fecha_inicio,
            a.fecha AS fecha_fin
           FROM historicosemana a,
            historiconomina b,
            tipopersonal d,
            personal e,
            gruponomina g,
            dependencia j,
            cargo k,
            trabajador tr,
            conceptotipopersonal ctp,
            concepto c,
            frecuenciatipopersonal ftp,
            frecuenciapago fp
          WHERE (((((((((((((((((((a.id_grupo_nomina = b.id_grupo_nomina) AND (a.numero_nomina = b.numero_nomina)) AND (a.anio = b.anio)) AND (a.mes = b.mes)) AND (a.semana_quincena = b.semana_quincena)) AND (a.id_trabajador = b.id_trabajador)) AND (a.id_trabajador = tr.id_trabajador)) AND (a.numero_nomina <> 0)) AND (g.id_grupo_nomina = a.id_grupo_nomina)) AND (d.id_tipo_personal = a.id_tipo_personal)) AND (b.id_tipo_personal = d.id_tipo_personal)) AND (e.id_personal = tr.id_personal)) AND (j.id_dependencia = b.id_dependencia)) AND (k.id_cargo = b.id_cargo)) AND (a.id_concepto_tipo_personal = ctp.id_concepto_tipo_personal)) AND (ctp.id_concepto = c.id_concepto)) AND ((c.cod_concepto)::text <> '5000'::text)) AND (a.id_frecuencia_tipo_personal = ftp.id_frecuencia_tipo_personal)) AND (ftp.id_frecuencia_pago = fp.id_frecuencia_pago));


--
-- TOC entry 552 (class 1259 OID 3244174)
-- Name: v_seguridad; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_seguridad AS
 SELECT a.cedula,
    (((b.primer_nombre)::text || '  '::text) || (b.segundo_nombre)::text) AS nombres,
    (((b.primer_apellido)::text || '  '::text) || (b.segundo_apellido)::text) AS apellidos,
        CASE
            WHEN (a.id_tipo_personal = 1) THEN 'EMPLEADO'::text
            WHEN (a.id_tipo_personal = 5) THEN '0BRERO'::text
            WHEN (a.id_tipo_personal = 10) THEN 'CONTRATADO'::text
            WHEN (a.id_tipo_personal = 20) THEN 'J'::text
            WHEN (a.id_tipo_personal = 25) THEN 'U'::text
            ELSE NULL::text
        END AS tipo_personal,
    c.nombre AS dependecia
   FROM trabajador a,
    personal b,
    dependencia c,
    conceptofijo cf
  WHERE ((((((a.id_personal = b.id_personal) AND ((a.estatus)::text = 'A'::text)) AND (a.id_dependencia = c.id_dependencia)) AND (((a.id_tipo_personal = 1) OR (a.id_tipo_personal = 5)) OR (a.id_tipo_personal = 10))) AND (a.id_trabajador = cf.id_trabajador)) AND ((((((cf.id_concepto_tipo_personal = 11) OR (cf.id_concepto_tipo_personal = 20)) OR (cf.id_concepto_tipo_personal = 21)) OR (cf.id_concepto_tipo_personal = 22)) OR (cf.id_concepto_tipo_personal = 47)) OR (cf.id_concepto_tipo_personal = 2175)));


--
-- TOC entry 553 (class 1259 OID 3244179)
-- Name: v_web_carga_familiar; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_web_carga_familiar AS
 SELECT a.id_familiar AS indicador_unico,
    b.cedula AS cedula_funcionario,
    a.primer_nombre AS nombre,
    a.primer_apellido AS apellido,
    a.cedula_familiar,
        CASE
            WHEN ((a.parentesco)::text = 'H'::text) THEN 'HIJO'::text
            WHEN ((a.parentesco)::text = 'M'::text) THEN 'MADRE'::text
            WHEN ((a.parentesco)::text = 'P'::text) THEN 'PADRE'::text
            WHEN ((a.parentesco)::text = 'C'::text) THEN 'CONYUGUE'::text
            WHEN ((a.parentesco)::text = 'E'::text) THEN 'HERMANO'::text
            WHEN ((a.parentesco)::text = 'O'::text) THEN 'OTRO'::text
            ELSE NULL::text
        END AS parentesco,
    a.fecha_nacimiento
   FROM familiar a,
    personal b,
    trabajador c
  WHERE ((((a.id_personal = b.id_personal) AND (b.id_personal = c.id_personal)) AND ((c.estatus)::text = 'A'::text)) AND (((((c.id_tipo_personal = 1) OR (c.id_tipo_personal = 5)) OR (c.id_tipo_personal = 10)) OR (c.id_tipo_personal = 20)) OR (c.id_tipo_personal = 25)));


--
-- TOC entry 554 (class 1259 OID 3244184)
-- Name: v_web_funcionarios; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_web_funcionarios AS
 SELECT a.cedula,
    (((b.primer_nombre)::text || '  '::text) || (b.segundo_nombre)::text) AS nombres,
    (((b.primer_apellido)::text || '  '::text) || (b.segundo_apellido)::text) AS apellidos,
    b.telefono_oficina AS telefono,
    a.fecha_ingreso,
    a.codigo_nomina,
        CASE
            WHEN (a.id_tipo_personal = 1) THEN 'E'::text
            WHEN (a.id_tipo_personal = 5) THEN '0'::text
            WHEN (a.id_tipo_personal = 10) THEN 'C'::text
            WHEN (a.id_tipo_personal = 20) THEN 'J'::text
            WHEN (a.id_tipo_personal = 25) THEN 'U'::text
            ELSE NULL::text
        END AS tipo_personal,
    substr((e.descripcion_cargo)::text, 1, 30) AS cargo_funcionarios,
    c.nombre AS dependecia,
    d.nombre AS direccion,
    d.nombre AS division,
    d.nombre AS departamento
   FROM trabajador a,
    personal b,
    dependencia c,
    lugarpago d,
    cargo e
  WHERE ((((((a.id_personal = b.id_personal) AND ((a.estatus)::text = 'A'::text)) AND (a.id_dependencia = c.id_dependencia)) AND (a.id_lugar_pago = d.id_lugar_pago)) AND (((((a.id_tipo_personal = 1) OR (a.id_tipo_personal = 5)) OR (a.id_tipo_personal = 10)) OR (a.id_tipo_personal = 20)) OR (a.id_tipo_personal = 25))) AND (a.id_cargo = e.id_cargo));


--
-- TOC entry 555 (class 1259 OID 3244189)
-- Name: v_web_hijos; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW v_web_hijos AS
         SELECT a.id_familiar AS ipk_id_hijos,
            c.cedula AS ifk_cedula_funcionarios,
            a.cedula_familiar AS c_cedula_hijos,
            a.primer_nombre AS c_nombre_hijos,
            a.primer_apellido AS c_apell_hijos,
            a.fecha_nacimiento AS c_fecha_nac_hijos,
                CASE
                    WHEN ((b.estatus_beca)::text = 'A'::text) THEN 'S'::text
                    WHEN ((b.estatus_beca)::text = 'R'::text) THEN 'N'::text
                    WHEN ((b.estatus_beca)::text = 'S'::text) THEN 'N'::text
                    ELSE NULL::text
                END AS c_estatu_becado_hijos,
            b.estatus_beca AS c_estatu_solici_hijos,
            'N'::text AS c_tipo_solici_hijos,
            b.fecha AS c_fecha_solici_hijos
           FROM familiar a,
            becafamiliar b,
            trabajador c
          WHERE (((a.id_familiar = b.id_familiar) AND ((a.parentesco)::text = 'H'::text)) AND (a.id_personal = c.id_personal))
UNION
         SELECT a.id_familiar AS ipk_id_hijos,
            c.cedula AS ifk_cedula_funcionarios,
            a.cedula_familiar AS c_cedula_hijos,
            a.primer_nombre AS c_nombre_hijos,
            a.primer_apellido AS c_apell_hijos,
            a.fecha_nacimiento AS c_fecha_nac_hijos,
            'N'::text AS c_estatu_becado_hijos,
            ' '::character varying AS c_estatu_solici_hijos,
            'N'::text AS c_tipo_solici_hijos,
            a.fecha_nacimiento AS c_fecha_solici_hijos
           FROM familiar a,
            trabajador c
          WHERE ((((a.parentesco)::text = 'H'::text) AND (a.id_personal = c.id_personal)) AND (NOT (a.id_familiar IN ( SELECT becafamiliar.id_familiar
                   FROM becafamiliar))));


--
-- TOC entry 556 (class 1259 OID 3244194)
-- Name: vacacion; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE vacacion (
    id_vacacion integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    tipo_vacacion character varying(1) DEFAULT 'P'::character varying NOT NULL,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    dias_pendientes integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    fecha_suspension date,
    suspendida character varying(1) DEFAULT 'N'::character varying NOT NULL,
    observaciones text
);


--
-- TOC entry 557 (class 1259 OID 3244205)
-- Name: vacaciondisfrutada; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE vacaciondisfrutada (
    id_vacacion_disfrutada integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    semana_anio integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    observaciones text,
    id_vacacion integer
);


--
-- TOC entry 558 (class 1259 OID 3244214)
-- Name: vacacionesporanio; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE vacacionesporanio (
    id_vacaciones_por_anio integer NOT NULL,
    id_tipo_personal integer NOT NULL,
    anios_servicio integer DEFAULT 99,
    dias_disfrutar integer DEFAULT 15,
    dias_bono integer DEFAULT 40,
    dias_extra integer DEFAULT 0
);


--
-- TOC entry 559 (class 1259 OID 3244221)
-- Name: vacacionprogramada; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE vacacionprogramada (
    id_vacacion_programada integer NOT NULL,
    id_personal integer NOT NULL,
    id_tipo_personal integer,
    anio integer DEFAULT 0 NOT NULL,
    dias_disfrute integer DEFAULT 0 NOT NULL,
    semana_anio integer DEFAULT 0 NOT NULL,
    fecha_fin date,
    fecha_inicio date,
    fecha_reintegro date,
    observaciones text
);


--
-- TOC entry 560 (class 1259 OID 3244230)
-- Name: varemos; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE varemos (
    id_varemos integer NOT NULL,
    cod_varemos character varying(3) NOT NULL,
    nombre character varying(60) NOT NULL,
    porcentaje integer NOT NULL
);


--
-- TOC entry 5186 (class 2604 OID 3244233)
-- Name: id_historico_base_islr; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicobaseislr ALTER COLUMN id_historico_base_islr SET DEFAULT nextval('historicobaseislr_id_historico_base_islr_seq'::regclass);


--
-- TOC entry 5387 (class 2604 OID 3244234)
-- Name: id_mensajes_prenomina; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY mensajesprenomina ALTER COLUMN id_mensajes_prenomina SET DEFAULT nextval('mensajesprenomina_id_mensajes_prenomina_seq'::regclass);


--
-- TOC entry 6322 (class 2606 OID 3244246)
-- Name: accioncentralizada_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT accioncentralizada_cod UNIQUE (anio, cod_accion_centralizada);


--
-- TOC entry 6324 (class 2606 OID 3244248)
-- Name: accioncentralizada_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT accioncentralizada_pkey PRIMARY KEY (id_accion_centralizada);


--
-- TOC entry 6326 (class 2606 OID 3244250)
-- Name: accionespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accionespecifica
    ADD CONSTRAINT accionespecifica_pkey PRIMARY KEY (id_accion_especifica);


--
-- TOC entry 6328 (class 2606 OID 3244252)
-- Name: accionevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accionevaluacion
    ADD CONSTRAINT accionevaluacion_pkey PRIMARY KEY (id_accion_evaluacion);


--
-- TOC entry 6330 (class 2606 OID 3244254)
-- Name: acreencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY acreencia
    ADD CONSTRAINT acreencia_pkey PRIMARY KEY (id_acreencia);


--
-- TOC entry 6332 (class 2606 OID 3244256)
-- Name: actividaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT actividaddocente_pkey PRIMARY KEY (id_actividad_docente);


--
-- TOC entry 6334 (class 2606 OID 3244258)
-- Name: adiestramientocargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT adiestramientocargo_cod UNIQUE (id_cargo, id_area_conocimiento, nivel);


--
-- TOC entry 6336 (class 2606 OID 3244260)
-- Name: adiestramientocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT adiestramientocargo_pkey PRIMARY KEY (id_adiestramiento_cargo);


--
-- TOC entry 6338 (class 2606 OID 3244262)
-- Name: administradorauel_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT administradorauel_cod UNIQUE (id_unidad_administradora, id_unidad_ejecutora);


--
-- TOC entry 6340 (class 2606 OID 3244264)
-- Name: administradorauel_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT administradorauel_pkey PRIMARY KEY (id_administradora_uel);


--
-- TOC entry 6343 (class 2606 OID 3244266)
-- Name: afiliacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT afiliacion_pkey PRIMARY KEY (id_afiliacion);


--
-- TOC entry 6345 (class 2606 OID 3244268)
-- Name: ajustetabuladoronu_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT ajustetabuladoronu_cod UNIQUE (id_tabulador, nivel, estado_civil, anios_servicio);


--
-- TOC entry 6347 (class 2606 OID 3244270)
-- Name: ajustetabuladoronu_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT ajustetabuladoronu_pkey PRIMARY KEY (id_ajuste_tabulador_onu);


--
-- TOC entry 6351 (class 2606 OID 3244272)
-- Name: anticipo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT anticipo_pkey PRIMARY KEY (id_anticipo);


--
-- TOC entry 6353 (class 2606 OID 3244274)
-- Name: apelacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY apelacion
    ADD CONSTRAINT apelacion_pkey PRIMARY KEY (id_apelacion);


--
-- TOC entry 6355 (class 2606 OID 3244276)
-- Name: aperturaescolar_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aperturaescolar
    ADD CONSTRAINT aperturaescolar_pkey PRIMARY KEY (id_apertura_escolar);


--
-- TOC entry 6357 (class 2606 OID 3244278)
-- Name: aplicartabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aplicartabulador
    ADD CONSTRAINT aplicartabulador_pkey PRIMARY KEY (id_aplicar_tabulador);


--
-- TOC entry 6360 (class 2606 OID 3244280)
-- Name: areacarrera_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY areacarrera
    ADD CONSTRAINT areacarrera_pkey PRIMARY KEY (id_area_carrera);


--
-- TOC entry 6363 (class 2606 OID 3244282)
-- Name: areaconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY areaconocimiento
    ADD CONSTRAINT areaconocimiento_pkey PRIMARY KEY (id_area_conocimiento);


--
-- TOC entry 6365 (class 2606 OID 3244284)
-- Name: asignatura_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY asignatura
    ADD CONSTRAINT asignatura_cod UNIQUE (cod_asignatura);


--
-- TOC entry 6367 (class 2606 OID 3244286)
-- Name: asignatura_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY asignatura
    ADD CONSTRAINT asignatura_pkey PRIMARY KEY (id_asignatura);


--
-- TOC entry 6369 (class 2606 OID 3244288)
-- Name: aumento_evaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT aumento_evaluacion_pkey PRIMARY KEY (id_aumento_evaluacion);


--
-- TOC entry 6373 (class 2606 OID 3244290)
-- Name: ausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT ausencia_pkey PRIMARY KEY (id_ausencia);


--
-- TOC entry 6376 (class 2606 OID 3244292)
-- Name: averiguacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY averiguacion
    ADD CONSTRAINT averiguacion_pkey PRIMARY KEY (id_averiguacion);


--
-- TOC entry 6379 (class 2606 OID 3244294)
-- Name: banco_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY banco
    ADD CONSTRAINT banco_pkey PRIMARY KEY (id_banco);


--
-- TOC entry 6381 (class 2606 OID 3244296)
-- Name: baremopreseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY baremopreseleccionado
    ADD CONSTRAINT baremopreseleccion_pkey PRIMARY KEY (id_baremo_preseleccionado);


--
-- TOC entry 6383 (class 2606 OID 3244298)
-- Name: becafamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY becafamiliar
    ADD CONSTRAINT becafamiliar_pkey PRIMARY KEY (id_beca_familiar);


--
-- TOC entry 6385 (class 2606 OID 3244300)
-- Name: becatrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY becatrabajador
    ADD CONSTRAINT becatrabajador_pkey PRIMARY KEY (id_beca_trabajador);


--
-- TOC entry 6387 (class 2606 OID 3244302)
-- Name: beneficiario_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT beneficiario_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6389 (class 2606 OID 3244304)
-- Name: beneficiario_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT beneficiario_pkey PRIMARY KEY (id_beneficiario);


--
-- TOC entry 6391 (class 2606 OID 3244306)
-- Name: cajaahorro_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT cajaahorro_pkey PRIMARY KEY (id_caja_ahorro);


--
-- TOC entry 6393 (class 2606 OID 3244308)
-- Name: cajaahorrocod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT cajaahorrocod UNIQUE (id_trabajador, id_concepto_tipo_personal);


--
-- TOC entry 6395 (class 2606 OID 3244310)
-- Name: calculoantiguedad_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT calculoantiguedad_cod UNIQUE (id_trabajador);


--
-- TOC entry 6397 (class 2606 OID 3244312)
-- Name: calculoantiguedad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT calculoantiguedad_pkey PRIMARY KEY (id_calculo_antiguedad);


--
-- TOC entry 6399 (class 2606 OID 3244314)
-- Name: calculobonofinanio_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT calculobonofinanio_cod UNIQUE (id_trabajador);


--
-- TOC entry 6401 (class 2606 OID 3244316)
-- Name: calculobonofinanio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT calculobonofinanio_pkey PRIMARY KEY (id_calculo_bono_fin_anio);


--
-- TOC entry 6403 (class 2606 OID 3244318)
-- Name: calculoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT calculoticket_pkey PRIMARY KEY (id_calculo_ticket);


--
-- TOC entry 6405 (class 2606 OID 3244320)
-- Name: calculovacacional_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT calculovacacional_cod UNIQUE (id_trabajador);


--
-- TOC entry 6407 (class 2606 OID 3244322)
-- Name: calculovacacional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT calculovacacional_pkey PRIMARY KEY (id_calculo_vacacional);


--
-- TOC entry 6409 (class 2606 OID 3244324)
-- Name: caractdependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY caracteristicadependencia
    ADD CONSTRAINT caractdependencia_pkey PRIMARY KEY (id_caracteristica_dependencia);


--
-- TOC entry 6411 (class 2606 OID 3244326)
-- Name: caractdependenciacod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY caracteristicadependencia
    ADD CONSTRAINT caractdependenciacod UNIQUE (id_tipo_caracteristica, codigo);


--
-- TOC entry 6413 (class 2606 OID 3244328)
-- Name: cargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargo
    ADD CONSTRAINT cargo_pkey PRIMARY KEY (id_cargo);


--
-- TOC entry 6415 (class 2606 OID 3244330)
-- Name: cargoesp_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT cargoesp_cod UNIQUE (id_uel_especifica, id_registro_cargos);


--
-- TOC entry 6417 (class 2606 OID 3244332)
-- Name: cargoesp_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT cargoesp_pkey PRIMARY KEY (id_cargo_especifica);


--
-- TOC entry 6419 (class 2606 OID 3244334)
-- Name: cargosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargosplan
    ADD CONSTRAINT cargosplan_pkey PRIMARY KEY (id_cargos_plan);


--
-- TOC entry 6422 (class 2606 OID 3244336)
-- Name: carrera_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY carrera
    ADD CONSTRAINT carrera_pkey PRIMARY KEY (id_carrera);


--
-- TOC entry 6425 (class 2606 OID 3244338)
-- Name: carreraarea_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT carreraarea_pkey PRIMARY KEY (id_carrera_area);


--
-- TOC entry 6428 (class 2606 OID 3244340)
-- Name: categoriadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY categoriadocente
    ADD CONSTRAINT categoriadocente_pkey PRIMARY KEY (id_categoria_docente);


--
-- TOC entry 6431 (class 2606 OID 3244342)
-- Name: categoriapersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY categoriapersonal
    ADD CONSTRAINT categoriapersonal_pkey PRIMARY KEY (id_categoria_personal);


--
-- TOC entry 6434 (class 2606 OID 3244344)
-- Name: categoriapresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY categoriapresupuesto
    ADD CONSTRAINT categoriapresupuesto_pkey PRIMARY KEY (id_categoria_presupuesto);


--
-- TOC entry 6436 (class 2606 OID 3244346)
-- Name: causadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causadocente
    ADD CONSTRAINT causadocente_pkey PRIMARY KEY (id_causa_docente);


--
-- TOC entry 6439 (class 2606 OID 3244348)
-- Name: causamovimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causamovimiento
    ADD CONSTRAINT causamovimiento_pkey PRIMARY KEY (id_causa_movimiento);


--
-- TOC entry 6442 (class 2606 OID 3244350)
-- Name: causapersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT causapersonal_pkey PRIMARY KEY (id_causa_personal);


--
-- TOC entry 6444 (class 2606 OID 3244352)
-- Name: certificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT certificacion_pkey PRIMARY KEY (id_certificacion);


--
-- TOC entry 6446 (class 2606 OID 3244354)
-- Name: certificado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY certificado
    ADD CONSTRAINT certificado_pkey PRIMARY KEY (id_certificado);


--
-- TOC entry 6448 (class 2606 OID 3244356)
-- Name: cierreunidad_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cierreunidad
    ADD CONSTRAINT cierreunidad_cod UNIQUE (id_tipo_personal, mes_cierre);


--
-- TOC entry 6450 (class 2606 OID 3244358)
-- Name: cierreunidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cierreunidad
    ADD CONSTRAINT cierreunidad_pkey PRIMARY KEY (id_cierre_unidad);


--
-- TOC entry 6454 (class 2606 OID 3244360)
-- Name: ciudad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ciudad
    ADD CONSTRAINT ciudad_pkey PRIMARY KEY (id_ciudad);


--
-- TOC entry 6456 (class 2606 OID 3244362)
-- Name: clasificacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificacion
    ADD CONSTRAINT clasificacion_cod UNIQUE (cod_clasificacion);


--
-- TOC entry 6458 (class 2606 OID 3244364)
-- Name: clasificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificacion
    ADD CONSTRAINT clasificacion_pkey PRIMARY KEY (id_clasificacion);


--
-- TOC entry 6460 (class 2606 OID 3244366)
-- Name: clasificaciond_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT clasificaciond_cod UNIQUE (id_dependencia, id_caracteristica_dependencia);


--
-- TOC entry 6462 (class 2606 OID 3244368)
-- Name: clasificaciondependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT clasificaciondependencia_pkey PRIMARY KEY (id_clasificacion_dependencia);


--
-- TOC entry 6465 (class 2606 OID 3244370)
-- Name: clasificacionpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT clasificacionpersonal_pkey PRIMARY KEY (id_clasificacion_personal);


--
-- TOC entry 6469 (class 2606 OID 3244372)
-- Name: comisionservicio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY comisionservicio
    ADD CONSTRAINT comisionservicio_pkey PRIMARY KEY (id_comision_servicio);


--
-- TOC entry 6472 (class 2606 OID 3244374)
-- Name: comisionservicioext_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY comisionservicioext
    ADD CONSTRAINT comisionservicioext_pkey PRIMARY KEY (id_comision_servicio_ext);


--
-- TOC entry 6476 (class 2606 OID 3244376)
-- Name: concepto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT concepto_pkey PRIMARY KEY (id_concepto);


--
-- TOC entry 6480 (class 2606 OID 3244378)
-- Name: conceptoasociado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT conceptoasociado_pkey PRIMARY KEY (id_concepto_asociado);


--
-- TOC entry 6482 (class 2606 OID 3244380)
-- Name: conceptoc_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT conceptoc_cod UNIQUE (id_concepto_tipo_personal, id_cargo);


--
-- TOC entry 6484 (class 2606 OID 3244382)
-- Name: conceptoc_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT conceptoc_pkey PRIMARY KEY (id_concepto_cargo);


--
-- TOC entry 6487 (class 2606 OID 3244384)
-- Name: conceptocargoanio_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT conceptocargoanio_cod UNIQUE (id_concepto_tipo_personal, id_cargo, anios);


--
-- TOC entry 6489 (class 2606 OID 3244386)
-- Name: conceptocargoanio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT conceptocargoanio_pkey PRIMARY KEY (id_concepto_cargo_anio);


--
-- TOC entry 6491 (class 2606 OID 3244388)
-- Name: conceptoconstancia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT conceptoconstancia_pkey PRIMARY KEY (id_concepto_constancia);


--
-- TOC entry 6497 (class 2606 OID 3244390)
-- Name: conceptocuencont_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT conceptocuencont_cod UNIQUE (id_concepto_tipo_personal, id_cuenta_contable);


--
-- TOC entry 6499 (class 2606 OID 3244392)
-- Name: conceptocuencont_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT conceptocuencont_pkey PRIMARY KEY (id_concepto_cuenta_contable);


--
-- TOC entry 6493 (class 2606 OID 3244394)
-- Name: conceptocuenta_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT conceptocuenta_cod UNIQUE (id_concepto_tipo_personal, id_cuenta_presupuesto);


--
-- TOC entry 6495 (class 2606 OID 3244396)
-- Name: conceptocuenta_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT conceptocuenta_pkey PRIMARY KEY (id_concepto_cuenta);


--
-- TOC entry 6501 (class 2606 OID 3244398)
-- Name: conceptodepend_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT conceptodepend_pkey PRIMARY KEY (id_concepto_dependencia);


--
-- TOC entry 6503 (class 2606 OID 3244400)
-- Name: conceptodependen_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT conceptodependen_cod UNIQUE (id_concepto_tipo_personal, id_dependencia);


--
-- TOC entry 6505 (class 2606 OID 3244402)
-- Name: conceptodiplomatico_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT conceptodiplomatico_pkey PRIMARY KEY (id_concepto_diplomatico);


--
-- TOC entry 6507 (class 2606 OID 3244404)
-- Name: conceptodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT conceptodocente_pkey PRIMARY KEY (id_concepto_docente);


--
-- TOC entry 6509 (class 2606 OID 3244406)
-- Name: conceptoesp_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT conceptoesp_cod UNIQUE (id_uel_especifica, id_concepto_tipo_personal);


--
-- TOC entry 6511 (class 2606 OID 3244408)
-- Name: conceptoesp_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT conceptoesp_pkey PRIMARY KEY (id_concepto_especifica);


--
-- TOC entry 6513 (class 2606 OID 3244410)
-- Name: conceptoevaluacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoevaluacion
    ADD CONSTRAINT conceptoevaluacion_cod UNIQUE (id_concepto_tipo_personal);


--
-- TOC entry 6515 (class 2606 OID 3244412)
-- Name: conceptoevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoevaluacion
    ADD CONSTRAINT conceptoevaluacion_pkey PRIMARY KEY (id_concepto_evaluacion);


--
-- TOC entry 6521 (class 2606 OID 3244414)
-- Name: conceptofijo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT conceptofijo_pkey PRIMARY KEY (id_concepto_fijo);


--
-- TOC entry 6524 (class 2606 OID 3244416)
-- Name: conceptoliquidacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT conceptoliquidacion_pkey PRIMARY KEY (id_concepto_variable);


--
-- TOC entry 6526 (class 2606 OID 3244418)
-- Name: conceptomovimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT conceptomovimiento_pkey PRIMARY KEY (id_concepto_movimiento);


--
-- TOC entry 6528 (class 2606 OID 3244420)
-- Name: conceptoprestaciones_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT conceptoprestaciones_pkey PRIMARY KEY (id_concepto_prestaciones);


--
-- TOC entry 6530 (class 2606 OID 3244422)
-- Name: conceptopresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT conceptopresupuesto_pkey PRIMARY KEY (id_concepto_presupuesto);


--
-- TOC entry 6532 (class 2606 OID 3244424)
-- Name: conceptoproyectado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoproyectado
    ADD CONSTRAINT conceptoproyectado_pkey PRIMARY KEY (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal);


--
-- TOC entry 6534 (class 2606 OID 3244426)
-- Name: conceptoresumen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoresumen
    ADD CONSTRAINT conceptoresumen_pkey PRIMARY KEY (id_concepto_resumen);


--
-- TOC entry 6537 (class 2606 OID 3244428)
-- Name: conceptotipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT conceptotipopersonal_pkey PRIMARY KEY (id_concepto_tipo_personal);


--
-- TOC entry 6539 (class 2606 OID 3244430)
-- Name: conceptoutilidades_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT conceptoutilidades_cod UNIQUE (id_tipo_personal, id_concepto_tipo_personal);


--
-- TOC entry 6541 (class 2606 OID 3244432)
-- Name: conceptoutilidades_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT conceptoutilidades_pkey PRIMARY KEY (id_concepto_utilidades);


--
-- TOC entry 6543 (class 2606 OID 3244434)
-- Name: conceptovacaciones_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT conceptovacaciones_cod UNIQUE (id_tipo_personal, id_concepto_tipo_personal);


--
-- TOC entry 6545 (class 2606 OID 3244436)
-- Name: conceptovacaciones_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT conceptovacaciones_pkey PRIMARY KEY (id_concepto_vacaciones);


--
-- TOC entry 6549 (class 2606 OID 3244438)
-- Name: conceptovariable_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT conceptovariable_pkey PRIMARY KEY (id_concepto_variable);


--
-- TOC entry 6551 (class 2606 OID 3244440)
-- Name: concurso_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concurso
    ADD CONSTRAINT concurso_pkey PRIMARY KEY (id_concurso);


--
-- TOC entry 6553 (class 2606 OID 3244442)
-- Name: concursocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concursocargo
    ADD CONSTRAINT concursocargo_pkey PRIMARY KEY (id_concurso_cargo);


--
-- TOC entry 6555 (class 2606 OID 3244444)
-- Name: constancia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT constancia_pkey PRIMARY KEY (id_constancia);


--
-- TOC entry 6557 (class 2606 OID 3244446)
-- Name: continente_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY continente
    ADD CONSTRAINT continente_cod UNIQUE (cod_continente);


--
-- TOC entry 6559 (class 2606 OID 3244448)
-- Name: continente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY continente
    ADD CONSTRAINT continente_pkey PRIMARY KEY (id_continente);


--
-- TOC entry 6561 (class 2606 OID 3244450)
-- Name: contrato_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT contrato_cod UNIQUE (id_personal, id_tipo_contrato, fecha_inicio);


--
-- TOC entry 6563 (class 2606 OID 3244452)
-- Name: contrato_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT contrato_pkey PRIMARY KEY (id_contrato);


--
-- TOC entry 6565 (class 2606 OID 3244454)
-- Name: contratocolectivo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contratocolectivo
    ADD CONSTRAINT contratocolectivo_cod UNIQUE (cod_contrato_colectivo);


--
-- TOC entry 6567 (class 2606 OID 3244456)
-- Name: contratocolectivo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contratocolectivo
    ADD CONSTRAINT contratocolectivo_pkey PRIMARY KEY (id_contrato_colectivo);


--
-- TOC entry 6569 (class 2606 OID 3244458)
-- Name: contratosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contratosplan
    ADD CONSTRAINT contratosplan_pkey PRIMARY KEY (id_contratos_plan);


--
-- TOC entry 6571 (class 2606 OID 3244460)
-- Name: credencial_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT credencial_pkey PRIMARY KEY (id_credencial);


--
-- TOC entry 6573 (class 2606 OID 3244462)
-- Name: cuadroonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuadroonapre
    ADD CONSTRAINT cuadroonapre_pkey PRIMARY KEY (id_cuadro_onapre);


--
-- TOC entry 6575 (class 2606 OID 3244464)
-- Name: cuentabanco_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT cuentabanco_cod UNIQUE (cod_cuenta_banco);


--
-- TOC entry 6577 (class 2606 OID 3244466)
-- Name: cuentabanco_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT cuentabanco_pkey PRIMARY KEY (id_cuenta_banco);


--
-- TOC entry 6579 (class 2606 OID 3244468)
-- Name: cuentacontable_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT cuentacontable_cod UNIQUE (cod_contable);


--
-- TOC entry 6581 (class 2606 OID 3244470)
-- Name: cuentacontable_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT cuentacontable_pkey PRIMARY KEY (id_cuenta_contable);


--
-- TOC entry 6583 (class 2606 OID 3244472)
-- Name: cuentapresupuesto_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT cuentapresupuesto_cod UNIQUE (cod_presupuesto);


--
-- TOC entry 6585 (class 2606 OID 3244474)
-- Name: cuentapresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT cuentapresupuesto_pkey PRIMARY KEY (id_cuenta_presupuesto);


--
-- TOC entry 6588 (class 2606 OID 3244476)
-- Name: curso_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT curso_pkey PRIMARY KEY (id_curso);


--
-- TOC entry 6593 (class 2606 OID 3244478)
-- Name: cursoentidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT cursoentidad_pkey PRIMARY KEY (id_curso_entidad);


--
-- TOC entry 6596 (class 2606 OID 3244480)
-- Name: declaracion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT declaracion_pkey PRIMARY KEY (id_declaracion);


--
-- TOC entry 6599 (class 2606 OID 3244482)
-- Name: dedicaciondocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dedicaciondocente
    ADD CONSTRAINT dedicaciondocente_pkey PRIMARY KEY (id_dedicacion_docente);


--
-- TOC entry 6601 (class 2606 OID 3244484)
-- Name: denominacionticket_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT denominacionticket_cod UNIQUE (id_tipo_personal, valor);


--
-- TOC entry 6603 (class 2606 OID 3244486)
-- Name: denominacionticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT denominacionticket_pkey PRIMARY KEY (id_denominacion_ticket);


--
-- TOC entry 6606 (class 2606 OID 3244488)
-- Name: dependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT dependencia_pkey PRIMARY KEY (id_dependencia);


--
-- TOC entry 6608 (class 2606 OID 3244490)
-- Name: dependenciajud_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT dependenciajud_cod UNIQUE (id_dependencia);


--
-- TOC entry 6610 (class 2606 OID 3244492)
-- Name: dependenciajud_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT dependenciajud_pkey PRIMARY KEY (id_dependencia_judicial);


--
-- TOC entry 6612 (class 2606 OID 3244494)
-- Name: descuentoticket_1; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY descuentoticket
    ADD CONSTRAINT descuentoticket_1 UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 6614 (class 2606 OID 3244496)
-- Name: descuentoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY descuentoticket
    ADD CONSTRAINT descuentoticket_pkey PRIMARY KEY (id_descuento_ticket);


--
-- TOC entry 6616 (class 2606 OID 3244498)
-- Name: detalledisquete_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT detalledisquete_cod UNIQUE (id_disquete, tipo_registro, numero_campo);


--
-- TOC entry 6618 (class 2606 OID 3244500)
-- Name: detalledisquete_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT detalledisquete_pkey PRIMARY KEY (id_detalle_disquete);


--
-- TOC entry 6620 (class 2606 OID 3244502)
-- Name: detalletabulador_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabulador
    ADD CONSTRAINT detalletabulador_cod UNIQUE (id_tabulador, grado, sub_grado, paso);


--
-- TOC entry 6622 (class 2606 OID 3244504)
-- Name: detalletabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabulador
    ADD CONSTRAINT detalletabulador_pkey PRIMARY KEY (id_detalle_tabulador);


--
-- TOC entry 6624 (class 2606 OID 3244506)
-- Name: detalletabuladormed_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormed
    ADD CONSTRAINT detalletabuladormed_cod UNIQUE (id_tabulador, cod_cargo);


--
-- TOC entry 6626 (class 2606 OID 3244508)
-- Name: detalletabuladormed_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormed
    ADD CONSTRAINT detalletabuladormed_pkey PRIMARY KEY (id_detalle_tabulador_med);


--
-- TOC entry 6628 (class 2606 OID 3244510)
-- Name: detalletabuladormre_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT detalletabuladormre_cod UNIQUE (id_tabulador, id_ciudad, nivel);


--
-- TOC entry 6630 (class 2606 OID 3244512)
-- Name: detalletabuladormre_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT detalletabuladormre_pkey PRIMARY KEY (id_detalle_tabulador_mre);


--
-- TOC entry 6632 (class 2606 OID 3244514)
-- Name: detalletabuladoronu_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT detalletabuladoronu_cod UNIQUE (id_tabulador, nivel, estado_civil, anios_servicio);


--
-- TOC entry 6634 (class 2606 OID 3244516)
-- Name: detalletabuladoronu_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT detalletabuladoronu_pkey PRIMARY KEY (id_detalle_tabulador_onu);


--
-- TOC entry 6636 (class 2606 OID 3244518)
-- Name: disquete_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT disquete_cod UNIQUE (cod_disquete);


--
-- TOC entry 6638 (class 2606 OID 3244520)
-- Name: disquete_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT disquete_pkey PRIMARY KEY (id_disquete);


--
-- TOC entry 6640 (class 2606 OID 3244522)
-- Name: dotacioncargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT dotacioncargo_cod UNIQUE (id_tipo_personal, id_cargo, id_dotacion_cargo, id_subtipo_dotacion);


--
-- TOC entry 6642 (class 2606 OID 3244524)
-- Name: dotacioncargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT dotacioncargo_pkey PRIMARY KEY (id_dotacion_cargo);


--
-- TOC entry 6644 (class 2606 OID 3244526)
-- Name: dotacionentregada_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacionentregada
    ADD CONSTRAINT dotacionentregada_pkey PRIMARY KEY (id_dotacion_entregada);


--
-- TOC entry 6646 (class 2606 OID 3244528)
-- Name: dotaciontrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT dotaciontrabajador_pkey PRIMARY KEY (id_dotacion_trabajador);


--
-- TOC entry 6649 (class 2606 OID 3244530)
-- Name: educacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT educacion_pkey PRIMARY KEY (id_educacion);


--
-- TOC entry 6651 (class 2606 OID 3244532)
-- Name: elegible_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegible
    ADD CONSTRAINT elegible_pkey PRIMARY KEY (id_elegible);


--
-- TOC entry 6653 (class 2606 OID 3244534)
-- Name: elegibleactividaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT elegibleactividaddocente_pkey PRIMARY KEY (id_elegible_actividad_docente);


--
-- TOC entry 6655 (class 2606 OID 3244536)
-- Name: elegibleafiliacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleafiliacion
    ADD CONSTRAINT elegibleafiliacion_pkey PRIMARY KEY (id_elegible_afiliacion);


--
-- TOC entry 6657 (class 2606 OID 3244538)
-- Name: elegiblecertificacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblecertificacion
    ADD CONSTRAINT elegiblecertificacion_pkey PRIMARY KEY (id_elegible_certificacion);


--
-- TOC entry 6659 (class 2606 OID 3244540)
-- Name: elegibleeducacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleeducacion
    ADD CONSTRAINT elegibleeducacion_pkey PRIMARY KEY (id_elegible_educacion);


--
-- TOC entry 6661 (class 2606 OID 3244542)
-- Name: elegibleestudio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleestudio
    ADD CONSTRAINT elegibleestudio_pkey PRIMARY KEY (id_elegible_estudio);


--
-- TOC entry 6663 (class 2606 OID 3244544)
-- Name: elegibleexperiencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleexperiencia
    ADD CONSTRAINT elegibleexperiencia_pkey PRIMARY KEY (id_elegible_experiencia);


--
-- TOC entry 6665 (class 2606 OID 3244546)
-- Name: elegiblefamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblefamiliar
    ADD CONSTRAINT elegiblefamiliar_pkey PRIMARY KEY (id_elegible_familiar);


--
-- TOC entry 6667 (class 2606 OID 3244548)
-- Name: elegiblehabilidad_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT elegiblehabilidad_cod UNIQUE (id_elegible, id_tipo_habilidad);


--
-- TOC entry 6669 (class 2606 OID 3244550)
-- Name: elegiblehabilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT elegiblehabilidad_pkey PRIMARY KEY (id_elegible_habilidad);


--
-- TOC entry 6671 (class 2606 OID 3244552)
-- Name: elegibleidioma_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleidioma
    ADD CONSTRAINT elegibleidioma_cod UNIQUE (id_elegible, id_tipo_idioma);


--
-- TOC entry 6673 (class 2606 OID 3244554)
-- Name: elegibleidioma_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleidioma
    ADD CONSTRAINT elegibleidioma_pkey PRIMARY KEY (id_elegible_idioma);


--
-- TOC entry 6675 (class 2606 OID 3244556)
-- Name: elegibleorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleorganismo
    ADD CONSTRAINT elegibleorganismo_pkey PRIMARY KEY (id_elegible_organismo);


--
-- TOC entry 6677 (class 2606 OID 3244558)
-- Name: elegibleotraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleotraactividad
    ADD CONSTRAINT elegibleotraactividad_pkey PRIMARY KEY (id_elegible_otra_actividad);


--
-- TOC entry 6679 (class 2606 OID 3244560)
-- Name: elegibleprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleprofesion
    ADD CONSTRAINT elegibleprofesion_pkey PRIMARY KEY (id_elegible_profesion);


--
-- TOC entry 6681 (class 2606 OID 3244562)
-- Name: elegiblepublicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblepublicacion
    ADD CONSTRAINT elegiblepublicacion_pkey PRIMARY KEY (id_elegible_publicacion);


--
-- TOC entry 6683 (class 2606 OID 3244564)
-- Name: embargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT embargo_cod UNIQUE (id_personal, fecha_vigencia);


--
-- TOC entry 6685 (class 2606 OID 3244566)
-- Name: embargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT embargo_pkey PRIMARY KEY (id_embargo);


--
-- TOC entry 6687 (class 2606 OID 3244568)
-- Name: embargoconcepto_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT embargoconcepto_cod UNIQUE (id_embargo, id_concepto);


--
-- TOC entry 6689 (class 2606 OID 3244570)
-- Name: embargoconcepto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT embargoconcepto_pkey PRIMARY KEY (id_embargo_concepto);


--
-- TOC entry 6691 (class 2606 OID 3244572)
-- Name: encabezadorendicionmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY encabezadorendicionmensual
    ADD CONSTRAINT encabezadorendicionmensual_pkey PRIMARY KEY (id_encabezado_rendicion_mensual);


--
-- TOC entry 6693 (class 2606 OID 3244574)
-- Name: encabezadoresumenmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY encabezadoresumenmensual
    ADD CONSTRAINT encabezadoresumenmensual_pkey PRIMARY KEY (id_encabezado_resumen_mensual);


--
-- TOC entry 6696 (class 2606 OID 3244576)
-- Name: encargaduria_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT encargaduria_pkey PRIMARY KEY (id_encargaduria);


--
-- TOC entry 6699 (class 2606 OID 3244578)
-- Name: entidadeducativa_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT entidadeducativa_pkey PRIMARY KEY (id_entidad_educativa);


--
-- TOC entry 6703 (class 2606 OID 3244580)
-- Name: escalacuadroonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY escalacuadroonapre
    ADD CONSTRAINT escalacuadroonapre_pkey PRIMARY KEY (id_escalacuadroonapre);


--
-- TOC entry 6705 (class 2606 OID 3244582)
-- Name: establecimientosalud_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT establecimientosalud_cod UNIQUE (cod_establecimiento_salud);


--
-- TOC entry 6707 (class 2606 OID 3244584)
-- Name: establecimientosalud_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT establecimientosalud_pkey PRIMARY KEY (id_establecimiento_salud);


--
-- TOC entry 6711 (class 2606 OID 3244586)
-- Name: estado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estado
    ADD CONSTRAINT estado_pkey PRIMARY KEY (id_estado);


--
-- TOC entry 6713 (class 2606 OID 3244588)
-- Name: estructura_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estructura
    ADD CONSTRAINT estructura_pkey PRIMARY KEY (id_estructura);


--
-- TOC entry 6716 (class 2606 OID 3244590)
-- Name: estudio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT estudio_pkey PRIMARY KEY (id_estudio);


--
-- TOC entry 6718 (class 2606 OID 3244592)
-- Name: evaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY evaluacion
    ADD CONSTRAINT evaluacion_pkey PRIMARY KEY (id_evaluacion);


--
-- TOC entry 6720 (class 2606 OID 3244594)
-- Name: excepcionbeneficiario_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT excepcionbeneficiario_cod UNIQUE (id_personal, id_familiar, id_plan_poliza);


--
-- TOC entry 6722 (class 2606 OID 3244596)
-- Name: excepcionbeneficiario_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT excepcionbeneficiario_pkey PRIMARY KEY (id_excepcion_beneficiario);


--
-- TOC entry 6724 (class 2606 OID 3244598)
-- Name: excepcionticket_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT excepcionticket_cod UNIQUE (id_trabajador);


--
-- TOC entry 6726 (class 2606 OID 3244600)
-- Name: excepcionticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT excepcionticket_pkey PRIMARY KEY (id_excepcion_ticket);


--
-- TOC entry 6728 (class 2606 OID 3244602)
-- Name: excepciontitular_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT excepciontitular_cod UNIQUE (id_personal, id_plan_poliza);


--
-- TOC entry 6730 (class 2606 OID 3244604)
-- Name: excepciontitular_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT excepciontitular_pkey PRIMARY KEY (id_excepcion_titular);


--
-- TOC entry 6733 (class 2606 OID 3244606)
-- Name: experiencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experiencia
    ADD CONSTRAINT experiencia_pkey PRIMARY KEY (id_experiencia);


--
-- TOC entry 6735 (class 2606 OID 3244608)
-- Name: experienciacargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT experienciacargo_cod UNIQUE (id_cargo, id_cargo_requerido);


--
-- TOC entry 6737 (class 2606 OID 3244610)
-- Name: experienciacargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT experienciacargo_pkey PRIMARY KEY (id_experiencia_cargo);


--
-- TOC entry 6740 (class 2606 OID 3244612)
-- Name: experiencianoest_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experiencianoest
    ADD CONSTRAINT experiencianoest_pkey PRIMARY KEY (id_experiencia_no_est);


--
-- TOC entry 6742 (class 2606 OID 3244614)
-- Name: familiar_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY familiar
    ADD CONSTRAINT familiar_pkey PRIMARY KEY (id_familiar);


--
-- TOC entry 6744 (class 2606 OID 3244616)
-- Name: fideicomiso_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fideicomiso
    ADD CONSTRAINT fideicomiso_pkey PRIMARY KEY (id_fideicomiso);


--
-- TOC entry 6746 (class 2606 OID 3244618)
-- Name: firmasreportes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY firmasreportes
    ADD CONSTRAINT firmasreportes_pkey PRIMARY KEY (id_firmas_reportes);


--
-- TOC entry 6750 (class 2606 OID 3244620)
-- Name: frecuenciapago_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY frecuenciapago
    ADD CONSTRAINT frecuenciapago_pkey PRIMARY KEY (id_frecuencia_pago);


--
-- TOC entry 6753 (class 2606 OID 3244622)
-- Name: frecuenciatipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY frecuenciatipopersonal
    ADD CONSTRAINT frecuenciatipopersonal_pkey PRIMARY KEY (id_frecuencia_tipo_personal);


--
-- TOC entry 6755 (class 2606 OID 3244624)
-- Name: fuentefinanciamiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY fuentefinanciamiento
    ADD CONSTRAINT fuentefinanciamiento_pkey PRIMARY KEY (id_fuente_financiamiento);


--
-- TOC entry 6758 (class 2606 OID 3244626)
-- Name: gradodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gradodocente
    ADD CONSTRAINT gradodocente_pkey PRIMARY KEY (id_grado_docente);


--
-- TOC entry 6760 (class 2606 OID 3244628)
-- Name: gradoniveldocente_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT gradoniveldocente_cod UNIQUE (id_grado_docente, id_nivel_docente);


--
-- TOC entry 6762 (class 2606 OID 3244630)
-- Name: gradoniveldocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT gradoniveldocente_pkey PRIMARY KEY (id_grado_nivel_docente);


--
-- TOC entry 6765 (class 2606 OID 3244632)
-- Name: gremio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gremio
    ADD CONSTRAINT gremio_pkey PRIMARY KEY (id_gremio);


--
-- TOC entry 6768 (class 2606 OID 3244634)
-- Name: gruponomina_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gruponomina
    ADD CONSTRAINT gruponomina_pkey PRIMARY KEY (id_grupo_nomina);


--
-- TOC entry 6771 (class 2606 OID 3244636)
-- Name: grupoocupacional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoocupacional
    ADD CONSTRAINT grupoocupacional_pkey PRIMARY KEY (id_grupo_ocupacional);


--
-- TOC entry 6775 (class 2606 OID 3244638)
-- Name: grupoorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoorganismo
    ADD CONSTRAINT grupoorganismo_pkey PRIMARY KEY (id_grupo_organismo);


--
-- TOC entry 6778 (class 2606 OID 3244640)
-- Name: grupoprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoprofesion
    ADD CONSTRAINT grupoprofesion_pkey PRIMARY KEY (id_grupo_profesion);


--
-- TOC entry 6780 (class 2606 OID 3244642)
-- Name: grupoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoticket
    ADD CONSTRAINT grupoticket_pkey PRIMARY KEY (id_grupo_ticket);


--
-- TOC entry 6782 (class 2606 OID 3244644)
-- Name: guarderia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderia
    ADD CONSTRAINT guarderia_cod UNIQUE (cod_guarderia);


--
-- TOC entry 6784 (class 2606 OID 3244646)
-- Name: guarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderia
    ADD CONSTRAINT guarderia_pkey PRIMARY KEY (id_guarderia);


--
-- TOC entry 6786 (class 2606 OID 3244648)
-- Name: guarderiafamiliar_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT guarderiafamiliar_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6788 (class 2606 OID 3244650)
-- Name: guarderiafamiliar_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT guarderiafamiliar_pkey PRIMARY KEY (id_guarderia_familiar);


--
-- TOC entry 6790 (class 2606 OID 3244652)
-- Name: habilidad_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT habilidad_cod UNIQUE (id_personal, id_tipo_habilidad);


--
-- TOC entry 6792 (class 2606 OID 3244654)
-- Name: habilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT habilidad_pkey PRIMARY KEY (id_habilidad);


--
-- TOC entry 6794 (class 2606 OID 3244656)
-- Name: habilidadcargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT habilidadcargo_cod UNIQUE (id_cargo, id_tipo_habilidad, nivel);


--
-- TOC entry 6796 (class 2606 OID 3244658)
-- Name: habilidadcargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT habilidadcargo_pkey PRIMARY KEY (id_habilidad_cargo);


--
-- TOC entry 6798 (class 2606 OID 3244660)
-- Name: historialapn_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT historialapn_pkey PRIMARY KEY (id_historial_apn);


--
-- TOC entry 6800 (class 2606 OID 3244662)
-- Name: historialorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT historialorganismo_pkey PRIMARY KEY (id_historial_organismo);


--
-- TOC entry 6803 (class 2606 OID 3244664)
-- Name: historialremun_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT historialremun_pkey PRIMARY KEY (id_historial_remun);


--
-- TOC entry 6809 (class 2606 OID 3244666)
-- Name: historico_devengado_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT historico_devengado_cod UNIQUE (id_personal, anio, mes);


--
-- TOC entry 6811 (class 2606 OID 3244668)
-- Name: historico_devengado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT historico_devengado_pkey PRIMARY KEY (id_historico_devengado_integral);


--
-- TOC entry 6805 (class 2606 OID 3244670)
-- Name: historicobaseislr_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicobaseislr
    ADD CONSTRAINT historicobaseislr_pkey PRIMARY KEY (id_historico_base_islr);


--
-- TOC entry 6807 (class 2606 OID 3244672)
-- Name: historicocargos_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicocargos
    ADD CONSTRAINT historicocargos_pkey PRIMARY KEY (id_historico_cargos);


--
-- TOC entry 6816 (class 2606 OID 3244674)
-- Name: historiconomina_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT historiconomina_pkey PRIMARY KEY (id_historico_nomina);


--
-- TOC entry 6821 (class 2606 OID 3244676)
-- Name: historicoquincena_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT historicoquincena_pkey PRIMARY KEY (id_historico_quincena);


--
-- TOC entry 6826 (class 2606 OID 3244678)
-- Name: historicosemana_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT historicosemana_pkey PRIMARY KEY (id_historico_semana);


--
-- TOC entry 6828 (class 2606 OID 3244680)
-- Name: historicoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT historicoticket_pkey PRIMARY KEY (id_historico_ticket);


--
-- TOC entry 7132 (class 2606 OID 3244682)
-- Name: id_pueblo_indigena_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY puebloindigena
    ADD CONSTRAINT id_pueblo_indigena_pkey PRIMARY KEY (id_pueblo_indigena);


--
-- TOC entry 6830 (class 2606 OID 3244684)
-- Name: identity_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY identity
    ADD CONSTRAINT identity_pkey PRIMARY KEY (name);


--
-- TOC entry 6833 (class 2606 OID 3244686)
-- Name: idioma_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT idioma_pkey PRIMARY KEY (id_idioma);


--
-- TOC entry 6835 (class 2606 OID 3244688)
-- Name: inhabilitado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY inhabilitado
    ADD CONSTRAINT inhabilitado_pkey PRIMARY KEY (id_inhabilitado);


--
-- TOC entry 6837 (class 2606 OID 3244690)
-- Name: instancia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT instancia_cod UNIQUE (cod_instancia);


--
-- TOC entry 6839 (class 2606 OID 3244692)
-- Name: instancia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT instancia_pkey PRIMARY KEY (id_instancia);


--
-- TOC entry 6842 (class 2606 OID 3244694)
-- Name: institucion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY institucion
    ADD CONSTRAINT institucion_pkey PRIMARY KEY (id_institucion);


--
-- TOC entry 6844 (class 2606 OID 3244696)
-- Name: interesadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesadicional
    ADD CONSTRAINT interesadicional_pkey PRIMARY KEY (id_interes_adicional);


--
-- TOC entry 6846 (class 2606 OID 3244698)
-- Name: interesnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesnuevoregimen
    ADD CONSTRAINT interesnuevoregimen_pkey PRIMARY KEY (id_interes_nuevo_regimen);


--
-- TOC entry 6848 (class 2606 OID 3244700)
-- Name: interesviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesviejoregimen
    ADD CONSTRAINT interesviejoregimen_pkey PRIMARY KEY (id_interes_viejo_regimen);


--
-- TOC entry 6850 (class 2606 OID 3244702)
-- Name: jerarquiacategoriadocente_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT jerarquiacategoriadocente_cod UNIQUE (id_jerarquia_docente, id_categoria_docente);


--
-- TOC entry 6852 (class 2606 OID 3244704)
-- Name: jerarquiacategoriadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT jerarquiacategoriadocente_pkey PRIMARY KEY (id_jerarquia_categoria_docente);


--
-- TOC entry 6855 (class 2606 OID 3244706)
-- Name: jerarquiadocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jerarquiadocente
    ADD CONSTRAINT jerarquiadocente_pkey PRIMARY KEY (id_jerarquia_docente);


--
-- TOC entry 6858 (class 2606 OID 3244708)
-- Name: jubilado_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jubilado
    ADD CONSTRAINT jubilado_pkey PRIMARY KEY (id_jubilado);


--
-- TOC entry 6860 (class 2606 OID 3244710)
-- Name: juguete_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT juguete_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 6862 (class 2606 OID 3244712)
-- Name: juguete_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT juguete_pkey PRIMARY KEY (id_juguete);


--
-- TOC entry 6866 (class 2606 OID 3244714)
-- Name: liqinteresnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresnuevoregimen
    ADD CONSTRAINT liqinteresnuevoregimen_pkey PRIMARY KEY (id_liquidacion_interes_nuevo_regimen);


--
-- TOC entry 6864 (class 2606 OID 3244716)
-- Name: liquidacioninteresadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresadicional
    ADD CONSTRAINT liquidacioninteresadicional_pkey PRIMARY KEY (id_liquidacion_interes_adicional);


--
-- TOC entry 6868 (class 2606 OID 3244718)
-- Name: liquidacioninteresviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresviejoregimen
    ADD CONSTRAINT liquidacioninteresviejoregimen_pkey PRIMARY KEY (id_liquidacion_interes_viejo_regimen);


--
-- TOC entry 6870 (class 2606 OID 3244720)
-- Name: liquidacionprestmen_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionprestacionesmensuales
    ADD CONSTRAINT liquidacionprestmen_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 6872 (class 2606 OID 3244722)
-- Name: liquidacionprestmen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionprestacionesmensuales
    ADD CONSTRAINT liquidacionprestmen_pkey PRIMARY KEY (id_liquidacion_prestaciones_mensuales);


--
-- TOC entry 6874 (class 2606 OID 3244724)
-- Name: liquidacionresumennuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionresumennuevoregimen
    ADD CONSTRAINT liquidacionresumennuevoregimen_pkey PRIMARY KEY (id_liquidacion_resumen_nuevo_regimen);


--
-- TOC entry 6876 (class 2606 OID 3244726)
-- Name: liquidacionresumenviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionresumenviejoregimen
    ADD CONSTRAINT liquidacionresumenviejoregimen_pkey PRIMARY KEY (id_liquidacion_resumen_viejo_regimen);


--
-- TOC entry 6879 (class 2606 OID 3244728)
-- Name: lugarpago_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT lugarpago_pkey PRIMARY KEY (id_lugar_pago);


--
-- TOC entry 7442 (class 2606 OID 13550593)
-- Name: m_fiscales_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY m_fiscales
    ADD CONSTRAINT m_fiscales_pkey PRIMARY KEY (id_fiscales);


--
-- TOC entry 6882 (class 2606 OID 3244730)
-- Name: manualcargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT manualcargo_pkey PRIMARY KEY (id_manual_cargo);


--
-- TOC entry 6885 (class 2606 OID 3244732)
-- Name: manualpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT manualpersonal_pkey PRIMARY KEY (id_manual_personal);


--
-- TOC entry 6887 (class 2606 OID 3244734)
-- Name: materia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT materia_cod UNIQUE (cod_materia);


--
-- TOC entry 6889 (class 2606 OID 3244736)
-- Name: materia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT materia_pkey PRIMARY KEY (id_materia);


--
-- TOC entry 6892 (class 2606 OID 3244738)
-- Name: mes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mes
    ADD CONSTRAINT mes_pkey PRIMARY KEY (id_mes);


--
-- TOC entry 6894 (class 2606 OID 3244740)
-- Name: mesesjubilacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mesesjubilacion
    ADD CONSTRAINT mesesjubilacion_pkey PRIMARY KEY (id_trabajador, anio, mes);


--
-- TOC entry 6896 (class 2606 OID 3244742)
-- Name: movimientocargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientocargo
    ADD CONSTRAINT movimientocargo_cod UNIQUE (cod_movimiento_cargo);


--
-- TOC entry 6898 (class 2606 OID 3244744)
-- Name: movimientocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientocargo
    ADD CONSTRAINT movimientocargo_pkey PRIMARY KEY (id_movimiento_cargo);


--
-- TOC entry 6901 (class 2606 OID 3244746)
-- Name: movimientopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientopersonal
    ADD CONSTRAINT movimientopersonal_pkey PRIMARY KEY (id_movimiento_personal);


--
-- TOC entry 6903 (class 2606 OID 3244748)
-- Name: movimientoregistro_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT movimientoregistro_pkey PRIMARY KEY (id_movimiento_registro);


--
-- TOC entry 6905 (class 2606 OID 3244750)
-- Name: movimientoscio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT movimientoscio_pkey PRIMARY KEY (id_movimiento_scio);


--
-- TOC entry 6907 (class 2606 OID 3244752)
-- Name: movimientosplan_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientosplan
    ADD CONSTRAINT movimientosplan_pkey PRIMARY KEY (id_movimientos_plan);


--
-- TOC entry 6910 (class 2606 OID 3244754)
-- Name: movremuneracion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movremuneracion
    ADD CONSTRAINT movremuneracion_pkey PRIMARY KEY (id_mov_remuneracion);


--
-- TOC entry 6914 (class 2606 OID 3244756)
-- Name: municipio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY municipio
    ADD CONSTRAINT municipio_pkey PRIMARY KEY (id_municipio);


--
-- TOC entry 6916 (class 2606 OID 3244758)
-- Name: nivelbeca_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nivelbeca
    ADD CONSTRAINT nivelbeca_cod UNIQUE (nivel_educativo);


--
-- TOC entry 6918 (class 2606 OID 3244760)
-- Name: nivelbeca_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nivelbeca
    ADD CONSTRAINT nivelbeca_pkey PRIMARY KEY (id_nivel_beca);


--
-- TOC entry 6921 (class 2606 OID 3244762)
-- Name: niveldocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY niveldocente
    ADD CONSTRAINT niveldocente_pkey PRIMARY KEY (id_nivel_docente);


--
-- TOC entry 6924 (class 2606 OID 3244764)
-- Name: niveleducativo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY niveleducativo
    ADD CONSTRAINT niveleducativo_pkey PRIMARY KEY (id_nivel_educativo);


--
-- TOC entry 6926 (class 2606 OID 3244766)
-- Name: noevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY noevaluacion
    ADD CONSTRAINT noevaluacion_pkey PRIMARY KEY (id_no_evaluacion);


--
-- TOC entry 6929 (class 2606 OID 3244768)
-- Name: nombreorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nombreorganismo
    ADD CONSTRAINT nombreorganismo_pkey PRIMARY KEY (id_nombre_organismo);


--
-- TOC entry 6932 (class 2606 OID 3244770)
-- Name: nominaconversion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT nominaconversion_pkey PRIMARY KEY (id_nomina_conversion);


--
-- TOC entry 6934 (class 2606 OID 3244772)
-- Name: nominadiplomatico_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT nominadiplomatico_pkey PRIMARY KEY (id_nomina_diplomatico);


--
-- TOC entry 6936 (class 2606 OID 3244774)
-- Name: nominaespecial_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT nominaespecial_pkey PRIMARY KEY (id_nomina_especial);


--
-- TOC entry 6938 (class 2606 OID 3244776)
-- Name: opcion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY opcion
    ADD CONSTRAINT opcion_cod UNIQUE (codigo_opcion);


--
-- TOC entry 6940 (class 2606 OID 3244778)
-- Name: opcion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY opcion
    ADD CONSTRAINT opcion_pkey PRIMARY KEY (id_opcion);


--
-- TOC entry 6942 (class 2606 OID 3244780)
-- Name: operacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY operacion
    ADD CONSTRAINT operacion_cod UNIQUE (cod_operacion);


--
-- TOC entry 6944 (class 2606 OID 3244782)
-- Name: operacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY operacion
    ADD CONSTRAINT operacion_pkey PRIMARY KEY (id_operacion);


--
-- TOC entry 6948 (class 2606 OID 3244784)
-- Name: organismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organismo
    ADD CONSTRAINT organismo_pkey PRIMARY KEY (id_organismo);


--
-- TOC entry 6950 (class 2606 OID 3244786)
-- Name: otraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT otraactividad_pkey PRIMARY KEY (id_otra_actividad);


--
-- TOC entry 6954 (class 2606 OID 3244788)
-- Name: otrasalicuotas_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT otrasalicuotas_pkey PRIMARY KEY (id_otras_alicuotas);


--
-- TOC entry 6956 (class 2606 OID 3244790)
-- Name: pagoguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT pagoguarderia_cod UNIQUE (id_personal, id_familiar, anio, mes, inscripcion);


--
-- TOC entry 6958 (class 2606 OID 3244792)
-- Name: pagoguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT pagoguarderia_pkey PRIMARY KEY (id_pago_guarderia);


--
-- TOC entry 6961 (class 2606 OID 3244794)
-- Name: pais_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT pais_pkey PRIMARY KEY (id_pais);


--
-- TOC entry 6963 (class 2606 OID 3244796)
-- Name: parametroari_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroari
    ADD CONSTRAINT parametroari_cod UNIQUE (unidad_tributaria);


--
-- TOC entry 6965 (class 2606 OID 3244798)
-- Name: parametroari_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroari
    ADD CONSTRAINT parametroari_pkey PRIMARY KEY (id_parametro_ari);


--
-- TOC entry 6967 (class 2606 OID 3244800)
-- Name: parametrobeca_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrobeca
    ADD CONSTRAINT parametrobeca_pkey PRIMARY KEY (id_parametro_beca);


--
-- TOC entry 6969 (class 2606 OID 3244802)
-- Name: parametrobecageneral_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrobecageneral
    ADD CONSTRAINT parametrobecageneral_pkey PRIMARY KEY (id_parametro_beca_general);


--
-- TOC entry 6971 (class 2606 OID 3244804)
-- Name: parametrocaja_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT parametrocaja_cod UNIQUE (id_concepto_tipo_personal);


--
-- TOC entry 6973 (class 2606 OID 3244806)
-- Name: parametrocaja_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT parametrocaja_pkey PRIMARY KEY (id_parametro_caja);


--
-- TOC entry 6975 (class 2606 OID 3244808)
-- Name: parametrodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT parametrodotacion_cod UNIQUE (id_tipo_personal, id_tipo_dotacion);


--
-- TOC entry 6977 (class 2606 OID 3244810)
-- Name: parametrodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT parametrodotacion_pkey PRIMARY KEY (id_parametro_dotacion);


--
-- TOC entry 6979 (class 2606 OID 3244812)
-- Name: parametrogobierno_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT parametrogobierno_cod UNIQUE (id_grupo_organismo);


--
-- TOC entry 6981 (class 2606 OID 3244814)
-- Name: parametrogobierno_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT parametrogobierno_pkey PRIMARY KEY (id_parametro_gobierno);


--
-- TOC entry 6983 (class 2606 OID 3244816)
-- Name: parametroguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT parametroguarderia_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6985 (class 2606 OID 3244818)
-- Name: parametroguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT parametroguarderia_pkey PRIMARY KEY (id_parametro_guarderia);


--
-- TOC entry 6987 (class 2606 OID 3244820)
-- Name: parametrojubilacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT parametrojubilacion_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6989 (class 2606 OID 3244822)
-- Name: parametrojubilacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT parametrojubilacion_pkey PRIMARY KEY (id_parametro_jubilacion);


--
-- TOC entry 6991 (class 2606 OID 3244824)
-- Name: parametrojuguete_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT parametrojuguete_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6993 (class 2606 OID 3244826)
-- Name: parametrojuguete_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT parametrojuguete_pkey PRIMARY KEY (id_parametro_juguete);


--
-- TOC entry 6995 (class 2606 OID 3244828)
-- Name: parametrosistema_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrosistema
    ADD CONSTRAINT parametrosistema_pkey PRIMARY KEY (nombre_parametro);


--
-- TOC entry 6997 (class 2606 OID 3244830)
-- Name: parametroticket_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT parametroticket_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 6999 (class 2606 OID 3244832)
-- Name: parametroticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT parametroticket_pkey PRIMARY KEY (id_parametro_ticket);


--
-- TOC entry 7002 (class 2606 OID 3244834)
-- Name: parametroutiles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroutiles
    ADD CONSTRAINT parametroutiles_pkey PRIMARY KEY (id_parametro_utiles);


--
-- TOC entry 7004 (class 2606 OID 3244836)
-- Name: parametrovarios_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT parametrovarios_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 7006 (class 2606 OID 3244838)
-- Name: parametrovarios_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT parametrovarios_pkey PRIMARY KEY (id_parametro_varios);


--
-- TOC entry 7010 (class 2606 OID 3244840)
-- Name: parroquia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parroquia
    ADD CONSTRAINT parroquia_pkey PRIMARY KEY (id_parroquia);


--
-- TOC entry 7012 (class 2606 OID 3244842)
-- Name: participante_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY participante
    ADD CONSTRAINT participante_pkey PRIMARY KEY (id_participante);


--
-- TOC entry 7014 (class 2606 OID 3244844)
-- Name: partidauelespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT partidauelespecifica_cod UNIQUE (id_uel_especifica, id_cuenta_presupuesto);


--
-- TOC entry 7016 (class 2606 OID 3244846)
-- Name: partidauelespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT partidauelespecifica_pkey PRIMARY KEY (id_partida_uel_especifica);


--
-- TOC entry 7018 (class 2606 OID 3244848)
-- Name: pasantia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pasantia
    ADD CONSTRAINT pasantia_pkey PRIMARY KEY (id_pasantia);


--
-- TOC entry 7020 (class 2606 OID 3244850)
-- Name: pensioninvalidez_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pensioninvalidez
    ADD CONSTRAINT pensioninvalidez_pkey PRIMARY KEY (id_pension_invalidez);


--
-- TOC entry 7022 (class 2606 OID 3244852)
-- Name: pensionsobreviviente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pensionsobreviviviente
    ADD CONSTRAINT pensionsobreviviente_pkey PRIMARY KEY (id_pension_sobreviviente);


--
-- TOC entry 7024 (class 2606 OID 3244854)
-- Name: perfil_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT perfil_cod UNIQUE (id_cargo);


--
-- TOC entry 7026 (class 2606 OID 3244856)
-- Name: perfil_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT perfil_pkey PRIMARY KEY (id_perfil);


--
-- TOC entry 7030 (class 2606 OID 3244858)
-- Name: personal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT personal_pkey PRIMARY KEY (id_personal);


--
-- TOC entry 7033 (class 2606 OID 3244860)
-- Name: personalorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT personalorganismo_pkey PRIMARY KEY (id_personal_organismo);


--
-- TOC entry 7035 (class 2606 OID 3244862)
-- Name: plan_adiestra_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT plan_adiestra_cod UNIQUE (id_unidad_funcional, anio, numero_plan);


--
-- TOC entry 7037 (class 2606 OID 3244864)
-- Name: planadiestramiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT planadiestramiento_pkey PRIMARY KEY (id_plan_adiestramiento);


--
-- TOC entry 7039 (class 2606 OID 3244866)
-- Name: planillaarc_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT planillaarc_cod UNIQUE (id_trabajador, anio);


--
-- TOC entry 7041 (class 2606 OID 3244868)
-- Name: planillaarc_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT planillaarc_pkey PRIMARY KEY (id_planilla_arc);


--
-- TOC entry 7043 (class 2606 OID 3244870)
-- Name: planillaari_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT planillaari_cod UNIQUE (id_trabajador, anio);


--
-- TOC entry 7045 (class 2606 OID 3244872)
-- Name: planillaari_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT planillaari_pkey PRIMARY KEY (id_planilla_ari);


--
-- TOC entry 7047 (class 2606 OID 3244874)
-- Name: planpersonal_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT planpersonal_cod UNIQUE (anio, version);


--
-- TOC entry 7049 (class 2606 OID 3244876)
-- Name: planpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT planpersonal_pkey PRIMARY KEY (id_plan_personal);


--
-- TOC entry 7051 (class 2606 OID 3244878)
-- Name: planpoliza_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT planpoliza_cod UNIQUE (cod_plan_poliza);


--
-- TOC entry 7053 (class 2606 OID 3244880)
-- Name: planpoliza_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT planpoliza_pkey PRIMARY KEY (id_plan_poliza);


--
-- TOC entry 7055 (class 2606 OID 3244882)
-- Name: poliza_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT poliza_cod UNIQUE (cod_poliza);


--
-- TOC entry 7057 (class 2606 OID 3244884)
-- Name: poliza_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT poliza_pkey PRIMARY KEY (id_poliza);


--
-- TOC entry 7059 (class 2606 OID 3244886)
-- Name: postuladoconcurso_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY postuladoconcurso
    ADD CONSTRAINT postuladoconcurso_pkey PRIMARY KEY (id_postulado_concurso);


--
-- TOC entry 7061 (class 2606 OID 3244888)
-- Name: postuladoexterno_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY postuladoexterno
    ADD CONSTRAINT postuladoexterno_pkey PRIMARY KEY (id_postulado_externo);


--
-- TOC entry 7077 (class 2606 OID 3244890)
-- Name: preespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT preespecifica_cod UNIQUE (anio, id_uel_especifica, id_cuenta_presupuesto);


--
-- TOC entry 7073 (class 2606 OID 3244892)
-- Name: prestamo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT prestamo_pkey PRIMARY KEY (id_prestamo);


--
-- TOC entry 7075 (class 2606 OID 3244894)
-- Name: prestamocod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT prestamocod UNIQUE (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal);


--
-- TOC entry 7063 (class 2606 OID 3244896)
-- Name: prestmen_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestacionesmensuales
    ADD CONSTRAINT prestmen_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 7065 (class 2606 OID 3244898)
-- Name: prestmen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestacionesmensuales
    ADD CONSTRAINT prestmen_pkey PRIMARY KEY (id_prestaciones_mensuales);


--
-- TOC entry 7069 (class 2606 OID 3244900)
-- Name: prestonapre_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestacionesonapre
    ADD CONSTRAINT prestonapre_cod UNIQUE (id_trabajador, anio, mes);


--
-- TOC entry 7071 (class 2606 OID 3244902)
-- Name: prestonapre_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestacionesonapre
    ADD CONSTRAINT prestonapre_pkey PRIMARY KEY (id_prestaciones_onapre);


--
-- TOC entry 7079 (class 2606 OID 3244904)
-- Name: presupuestoespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT presupuestoespecifica_pkey PRIMARY KEY (id_presupuesto_especifica);


--
-- TOC entry 7081 (class 2606 OID 3244906)
-- Name: primaantiguedad_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT primaantiguedad_cod UNIQUE (id_tipo_personal, anios_servicio);


--
-- TOC entry 7083 (class 2606 OID 3244908)
-- Name: primaantiguedad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT primaantiguedad_pkey PRIMARY KEY (id_prima_antiguedad);


--
-- TOC entry 7085 (class 2606 OID 3244910)
-- Name: primahijo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT primahijo_cod UNIQUE (id_tipo_personal);


--
-- TOC entry 7087 (class 2606 OID 3244912)
-- Name: primahijo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT primahijo_pkey PRIMARY KEY (id_prima_hijo);


--
-- TOC entry 7089 (class 2606 OID 3244914)
-- Name: primascargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT primascargo_cod UNIQUE (id_primas_plan, id_cargo);


--
-- TOC entry 7091 (class 2606 OID 3244916)
-- Name: primascargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT primascargo_pkey PRIMARY KEY (id_primas_cargo);


--
-- TOC entry 7093 (class 2606 OID 3244918)
-- Name: primasplan_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primasplan
    ADD CONSTRAINT primasplan_cod UNIQUE (id_plan_poliza, parentesco, edad_minima);


--
-- TOC entry 7095 (class 2606 OID 3244920)
-- Name: primasplan_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primasplan
    ADD CONSTRAINT primasplan_pkey PRIMARY KEY (id_primas_plan);


--
-- TOC entry 7098 (class 2606 OID 3244922)
-- Name: profesion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesion
    ADD CONSTRAINT profesion_pkey PRIMARY KEY (id_profesion);


--
-- TOC entry 7100 (class 2606 OID 3244924)
-- Name: profesioncargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT profesioncargo_cod UNIQUE (id_cargo, id_profesion);


--
-- TOC entry 7102 (class 2606 OID 3244926)
-- Name: profesioncargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT profesioncargo_pkey PRIMARY KEY (id_profesion_cargo);


--
-- TOC entry 7105 (class 2606 OID 3244928)
-- Name: profesiontrabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT profesiontrabajador_pkey PRIMARY KEY (id_profesion_trabajador);


--
-- TOC entry 7108 (class 2606 OID 3244930)
-- Name: programa_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY programa
    ADD CONSTRAINT programa_pkey PRIMARY KEY (id_programa);


--
-- TOC entry 7110 (class 2606 OID 3244932)
-- Name: proveedorregion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorregion
    ADD CONSTRAINT proveedorregion_pkey PRIMARY KEY (id_proveedor_region);


--
-- TOC entry 7112 (class 2606 OID 3244934)
-- Name: proveedorticket_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorticket
    ADD CONSTRAINT proveedorticket_cod UNIQUE (cod_proveedor_ticket);


--
-- TOC entry 7114 (class 2606 OID 3244936)
-- Name: proveedorticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorticket
    ADD CONSTRAINT proveedorticket_pkey PRIMARY KEY (id_proveedor_ticket);


--
-- TOC entry 7116 (class 2606 OID 3244938)
-- Name: proveedorubicacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT proveedorubicacion_cod UNIQUE (codigo_ubicacion, id_proveedor_ticket);


--
-- TOC entry 7118 (class 2606 OID 3244940)
-- Name: proveedorubicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT proveedorubicacion_pkey PRIMARY KEY (id_proveedor_ubicacion);


--
-- TOC entry 7120 (class 2606 OID 3244942)
-- Name: proyecto_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT proyecto_cod UNIQUE (anio, cod_proyecto);


--
-- TOC entry 7122 (class 2606 OID 3244944)
-- Name: proyecto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT proyecto_pkey PRIMARY KEY (id_proyecto);


--
-- TOC entry 7124 (class 2606 OID 3244946)
-- Name: pruebapreseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pruebapreseleccionado
    ADD CONSTRAINT pruebapreseleccion_pkey PRIMARY KEY (id_prueba_preseleccionado);


--
-- TOC entry 7126 (class 2606 OID 3244948)
-- Name: pruebaseleccion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pruebaseleccion
    ADD CONSTRAINT pruebaseleccion_cod UNIQUE (cod_prueba);


--
-- TOC entry 7128 (class 2606 OID 3244950)
-- Name: pruebaseleccion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pruebaseleccion
    ADD CONSTRAINT pruebaseleccion_pkey PRIMARY KEY (id_prueba_seleccion);


--
-- TOC entry 7130 (class 2606 OID 3244952)
-- Name: publicacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY publicacion
    ADD CONSTRAINT publicacion_pkey PRIMARY KEY (id_publicacion);


--
-- TOC entry 7136 (class 2606 OID 3244954)
-- Name: ramoocupacional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ramoocupacional
    ADD CONSTRAINT ramoocupacional_pkey PRIMARY KEY (id_ramo_ocupacional);


--
-- TOC entry 7139 (class 2606 OID 3244956)
-- Name: reconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT reconocimiento_pkey PRIMARY KEY (id_reconocimiento);


--
-- TOC entry 7141 (class 2606 OID 3244958)
-- Name: region_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (id_region);


--
-- TOC entry 7143 (class 2606 OID 3244960)
-- Name: regioncontinente_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT regioncontinente_cod UNIQUE (cod_region_continente);


--
-- TOC entry 7145 (class 2606 OID 3244962)
-- Name: regioncontinente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT regioncontinente_pkey PRIMARY KEY (id_region_continente);


--
-- TOC entry 7148 (class 2606 OID 3244964)
-- Name: registro_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT registro_pkey PRIMARY KEY (id_registro);


--
-- TOC entry 7151 (class 2606 OID 3244966)
-- Name: registrocargos_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT registrocargos_pkey PRIMARY KEY (id_registro_cargos);


--
-- TOC entry 7153 (class 2606 OID 3244968)
-- Name: registrocargospr_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT registrocargospr_pkey PRIMARY KEY (id_registro_cargos_aprobado);


--
-- TOC entry 7155 (class 2606 OID 3244970)
-- Name: registrodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT registrodocente_pkey PRIMARY KEY (id_registro_docente);


--
-- TOC entry 7158 (class 2606 OID 3244972)
-- Name: registropersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT registropersonal_pkey PRIMARY KEY (id_registro_personal);


--
-- TOC entry 7160 (class 2606 OID 3244974)
-- Name: registrositp_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT registrositp_pkey PRIMARY KEY (id_registro_sitp);


--
-- TOC entry 7163 (class 2606 OID 3244976)
-- Name: relacionpersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY relacionpersonal
    ADD CONSTRAINT relacionpersonal_pkey PRIMARY KEY (id_relacion_personal);


--
-- TOC entry 7165 (class 2606 OID 3244978)
-- Name: remesa_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY remesa
    ADD CONSTRAINT remesa_cod UNIQUE (id_organismo, anio, numero);


--
-- TOC entry 7167 (class 2606 OID 3244980)
-- Name: remesa_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY remesa
    ADD CONSTRAINT remesa_pkey PRIMARY KEY (id_remesa);


--
-- TOC entry 7169 (class 2606 OID 3244982)
-- Name: rendicionmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rendicionmensual
    ADD CONSTRAINT rendicionmensual_pkey PRIMARY KEY (id_rendicion_mensual);


--
-- TOC entry 7171 (class 2606 OID 3244984)
-- Name: restringido_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT restringido_cod UNIQUE (id_tipo_personal, id_personal_restringido);


--
-- TOC entry 7173 (class 2606 OID 3244986)
-- Name: restringido_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT restringido_pkey PRIMARY KEY (id_restringido);


--
-- TOC entry 7175 (class 2606 OID 3244988)
-- Name: resultadoevaluacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT resultadoevaluacion_cod UNIQUE (id_tipo_personal, anio, cod_resultado_evaluacion);


--
-- TOC entry 7177 (class 2606 OID 3244990)
-- Name: resultadoevaluacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT resultadoevaluacion_pkey PRIMARY KEY (id_resultado_evaluacion);


--
-- TOC entry 7179 (class 2606 OID 3244992)
-- Name: resumenmensual_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resumenmensual
    ADD CONSTRAINT resumenmensual_pkey PRIMARY KEY (id_resumen_mensual);


--
-- TOC entry 7181 (class 2606 OID 3244994)
-- Name: resumennuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resumennuevoregimen
    ADD CONSTRAINT resumennuevoregimen_pkey PRIMARY KEY (id_resumen_nuevo_regimen);


--
-- TOC entry 7183 (class 2606 OID 3244996)
-- Name: resumenviejoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resumenviejoregimen
    ADD CONSTRAINT resumenviejoregimen_pkey PRIMARY KEY (id_resumen_viejo_regimen);


--
-- TOC entry 7185 (class 2606 OID 3244998)
-- Name: retroactivoticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY retroactivoticket
    ADD CONSTRAINT retroactivoticket_pkey PRIMARY KEY (id_retroactivo_ticket);


--
-- TOC entry 7187 (class 2606 OID 3245000)
-- Name: rol_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rol
    ADD CONSTRAINT rol_cod UNIQUE (codigo_rol);


--
-- TOC entry 7189 (class 2606 OID 3245002)
-- Name: rol_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rol
    ADD CONSTRAINT rol_pkey PRIMARY KEY (id_rol);


--
-- TOC entry 7191 (class 2606 OID 3245004)
-- Name: rolopcion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT rolopcion_cod UNIQUE (id_rol, id_opcion);


--
-- TOC entry 7193 (class 2606 OID 3245006)
-- Name: rolopcion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT rolopcion_pkey PRIMARY KEY (id_rol_opcion);


--
-- TOC entry 7196 (class 2606 OID 3245008)
-- Name: sancion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT sancion_pkey PRIMARY KEY (id_sancion);


--
-- TOC entry 7199 (class 2606 OID 3245010)
-- Name: sede_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT sede_pkey PRIMARY KEY (id_sede);


--
-- TOC entry 7201 (class 2606 OID 3245012)
-- Name: sedediplomatica_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT sedediplomatica_cod UNIQUE (cod_sede);


--
-- TOC entry 7203 (class 2606 OID 3245014)
-- Name: sedediplomatica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT sedediplomatica_pkey PRIMARY KEY (id_sede_diplomatica);


--
-- TOC entry 7205 (class 2606 OID 3245016)
-- Name: seguridadaniversario_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT seguridadaniversario_cod UNIQUE (id_tipo_personal, id_concepto);


--
-- TOC entry 7207 (class 2606 OID 3245018)
-- Name: seguridadaniversario_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT seguridadaniversario_pkey PRIMARY KEY (id_seguridad_aniversario);


--
-- TOC entry 7209 (class 2606 OID 3245020)
-- Name: seguridadausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadausencia
    ADD CONSTRAINT seguridadausencia_pkey PRIMARY KEY (id_seguridad_ausencia);


--
-- TOC entry 7211 (class 2606 OID 3245022)
-- Name: seguridaddocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridaddocente
    ADD CONSTRAINT seguridaddocente_pkey PRIMARY KEY (id_seguridad_docente);


--
-- TOC entry 7213 (class 2606 OID 3245024)
-- Name: seguridadespecial_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadespecial
    ADD CONSTRAINT seguridadespecial_pkey PRIMARY KEY (id_seguridad_especial);


--
-- TOC entry 7215 (class 2606 OID 3245026)
-- Name: seguridadguarderia_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT seguridadguarderia_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 7217 (class 2606 OID 3245028)
-- Name: seguridadguarderia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT seguridadguarderia_pkey PRIMARY KEY (id_seguridad_guarderia);


--
-- TOC entry 7219 (class 2606 OID 3245030)
-- Name: seguridadinteresadicional_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT seguridadinteresadicional_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 7221 (class 2606 OID 3245032)
-- Name: seguridadinteresadicional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT seguridadinteresadicional_pkey PRIMARY KEY (id_seguridad_interes_adicional);


--
-- TOC entry 7223 (class 2606 OID 3245034)
-- Name: seguridadnuevoregimen_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT seguridadnuevoregimen_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 7225 (class 2606 OID 3245036)
-- Name: seguridadnuevoregimen_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT seguridadnuevoregimen_pkey PRIMARY KEY (id_seguridad_nuevo_regimen);


--
-- TOC entry 7227 (class 2606 OID 3245038)
-- Name: seguridadordinaria_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT seguridadordinaria_cod UNIQUE (id_grupo_nomina, anio, mes, semana_quincena);


--
-- TOC entry 7229 (class 2606 OID 3245040)
-- Name: seguridadordinaria_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT seguridadordinaria_pkey PRIMARY KEY (id_seguridad_ordinaria);


--
-- TOC entry 7231 (class 2606 OID 3245042)
-- Name: seguridadprest_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT seguridadprest_cod UNIQUE (id_tipo_personal, anio, mes);


--
-- TOC entry 7233 (class 2606 OID 3245044)
-- Name: seguridadprest_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT seguridadprest_pkey PRIMARY KEY (id_seguridad_prestaciones);


--
-- TOC entry 7235 (class 2606 OID 3245046)
-- Name: seguridadpresupuesto_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT seguridadpresupuesto_cod UNIQUE (id_categoria_presupuesto, anio, mes);


--
-- TOC entry 7237 (class 2606 OID 3245048)
-- Name: seguridadpresupuesto_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT seguridadpresupuesto_pkey PRIMARY KEY (id_seguridad_presupuesto);


--
-- TOC entry 7239 (class 2606 OID 3245050)
-- Name: seguridadticket_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadticket
    ADD CONSTRAINT seguridadticket_pkey PRIMARY KEY (id_seguridad_ticket);


--
-- TOC entry 7241 (class 2606 OID 3245052)
-- Name: seguridadvacacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadvacacion
    ADD CONSTRAINT seguridadvacacion_pkey PRIMARY KEY (id_seguridad_vacacion);


--
-- TOC entry 7243 (class 2606 OID 3245054)
-- Name: semana_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT semana_cod UNIQUE (id_grupo_nomina, anio, semana_anio);


--
-- TOC entry 7245 (class 2606 OID 3245056)
-- Name: semana_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT semana_pkey PRIMARY KEY (id_semana);


--
-- TOC entry 7247 (class 2606 OID 3245058)
-- Name: seriecargo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT seriecargo_cod UNIQUE (cod_serie_cargo);


--
-- TOC entry 7249 (class 2606 OID 3245060)
-- Name: seriecargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT seriecargo_pkey PRIMARY KEY (id_serie_cargo);


--
-- TOC entry 7252 (class 2606 OID 3245062)
-- Name: servicioexterior_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT servicioexterior_pkey PRIMARY KEY (id_servicio_exterior);


--
-- TOC entry 7254 (class 2606 OID 3245064)
-- Name: sindicato_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT sindicato_cod UNIQUE (cod_sindicato);


--
-- TOC entry 7256 (class 2606 OID 3245066)
-- Name: sindicato_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT sindicato_pkey PRIMARY KEY (id_sindicato);


--
-- TOC entry 7258 (class 2606 OID 3245068)
-- Name: siniestro_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT siniestro_pkey PRIMARY KEY (id_siniestro);


--
-- TOC entry 7260 (class 2606 OID 3245070)
-- Name: sobreviviente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sobreviviente
    ADD CONSTRAINT sobreviviente_pkey PRIMARY KEY (id_sobreviviente);


--
-- TOC entry 7263 (class 2606 OID 3245072)
-- Name: subgrupoprofesion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subgrupoprofesion
    ADD CONSTRAINT subgrupoprofesion_pkey PRIMARY KEY (id_subgrupo_profesion);


--
-- TOC entry 7265 (class 2606 OID 3245074)
-- Name: subsistema_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subsistema
    ADD CONSTRAINT subsistema_cod UNIQUE (cod_subsistema);


--
-- TOC entry 7267 (class 2606 OID 3245076)
-- Name: subsistema_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subsistema
    ADD CONSTRAINT subsistema_pkey PRIMARY KEY (id_subsistema);


--
-- TOC entry 7269 (class 2606 OID 3245078)
-- Name: subtipocredencial_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT subtipocredencial_cod UNIQUE (cod_subtipo);


--
-- TOC entry 7271 (class 2606 OID 3245080)
-- Name: subtipocredencial_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT subtipocredencial_pkey PRIMARY KEY (id_subtipo_credencial);


--
-- TOC entry 7273 (class 2606 OID 3245082)
-- Name: subtipodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT subtipodotacion_cod UNIQUE (cod_subtipo);


--
-- TOC entry 7275 (class 2606 OID 3245084)
-- Name: subtipodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT subtipodotacion_pkey PRIMARY KEY (id_subtipo_dotacion);


--
-- TOC entry 7280 (class 2606 OID 3245086)
-- Name: sueldopromedio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT sueldopromedio_pkey PRIMARY KEY (id_sueldo_promedio);


--
-- TOC entry 7282 (class 2606 OID 3245088)
-- Name: sueldopromediocod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT sueldopromediocod UNIQUE (id_trabajador);


--
-- TOC entry 7284 (class 2606 OID 3245090)
-- Name: suplencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY suplencia
    ADD CONSTRAINT suplencia_pkey PRIMARY KEY (id_suplencia);


--
-- TOC entry 7286 (class 2606 OID 3245092)
-- Name: tabulador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tabulador
    ADD CONSTRAINT tabulador_pkey PRIMARY KEY (id_tabulador);


--
-- TOC entry 7288 (class 2606 OID 3245094)
-- Name: tarifaari_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tarifaari
    ADD CONSTRAINT tarifaari_cod UNIQUE (tarifa);


--
-- TOC entry 7290 (class 2606 OID 3245096)
-- Name: tarifaari_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tarifaari
    ADD CONSTRAINT tarifaari_pkey PRIMARY KEY (id_tarifa_ari);


--
-- TOC entry 7292 (class 2606 OID 3245098)
-- Name: tasabcv_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tasabcv
    ADD CONSTRAINT tasabcv_cod UNIQUE (anio, mes);


--
-- TOC entry 7294 (class 2606 OID 3245100)
-- Name: tasabcv_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tasabcv
    ADD CONSTRAINT tasabcv_pkey PRIMARY KEY (id_tasa_bcv);


--
-- TOC entry 7297 (class 2606 OID 3245102)
-- Name: tipoacreencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipoacreencia
    ADD CONSTRAINT tipoacreencia_pkey PRIMARY KEY (id_tipo_acreencia);


--
-- TOC entry 7300 (class 2606 OID 3245104)
-- Name: tipoamonestacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipoamonestacion
    ADD CONSTRAINT tipoamonestacion_pkey PRIMARY KEY (id_tipo_amonestacion);


--
-- TOC entry 7303 (class 2606 OID 3245106)
-- Name: tipoausencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipoausencia
    ADD CONSTRAINT tipoausencia_pkey PRIMARY KEY (id_tipo_ausencia);


--
-- TOC entry 7305 (class 2606 OID 3245108)
-- Name: tipocaracteristica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocaracteristica
    ADD CONSTRAINT tipocaracteristica_pkey PRIMARY KEY (id_tipo_caracteristica);


--
-- TOC entry 7307 (class 2606 OID 3245110)
-- Name: tipocargo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocargo
    ADD CONSTRAINT tipocargo_pkey PRIMARY KEY (tipo_cargo);


--
-- TOC entry 7310 (class 2606 OID 3245112)
-- Name: tipocontrato_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocontrato
    ADD CONSTRAINT tipocontrato_pkey PRIMARY KEY (id_tipo_contrato);


--
-- TOC entry 7312 (class 2606 OID 3245114)
-- Name: tipocredencial_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocredencial
    ADD CONSTRAINT tipocredencial_cod UNIQUE (cod_tipo_credencial);


--
-- TOC entry 7314 (class 2606 OID 3245116)
-- Name: tipocredencial_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocredencial
    ADD CONSTRAINT tipocredencial_pkey PRIMARY KEY (id_tipo_credencial);


--
-- TOC entry 7317 (class 2606 OID 3245118)
-- Name: tipocurso_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipocurso
    ADD CONSTRAINT tipocurso_pkey PRIMARY KEY (id_tipo_curso);


--
-- TOC entry 7320 (class 2606 OID 3245120)
-- Name: tipodependencia_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipodependencia
    ADD CONSTRAINT tipodependencia_pkey PRIMARY KEY (id_tipo_dependencia);


--
-- TOC entry 7322 (class 2606 OID 3245122)
-- Name: tipodotacion_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipodotacion
    ADD CONSTRAINT tipodotacion_cod UNIQUE (cod_tipo_dotacion);


--
-- TOC entry 7324 (class 2606 OID 3245124)
-- Name: tipodotacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipodotacion
    ADD CONSTRAINT tipodotacion_pkey PRIMARY KEY (id_tipo_dotacion);


--
-- TOC entry 7327 (class 2606 OID 3245126)
-- Name: tipoentidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipoentidad
    ADD CONSTRAINT tipoentidad_pkey PRIMARY KEY (id_tipo_entidad);


--
-- TOC entry 7331 (class 2606 OID 3245128)
-- Name: tipohabilidad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipohabilidad
    ADD CONSTRAINT tipohabilidad_pkey PRIMARY KEY (id_tipo_habilidad);


--
-- TOC entry 7334 (class 2606 OID 3245130)
-- Name: tipoidioma_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipoidioma
    ADD CONSTRAINT tipoidioma_pkey PRIMARY KEY (id_tipo_idioma);


--
-- TOC entry 7337 (class 2606 OID 3245132)
-- Name: tipomanual_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipomanual
    ADD CONSTRAINT tipomanual_pkey PRIMARY KEY (id_tipo_manual);


--
-- TOC entry 7340 (class 2606 OID 3245134)
-- Name: tipootraactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipootraactividad
    ADD CONSTRAINT tipootraactividad_pkey PRIMARY KEY (id_tipo_otra_actividad);


--
-- TOC entry 7343 (class 2606 OID 3245136)
-- Name: tipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT tipopersonal_pkey PRIMARY KEY (id_tipo_personal);


--
-- TOC entry 7346 (class 2606 OID 3245138)
-- Name: tiporeconocimiento_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tiporeconocimiento
    ADD CONSTRAINT tiporeconocimiento_pkey PRIMARY KEY (id_tipo_reconocimiento);


--
-- TOC entry 7348 (class 2606 OID 3245140)
-- Name: tiposede_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tiposede
    ADD CONSTRAINT tiposede_cod UNIQUE (cod_tipo_sede);


--
-- TOC entry 7350 (class 2606 OID 3245142)
-- Name: tiposede_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tiposede
    ADD CONSTRAINT tiposede_pkey PRIMARY KEY (id_tipo_sede);


--
-- TOC entry 7352 (class 2606 OID 3245144)
-- Name: tiposiniestro_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tiposiniestro
    ADD CONSTRAINT tiposiniestro_cod UNIQUE (cod_tipo_siniestro);


--
-- TOC entry 7354 (class 2606 OID 3245146)
-- Name: tiposiniestro_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tiposiniestro
    ADD CONSTRAINT tiposiniestro_pkey PRIMARY KEY (id_tipo_siniestro);


--
-- TOC entry 7356 (class 2606 OID 3245148)
-- Name: titular_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT titular_cod UNIQUE (id_personal);


--
-- TOC entry 7358 (class 2606 OID 3245150)
-- Name: titular_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT titular_pkey PRIMARY KEY (id_titular);


--
-- TOC entry 7361 (class 2606 OID 3245152)
-- Name: titulo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT titulo_pkey PRIMARY KEY (id_titulo);


--
-- TOC entry 7368 (class 2606 OID 3245154)
-- Name: trabajador_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT trabajador_pkey PRIMARY KEY (id_trabajador);


--
-- TOC entry 7370 (class 2606 OID 3245156)
-- Name: trabajadorasignatura_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT trabajadorasignatura_pkey PRIMARY KEY (id_trabajador_asignatura);


--
-- TOC entry 7374 (class 2606 OID 3245158)
-- Name: trabajadorespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT trabajadorespecifica_pkey PRIMARY KEY (id_trabajador_especifica);


--
-- TOC entry 7372 (class 2606 OID 3245160)
-- Name: trabasignat_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT trabasignat_cod UNIQUE (id_trabajador, id_asignatura);


--
-- TOC entry 7378 (class 2606 OID 3245162)
-- Name: turno_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY turno
    ADD CONSTRAINT turno_pkey PRIMARY KEY (id_turno);


--
-- TOC entry 7381 (class 2606 OID 3245164)
-- Name: turnodocente_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY turnodocente
    ADD CONSTRAINT turnodocente_pkey PRIMARY KEY (id_turno_docente);


--
-- TOC entry 7383 (class 2606 OID 3245166)
-- Name: uelespecifica_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT uelespecifica_cod UNIQUE (id_accion_especifica, id_unidad_ejecutora);


--
-- TOC entry 7385 (class 2606 OID 3245168)
-- Name: uelespecifica_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT uelespecifica_pkey PRIMARY KEY (id_uel_especifica);


--
-- TOC entry 7389 (class 2606 OID 3245170)
-- Name: ultimanomina_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT ultimanomina_pkey PRIMARY KEY (id_ultima_nomina);


--
-- TOC entry 7393 (class 2606 OID 3245172)
-- Name: ultimaprenomina_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT ultimaprenomina_pkey PRIMARY KEY (id_ultima_prenomina);


--
-- TOC entry 7396 (class 2606 OID 3245174)
-- Name: unidadadministradora_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadadministradora
    ADD CONSTRAINT unidadadministradora_pkey PRIMARY KEY (id_unidad_administradora);


--
-- TOC entry 7399 (class 2606 OID 3245176)
-- Name: unidadejecutora_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadejecutora
    ADD CONSTRAINT unidadejecutora_pkey PRIMARY KEY (id_unidad_ejecutora);


--
-- TOC entry 7402 (class 2606 OID 3245178)
-- Name: unidadfuncional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadfuncional
    ADD CONSTRAINT unidadfuncional_pkey PRIMARY KEY (id_unidad_funcional);


--
-- TOC entry 7405 (class 2606 OID 3245180)
-- Name: usuario_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuario
    ADD CONSTRAINT usuario_pkey PRIMARY KEY (id_usuario);


--
-- TOC entry 7407 (class 2606 OID 3245182)
-- Name: usuarioorganismo_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT usuarioorganismo_cod UNIQUE (id_usuario, id_organismo);


--
-- TOC entry 7409 (class 2606 OID 3245184)
-- Name: usuarioorganismo_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT usuarioorganismo_pkey PRIMARY KEY (id_usuario_organismo);


--
-- TOC entry 7411 (class 2606 OID 3245186)
-- Name: usuariorol_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT usuariorol_cod UNIQUE (id_usuario, id_rol);


--
-- TOC entry 7413 (class 2606 OID 3245188)
-- Name: usuariorol_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT usuariorol_pkey PRIMARY KEY (id_usuario_rol);


--
-- TOC entry 7415 (class 2606 OID 3245190)
-- Name: usuariotipopersonal_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT usuariotipopersonal_cod UNIQUE (id_usuario, id_tipo_personal);


--
-- TOC entry 7417 (class 2606 OID 3245192)
-- Name: usuariotipopersonal_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT usuariotipopersonal_pkey PRIMARY KEY (id_usuario_tipo_personal);


--
-- TOC entry 7419 (class 2606 OID 3245194)
-- Name: usuariounidadfuncional_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT usuariounidadfuncional_cod UNIQUE (id_usuario, id_unidad_funcional);


--
-- TOC entry 7421 (class 2606 OID 3245196)
-- Name: usuariounidadfuncional_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT usuariounidadfuncional_pkey PRIMARY KEY (id_usuario_unidad_funcional);


--
-- TOC entry 7423 (class 2606 OID 3245198)
-- Name: utiles_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT utiles_cod UNIQUE (id_personal, id_familiar);


--
-- TOC entry 7425 (class 2606 OID 3245200)
-- Name: utiles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT utiles_pkey PRIMARY KEY (id_utiles);


--
-- TOC entry 7427 (class 2606 OID 3245202)
-- Name: utilidadesporanio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utilidadesporanio
    ADD CONSTRAINT utilidadesporanio_pkey PRIMARY KEY (id_utilidades_por_anio);


--
-- TOC entry 7429 (class 2606 OID 3245204)
-- Name: vacacion_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacion
    ADD CONSTRAINT vacacion_pkey PRIMARY KEY (id_vacacion);


--
-- TOC entry 7431 (class 2606 OID 3245206)
-- Name: vacaciondisfrutada_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacaciondisfrutada
    ADD CONSTRAINT vacaciondisfrutada_pkey PRIMARY KEY (id_vacacion_disfrutada);


--
-- TOC entry 7434 (class 2606 OID 3245208)
-- Name: vacacionesporanio_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacionesporanio
    ADD CONSTRAINT vacacionesporanio_pkey PRIMARY KEY (id_vacaciones_por_anio);


--
-- TOC entry 7436 (class 2606 OID 3245210)
-- Name: vacacionprogramada_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacionprogramada
    ADD CONSTRAINT vacacionprogramada_pkey PRIMARY KEY (id_vacacion_programada);


--
-- TOC entry 7438 (class 2606 OID 3245212)
-- Name: varemos_cod; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY varemos
    ADD CONSTRAINT varemos_cod UNIQUE (cod_varemos);


--
-- TOC entry 7440 (class 2606 OID 3245214)
-- Name: varemos_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY varemos
    ADD CONSTRAINT varemos_pkey PRIMARY KEY (id_varemos);


--
-- TOC entry 6341 (class 1259 OID 3245215)
-- Name: afiliacion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX afiliacion_cod ON afiliacion USING btree (id_personal, id_gremio);


--
-- TOC entry 6348 (class 1259 OID 3245216)
-- Name: antecedente_pkey; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX antecedente_pkey ON antecedente USING btree (id_antecedente);


--
-- TOC entry 6349 (class 1259 OID 3245217)
-- Name: antecendente_codigo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX antecendente_codigo ON antecedente USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 6358 (class 1259 OID 3245218)
-- Name: areacarrera_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX areacarrera_cod ON areacarrera USING btree (cod_area_carrera);


--
-- TOC entry 6361 (class 1259 OID 3245219)
-- Name: areaconocimiento_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX areaconocimiento_cod ON areaconocimiento USING btree (cod_area_conocimiento);


--
-- TOC entry 6370 (class 1259 OID 3245220)
-- Name: ausencia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX ausencia_cod ON ausencia USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6371 (class 1259 OID 3245221)
-- Name: ausencia_n50; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ausencia_n50 ON ausencia USING btree (id_personal);


--
-- TOC entry 6377 (class 1259 OID 3245222)
-- Name: banco_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX banco_cod ON banco USING btree (cod_banco);


--
-- TOC entry 6420 (class 1259 OID 3245223)
-- Name: carrera_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX carrera_cod ON carrera USING btree (cod_carrera);


--
-- TOC entry 6423 (class 1259 OID 3245224)
-- Name: carreraarea_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX carreraarea_cod ON carreraarea USING btree (id_area_carrera, id_carrera);


--
-- TOC entry 6426 (class 1259 OID 3245225)
-- Name: categoriadocente_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX categoriadocente_cod ON categoriadocente USING btree (digito_categoria);


--
-- TOC entry 6429 (class 1259 OID 3245226)
-- Name: categoriapersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX categoriapersonal_cod ON categoriapersonal USING btree (cod_categoria);


--
-- TOC entry 6437 (class 1259 OID 3245227)
-- Name: causamovimiento_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX causamovimiento_cod ON causamovimiento USING btree (cod_causa_movimiento);


--
-- TOC entry 6440 (class 1259 OID 3245228)
-- Name: causapersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX causapersonal_cod ON causapersonal USING btree (id_causa_movimiento, id_clasificacion_personal);


--
-- TOC entry 6451 (class 1259 OID 3245229)
-- Name: ciudad_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX ciudad_cod ON ciudad USING btree (id_estado, cod_ciudad);


--
-- TOC entry 6452 (class 1259 OID 3245230)
-- Name: ciudad_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ciudad_n49 ON ciudad USING btree (id_estado);


--
-- TOC entry 6463 (class 1259 OID 3245231)
-- Name: clasificacionpersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX clasificacionpersonal_cod ON clasificacionpersonal USING btree (id_categoria_personal, id_relacion_personal);


--
-- TOC entry 6467 (class 1259 OID 3245232)
-- Name: comisionservicio_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX comisionservicio_cod ON comisionservicio USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6470 (class 1259 OID 3245233)
-- Name: comisionservicioext_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX comisionservicioext_cod ON comisionservicioext USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6473 (class 1259 OID 3245234)
-- Name: concepto_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX concepto_1 ON concepto USING btree (id_concepto_retroactivo);


--
-- TOC entry 6474 (class 1259 OID 3245235)
-- Name: concepto_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX concepto_cod ON concepto USING btree (cod_concepto);


--
-- TOC entry 6477 (class 1259 OID 3245236)
-- Name: conceptoasociado_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptoasociado_1 ON conceptoasociado USING btree (id_concepto_asociar);


--
-- TOC entry 6478 (class 1259 OID 3245237)
-- Name: conceptoasociado_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX conceptoasociado_cod ON conceptoasociado USING btree (id_concepto_tipo_personal, id_concepto_asociar);


--
-- TOC entry 6485 (class 1259 OID 3245238)
-- Name: conceptocargo_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptocargo_1 ON conceptocargo USING btree (id_cargo, id_concepto_tipo_personal);


--
-- TOC entry 6516 (class 1259 OID 3245239)
-- Name: conceptofijo_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptofijo_1 ON conceptofijo USING btree (id_trabajador, id_concepto_tipo_personal);

ALTER TABLE conceptofijo CLUSTER ON conceptofijo_1;


--
-- TOC entry 6517 (class 1259 OID 3245240)
-- Name: conceptofijo_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptofijo_2 ON conceptofijo USING btree (id_trabajador);


--
-- TOC entry 6518 (class 1259 OID 3245241)
-- Name: conceptofijo_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptofijo_3 ON conceptofijo USING btree (id_trabajador, id_frecuencia_tipo_personal);


--
-- TOC entry 6519 (class 1259 OID 3245242)
-- Name: conceptofijo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX conceptofijo_cod ON conceptofijo USING btree (id_trabajador, id_concepto_tipo_personal, id_frecuencia_tipo_personal);


--
-- TOC entry 6535 (class 1259 OID 3245243)
-- Name: conceptotipopersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX conceptotipopersonal_cod ON conceptotipopersonal USING btree (id_concepto, id_frecuencia_tipo_personal);


--
-- TOC entry 6546 (class 1259 OID 3245244)
-- Name: conceptovariable_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptovariable_1 ON conceptovariable USING btree (id_trabajador, id_concepto_tipo_personal);


--
-- TOC entry 6547 (class 1259 OID 3245245)
-- Name: conceptovariable_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX conceptovariable_2 ON conceptovariable USING btree (id_trabajador);


--
-- TOC entry 6586 (class 1259 OID 3245246)
-- Name: curso_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX curso_cod ON curso USING btree (id_area_conocimiento, cod_curso);


--
-- TOC entry 6589 (class 1259 OID 3245247)
-- Name: cursoentidad_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX cursoentidad_cod ON cursoentidad USING btree (id_entidad_educativa, id_curso);


--
-- TOC entry 6590 (class 1259 OID 3245248)
-- Name: cursoentidad_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX cursoentidad_n49 ON cursoentidad USING btree (id_entidad_educativa);


--
-- TOC entry 6591 (class 1259 OID 3245249)
-- Name: cursoentidad_n50; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX cursoentidad_n50 ON cursoentidad USING btree (id_curso);


--
-- TOC entry 6594 (class 1259 OID 3245250)
-- Name: declaracion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX declaracion_cod ON declaracion USING btree (fecha_registro, id_personal);


--
-- TOC entry 6597 (class 1259 OID 3245251)
-- Name: dedicaciondocente_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX dedicaciondocente_cod ON dedicaciondocente USING btree (digito_dedicacion);


--
-- TOC entry 6604 (class 1259 OID 3245252)
-- Name: dependencia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX dependencia_cod ON dependencia USING btree (id_grupo_organismo, cod_dependencia, fecha_vigencia);


--
-- TOC entry 6647 (class 1259 OID 3245253)
-- Name: educacion_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX educacion_1 ON educacion USING btree (id_personal);

ALTER TABLE educacion CLUSTER ON educacion_1;


--
-- TOC entry 6694 (class 1259 OID 3245254)
-- Name: encargaduria_personal; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX encargaduria_personal ON encargaduria USING btree (id_personal, fecha_inicio);


--
-- TOC entry 6697 (class 1259 OID 3245255)
-- Name: entidadeducativa_codigo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX entidadeducativa_codigo ON entidadeducativa USING btree (cod_entidad_educativa);


--
-- TOC entry 6708 (class 1259 OID 3245256)
-- Name: estado_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX estado_cod ON estado USING btree (id_pais, cod_estado);


--
-- TOC entry 6709 (class 1259 OID 3245257)
-- Name: estado_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX estado_n49 ON estado USING btree (id_pais);


--
-- TOC entry 6714 (class 1259 OID 3245258)
-- Name: estudio_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX estudio_1 ON estudio USING btree (id_personal);

ALTER TABLE estudio CLUSTER ON estudio_1;


--
-- TOC entry 6731 (class 1259 OID 3245259)
-- Name: experiencia_fecha; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX experiencia_fecha ON experiencia USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 6738 (class 1259 OID 3245260)
-- Name: experiencia_fechanoest; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX experiencia_fechanoest ON experiencianoest USING btree (id_personal, fecha_ingreso);


--
-- TOC entry 6747 (class 1259 OID 3245261)
-- Name: frecuenciapago_codigo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX frecuenciapago_codigo ON frecuenciapago USING btree (id_organismo, cod_frecuencia_pago);


--
-- TOC entry 6748 (class 1259 OID 3245262)
-- Name: frecuenciapago_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX frecuenciapago_n49 ON frecuenciapago USING btree (id_organismo);


--
-- TOC entry 6751 (class 1259 OID 3245263)
-- Name: frecuenciatipopersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX frecuenciatipopersonal_cod ON frecuenciatipopersonal USING btree (id_tipo_personal, id_frecuencia_pago);


--
-- TOC entry 6756 (class 1259 OID 3245264)
-- Name: gradodocente_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX gradodocente_cod ON gradodocente USING btree (digito_grado);


--
-- TOC entry 6763 (class 1259 OID 3245265)
-- Name: gremio_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX gremio_cod ON gremio USING btree (cod_gremio);


--
-- TOC entry 6766 (class 1259 OID 3245266)
-- Name: gruponomina_codigo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX gruponomina_codigo ON gruponomina USING btree (id_organismo, cod_grupo_nomina);


--
-- TOC entry 6769 (class 1259 OID 3245267)
-- Name: grupoocupacional_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX grupoocupacional_cod ON grupoocupacional USING btree (id_ramo_ocupacional, cod_grupo_ocupacional);


--
-- TOC entry 6772 (class 1259 OID 3245268)
-- Name: grupoorganismo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX grupoorganismo_cod ON grupoorganismo USING btree (id_organismo, cod_grupo_organismo);


--
-- TOC entry 6773 (class 1259 OID 3245269)
-- Name: grupoorganismo_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX grupoorganismo_n49 ON grupoorganismo USING btree (id_organismo);


--
-- TOC entry 6776 (class 1259 OID 3245270)
-- Name: grupoprofesion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX grupoprofesion_cod ON grupoprofesion USING btree (cod_grupo_profesion);


--
-- TOC entry 6801 (class 1259 OID 3245271)
-- Name: historialremun_codigo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX historialremun_codigo ON historialremun USING btree (id_personal, fecha_movimiento, numero_movimiento);


--
-- TOC entry 6812 (class 1259 OID 3245272)
-- Name: historiconomina_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historiconomina_1 ON historiconomina USING btree (id_trabajador, anio, mes);


--
-- TOC entry 6813 (class 1259 OID 3245273)
-- Name: historiconomina_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historiconomina_2 ON historiconomina USING btree (id_tipo_personal);


--
-- TOC entry 6814 (class 1259 OID 3245274)
-- Name: historiconomina_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historiconomina_3 ON historiconomina USING btree (id_trabajador);


--
-- TOC entry 6817 (class 1259 OID 3245275)
-- Name: historicoquincena_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicoquincena_1 ON historicoquincena USING btree (id_trabajador, anio, mes, id_concepto_tipo_personal);


--
-- TOC entry 6818 (class 1259 OID 3245276)
-- Name: historicoquincena_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicoquincena_2 ON historicoquincena USING btree (anio, mes, id_tipo_personal);


--
-- TOC entry 6819 (class 1259 OID 3245280)
-- Name: historicoquincena_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicoquincena_3 ON historicoquincena USING btree (id_trabajador);


--
-- TOC entry 6822 (class 1259 OID 3245281)
-- Name: historicosemana_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicosemana_1 ON historicosemana USING btree (id_trabajador, anio, mes, id_concepto_tipo_personal);


--
-- TOC entry 6823 (class 1259 OID 3245282)
-- Name: historicosemana_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicosemana_2 ON historicosemana USING btree (anio, mes, id_tipo_personal);


--
-- TOC entry 6824 (class 1259 OID 3245283)
-- Name: historicosemana_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX historicosemana_3 ON historicosemana USING btree (id_trabajador);


--
-- TOC entry 6831 (class 1259 OID 3245284)
-- Name: idioma_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idioma_cod ON idioma USING btree (id_personal, id_tipo_idioma);


--
-- TOC entry 6840 (class 1259 OID 3245285)
-- Name: institucion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX institucion_cod ON institucion USING btree (cod_institucion);


--
-- TOC entry 7149 (class 1259 OID 3245286)
-- Name: iregcargo; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX iregcargo ON registrocargos USING btree (id_registro, codigo_nomina);


--
-- TOC entry 7362 (class 1259 OID 3245287)
-- Name: itrcedula; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX itrcedula ON trabajador USING btree (id_trabajador, id_personal, cedula);


--
-- TOC entry 6853 (class 1259 OID 3245288)
-- Name: jerarquia_docente; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX jerarquia_docente ON jerarquiadocente USING btree (digito_jerarquia);


--
-- TOC entry 6856 (class 1259 OID 3245289)
-- Name: jubilado_cod1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX jubilado_cod1 ON jubilado USING btree (id_institucion);


--
-- TOC entry 6877 (class 1259 OID 3245290)
-- Name: lugarpago_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX lugarpago_cod ON lugarpago USING btree (id_sede, cod_lugar_pago);


--
-- TOC entry 6880 (class 1259 OID 3245291)
-- Name: manualcargo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX manualcargo_cod ON manualcargo USING btree (id_organismo, cod_manual_cargo);


--
-- TOC entry 6883 (class 1259 OID 3245292)
-- Name: manualpersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX manualpersonal_cod ON manualpersonal USING btree (id_manual_cargo, id_tipo_personal);


--
-- TOC entry 6890 (class 1259 OID 3245293)
-- Name: mes_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX mes_cod ON mes USING btree (anio, mes);


--
-- TOC entry 6899 (class 1259 OID 3245294)
-- Name: movimientopersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX movimientopersonal_cod ON movimientopersonal USING btree (cod_movimiento_personal);


--
-- TOC entry 6908 (class 1259 OID 3245295)
-- Name: movremuneracion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX movremuneracion_cod ON movremuneracion USING btree (cod_mov_remuneracion);


--
-- TOC entry 6911 (class 1259 OID 3245296)
-- Name: municipio_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX municipio_cod ON municipio USING btree (id_estado, cod_municipio);


--
-- TOC entry 6912 (class 1259 OID 3245297)
-- Name: municipio_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX municipio_n49 ON municipio USING btree (id_estado);


--
-- TOC entry 6919 (class 1259 OID 3245298)
-- Name: niveldocente_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX niveldocente_cod ON niveldocente USING btree (digito_nivel);


--
-- TOC entry 6922 (class 1259 OID 3245299)
-- Name: niveleducativo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX niveleducativo_cod ON niveleducativo USING btree (cod_nivel_educativo);


--
-- TOC entry 6927 (class 1259 OID 3245300)
-- Name: nombreorganismo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX nombreorganismo_cod ON nombreorganismo USING btree (fecha_vigencia);


--
-- TOC entry 6945 (class 1259 OID 3245301)
-- Name: organismo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX organismo_cod ON organismo USING btree (cod_organismo);


--
-- TOC entry 6946 (class 1259 OID 3245302)
-- Name: organismo_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX organismo_n49 ON organismo USING btree (id_ciudad);


--
-- TOC entry 6959 (class 1259 OID 3245303)
-- Name: pais_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX pais_cod ON pais USING btree (cod_pais);


--
-- TOC entry 7000 (class 1259 OID 3245304)
-- Name: parametroutiles_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX parametroutiles_cod ON parametroutiles USING btree (id_tipo_personal, nivel_educativo);


--
-- TOC entry 7007 (class 1259 OID 3245305)
-- Name: parroquia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX parroquia_cod ON parroquia USING btree (id_municipio, cod_parroquia);


--
-- TOC entry 7008 (class 1259 OID 3245306)
-- Name: parroquia_n49; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX parroquia_n49 ON parroquia USING btree (id_municipio);


--
-- TOC entry 7027 (class 1259 OID 3245307)
-- Name: personal_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX personal_1 ON personal USING btree (primer_apellido);


--
-- TOC entry 7028 (class 1259 OID 3245308)
-- Name: personal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX personal_cod ON personal USING btree (cedula);

ALTER TABLE personal CLUSTER ON personal_cod;


--
-- TOC entry 7031 (class 1259 OID 3245309)
-- Name: personalorganismo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX personalorganismo_cod ON personalorganismo USING btree (id_organismo, id_personal);


--
-- TOC entry 7066 (class 1259 OID 3245310)
-- Name: prestmensuales01; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX prestmensuales01 ON prestacionesmensuales USING btree (id_tipo_personal, anio, mes);


--
-- TOC entry 7067 (class 1259 OID 3245311)
-- Name: prestmensuales02; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX prestmensuales02 ON prestacionesmensuales USING btree (id_trabajador, anio, mes);


--
-- TOC entry 7096 (class 1259 OID 3245312)
-- Name: profesion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX profesion_cod ON profesion USING btree (cod_profesion);


--
-- TOC entry 7103 (class 1259 OID 3245313)
-- Name: profesiontrabajador_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX profesiontrabajador_cod ON profesiontrabajador USING btree (id_profesion, id_personal);


--
-- TOC entry 7106 (class 1259 OID 3245314)
-- Name: programa_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX programa_cod ON programa USING btree (cod_programa);


--
-- TOC entry 7133 (class 1259 OID 3245315)
-- Name: pueblo_indigena_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX pueblo_indigena_cod ON puebloindigena USING btree (cod_pueblo_indigena);


--
-- TOC entry 7134 (class 1259 OID 3245316)
-- Name: ramoocupacional_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX ramoocupacional_cod ON ramoocupacional USING btree (cod_ramo_ocupacional);


--
-- TOC entry 7137 (class 1259 OID 3245317)
-- Name: reconocimiento_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX reconocimiento_cod ON reconocimiento USING btree (id_tipo_reconocimiento, id_personal, fecha);


--
-- TOC entry 7146 (class 1259 OID 3245318)
-- Name: registro_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX registro_cod ON registro USING btree (id_organismo, numero_registro);


--
-- TOC entry 7156 (class 1259 OID 3245319)
-- Name: registropersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX registropersonal_cod ON registropersonal USING btree (id_registro, id_tipo_personal);


--
-- TOC entry 7161 (class 1259 OID 3245320)
-- Name: relacionpersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX relacionpersonal_cod ON relacionpersonal USING btree (cod_relacion);


--
-- TOC entry 7194 (class 1259 OID 3245321)
-- Name: sancion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX sancion_cod ON sancion USING btree (id_personal, id_tipo_amonestacion, fecha);


--
-- TOC entry 7197 (class 1259 OID 3245322)
-- Name: sede_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX sede_cod ON sede USING btree (id_organismo, cod_sede);


--
-- TOC entry 7250 (class 1259 OID 3245323)
-- Name: servicioexterior_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX servicioexterior_cod ON servicioexterior USING btree (id_personal, fecha_inicio);


--
-- TOC entry 7261 (class 1259 OID 3245324)
-- Name: subgrupoprofesion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX subgrupoprofesion_cod ON subgrupoprofesion USING btree (id_grupo_profesion, cod_subgrupo_profesion);


--
-- TOC entry 7276 (class 1259 OID 3245325)
-- Name: sueldopromedio_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sueldopromedio_1 ON sueldopromedio USING btree (id_trabajador);


--
-- TOC entry 7277 (class 1259 OID 3245326)
-- Name: sueldopromedio_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sueldopromedio_2 ON sueldopromedio USING btree (id_grupo_nomina);


--
-- TOC entry 7278 (class 1259 OID 3245327)
-- Name: sueldopromedio_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX sueldopromedio_3 ON sueldopromedio USING btree (id_tipo_personal);


--
-- TOC entry 7295 (class 1259 OID 3245328)
-- Name: tipoacreencia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipoacreencia_cod ON tipoacreencia USING btree (cod_tipo_acreencia);


--
-- TOC entry 7298 (class 1259 OID 3245329)
-- Name: tipoamonestacion_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipoamonestacion_cod ON tipoamonestacion USING btree (cod_tipo_amonestacion);


--
-- TOC entry 7301 (class 1259 OID 3245330)
-- Name: tipoausencia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipoausencia_cod ON tipoausencia USING btree (cod_tipo_ausencia);


--
-- TOC entry 7308 (class 1259 OID 3245331)
-- Name: tipocontrato_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipocontrato_cod ON tipocontrato USING btree (cod_tipo_contrato);


--
-- TOC entry 7315 (class 1259 OID 3245332)
-- Name: tipocurso_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipocurso_cod ON tipocurso USING btree (cod_tipo_curso);


--
-- TOC entry 7318 (class 1259 OID 3245333)
-- Name: tipodependencia_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipodependencia_cod ON tipodependencia USING btree (cod_tipo_dependencia);


--
-- TOC entry 7325 (class 1259 OID 3245334)
-- Name: tipoentidad_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipoentidad_cod ON tipoentidad USING btree (cod_tipo_entidad);


--
-- TOC entry 7329 (class 1259 OID 3245335)
-- Name: tipohabilidad_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipohabilidad_cod ON tipohabilidad USING btree (cod_tipo_habilidad);


--
-- TOC entry 7332 (class 1259 OID 3245336)
-- Name: tipoidioma_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipoidioma_cod ON tipoidioma USING btree (cod_tipo_idioma);


--
-- TOC entry 7335 (class 1259 OID 3245337)
-- Name: tipomanual_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipomanual_cod ON tipomanual USING btree (cod_tipo_manual);


--
-- TOC entry 7338 (class 1259 OID 3245338)
-- Name: tipootraactividad_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipootraactividad_cod ON tipootraactividad USING btree (cod_otra_actividad);


--
-- TOC entry 7341 (class 1259 OID 3245339)
-- Name: tipopersonal_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tipopersonal_cod ON tipopersonal USING btree (id_organismo, cod_tipo_personal);


--
-- TOC entry 7344 (class 1259 OID 3245340)
-- Name: tiporeconocimiento_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX tiporeconocimiento_cod ON tiporeconocimiento USING btree (cod_tipo_reconocimiento);


--
-- TOC entry 7359 (class 1259 OID 3245341)
-- Name: titulo_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX titulo_cod ON titulo USING btree (cod_titulo);


--
-- TOC entry 7363 (class 1259 OID 3245342)
-- Name: trabajador_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trabajador_1 ON trabajador USING btree (id_tipo_personal, cedula);

ALTER TABLE trabajador CLUSTER ON trabajador_1;


--
-- TOC entry 7364 (class 1259 OID 3245343)
-- Name: trabajador_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trabajador_2 ON trabajador USING btree (id_tipo_personal);


--
-- TOC entry 7365 (class 1259 OID 3245344)
-- Name: trabajador_3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trabajador_3 ON trabajador USING btree (id_tipo_personal, estatus);


--
-- TOC entry 7366 (class 1259 OID 3245345)
-- Name: trabajador_4; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trabajador_4 ON trabajador USING btree (id_tipo_personal, fecha_prestaciones);


--
-- TOC entry 7375 (class 1259 OID 3245346)
-- Name: trabajadortemporal_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trabajadortemporal_1 ON trabajadortemporal USING btree (id_trabajador);


--
-- TOC entry 7376 (class 1259 OID 3245347)
-- Name: turno_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX turno_cod ON turno USING btree (id_turno);


--
-- TOC entry 7379 (class 1259 OID 3245348)
-- Name: turnodocente_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX turnodocente_cod ON turnodocente USING btree (digito_turno);


--
-- TOC entry 7386 (class 1259 OID 3245349)
-- Name: ultimanomina_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ultimanomina_1 ON ultimanomina USING btree (id_trabajador);


--
-- TOC entry 7387 (class 1259 OID 3245350)
-- Name: ultimanomina_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ultimanomina_2 ON ultimanomina USING btree (id_grupo_nomina, numero_nomina);


--
-- TOC entry 7390 (class 1259 OID 3245351)
-- Name: ultimaprenomina_1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ultimaprenomina_1 ON ultimaprenomina USING btree (id_trabajador);


--
-- TOC entry 7391 (class 1259 OID 3245352)
-- Name: ultimaprenomina_2; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX ultimaprenomina_2 ON ultimaprenomina USING btree (id_grupo_nomina, numero_nomina);


--
-- TOC entry 7394 (class 1259 OID 3245353)
-- Name: unidadadministradora_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX unidadadministradora_cod ON unidadadministradora USING btree (cod_unidad_administ);


--
-- TOC entry 7397 (class 1259 OID 3245354)
-- Name: unidadejecutora_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX unidadejecutora_cod ON unidadejecutora USING btree (cod_unidad_ejecutora);


--
-- TOC entry 7400 (class 1259 OID 3245355)
-- Name: unidadfuncional_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX unidadfuncional_cod ON unidadfuncional USING btree (cod_unidad_funcional);


--
-- TOC entry 7403 (class 1259 OID 3245356)
-- Name: usuario_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX usuario_cod ON usuario USING btree (usuario);


--
-- TOC entry 7432 (class 1259 OID 3245357)
-- Name: vacacionesporanio_cod; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX vacacionesporanio_cod ON vacacionesporanio USING btree (id_tipo_personal, anios_servicio);


--
-- TOC entry 6951 (class 1259 OID 3245358)
-- Name: xif1otraactividad; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif1otraactividad ON otraactividad USING btree (id_tipo_otra_actividad);


--
-- TOC entry 6930 (class 1259 OID 3245359)
-- Name: xif2nombreorganismo; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif2nombreorganismo ON nombreorganismo USING btree (id_organismo);


--
-- TOC entry 6952 (class 1259 OID 3245360)
-- Name: xif2otraactividad; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif2otraactividad ON otraactividad USING btree (id_personal);


--
-- TOC entry 6700 (class 1259 OID 3245361)
-- Name: xif3entidadeducativa; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif3entidadeducativa ON entidadeducativa USING btree (id_tipo_entidad);


--
-- TOC entry 6701 (class 1259 OID 3245362)
-- Name: xif4entidadeducativa; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif4entidadeducativa ON entidadeducativa USING btree (id_estado);


--
-- TOC entry 6374 (class 1259 OID 3245363)
-- Name: xif6ausencia; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX xif6ausencia ON ausencia USING btree (id_tipo_ausencia);


--
-- TOC entry 6432 (class 1259 OID 3245364)
-- Name: xpkcategoriapersonal; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX xpkcategoriapersonal ON categoriapersonal USING btree (id_categoria_personal);


--
-- TOC entry 6466 (class 1259 OID 3245365)
-- Name: xpkclasificacionpersonal; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX xpkclasificacionpersonal ON clasificacionpersonal USING btree (id_clasificacion_personal);


--
-- TOC entry 7328 (class 1259 OID 3245366)
-- Name: xpktipoentidad; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX xpktipoentidad ON tipoentidad USING btree (id_tipo_entidad);


--
-- TOC entry 6522 (class 1259 OID 3245367)
-- Name: ññ; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "ññ" ON conceptofijo_cambio_unidad USING btree (cedula);


--
-- TOC entry 7902 (class 2620 OID 3245368)
-- Name: trigger_act_auditoria; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_act_auditoria AFTER INSERT OR DELETE OR UPDATE ON conceptofijo FOR EACH ROW EXECUTE PROCEDURE actualizar_auditoria();


--
-- TOC entry 7903 (class 2620 OID 3245369)
-- Name: trigger_auditoria_cv; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_auditoria_cv AFTER INSERT OR DELETE OR UPDATE ON conceptovariable FOR EACH ROW EXECUTE PROCEDURE actualizar_auditoria_cv();


--
-- TOC entry 7904 (class 2620 OID 3245370)
-- Name: validar_prestamos_activos; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER validar_prestamos_activos BEFORE INSERT OR UPDATE ON prestamo FOR EACH ROW EXECUTE PROCEDURE validar_prestamos_activos();


--
-- TOC entry 7901 (class 2620 OID 3245371)
-- Name: valor_defecto_descuento; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER valor_defecto_descuento BEFORE INSERT OR UPDATE ON ausencia FOR EACH ROW EXECUTE PROCEDURE valor_defecto_descuento();


--
-- TOC entry 7465 (class 2606 OID 3245372)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_ausencia) REFERENCES tipoausencia(id_tipo_ausencia) ON DELETE SET NULL;


--
-- TOC entry 7499 (class 2606 OID 3245377)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ciudad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 7613 (class 2606 OID 3245382)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 7616 (class 2606 OID 3245387)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7639 (class 2606 OID 3245392)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7707 (class 2606 OID 3245397)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY municipio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_estado) REFERENCES estado(id_estado) ON DELETE SET NULL;


--
-- TOC entry 7708 (class 2606 OID 3245402)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nombreorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7720 (class 2606 OID 3245407)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY organismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7741 (class 2606 OID 3245412)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parroquia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_municipio) REFERENCES municipio(id_municipio) ON DELETE SET NULL;


--
-- TOC entry 7638 (class 2606 OID 3245417)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoocupacional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ramo_ocupacional) REFERENCES ramoocupacional(id_ramo_ocupacional) ON DELETE SET NULL;


--
-- TOC entry 7493 (class 2606 OID 3245422)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causamovimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_movimiento_personal) REFERENCES movimientopersonal(id_movimiento_personal) ON DELETE SET NULL;


--
-- TOC entry 7501 (class 2606 OID 3245427)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_categoria_personal) REFERENCES categoriapersonal(id_categoria_personal) ON DELETE SET NULL;


--
-- TOC entry 7494 (class 2606 OID 3245432)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7874 (class 2606 OID 3245437)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY turno
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7694 (class 2606 OID 3245442)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7635 (class 2606 OID 3245447)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY frecuenciatipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_frecuencia_pago) REFERENCES frecuenciapago(id_frecuencia_pago) ON DELETE SET NULL;


--
-- TOC entry 7505 (class 2606 OID 3245452)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7854 (class 2606 OID 3245457)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_nivel_educativo) REFERENCES niveleducativo(id_nivel_educativo) ON DELETE SET NULL;


--
-- TOC entry 7840 (class 2606 OID 3245462)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subgrupoprofesion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_profesion) REFERENCES grupoprofesion(id_grupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 7487 (class 2606 OID 3245467)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_manual_cargo) REFERENCES manualcargo(id_manual_cargo);


--
-- TOC entry 7628 (class 2606 OID 3245472)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experiencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7631 (class 2606 OID 3245477)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experiencianoest
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7596 (class 2606 OID 3245482)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7618 (class 2606 OID 3245487)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7445 (class 2606 OID 3245492)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7770 (class 2606 OID 3245497)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7451 (class 2606 OID 3245502)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7469 (class 2606 OID 3245507)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY averiguacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7496 (class 2606 OID 3245512)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7503 (class 2606 OID 3245517)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY comisionservicio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7570 (class 2606 OID 3245522)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7611 (class 2606 OID 3245527)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal);


--
-- TOC entry 7632 (class 2606 OID 3245532)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY familiar
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7678 (class 2606 OID 3245537)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7778 (class 2606 OID 3245542)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7812 (class 2606 OID 3245547)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7832 (class 2606 OID 3245552)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7454 (class 2606 OID 3245557)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY antecedente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7657 (class 2606 OID 3245562)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7845 (class 2606 OID 3245567)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7856 (class 2606 OID 3245572)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7573 (class 2606 OID 3245577)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7885 (class 2606 OID 3245582)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadfuncional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7884 (class 2606 OID 3245587)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadejecutora
    ADD CONSTRAINT "$1" FOREIGN KEY (id_programa) REFERENCES programa(id_programa) ON DELETE SET NULL;


--
-- TOC entry 7783 (class 2606 OID 3245592)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7785 (class 2606 OID 3245597)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$1" FOREIGN KEY (id_registro) REFERENCES registro(id_registro) ON DELETE SET NULL;


--
-- TOC entry 7566 (class 2606 OID 3245602)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT "$1" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7798 (class 2606 OID 3245607)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_registro) REFERENCES registro(id_registro) ON DELETE SET NULL;


--
-- TOC entry 7696 (class 2606 OID 3245612)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_manual_cargo) REFERENCES manualcargo(id_manual_cargo) ON DELETE SET NULL;


--
-- TOC entry 7491 (class 2606 OID 3245617)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT "$1" FOREIGN KEY (id_area_carrera) REFERENCES areacarrera(id_area_carrera) ON DELETE SET NULL;


--
-- TOC entry 7883 (class 2606 OID 3245622)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY unidadadministradora
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7815 (class 2606 OID 3245627)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7526 (class 2606 OID 3245632)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7498 (class 2606 OID 3245637)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY certificado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7504 (class 2606 OID 3245642)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY comisionservicioext
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7568 (class 2606 OID 3245647)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_curso) REFERENCES curso(id_curso) ON DELETE SET NULL;


--
-- TOC entry 7692 (class 2606 OID 3245652)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT "$1" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7721 (class 2606 OID 3245657)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7767 (class 2606 OID 3245662)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subgrupo_profesion) REFERENCES subgrupoprofesion(id_subgrupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 7899 (class 2606 OID 3245667)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacionesporanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7508 (class 2606 OID 3245672)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7831 (class 2606 OID 3245677)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seriecargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_ocupacional) REFERENCES grupoocupacional(id_grupo_ocupacional) ON DELETE SET NULL;


--
-- TOC entry 7539 (class 2606 OID 3245682)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7634 (class 2606 OID 3245687)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY frecuenciapago
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7637 (class 2606 OID 3245692)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gruponomina
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7888 (class 2606 OID 3245697)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7842 (class 2606 OID 3245702)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipodotacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_dotacion) REFERENCES tipodotacion(id_tipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 7731 (class 2606 OID 3245707)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7591 (class 2606 OID 3245712)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subtipo_dotacion) REFERENCES subtipodotacion(id_subtipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 7782 (class 2606 OID 3245717)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY regioncontinente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_continente) REFERENCES continente(id_continente) ON DELETE SET NULL;


--
-- TOC entry 7818 (class 2606 OID 3245722)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7477 (class 2606 OID 3245727)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7820 (class 2606 OID 3245732)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7763 (class 2606 OID 3245737)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primaantiguedad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7764 (class 2606 OID 3245742)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primahijo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7546 (class 2606 OID 3245747)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7834 (class 2606 OID 3245752)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sindicato
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7886 (class 2606 OID 3245757)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7890 (class 2606 OID 3245762)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7561 (class 2606 OID 3245767)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$1" FOREIGN KEY (id_banco) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7733 (class 2606 OID 3245772)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrogobierno
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7730 (class 2606 OID 3245777)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrocaja
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7826 (class 2606 OID 3245782)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadordinaria
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7549 (class 2606 OID 3245787)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7758 (class 2606 OID 3245792)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7843 (class 2606 OID 3245797)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sueldopromedio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7830 (class 2606 OID 3245802)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY semana
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7728 (class 2606 OID 3245807)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT "$1" FOREIGN KEY (id_region_continente) REFERENCES regioncontinente(id_region_continente) ON DELETE SET NULL;


--
-- TOC entry 7772 (class 2606 OID 3245812)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY programa
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7739 (class 2606 OID 3245817)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7645 (class 2606 OID 3245822)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7449 (class 2606 OID 3245827)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT "$1" FOREIGN KEY (id_unidad_administradora) REFERENCES unidadadministradora(id_unidad_administradora) ON DELETE SET NULL;


--
-- TOC entry 7723 (class 2606 OID 3245832)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7781 (class 2606 OID 3245837)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY region
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7753 (class 2606 OID 3245842)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaarc
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7804 (class 2606 OID 3245847)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7844 (class 2606 OID 3245852)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tabulador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7698 (class 2606 OID 3245857)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY materia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_clasificacion) REFERENCES clasificacion(id_clasificacion) ON DELETE SET NULL;


--
-- TOC entry 7680 (class 2606 OID 3245862)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY instancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_clasificacion) REFERENCES clasificacion(id_clasificacion) ON DELETE SET NULL;


--
-- TOC entry 7580 (class 2606 OID 3245867)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_operacion) REFERENCES operacion(id_operacion) ON DELETE SET NULL;


--
-- TOC entry 7518 (class 2606 OID 3245872)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7705 (class 2606 OID 3245877)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7702 (class 2606 OID 3245882)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7589 (class 2606 OID 3245887)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_banco) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7743 (class 2606 OID 3245892)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY perfil
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7447 (class 2606 OID 3245897)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7647 (class 2606 OID 3245902)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7768 (class 2606 OID 3245907)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7629 (class 2606 OID 3245912)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7455 (class 2606 OID 3245917)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7584 (class 2606 OID 3245922)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_disquete) REFERENCES disquete(id_disquete) ON DELETE SET NULL;


--
-- TOC entry 7556 (class 2606 OID 3245927)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_contrato) REFERENCES tipocontrato(id_tipo_contrato) ON DELETE SET NULL;


--
-- TOC entry 7485 (class 2606 OID 3245932)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7510 (class 2606 OID 3245937)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7511 (class 2606 OID 3245942)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocargoanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7535 (class 2606 OID 3245947)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7564 (class 2606 OID 3245952)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentacontable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7633 (class 2606 OID 3245957)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY firmasreportes
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7827 (class 2606 OID 3245962)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadprestaciones
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7565 (class 2606 OID 3245967)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentapresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7537 (class 2606 OID 3245972)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7605 (class 2606 OID 3245977)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 7608 (class 2606 OID 3245982)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleotraactividad
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 7649 (class 2606 OID 3245987)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7755 (class 2606 OID 3245992)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpersonal
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 7754 (class 2606 OID 3245997)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planillaari
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7896 (class 2606 OID 3246002)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utilidadesporanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7653 (class 2606 OID 3246007)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7800 (class 2606 OID 3246012)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7875 (class 2606 OID 3246017)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_accion_especifica) REFERENCES accionespecifica(id_accion_especifica) ON DELETE SET NULL;


--
-- TOC entry 7443 (class 2606 OID 3246022)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY accioncentralizada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7775 (class 2606 OID 3246027)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7514 (class 2606 OID 3246032)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7488 (class 2606 OID 3246037)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7463 (class 2606 OID 3246042)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7872 (class 2606 OID 3246047)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7459 (class 2606 OID 3246052)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aplicartabulador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7524 (class 2606 OID 3246057)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7532 (class 2606 OID 3246062)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7554 (class 2606 OID 3246067)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7512 (class 2606 OID 3246072)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_constancia) REFERENCES constancia(id_constancia) ON DELETE SET NULL;


--
-- TOC entry 7736 (class 2606 OID 3246077)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojuguete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7738 (class 2606 OID 3246082)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroutiles
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7737 (class 2606 OID 3246087)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7734 (class 2606 OID 3246092)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametroguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7686 (class 2606 OID 3246097)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY juguete
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7481 (class 2606 OID 3246102)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7572 (class 2606 OID 3246107)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY denominacionticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7674 (class 2606 OID 3246112)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7809 (class 2606 OID 3246117)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY retroactivoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7625 (class 2606 OID 3246122)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7641 (class 2606 OID 3246127)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$1" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 7470 (class 2606 OID 3246132)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7850 (class 2606 OID 3246137)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7835 (class 2606 OID 3246142)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7617 (class 2606 OID 3246147)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estructura
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7806 (class 2606 OID 3246152)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resultadoevaluacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7626 (class 2606 OID 3246157)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7622 (class 2606 OID 3246162)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7765 (class 2606 OID 3246167)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7810 (class 2606 OID 3246172)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_opcion) REFERENCES opcion(id_opcion) ON UPDATE SET DEFAULT ON DELETE SET NULL;


--
-- TOC entry 7640 (class 2606 OID 3246177)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY grupoticket
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7594 (class 2606 OID 3246182)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7615 (class 2606 OID 3246187)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY establecimientosalud
    ADD CONSTRAINT "$1" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7757 (class 2606 OID 3246192)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY poliza
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7756 (class 2606 OID 3246197)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planpoliza
    ADD CONSTRAINT "$1" FOREIGN KEY (id_poliza) REFERENCES poliza(id_poliza) ON DELETE SET NULL;


--
-- TOC entry 7529 (class 2606 OID 3246202)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7701 (class 2606 OID 3246207)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mesesjubilacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7735 (class 2606 OID 3246212)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrojubilacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7897 (class 2606 OID 3246217)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7898 (class 2606 OID 3246222)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacaciondisfrutada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7900 (class 2606 OID 3246227)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY vacacionprogramada
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7829 (class 2606 OID 3246232)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadvacacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7689 (class 2606 OID 3246237)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7687 (class 2606 OID 3246242)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7691 (class 2606 OID 3246247)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionresumenviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7688 (class 2606 OID 3246252)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacioninteresnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7690 (class 2606 OID 3246257)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY liquidacionresumennuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7825 (class 2606 OID 3246262)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7682 (class 2606 OID 3246267)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesnuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7807 (class 2606 OID 3246272)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resumennuevoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7681 (class 2606 OID 3246277)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7683 (class 2606 OID 3246282)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY interesviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7808 (class 2606 OID 3246287)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY resumenviejoregimen
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7824 (class 2606 OID 3246292)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadinteresadicional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7662 (class 2606 OID 3246297)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicodevengadointegral
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7453 (class 2606 OID 3246302)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ajustetabuladoronu
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 7490 (class 2606 OID 3246307)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargosplan
    ADD CONSTRAINT "$1" FOREIGN KEY (id_plan_personal) REFERENCES planpersonal(id_plan_personal) ON DELETE SET NULL;


--
-- TOC entry 7500 (class 2606 OID 3246312)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificaciondependencia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7520 (class 2606 OID 3246317)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7522 (class 2606 OID 3246322)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7586 (class 2606 OID 3246327)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 7588 (class 2606 OID 3246332)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladoronu
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 7601 (class 2606 OID 3246337)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_elegible) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7636 (class 2606 OID 3246342)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY gradoniveldocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_grado_docente) REFERENCES gradodocente(id_grado_docente) ON DELETE SET NULL;


--
-- TOC entry 7684 (class 2606 OID 3246347)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_jerarquia_docente) REFERENCES jerarquiadocente(id_jerarquia_docente) ON DELETE SET NULL;


--
-- TOC entry 7709 (class 2606 OID 3246352)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7713 (class 2606 OID 3246357)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7725 (class 2606 OID 3246362)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7742 (class 2606 OID 3246367)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY partidauelespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7791 (class 2606 OID 3246372)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$1" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7828 (class 2606 OID 3246377)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadpresupuesto
    ADD CONSTRAINT "$1" FOREIGN KEY (id_categoria_presupuesto) REFERENCES categoriapresupuesto(id_categoria_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7870 (class 2606 OID 3246382)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7892 (class 2606 OID 3246387)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT "$1" FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario) ON DELETE SET NULL;


--
-- TOC entry 7794 (class 2606 OID 3246392)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7544 (class 2606 OID 3246397)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7479 (class 2606 OID 3246402)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7516 (class 2606 OID 3246407)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT "$1" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7761 (class 2606 OID 3246412)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT "$1" FOREIGN KEY (id_uel_especifica) REFERENCES uelespecifica(id_uel_especifica) ON DELETE SET NULL;


--
-- TOC entry 7823 (class 2606 OID 3246417)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadguarderia
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7894 (class 2606 OID 3246422)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7774 (class 2606 OID 3246427)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorubicacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7750 (class 2606 OID 3246432)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$1" FOREIGN KEY (id_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 7457 (class 2606 OID 3246437)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY apelacion
    ADD CONSTRAINT "$1" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7475 (class 2606 OID 3246442)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT "$1" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7841 (class 2606 OID 3246447)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY subtipocredencial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_tipo_credencial) REFERENCES tipocredencial(id_tipo_credencial) ON DELETE SET NULL;


--
-- TOC entry 7559 (class 2606 OID 3246452)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT "$1" FOREIGN KEY (id_subtipo_credencial) REFERENCES subtipocredencial(id_subtipo_credencial) ON DELETE SET NULL;


--
-- TOC entry 7462 (class 2606 OID 3246457)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY auditoriacargamasiva
    ADD CONSTRAINT "$1" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7857 (class 2606 OID 3246462)
-- Name: $10; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$10" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7858 (class 2606 OID 3246467)
-- Name: $11; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$11" FOREIGN KEY (id_lugar_pago) REFERENCES lugarpago(id_lugar_pago) ON DELETE SET NULL;


--
-- TOC entry 7663 (class 2606 OID 3246472)
-- Name: $11; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$11" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7859 (class 2606 OID 3246477)
-- Name: $12; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$12" FOREIGN KEY (id_turno) REFERENCES turno(id_turno) ON DELETE SET NULL;


--
-- TOC entry 7664 (class 2606 OID 3246482)
-- Name: $12; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$12" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7860 (class 2606 OID 3246487)
-- Name: $13; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$13" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7861 (class 2606 OID 3246492)
-- Name: $14; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$14" FOREIGN KEY (id_dependencia_real) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7862 (class 2606 OID 3246497)
-- Name: $15; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$15" FOREIGN KEY (id_cargo_real) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7569 (class 2606 OID 3246502)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cursoentidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_entidad_educativa) REFERENCES entidadeducativa(id_entidad_educativa) ON DELETE SET NULL;


--
-- TOC entry 7614 (class 2606 OID 3246507)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY entidadeducativa
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_entidad) REFERENCES tipoentidad(id_tipo_entidad) ON DELETE SET NULL;


--
-- TOC entry 7722 (class 2606 OID 3246512)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otraactividad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_otra_actividad) REFERENCES tipootraactividad(id_tipo_otra_actividad) ON DELETE SET NULL;


--
-- TOC entry 7502 (class 2606 OID 3246517)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY clasificacionpersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_relacion_personal) REFERENCES relacionpersonal(id_relacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7495 (class 2606 OID 3246522)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY causapersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7748 (class 2606 OID 3246527)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7744 (class 2606 OID 3246532)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_parroquia) REFERENCES parroquia(id_parroquia) ON DELETE SET NULL;


--
-- TOC entry 7597 (class 2606 OID 3246537)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_nivel_educativo) REFERENCES niveleducativo(id_nivel_educativo) ON DELETE SET NULL;


--
-- TOC entry 7619 (class 2606 OID 3246542)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7771 (class 2606 OID 3246547)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesiontrabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion) ON DELETE SET NULL;


--
-- TOC entry 7497 (class 2606 OID 3246552)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY certificacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7571 (class 2606 OID 3246557)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY declaracion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7612 (class 2606 OID 3246562)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY encargaduria
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7679 (class 2606 OID 3246567)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY idioma
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_idioma) REFERENCES tipoidioma(id_tipo_idioma) ON DELETE SET NULL;


--
-- TOC entry 7779 (class 2606 OID 3246572)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_reconocimiento) REFERENCES tiporeconocimiento(id_tipo_reconocimiento) ON DELETE SET NULL;


--
-- TOC entry 7813 (class 2606 OID 3246577)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_amonestacion) REFERENCES tipoamonestacion(id_tipo_amonestacion) ON DELETE SET NULL;


--
-- TOC entry 7658 (class 2606 OID 3246582)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7863 (class 2606 OID 3246587)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7693 (class 2606 OID 3246592)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY lugarpago
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7784 (class 2606 OID 3246597)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7567 (class 2606 OID 3246602)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY curso
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7799 (class 2606 OID 3246607)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registropersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7697 (class 2606 OID 3246612)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualpersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7492 (class 2606 OID 3246617)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY carreraarea
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7816 (class 2606 OID 3246622)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7527 (class 2606 OID 3246627)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7446 (class 2606 OID 3246632)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY actividaddocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7452 (class 2606 OID 3246637)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY afiliacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 7466 (class 2606 OID 3246642)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ausencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7574 (class 2606 OID 3246647)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7846 (class 2606 OID 3246652)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7855 (class 2606 OID 3246657)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titulo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_profesion) REFERENCES grupoprofesion(id_grupo_profesion) ON DELETE SET NULL;


--
-- TOC entry 7540 (class 2606 OID 3246662)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7786 (class 2606 OID 3246667)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7811 (class 2606 OID 3246672)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY rolopcion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_rol) REFERENCES rol(id_rol) ON DELETE SET NULL;


--
-- TOC entry 7889 (class 2606 OID 3246677)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariorol
    ADD CONSTRAINT "$2" FOREIGN KEY (id_rol) REFERENCES rol(id_rol) ON DELETE SET NULL;


--
-- TOC entry 7732 (class 2606 OID 3246682)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrodotacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7592 (class 2606 OID 3246687)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7729 (class 2606 OID 3246692)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pais
    ADD CONSTRAINT "$2" FOREIGN KEY (id_region_continente) REFERENCES regioncontinente(id_region_continente) ON DELETE SET NULL;


--
-- TOC entry 7819 (class 2606 OID 3246697)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sedediplomatica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_sede) REFERENCES tiposede(id_tipo_sede) ON DELETE SET NULL;


--
-- TOC entry 7478 (class 2606 OID 3246702)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoantiguedad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7821 (class 2606 OID 3246707)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadaniversario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7547 (class 2606 OID 3246712)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7887 (class 2606 OID 3246717)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuarioorganismo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7891 (class 2606 OID 3246722)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariotipopersonal
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7562 (class 2606 OID 3246727)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7550 (class 2606 OID 3246732)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7759 (class 2606 OID 3246737)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7740 (class 2606 OID 3246742)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY parametrovarios
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_organismo) REFERENCES grupoorganismo(id_grupo_organismo) ON DELETE SET NULL;


--
-- TOC entry 7509 (class 2606 OID 3246747)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoasociado
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_asociar) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7646 (class 2606 OID 3246752)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 7718 (class 2606 OID 3246757)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7450 (class 2606 OID 3246762)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY administradorauel
    ADD CONSTRAINT "$2" FOREIGN KEY (id_unidad_ejecutora) REFERENCES unidadejecutora(id_unidad_ejecutora) ON DELETE SET NULL;


--
-- TOC entry 7724 (class 2606 OID 3246767)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY otrasalicuotas
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_alicuota) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 7805 (class 2606 OID 3246772)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY restringido
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal_restringido) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7695 (class 2606 OID 3246777)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY manualcargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tabulador) REFERENCES tabulador(id_tabulador) ON DELETE SET NULL;


--
-- TOC entry 7581 (class 2606 OID 3246782)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7519 (class 2606 OID 3246787)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodependencia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7822 (class 2606 OID 3246792)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY seguridadespecial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7706 (class 2606 OID 3246797)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoscio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7703 (class 2606 OID 3246802)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7590 (class 2606 OID 3246807)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY disquete
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7610 (class 2606 OID 3246812)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargoconcepto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7773 (class 2606 OID 3246817)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proveedorregion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7448 (class 2606 OID 3246822)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY adiestramientocargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7648 (class 2606 OID 3246827)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY habilidadcargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 7769 (class 2606 OID 3246832)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY profesioncargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_profesion) REFERENCES profesion(id_profesion) ON DELETE SET NULL;


--
-- TOC entry 7630 (class 2606 OID 3246837)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY experienciacargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo_requerido) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7456 (class 2606 OID 3246842)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY anticipo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7585 (class 2606 OID 3246847)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalledisquete
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto) REFERENCES concepto(id_concepto) ON DELETE SET NULL;


--
-- TOC entry 7557 (class 2606 OID 3246852)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7486 (class 2606 OID 3246857)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculovacacional
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7536 (class 2606 OID 3246862)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoprestaciones
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7538 (class 2606 OID 3246867)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptopresupuesto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7603 (class 2606 OID 3246872)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleafiliacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 7606 (class 2606 OID 3246877)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegiblehabilidad
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_habilidad) REFERENCES tipohabilidad(id_tipo_habilidad) ON DELETE SET NULL;


--
-- TOC entry 7552 (class 2606 OID 3246882)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concurso
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7553 (class 2606 OID 3246887)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concursocargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concurso) REFERENCES concurso(id_concurso) ON DELETE SET NULL;


--
-- TOC entry 7506 (class 2606 OID 3246892)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_aporte) REFERENCES concepto(id_concepto) ON UPDATE SET NULL;


--
-- TOC entry 7801 (class 2606 OID 3246897)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$2" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7876 (class 2606 OID 3246902)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY uelespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_unidad_ejecutora) REFERENCES unidadejecutora(id_unidad_ejecutora) ON DELETE SET NULL;


--
-- TOC entry 7873 (class 2606 OID 3246907)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7515 (class 2606 OID 3246912)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuenta
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7489 (class 2606 OID 3246917)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cargoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_registro_cargos) REFERENCES registrocargos(id_registro_cargos) ON DELETE SET NULL;


--
-- TOC entry 7525 (class 2606 OID 3246922)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7533 (class 2606 OID 3246927)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7555 (class 2606 OID 3246932)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY constancia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_constancia) REFERENCES constancia(id_constancia) ON DELETE SET NULL;


--
-- TOC entry 7513 (class 2606 OID 3246937)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoconstancia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7482 (class 2606 OID 3246942)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$2" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7675 (class 2606 OID 3246947)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$2" FOREIGN KEY (id_proveedor_ticket) REFERENCES proveedorticket(id_proveedor_ticket) ON DELETE SET NULL;


--
-- TOC entry 7642 (class 2606 OID 3246952)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7471 (class 2606 OID 3246957)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7851 (class 2606 OID 3246962)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7836 (class 2606 OID 3246967)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_beneficiario) REFERENCES beneficiario(id_beneficiario) ON DELETE SET NULL;


--
-- TOC entry 7609 (class 2606 OID 3246972)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY embargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7627 (class 2606 OID 3246977)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepciontitular
    ADD CONSTRAINT "$2" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7623 (class 2606 OID 3246982)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$2" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7766 (class 2606 OID 3246987)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY primascargo
    ADD CONSTRAINT "$2" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 7595 (class 2606 OID 3246992)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotaciontrabajador
    ADD CONSTRAINT "$2" FOREIGN KEY (id_subtipo_dotacion) REFERENCES subtipodotacion(id_subtipo_dotacion) ON DELETE SET NULL;


--
-- TOC entry 7530 (class 2606 OID 3246997)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7521 (class 2606 OID 3247002)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodiplomatico
    ADD CONSTRAINT "$2" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7523 (class 2606 OID 3247007)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptodocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7587 (class 2606 OID 3247012)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY detalletabuladormre
    ADD CONSTRAINT "$2" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7602 (class 2606 OID 3247017)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleactividaddocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7685 (class 2606 OID 3247022)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY jerarquiacategoriadocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_categoria_docente) REFERENCES categoriadocente(id_categoria_docente) ON DELETE SET NULL;


--
-- TOC entry 7710 (class 2606 OID 3247027)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON UPDATE SET NULL;


--
-- TOC entry 7714 (class 2606 OID 3247032)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON UPDATE SET NULL;


--
-- TOC entry 7726 (class 2606 OID 3247037)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$2" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7792 (class 2606 OID 3247042)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$2" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7871 (class 2606 OID 3247047)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajadorasignatura
    ADD CONSTRAINT "$2" FOREIGN KEY (id_asignatura) REFERENCES asignatura(id_asignatura) ON DELETE SET NULL;


--
-- TOC entry 7795 (class 2606 OID 3247052)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7545 (class 2606 OID 3247057)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoutilidades
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7480 (class 2606 OID 3247062)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculobonofinanio
    ADD CONSTRAINT "$2" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7517 (class 2606 OID 3247067)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptocuentacontable
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_contable) REFERENCES cuentacontable(id_cuenta_contable) ON DELETE SET NULL;


--
-- TOC entry 7762 (class 2606 OID 3247072)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY presupuestoespecifica
    ADD CONSTRAINT "$2" FOREIGN KEY (id_cuenta_presupuesto) REFERENCES cuentapresupuesto(id_cuenta_presupuesto) ON DELETE SET NULL;


--
-- TOC entry 7895 (class 2606 OID 3247077)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY utiles
    ADD CONSTRAINT "$2" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7751 (class 2606 OID 3247082)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$2" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7476 (class 2606 OID 3247087)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cajaahorro
    ADD CONSTRAINT "$2" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7560 (class 2606 OID 3247092)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY credencial
    ADD CONSTRAINT "$2" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7893 (class 2606 OID 3247097)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY usuariounidadfuncional
    ADD CONSTRAINT "$2" FOREIGN KEY (id_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 7541 (class 2606 OID 3247102)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7598 (class 2606 OID 3247107)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_carrera) REFERENCES carrera(id_carrera) ON DELETE SET NULL;


--
-- TOC entry 7620 (class 2606 OID 3247112)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$3" FOREIGN KEY (id_area_conocimiento) REFERENCES areaconocimiento(id_area_conocimiento) ON DELETE SET NULL;


--
-- TOC entry 7780 (class 2606 OID 3247117)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY reconocimiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7814 (class 2606 OID 3247122)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sancion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7659 (class 2606 OID 3247127)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$3" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7847 (class 2606 OID 3247132)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$3" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7864 (class 2606 OID 3247137)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$3" FOREIGN KEY (id_banco_nomina) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7575 (class 2606 OID 3247142)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_dependencia) REFERENCES tipodependencia(id_tipo_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7528 (class 2606 OID 3247147)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptofijo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7833 (class 2606 OID 3247152)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY servicioexterior
    ADD CONSTRAINT "$3" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7787 (class 2606 OID 3247157)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$3" FOREIGN KEY (id_gremio) REFERENCES gremio(id_gremio) ON DELETE SET NULL;


--
-- TOC entry 7749 (class 2606 OID 3247162)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personalorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7593 (class 2606 OID 3247167)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dotacioncargo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7563 (class 2606 OID 3247172)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY cuentabanco
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7551 (class 2606 OID 3247177)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovariable
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7760 (class 2606 OID 3247182)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY prestamo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7548 (class 2606 OID 3247187)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptovacaciones
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_alicuota) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7817 (class 2606 OID 3247192)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY sede
    ADD CONSTRAINT "$3" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7582 (class 2606 OID 3247197)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$3" FOREIGN KEY (id_materia) REFERENCES materia(id_materia) ON DELETE SET NULL;


--
-- TOC entry 7558 (class 2606 OID 3247202)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY contrato
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7607 (class 2606 OID 3247207)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_elegible) REFERENCES elegible(id_elegible) ON DELETE SET NULL;


--
-- TOC entry 7650 (class 2606 OID 3247212)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7654 (class 2606 OID 3247217)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$3" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7802 (class 2606 OID 3247222)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$3" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7534 (class 2606 OID 3247227)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptomovimiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_trabajador) REFERENCES trabajador(id_trabajador) ON DELETE SET NULL;


--
-- TOC entry 7483 (class 2606 OID 3247232)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7676 (class 2606 OID 3247237)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$3" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7643 (class 2606 OID 3247242)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$3" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7472 (class 2606 OID 3247247)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$3" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7852 (class 2606 OID 3247252)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$3" FOREIGN KEY (id_plan_poliza) REFERENCES planpoliza(id_plan_poliza) ON DELETE SET NULL;


--
-- TOC entry 7837 (class 2606 OID 3247257)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$3" FOREIGN KEY (id_titular) REFERENCES titular(id_titular) ON DELETE SET NULL;


--
-- TOC entry 7624 (class 2606 OID 3247262)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY excepcionbeneficiario
    ADD CONSTRAINT "$3" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7531 (class 2606 OID 3247267)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptoliquidacion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_frecuencia_tipo_personal) REFERENCES frecuenciatipopersonal(id_frecuencia_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7458 (class 2606 OID 3247272)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aperturaescolar
    ADD CONSTRAINT "$3" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7711 (class 2606 OID 3247277)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7715 (class 2606 OID 3247282)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7727 (class 2606 OID 3247287)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY pagoguarderia
    ADD CONSTRAINT "$3" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 7793 (class 2606 OID 3247292)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargosaprobado
    ADD CONSTRAINT "$3" FOREIGN KEY (id_region) REFERENCES region(id_region) ON DELETE SET NULL;


--
-- TOC entry 7796 (class 2606 OID 3247297)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$3" FOREIGN KEY (id_apertura_escolar) REFERENCES aperturaescolar(id_apertura_escolar) ON DELETE SET NULL;


--
-- TOC entry 7752 (class 2606 OID 3247302)
-- Name: $3; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY planadiestramiento
    ADD CONSTRAINT "$3" FOREIGN KEY (id_tipo_curso) REFERENCES tipocurso(id_tipo_curso) ON DELETE SET NULL;


--
-- TOC entry 7745 (class 2606 OID 3247307)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_ciudad_residencia) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7599 (class 2606 OID 3247312)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_titulo) REFERENCES titulo(id_titulo) ON DELETE SET NULL;


--
-- TOC entry 7660 (class 2606 OID 3247317)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$4" FOREIGN KEY (id_mov_remuneracion) REFERENCES movremuneracion(id_mov_remuneracion) ON DELETE SET NULL;


--
-- TOC entry 7848 (class 2606 OID 3247322)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7865 (class 2606 OID 3247327)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$4" FOREIGN KEY (id_banco_lph) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7621 (class 2606 OID 3247332)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY estudio
    ADD CONSTRAINT "$4" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7542 (class 2606 OID 3247337)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$4" FOREIGN KEY (id_concepto_tipo_personal) REFERENCES conceptotipopersonal(id_concepto_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7788 (class 2606 OID 3247342)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$4" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7877 (class 2606 OID 3247347)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7880 (class 2606 OID 3247352)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7665 (class 2606 OID 3247357)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7671 (class 2606 OID 3247362)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7576 (class 2606 OID 3247367)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$4" FOREIGN KEY (id_administradora_uel) REFERENCES administradorauel(id_administradora_uel) ON DELETE SET NULL;


--
-- TOC entry 7668 (class 2606 OID 3247372)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7583 (class 2606 OID 3247377)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependenciajudicial
    ADD CONSTRAINT "$4" FOREIGN KEY (id_instancia) REFERENCES instancia(id_instancia) ON DELETE SET NULL;


--
-- TOC entry 7704 (class 2606 OID 3247382)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY movimientoregistro
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7604 (class 2606 OID 3247387)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY elegibleestudio
    ADD CONSTRAINT "$4" FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7651 (class 2606 OID 3247392)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7655 (class 2606 OID 3247397)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$4" FOREIGN KEY (id_causa_movimiento) REFERENCES causamovimiento(id_causa_movimiento) ON DELETE SET NULL;


--
-- TOC entry 7803 (class 2606 OID 3247402)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrositp
    ADD CONSTRAINT "$4" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7464 (class 2606 OID 3247407)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY aumentoevaluacion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7484 (class 2606 OID 3247412)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY calculoticket
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7677 (class 2606 OID 3247417)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoticket
    ADD CONSTRAINT "$4" FOREIGN KEY (id_tipo_personal) REFERENCES tipopersonal(id_tipo_personal) ON DELETE SET NULL;


--
-- TOC entry 7644 (class 2606 OID 3247422)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY guarderiafamiliar
    ADD CONSTRAINT "$4" FOREIGN KEY (id_guarderia) REFERENCES guarderia(id_guarderia) ON DELETE SET NULL;


--
-- TOC entry 7473 (class 2606 OID 3247427)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$4" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 7853 (class 2606 OID 3247432)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY titular
    ADD CONSTRAINT "$4" FOREIGN KEY (id_primas_plan) REFERENCES primasplan(id_primas_plan) ON DELETE SET NULL;


--
-- TOC entry 7838 (class 2606 OID 3247437)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$4" FOREIGN KEY (id_personal) REFERENCES personal(id_personal) ON DELETE SET NULL;


--
-- TOC entry 7712 (class 2606 OID 3247442)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaconversion
    ADD CONSTRAINT "$4" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7716 (class 2606 OID 3247447)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$4" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7797 (class 2606 OID 3247452)
-- Name: $4; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrodocente
    ADD CONSTRAINT "$4" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7746 (class 2606 OID 3247457)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad_nacimiento) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7600 (class 2606 OID 3247462)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY educacion
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7866 (class 2606 OID 3247467)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$5" FOREIGN KEY (id_banco_fid) REFERENCES banco(id_banco) ON DELETE SET NULL;


--
-- TOC entry 7577 (class 2606 OID 3247472)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia_anterior) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7661 (class 2606 OID 3247477)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialremun
    ADD CONSTRAINT "$5" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo);


--
-- TOC entry 7789 (class 2606 OID 3247482)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7878 (class 2606 OID 3247487)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7881 (class 2606 OID 3247492)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7666 (class 2606 OID 3247497)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7672 (class 2606 OID 3247502)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7669 (class 2606 OID 3247507)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$5" FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina) ON DELETE SET NULL;


--
-- TOC entry 7543 (class 2606 OID 3247512)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY conceptotipopersonal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_contrato_colectivo) REFERENCES contratocolectivo(id_contrato_colectivo) ON DELETE SET NULL;


--
-- TOC entry 7652 (class 2606 OID 3247517)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialapn
    ADD CONSTRAINT "$5" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7656 (class 2606 OID 3247522)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historialorganismo
    ADD CONSTRAINT "$5" FOREIGN KEY (id_clasificacion_personal) REFERENCES clasificacionpersonal(id_clasificacion_personal) ON DELETE SET NULL;


--
-- TOC entry 7776 (class 2606 OID 3247527)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$5" FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad) ON DELETE SET NULL;


--
-- TOC entry 7849 (class 2606 OID 3247532)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY tipopersonal
    ADD CONSTRAINT "$5" FOREIGN KEY (id_turno) REFERENCES turno(id_turno) ON DELETE SET NULL;


--
-- TOC entry 7474 (class 2606 OID 3247537)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY beneficiario
    ADD CONSTRAINT "$5" FOREIGN KEY (id_familiar) REFERENCES familiar(id_familiar) ON DELETE SET NULL;


--
-- TOC entry 7839 (class 2606 OID 3247542)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY siniestro
    ADD CONSTRAINT "$5" FOREIGN KEY (id_establecimiento_salud) REFERENCES establecimientosalud(id_establecimiento_salud) ON DELETE SET NULL;


--
-- TOC entry 7717 (class 2606 OID 3247547)
-- Name: $5; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominadiplomatico
    ADD CONSTRAINT "$5" FOREIGN KEY (id_dependencia) REFERENCES dependencia(id_dependencia) ON DELETE SET NULL;


--
-- TOC entry 7747 (class 2606 OID 3247552)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY personal
    ADD CONSTRAINT "$6" FOREIGN KEY (id_pais_nacionalidad) REFERENCES pais(id_pais) ON DELETE SET NULL;


--
-- TOC entry 7578 (class 2606 OID 3247557)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$6" FOREIGN KEY (id_unidad_funcional) REFERENCES unidadfuncional(id_unidad_funcional) ON DELETE SET NULL;


--
-- TOC entry 7867 (class 2606 OID 3247562)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$6" FOREIGN KEY (id_registro_cargos) REFERENCES registrocargos(id_registro_cargos) ON DELETE SET NULL;


--
-- TOC entry 7790 (class 2606 OID 3247567)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY registrocargos
    ADD CONSTRAINT "$6" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7879 (class 2606 OID 3247572)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimanomina
    ADD CONSTRAINT "$6" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7882 (class 2606 OID 3247577)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ultimaprenomina
    ADD CONSTRAINT "$6" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7777 (class 2606 OID 3247582)
-- Name: $6; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY proyecto
    ADD CONSTRAINT "$6" FOREIGN KEY (id_municipio) REFERENCES municipio(id_municipio) ON DELETE SET NULL;


--
-- TOC entry 7868 (class 2606 OID 3247587)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$7" FOREIGN KEY (id_organismo) REFERENCES organismo(id_organismo) ON DELETE SET NULL;


--
-- TOC entry 7667 (class 2606 OID 3247592)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historiconomina
    ADD CONSTRAINT "$7" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7673 (class 2606 OID 3247597)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicosemana
    ADD CONSTRAINT "$7" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON UPDATE SET NULL;


--
-- TOC entry 7579 (class 2606 OID 3247602)
-- Name: $7; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY dependencia
    ADD CONSTRAINT "$7" FOREIGN KEY (id_sede) REFERENCES sede(id_sede) ON DELETE SET NULL;


--
-- TOC entry 7869 (class 2606 OID 3247607)
-- Name: $8; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY trabajador
    ADD CONSTRAINT "$8" FOREIGN KEY (id_cargo) REFERENCES cargo(id_cargo) ON DELETE SET NULL;


--
-- TOC entry 7670 (class 2606 OID 3247612)
-- Name: $9; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY historicoquincena
    ADD CONSTRAINT "$9" FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial) ON DELETE SET NULL;


--
-- TOC entry 7460 (class 2606 OID 3247617)
-- Name: asuencianomina_id_grupo_nomina_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY asuencianomina
    ADD CONSTRAINT asuencianomina_id_grupo_nomina_fkey FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina);


--
-- TOC entry 7461 (class 2606 OID 3247622)
-- Name: asuencianomina_id_nomina_especial_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY asuencianomina
    ADD CONSTRAINT asuencianomina_id_nomina_especial_fkey FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial);


--
-- TOC entry 7467 (class 2606 OID 3247627)
-- Name: ausencianomina_id_grupo_nomina_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ausencianomina
    ADD CONSTRAINT ausencianomina_id_grupo_nomina_fkey FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina);


--
-- TOC entry 7468 (class 2606 OID 3247632)
-- Name: ausencianomina_id_nomina_especial_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY ausencianomina
    ADD CONSTRAINT ausencianomina_id_nomina_especial_fkey FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial);


--
-- TOC entry 7507 (class 2606 OID 3247637)
-- Name: fk_concepto_ausencia; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY concepto
    ADD CONSTRAINT fk_concepto_ausencia FOREIGN KEY (id_concepto_ausencia) REFERENCES concepto(id_concepto) ON UPDATE SET NULL ON DELETE SET NULL;


--
-- TOC entry 7719 (class 2606 OID 3247642)
-- Name: fk_nominaespecial_id_frecuencia_pago; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY nominaespecial
    ADD CONSTRAINT fk_nominaespecial_id_frecuencia_pago FOREIGN KEY (id_frecuencia_pago) REFERENCES frecuenciapago(id_frecuencia_pago) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 7699 (class 2606 OID 3247647)
-- Name: mensajesprenomina_id_grupo_nomina_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mensajesprenomina
    ADD CONSTRAINT mensajesprenomina_id_grupo_nomina_fkey FOREIGN KEY (id_grupo_nomina) REFERENCES gruponomina(id_grupo_nomina);


--
-- TOC entry 7700 (class 2606 OID 3247652)
-- Name: mensajesprenomina_id_nomina_especial_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY mensajesprenomina
    ADD CONSTRAINT mensajesprenomina_id_nomina_especial_fkey FOREIGN KEY (id_nomina_especial) REFERENCES nominaespecial(id_nomina_especial);


--
-- TOC entry 7444 (class 2606 OID 3247657)
-- Name: xif1acreencia; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY acreencia
    ADD CONSTRAINT xif1acreencia FOREIGN KEY (id_tipo_acreencia) REFERENCES tipoacreencia(id_tipo_acreencia) ON DELETE SET NULL;


-- Completed on 2025-05-23 13:41:00

--
-- PostgreSQL database dump complete
--

